
HW1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008cf4  08008cf4  00009cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e04  08008e04  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008e04  08008e04  00009e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e0c  08008e0c  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e0c  08008e0c  00009e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e10  08008e10  00009e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008e14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020ac  20000010  08008e24  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020bc  08008e24  0000a0bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000243d8  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d7  00000000  00000000  0002e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002090  00000000  00000000  00032af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001982  00000000  00000000  00034b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046cc  00000000  00000000  00036502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000255f3  00000000  00000000  0003abce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105672  00000000  00000000  000601c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cb4  00000000  00000000  00165878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0016e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008cdc 	.word	0x08008cdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008cdc 	.word	0x08008cdc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_GPIO_EXTI_Callback>:


static uint32_t buttonPressTime = 0;  // Track button press start time
static uint8_t buttonState = 0;
static uint32_t lastDebounceTime = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004d0:	d13f      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x92>


        uint32_t currentTime = HAL_GetTick();  // Get the current time in ms
 80004d2:	f001 f84f 	bl	8001574 <HAL_GetTick>
 80004d6:	6178      	str	r0, [r7, #20]

        if (currentTime - lastDebounceTime > 50) {  // Debouncing (50ms)
 80004d8:	4b20      	ldr	r3, [pc, #128]	@ (800055c <HAL_GPIO_EXTI_Callback+0x9c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	697a      	ldr	r2, [r7, #20]
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	2b32      	cmp	r3, #50	@ 0x32
 80004e2:	d936      	bls.n	8000552 <HAL_GPIO_EXTI_Callback+0x92>
            lastDebounceTime = currentTime;
 80004e4:	4a1d      	ldr	r2, [pc, #116]	@ (800055c <HAL_GPIO_EXTI_Callback+0x9c>)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	6013      	str	r3, [r2, #0]

            if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80004ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ee:	481c      	ldr	r0, [pc, #112]	@ (8000560 <HAL_GPIO_EXTI_Callback+0xa0>)
 80004f0:	f001 fb2c 	bl	8001b4c <HAL_GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d106      	bne.n	8000508 <HAL_GPIO_EXTI_Callback+0x48>
                // Button is pressed (rising edge)
                buttonPressTime = currentTime;  // Record press start time
 80004fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000564 <HAL_GPIO_EXTI_Callback+0xa4>)
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	6013      	str	r3, [r2, #0]
                buttonState = 1;
 8000500:	4b19      	ldr	r3, [pc, #100]	@ (8000568 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
                    buttonState = 0;  // Reset button state
                }
            }
        }
    }
}
 8000506:	e024      	b.n	8000552 <HAL_GPIO_EXTI_Callback+0x92>
                if (buttonState == 1) {
 8000508:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <HAL_GPIO_EXTI_Callback+0xa8>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d120      	bne.n	8000552 <HAL_GPIO_EXTI_Callback+0x92>
                    uint32_t pressDuration = currentTime - buttonPressTime;
 8000510:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	1ad3      	subs	r3, r2, r3
 8000518:	613b      	str	r3, [r7, #16]
                    if (pressDuration >= 1000) {
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000520:	d30a      	bcc.n	8000538 <HAL_GPIO_EXTI_Callback+0x78>
                        ButtonPressType longPress = LONG_PRESS_EVENT;
 8000522:	2301      	movs	r3, #1
 8000524:	73fb      	strb	r3, [r7, #15]
                        osMessageQueuePut(buttonHandle, &longPress, 0, 0);
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <HAL_GPIO_EXTI_Callback+0xac>)
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	f107 010f 	add.w	r1, r7, #15
 800052e:	2300      	movs	r3, #0
 8000530:	2200      	movs	r2, #0
 8000532:	f005 f959 	bl	80057e8 <osMessageQueuePut>
 8000536:	e009      	b.n	800054c <HAL_GPIO_EXTI_Callback+0x8c>
                        ButtonPressType shortPress = SHORT_PRESS_EVENT;
 8000538:	2300      	movs	r3, #0
 800053a:	73bb      	strb	r3, [r7, #14]
                        osMessageQueuePut(buttonHandle, &shortPress, 0, 0);
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <HAL_GPIO_EXTI_Callback+0xac>)
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	f107 010e 	add.w	r1, r7, #14
 8000544:	2300      	movs	r3, #0
 8000546:	2200      	movs	r2, #0
 8000548:	f005 f94e 	bl	80057e8 <osMessageQueuePut>
                    buttonState = 0;  // Reset button state
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <HAL_GPIO_EXTI_Callback+0xa8>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
}
 8000552:	bf00      	nop
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200007ac 	.word	0x200007ac
 8000560:	48000800 	.word	0x48000800
 8000564:	200007a4 	.word	0x200007a4
 8000568:	200007a8 	.word	0x200007a8
 800056c:	20000798 	.word	0x20000798

08000570 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a05      	ldr	r2, [pc, #20]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d104      	bne.n	800058c <HAL_TIM_PeriodElapsedCallback+0x1c>
        // Release the timer semaphore from ISR
        osSemaphoreRelease(timerHandle);
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f005 f876 	bl	8005678 <osSemaphoreRelease>
    }
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40001000 	.word	0x40001000
 8000598:	200007a0 	.word	0x200007a0

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 ff7f 	bl	80014a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f85a 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fa24 	bl	80009f4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005ac:	f000 f8b8 	bl	8000720 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005b0:	f000 f8f6 	bl	80007a0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005b4:	f000 f91a 	bl	80007ec <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f98e 	bl	80008d8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005bc:	f000 f9bc 	bl	8000938 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c0:	f000 f9ea 	bl	8000998 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 80005c4:	f000 f950 	bl	8000868 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80005c8:	4817      	ldr	r0, [pc, #92]	@ (8000628 <main+0x8c>)
 80005ca:	f003 faa1 	bl	8003b10 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ce:	f004 fd73 	bl	80050b8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of blink */
  blinkHandle = osMutexNew(&blink_attributes);
 80005d2:	4816      	ldr	r0, [pc, #88]	@ (800062c <main+0x90>)
 80005d4:	f004 fe67 	bl	80052a6 <osMutexNew>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <main+0x94>)
 80005dc:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of timer */
  timerHandle = osSemaphoreNew(1, 1, &timer_attributes);
 80005de:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <main+0x98>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	2001      	movs	r0, #1
 80005e4:	f004 ff6d 	bl	80054c2 <osSemaphoreNew>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <main+0x9c>)
 80005ec:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of button */
  buttonHandle = osMessageQueueNew (16, sizeof(uint16_t), &button_attributes);
 80005ee:	4a13      	ldr	r2, [pc, #76]	@ (800063c <main+0xa0>)
 80005f0:	2102      	movs	r1, #2
 80005f2:	2010      	movs	r0, #16
 80005f4:	f005 f884 	bl	8005700 <osMessageQueueNew>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a11      	ldr	r2, [pc, #68]	@ (8000640 <main+0xa4>)
 80005fc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of timer_task */
  timer_taskHandle = osThreadNew(StartDefaultTask, NULL, &timer_task_attributes);
 80005fe:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <main+0xa8>)
 8000600:	2100      	movs	r1, #0
 8000602:	4811      	ldr	r0, [pc, #68]	@ (8000648 <main+0xac>)
 8000604:	f004 fda2 	bl	800514c <osThreadNew>
 8000608:	4603      	mov	r3, r0
 800060a:	4a10      	ldr	r2, [pc, #64]	@ (800064c <main+0xb0>)
 800060c:	6013      	str	r3, [r2, #0]

  /* creation of button_task */
  button_taskHandle = osThreadNew(StartTask02, NULL, &button_task_attributes);
 800060e:	4a10      	ldr	r2, [pc, #64]	@ (8000650 <main+0xb4>)
 8000610:	2100      	movs	r1, #0
 8000612:	4810      	ldr	r0, [pc, #64]	@ (8000654 <main+0xb8>)
 8000614:	f004 fd9a 	bl	800514c <osThreadNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a0f      	ldr	r2, [pc, #60]	@ (8000658 <main+0xbc>)
 800061c:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061e:	f004 fd6f 	bl	8005100 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0x86>
 8000626:	bf00      	nop
 8000628:	20000128 	.word	0x20000128
 800062c:	08008d9c 	.word	0x08008d9c
 8000630:	2000079c 	.word	0x2000079c
 8000634:	08008dac 	.word	0x08008dac
 8000638:	200007a0 	.word	0x200007a0
 800063c:	08008d84 	.word	0x08008d84
 8000640:	20000798 	.word	0x20000798
 8000644:	08008d3c 	.word	0x08008d3c
 8000648:	08000d7d 	.word	0x08000d7d
 800064c:	20000790 	.word	0x20000790
 8000650:	08008d60 	.word	0x08008d60
 8000654:	08000de9 	.word	0x08000de9
 8000658:	20000794 	.word	0x20000794

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b096      	sub	sp, #88	@ 0x58
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2244      	movs	r2, #68	@ 0x44
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f008 fafc 	bl	8008c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800067e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000682:	f001 fd5d 	bl	8002140 <HAL_PWREx_ControlVoltageScaling>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800068c:	f000 fbfc 	bl	8000e88 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000690:	f001 fd38 	bl	8002104 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000694:	4b21      	ldr	r3, [pc, #132]	@ (800071c <SystemClock_Config+0xc0>)
 8000696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800069a:	4a20      	ldr	r2, [pc, #128]	@ (800071c <SystemClock_Config+0xc0>)
 800069c:	f023 0318 	bic.w	r3, r3, #24
 80006a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a4:	2314      	movs	r3, #20
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b4:	2360      	movs	r3, #96	@ 0x60
 80006b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006bc:	2301      	movs	r3, #1
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006c4:	2328      	movs	r3, #40	@ 0x28
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fe53 	bl	8002384 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e4:	f000 fbd0 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2303      	movs	r3, #3
 80006ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	2104      	movs	r1, #4
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fa1b 	bl	8002b3c <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800070c:	f000 fbbc 	bl	8000e88 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000710:	f002 ff22 	bl	8003558 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000714:	bf00      	nop
 8000716:	3758      	adds	r7, #88	@ 0x58
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000

08000720 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f001 fa58 	bl	8001c10 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fb8f 	bl	8000e88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f001 faea 	bl	8001d46 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fb86 	bl	8000e88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f001 fb2c 	bl	8001ddc <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fb7d 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000002c 	.word	0x2000002c
 8000798:	40005800 	.word	0x40005800
 800079c:	10d19ce4 	.word	0x10d19ce4

080007a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_QUADSPI_Init+0x44>)
 80007a6:	4a10      	ldr	r2, [pc, #64]	@ (80007e8 <MX_QUADSPI_Init+0x48>)
 80007a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_QUADSPI_Init+0x44>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_QUADSPI_Init+0x44>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_QUADSPI_Init+0x44>)
 80007b8:	2210      	movs	r2, #16
 80007ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_QUADSPI_Init+0x44>)
 80007be:	2217      	movs	r2, #23
 80007c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_QUADSPI_Init+0x44>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_QUADSPI_Init+0x44>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_QUADSPI_Init+0x44>)
 80007d0:	f001 fd1c 	bl	800220c <HAL_QSPI_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007da:	f000 fb55 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000080 	.word	0x20000080
 80007e8:	a0001000 	.word	0xa0001000

080007ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <MX_SPI3_Init+0x74>)
 80007f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000864 <MX_SPI3_Init+0x78>)
 80007f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <MX_SPI3_Init+0x74>)
 80007f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fe:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000806:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800080a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080c:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_SPI3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000818:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_SPI3_Init+0x74>)
 800081a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800081e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_SPI3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_SPI3_Init+0x74>)
 800083a:	2207      	movs	r2, #7
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_SPI3_Init+0x74>)
 8000846:	2208      	movs	r2, #8
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_SPI3_Init+0x74>)
 800084c:	f003 f866 	bl	800391c <HAL_SPI_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000856:	f000 fb17 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000c4 	.word	0x200000c4
 8000864:	40003c00 	.word	0x40003c00

08000868 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000878:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <MX_TIM6_Init+0x68>)
 800087a:	4a16      	ldr	r2, [pc, #88]	@ (80008d4 <MX_TIM6_Init+0x6c>)
 800087c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39999;
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_TIM6_Init+0x68>)
 8000880:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000884:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_TIM6_Init+0x68>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 800088c:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_TIM6_Init+0x68>)
 800088e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000892:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_TIM6_Init+0x68>)
 8000896:	2280      	movs	r2, #128	@ 0x80
 8000898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800089a:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <MX_TIM6_Init+0x68>)
 800089c:	f003 f8e1 	bl	8003a62 <HAL_TIM_Base_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008a6:	f000 faef 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <MX_TIM6_Init+0x68>)
 80008b8:	f003 fb5e 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008c2:	f000 fae1 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000128 	.word	0x20000128
 80008d4:	40001000 	.word	0x40001000

080008d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008de:	4a15      	ldr	r2, [pc, #84]	@ (8000934 <MX_USART1_UART_Init+0x5c>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART1_UART_Init+0x58>)
 800091c:	f003 fbd2 	bl	80040c4 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 faaf 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000174 	.word	0x20000174
 8000934:	40013800 	.word	0x40013800

08000938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800093e:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <MX_USART3_UART_Init+0x5c>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USART3_UART_Init+0x58>)
 800097c:	f003 fba2 	bl	80040c4 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 fa7f 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001fc 	.word	0x200001fc
 8000994:	40004800 	.word	0x40004800

08000998 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2206      	movs	r2, #6
 80009a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2202      	movs	r2, #2
 80009b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	f001 fa4a 	bl	8001e74 <HAL_PCD_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 fa4f 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000284 	.word	0x20000284

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0a:	4bbd      	ldr	r3, [pc, #756]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4abc      	ldr	r2, [pc, #752]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a10:	f043 0310 	orr.w	r3, r3, #16
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4bba      	ldr	r3, [pc, #744]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0310 	and.w	r3, r3, #16
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4bb7      	ldr	r3, [pc, #732]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4ab6      	ldr	r2, [pc, #728]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4bb4      	ldr	r3, [pc, #720]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4bb1      	ldr	r3, [pc, #708]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4ab0      	ldr	r2, [pc, #704]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4bae      	ldr	r3, [pc, #696]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4bab      	ldr	r3, [pc, #684]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4aaa      	ldr	r2, [pc, #680]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4ba8      	ldr	r3, [pc, #672]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	4ba5      	ldr	r3, [pc, #660]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4aa4      	ldr	r2, [pc, #656]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4ba2      	ldr	r3, [pc, #648]	@ (8000d00 <MX_GPIO_Init+0x30c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a88:	489e      	ldr	r0, [pc, #632]	@ (8000d04 <MX_GPIO_Init+0x310>)
 8000a8a:	f001 f877 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f001 f870 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000aa2:	4899      	ldr	r0, [pc, #612]	@ (8000d08 <MX_GPIO_Init+0x314>)
 8000aa4:	f001 f86a 	bl	8001b7c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000aae:	4897      	ldr	r0, [pc, #604]	@ (8000d0c <MX_GPIO_Init+0x318>)
 8000ab0:	f001 f864 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aba:	4894      	ldr	r0, [pc, #592]	@ (8000d0c <MX_GPIO_Init+0x318>)
 8000abc:	f001 f85e 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000ac6:	4892      	ldr	r0, [pc, #584]	@ (8000d10 <MX_GPIO_Init+0x31c>)
 8000ac8:	f001 f858 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2120      	movs	r1, #32
 8000ad0:	488d      	ldr	r0, [pc, #564]	@ (8000d08 <MX_GPIO_Init+0x314>)
 8000ad2:	f001 f853 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2101      	movs	r1, #1
 8000ada:	488a      	ldr	r0, [pc, #552]	@ (8000d04 <MX_GPIO_Init+0x310>)
 8000adc:	f001 f84e 	bl	8001b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ae0:	f240 1315 	movw	r3, #277	@ 0x115
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4882      	ldr	r0, [pc, #520]	@ (8000d04 <MX_GPIO_Init+0x310>)
 8000afa:	f000 fe7d 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000afe:	236a      	movs	r3, #106	@ 0x6a
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	487c      	ldr	r0, [pc, #496]	@ (8000d04 <MX_GPIO_Init+0x310>)
 8000b14:	f000 fe70 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b1e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4878      	ldr	r0, [pc, #480]	@ (8000d10 <MX_GPIO_Init+0x31c>)
 8000b30:	f000 fe62 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b34:	233f      	movs	r3, #63	@ 0x3f
 8000b36:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b38:	230b      	movs	r3, #11
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4872      	ldr	r0, [pc, #456]	@ (8000d10 <MX_GPIO_Init+0x31c>)
 8000b48:	f000 fe56 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6a:	f000 fe45 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b6e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f000 fe35 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bac:	f000 fe24 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bb4:	230b      	movs	r3, #11
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc6:	f000 fe17 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bca:	23e0      	movs	r3, #224	@ 0xe0
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be8:	f000 fe06 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bec:	2301      	movs	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4841      	ldr	r0, [pc, #260]	@ (8000d08 <MX_GPIO_Init+0x314>)
 8000c02:	f000 fdf9 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c06:	2302      	movs	r3, #2
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c0a:	230b      	movs	r3, #11
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	483b      	ldr	r0, [pc, #236]	@ (8000d08 <MX_GPIO_Init+0x314>)
 8000c1a:	f000 fded 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin PB14
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|GPIO_PIN_14
 8000c1e:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000c22:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4834      	ldr	r0, [pc, #208]	@ (8000d08 <MX_GPIO_Init+0x314>)
 8000c38:	f000 fdde 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8000c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	482a      	ldr	r0, [pc, #168]	@ (8000d04 <MX_GPIO_Init+0x310>)
 8000c5a:	f000 fdcd 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
 8000c5e:	f648 4304 	movw	r3, #35844	@ 0x8c04
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4825      	ldr	r0, [pc, #148]	@ (8000d0c <MX_GPIO_Init+0x318>)
 8000c76:	f000 fdbf 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c7a:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	481e      	ldr	r0, [pc, #120]	@ (8000d0c <MX_GPIO_Init+0x318>)
 8000c94:	f000 fdb0 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c98:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4817      	ldr	r0, [pc, #92]	@ (8000d10 <MX_GPIO_Init+0x31c>)
 8000cb2:	f000 fda1 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000cb6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4810      	ldr	r0, [pc, #64]	@ (8000d10 <MX_GPIO_Init+0x31c>)
 8000cce:	f000 fd93 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4807      	ldr	r0, [pc, #28]	@ (8000d0c <MX_GPIO_Init+0x318>)
 8000cee:	f000 fd83 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cf2:	2378      	movs	r3, #120	@ 0x78
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <MX_GPIO_Init+0x320>
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48001000 	.word	0x48001000
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	48000c00 	.word	0x48000c00
 8000d10:	48000800 	.word	0x48000800
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4813      	ldr	r0, [pc, #76]	@ (8000d74 <MX_GPIO_Init+0x380>)
 8000d26:	f000 fd67 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d30:	2312      	movs	r3, #18
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <MX_GPIO_Init+0x384>)
 8000d48:	f000 fd56 	bl	80017f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	2017      	movs	r0, #23
 8000d52:	f000 fd1a 	bl	800178a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d56:	2017      	movs	r0, #23
 8000d58:	f000 fd33 	bl	80017c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2028      	movs	r0, #40	@ 0x28
 8000d62:	f000 fd12 	bl	800178a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d66:	2028      	movs	r0, #40	@ 0x28
 8000d68:	f000 fd2b 	bl	80017c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	@ 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	48000400 	.word	0x48000400

08000d7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	 while(1)
	  {
		  if (osSemaphoreAcquire(timerHandle, osWaitForever) == osOK) {
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <StartDefaultTask+0x60>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 fc21 	bl	80055d4 <osSemaphoreAcquire>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f5      	bne.n	8000d84 <StartDefaultTask+0x8>
		  	              // Acquire the mutex before starting the blink operation
		  	              if (osMutexAcquire(blinkHandle, osWaitForever) == osOK) {
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <StartDefaultTask+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 fb06 	bl	80053b2 <osMutexAcquire>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1eb      	bne.n	8000d84 <StartDefaultTask+0x8>
		  	                  // Blink LED2 at 10 Hz for 2 seconds
		  	                  for (int i = 0; i < 40; i++) {
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e00a      	b.n	8000dc8 <StartDefaultTask+0x4c>
		  	                      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000db2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db6:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <StartDefaultTask+0x68>)
 8000db8:	f000 fef8 	bl	8001bac <HAL_GPIO_TogglePin>
		  	                      osDelay(50); // 50ms delay for 10 Hz blinking
 8000dbc:	2032      	movs	r0, #50	@ 0x32
 8000dbe:	f004 fa57 	bl	8005270 <osDelay>
		  	                  for (int i = 0; i < 40; i++) {
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b27      	cmp	r3, #39	@ 0x27
 8000dcc:	ddf1      	ble.n	8000db2 <StartDefaultTask+0x36>
		  	                  }
		  	                  // Release the mutex after blinking is done
		  	                  osMutexRelease(blinkHandle);
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <StartDefaultTask+0x64>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f004 fb38 	bl	8005448 <osMutexRelease>
		  if (osSemaphoreAcquire(timerHandle, osWaitForever) == osOK) {
 8000dd8:	e7d4      	b.n	8000d84 <StartDefaultTask+0x8>
 8000dda:	bf00      	nop
 8000ddc:	200007a0 	.word	0x200007a0
 8000de0:	2000079c 	.word	0x2000079c
 8000de4:	48000400 	.word	0x48000400

08000de8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
ButtonPressType buttonPress;
		  while(1)
		  {
			  if (osMessageQueueGet(buttonHandle, &buttonPress, NULL, osWaitForever) == osOK) {
 8000df0:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <StartTask02+0x94>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	f107 010f 	add.w	r1, r7, #15
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f004 fd53 	bl	80058a8 <osMessageQueueGet>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f3      	bne.n	8000df0 <StartTask02+0x8>
			  // Acquire the mutex to protect blinking operation
			              if (osMutexAcquire(blinkHandle, osWaitForever) == osOK) {
 8000e08:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <StartTask02+0x98>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 face 	bl	80053b2 <osMutexAcquire>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1e9      	bne.n	8000df0 <StartTask02+0x8>
			                  if (buttonPress == SHORT_PRESS_EVENT) {
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d112      	bne.n	8000e48 <StartTask02+0x60>
			                      // Blink LED2 at 1 Hz for 5 seconds (normal press)
			                      for (int i = 0; i < 10; i++) {
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e00b      	b.n	8000e40 <StartTask02+0x58>
			                          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000e28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e2c:	4815      	ldr	r0, [pc, #84]	@ (8000e84 <StartTask02+0x9c>)
 8000e2e:	f000 febd 	bl	8001bac <HAL_GPIO_TogglePin>
			                          osDelay(500);  // 500ms delay for 1 Hz
 8000e32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e36:	f004 fa1b 	bl	8005270 <osDelay>
			                      for (int i = 0; i < 10; i++) {
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	2b09      	cmp	r3, #9
 8000e44:	ddf0      	ble.n	8000e28 <StartTask02+0x40>
 8000e46:	e013      	b.n	8000e70 <StartTask02+0x88>
			                      }
			                  }
			                  else if (buttonPress == LONG_PRESS_EVENT) {
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d110      	bne.n	8000e70 <StartTask02+0x88>
			                      // Blink LED2 at 10 Hz for 5 seconds (long press)
			                      for (int i = 0; i < 100; i++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	e00a      	b.n	8000e6a <StartTask02+0x82>
			                          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000e54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e58:	480a      	ldr	r0, [pc, #40]	@ (8000e84 <StartTask02+0x9c>)
 8000e5a:	f000 fea7 	bl	8001bac <HAL_GPIO_TogglePin>
			                          osDelay(50);  // 50ms delay for 10 Hz
 8000e5e:	2032      	movs	r0, #50	@ 0x32
 8000e60:	f004 fa06 	bl	8005270 <osDelay>
			                      for (int i = 0; i < 100; i++) {
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	3301      	adds	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	2b63      	cmp	r3, #99	@ 0x63
 8000e6e:	ddf1      	ble.n	8000e54 <StartTask02+0x6c>
			                      }
			                  }
			                  // Release the mutex after blinking is done
				              osMutexRelease(blinkHandle);
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <StartTask02+0x98>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f004 fae7 	bl	8005448 <osMutexRelease>
			  if (osMessageQueueGet(buttonHandle, &buttonPress, NULL, osWaitForever) == osOK) {
 8000e7a:	e7b9      	b.n	8000df0 <StartTask02+0x8>
 8000e7c:	20000798 	.word	0x20000798
 8000e80:	2000079c 	.word	0x2000079c
 8000e84:	48000400 	.word	0x48000400

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <Error_Handler+0x8>

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ebc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ebe:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	210f      	movs	r1, #15
 8000ece:	f06f 0001 	mvn.w	r0, #1
 8000ed2:	f000 fc5a 	bl	800178a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0ac      	sub	sp, #176	@ 0xb0
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2288      	movs	r2, #136	@ 0x88
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f007 feaf 	bl	8008c68 <memset>
  if(hi2c->Instance==I2C2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a21      	ldr	r2, [pc, #132]	@ (8000f94 <HAL_I2C_MspInit+0xb0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d13b      	bne.n	8000f8c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f14:	2380      	movs	r3, #128	@ 0x80
 8000f16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 f82f 	bl	8002f84 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f2c:	f7ff ffac 	bl	8000e88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <HAL_I2C_MspInit+0xb4>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_I2C_MspInit+0xb4>)
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <HAL_I2C_MspInit+0xb4>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f48:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f62:	2304      	movs	r3, #4
 8000f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480b      	ldr	r0, [pc, #44]	@ (8000f9c <HAL_I2C_MspInit+0xb8>)
 8000f70:	f000 fc42 	bl	80017f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_I2C_MspInit+0xb4>)
 8000f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f78:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <HAL_I2C_MspInit+0xb4>)
 8000f7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_I2C_MspInit+0xb4>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000f8c:	bf00      	nop
 8000f8e:	37b0      	adds	r7, #176	@ 0xb0
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40005800 	.word	0x40005800
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	48000400 	.word	0x48000400

08000fa0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a17      	ldr	r2, [pc, #92]	@ (800101c <HAL_QSPI_MspInit+0x7c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d128      	bne.n	8001014 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <HAL_QSPI_MspInit+0x80>)
 8000fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fc6:	4a16      	ldr	r2, [pc, #88]	@ (8001020 <HAL_QSPI_MspInit+0x80>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fcc:	6513      	str	r3, [r2, #80]	@ 0x50
 8000fce:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <HAL_QSPI_MspInit+0x80>)
 8000fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <HAL_QSPI_MspInit+0x80>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	4a10      	ldr	r2, [pc, #64]	@ (8001020 <HAL_QSPI_MspInit+0x80>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <HAL_QSPI_MspInit+0x80>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000ff2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000ff6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001004:	230a      	movs	r3, #10
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <HAL_QSPI_MspInit+0x84>)
 8001010:	f000 fbf2 	bl	80017f8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	@ 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	a0001000 	.word	0xa0001000
 8001020:	40021000 	.word	0x40021000
 8001024:	48001000 	.word	0x48001000

08001028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <HAL_SPI_MspInit+0x7c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d128      	bne.n	800109c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_SPI_MspInit+0x80>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	4a16      	ldr	r2, [pc, #88]	@ (80010a8 <HAL_SPI_MspInit+0x80>)
 8001050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001054:	6593      	str	r3, [r2, #88]	@ 0x58
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <HAL_SPI_MspInit+0x80>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_SPI_MspInit+0x80>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <HAL_SPI_MspInit+0x80>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_SPI_MspInit+0x80>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800107a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800107e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800108c:	2306      	movs	r3, #6
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <HAL_SPI_MspInit+0x84>)
 8001098:	f000 fbae 	bl	80017f8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	@ 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40003c00 	.word	0x40003c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48000800 	.word	0x48000800

080010b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <HAL_TIM_Base_MspInit+0x44>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d113      	bne.n	80010ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_TIM_Base_MspInit+0x48>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c6:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <HAL_TIM_Base_MspInit+0x48>)
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_TIM_Base_MspInit+0x48>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2105      	movs	r1, #5
 80010de:	2036      	movs	r0, #54	@ 0x36
 80010e0:	f000 fb53 	bl	800178a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010e4:	2036      	movs	r0, #54	@ 0x36
 80010e6:	f000 fb6c 	bl	80017c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40001000 	.word	0x40001000
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0ae      	sub	sp, #184	@ 0xb8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	2288      	movs	r2, #136	@ 0x88
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f007 fda3 	bl	8008c68 <memset>
  if(huart->Instance==USART1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a42      	ldr	r2, [pc, #264]	@ (8001230 <HAL_UART_MspInit+0x134>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d13b      	bne.n	80011a4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800112c:	2301      	movs	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001130:	2300      	movs	r3, #0
 8001132:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4618      	mov	r0, r3
 800113a:	f001 ff23 	bl	8002f84 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001144:	f7ff fea0 	bl	8000e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001148:	4b3a      	ldr	r3, [pc, #232]	@ (8001234 <HAL_UART_MspInit+0x138>)
 800114a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114c:	4a39      	ldr	r2, [pc, #228]	@ (8001234 <HAL_UART_MspInit+0x138>)
 800114e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001152:	6613      	str	r3, [r2, #96]	@ 0x60
 8001154:	4b37      	ldr	r3, [pc, #220]	@ (8001234 <HAL_UART_MspInit+0x138>)
 8001156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001158:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	4b34      	ldr	r3, [pc, #208]	@ (8001234 <HAL_UART_MspInit+0x138>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	4a33      	ldr	r2, [pc, #204]	@ (8001234 <HAL_UART_MspInit+0x138>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116c:	4b31      	ldr	r3, [pc, #196]	@ (8001234 <HAL_UART_MspInit+0x138>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001178:	23c0      	movs	r3, #192	@ 0xc0
 800117a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001190:	2307      	movs	r3, #7
 8001192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800119a:	4619      	mov	r1, r3
 800119c:	4826      	ldr	r0, [pc, #152]	@ (8001238 <HAL_UART_MspInit+0x13c>)
 800119e:	f000 fb2b 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011a2:	e040      	b.n	8001226 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a24      	ldr	r2, [pc, #144]	@ (800123c <HAL_UART_MspInit+0x140>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d13b      	bne.n	8001226 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ae:	2304      	movs	r3, #4
 80011b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fee2 	bl	8002f84 <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_UART_MspInit+0xce>
      Error_Handler();
 80011c6:	f7ff fe5f 	bl	8000e88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <HAL_UART_MspInit+0x138>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ce:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <HAL_UART_MspInit+0x138>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_UART_MspInit+0x138>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <HAL_UART_MspInit+0x138>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a13      	ldr	r2, [pc, #76]	@ (8001234 <HAL_UART_MspInit+0x138>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_UART_MspInit+0x138>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80011fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001214:	2307      	movs	r3, #7
 8001216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800121e:	4619      	mov	r1, r3
 8001220:	4807      	ldr	r0, [pc, #28]	@ (8001240 <HAL_UART_MspInit+0x144>)
 8001222:	f000 fae9 	bl	80017f8 <HAL_GPIO_Init>
}
 8001226:	bf00      	nop
 8001228:	37b8      	adds	r7, #184	@ 0xb8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40013800 	.word	0x40013800
 8001234:	40021000 	.word	0x40021000
 8001238:	48000400 	.word	0x48000400
 800123c:	40004800 	.word	0x40004800
 8001240:	48000c00 	.word	0x48000c00

08001244 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ac      	sub	sp, #176	@ 0xb0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2288      	movs	r2, #136	@ 0x88
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f007 fcff 	bl	8008c68 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001272:	d17c      	bne.n	800136e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001278:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800127a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800127e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001282:	2301      	movs	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001286:	2301      	movs	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800128a:	2318      	movs	r3, #24
 800128c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800128e:	2307      	movs	r3, #7
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001292:	2302      	movs	r3, #2
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001296:	2302      	movs	r3, #2
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800129a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fe6d 	bl	8002f84 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80012b0:	f7ff fdea 	bl	8000e88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ea:	f000 fa85 	bl	80017f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012ee:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001308:	230a      	movs	r3, #10
 800130a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001318:	f000 fa6e 	bl	80017f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001320:	4a15      	ldr	r2, [pc, #84]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 8001322:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001334:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d114      	bne.n	800136a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001344:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134a:	6593      	str	r3, [r2, #88]	@ 0x58
 800134c:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001358:	f000 ff48 	bl	80021ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001360:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <HAL_PCD_MspInit+0x134>)
 8001362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001366:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001368:	e001      	b.n	800136e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800136a:	f000 ff3f 	bl	80021ec <HAL_PWREx_EnableVddUSB>
}
 800136e:	bf00      	nop
 8001370:	37b0      	adds	r7, #176	@ 0xb0
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <NMI_Handler+0x4>

08001384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <MemManage_Handler+0x4>

08001394 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b6:	f000 f8c9 	bl	800154c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013ba:	f006 fad9 	bl	8007970 <xTaskGetSchedulerState>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d001      	beq.n	80013c8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013c4:	f007 f9d0 	bl	8008768 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80013d0:	2020      	movs	r0, #32
 80013d2:	f000 fc05 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80013d6:	2040      	movs	r0, #64	@ 0x40
 80013d8:	f000 fc02 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80013dc:	2080      	movs	r0, #128	@ 0x80
 80013de:	f000 fbff 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013e2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013e6:	f000 fbfb 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}

080013ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80013f2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80013f6:	f000 fbf3 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80013fa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80013fe:	f000 fbef 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001402:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001406:	f000 fbeb 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800140a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800140e:	f000 fbe7 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <TIM6_DAC_IRQHandler+0x10>)
 800141e:	f002 fbe7 	bl	8003bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000128 	.word	0x20000128

0800142c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <SystemInit+0x20>)
 8001432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <SystemInit+0x20>)
 8001438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800143c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001488 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff ffea 	bl	800142c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <LoopForever+0x6>)
  ldr r1, =_edata
 800145a:	490d      	ldr	r1, [pc, #52]	@ (8001490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800145c:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <LoopForever+0xe>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001470:	4c0a      	ldr	r4, [pc, #40]	@ (800149c <LoopForever+0x16>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f007 fbfb 	bl	8008c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001482:	f7ff f88b 	bl	800059c <main>

08001486 <LoopForever>:

LoopForever:
    b LoopForever
 8001486:	e7fe      	b.n	8001486 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001488:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001494:	08008e14 	.word	0x08008e14
  ldr r2, =_sbss
 8001498:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800149c:	200020bc 	.word	0x200020bc

080014a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_2_IRQHandler>

080014a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f961 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b2:	200f      	movs	r0, #15
 80014b4:	f000 f80e 	bl	80014d4 <HAL_InitTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	e001      	b.n	80014c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c4:	f7ff fce6 	bl	8000e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c8:	79fb      	ldrb	r3, [r7, #7]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014e0:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_InitTick+0x6c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d023      	beq.n	8001530 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <HAL_InitTick+0x70>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <HAL_InitTick+0x6c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f96d 	bl	80017de <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d809      	bhi.n	8001524 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 f937 	bl	800178a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151c:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <HAL_InitTick+0x74>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e007      	b.n	8001534 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e004      	b.n	8001534 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e001      	b.n	8001534 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008
 8001570:	200007b0 	.word	0x200007b0

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200007b0 	.word	0x200007b0

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4907      	ldr	r1, [pc, #28]	@ (8001670 <__NVIC_EnableIRQ+0x38>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000e100 	.word	0xe000e100

08001674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	2b00      	cmp	r3, #0
 8001686:	db0a      	blt.n	800169e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	490c      	ldr	r1, [pc, #48]	@ (80016c0 <__NVIC_SetPriority+0x4c>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	0112      	lsls	r2, r2, #4
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	440b      	add	r3, r1
 8001698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800169c:	e00a      	b.n	80016b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4908      	ldr	r1, [pc, #32]	@ (80016c4 <__NVIC_SetPriority+0x50>)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	3b04      	subs	r3, #4
 80016ac:	0112      	lsls	r2, r2, #4
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	761a      	strb	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b089      	sub	sp, #36	@ 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f1c3 0307 	rsb	r3, r3, #7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	bf28      	it	cs
 80016e6:	2304      	movcs	r3, #4
 80016e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3304      	adds	r3, #4
 80016ee:	2b06      	cmp	r3, #6
 80016f0:	d902      	bls.n	80016f8 <NVIC_EncodePriority+0x30>
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b03      	subs	r3, #3
 80016f6:	e000      	b.n	80016fa <NVIC_EncodePriority+0x32>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	401a      	ands	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001710:	f04f 31ff 	mov.w	r1, #4294967295
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	fa01 f303 	lsl.w	r3, r1, r3
 800171a:	43d9      	mvns	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	4313      	orrs	r3, r2
         );
}
 8001722:	4618      	mov	r0, r3
 8001724:	3724      	adds	r7, #36	@ 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff8e 	bl	8001674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff29 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff3e 	bl	800161c <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff8e 	bl	80016c8 <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5d 	bl	8001674 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff31 	bl	8001638 <__NVIC_EnableIRQ>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffa2 	bl	8001730 <SysTick_Config>
 80017ec:	4603      	mov	r3, r0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e17f      	b.n	8001b08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8171 	beq.w	8001b02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x40>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 0201 	and.w	r2, r3, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d118      	bne.n	80018d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	6939      	ldr	r1, [r7, #16]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80ac 	beq.w	8001b02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001b28 <HAL_GPIO_Init+0x330>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001b28 <HAL_GPIO_Init+0x330>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b28 <HAL_GPIO_Init+0x330>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b2c <HAL_GPIO_Init+0x334>)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019ec:	d025      	beq.n	8001a3a <HAL_GPIO_Init+0x242>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001b30 <HAL_GPIO_Init+0x338>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01f      	beq.n	8001a36 <HAL_GPIO_Init+0x23e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001b34 <HAL_GPIO_Init+0x33c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0x23a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4d      	ldr	r2, [pc, #308]	@ (8001b38 <HAL_GPIO_Init+0x340>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x236>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4c      	ldr	r2, [pc, #304]	@ (8001b3c <HAL_GPIO_Init+0x344>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x232>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4b      	ldr	r2, [pc, #300]	@ (8001b40 <HAL_GPIO_Init+0x348>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x22e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4a      	ldr	r2, [pc, #296]	@ (8001b44 <HAL_GPIO_Init+0x34c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x22a>
 8001a1e:	2306      	movs	r3, #6
 8001a20:	e00c      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e00a      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a26:	2305      	movs	r3, #5
 8001a28:	e008      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e004      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e002      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_Init+0x244>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	f002 0203 	and.w	r2, r2, #3
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	4093      	lsls	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4c:	4937      	ldr	r1, [pc, #220]	@ (8001b2c <HAL_GPIO_Init+0x334>)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	3302      	adds	r3, #2
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a7e:	4a32      	ldr	r2, [pc, #200]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a84:	4b30      	ldr	r3, [pc, #192]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aa8:	4a27      	ldr	r2, [pc, #156]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aae:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afc:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <HAL_GPIO_Init+0x350>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f47f ae78 	bne.w	8001808 <HAL_GPIO_Init+0x10>
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	48001400 	.word	0x48001400
 8001b44:	48001800 	.word	0x48001800
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43d9      	mvns	r1, r3
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	400b      	ands	r3, r1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc5e 	bl	80004c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e08d      	b.n	8001d3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff f954 	bl	8000ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	@ 0x24
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	e006      	b.n	8001c98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d108      	bne.n	8001cb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	e007      	b.n	8001cc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ce4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69d9      	ldr	r1, [r3, #28]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d138      	bne.n	8001dce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e032      	b.n	8001dd0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2224      	movs	r2, #36	@ 0x24
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d98:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6819      	ldr	r1, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
  }
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d139      	bne.n	8001e66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e033      	b.n	8001e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	@ 0x24
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e66:	2302      	movs	r3, #2
  }
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e76:	b08f      	sub	sp, #60	@ 0x3c
 8001e78:	af0a      	add	r7, sp, #40	@ 0x28
 8001e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e116      	b.n	80020b4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d106      	bne.n	8001ea6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff f9cf 	bl	8001244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 fe44 	bl	8004b52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	687e      	ldr	r6, [r7, #4]
 8001ed2:	466d      	mov	r5, sp
 8001ed4:	f106 0410 	add.w	r4, r6, #16
 8001ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee8:	1d33      	adds	r3, r6, #4
 8001eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eec:	6838      	ldr	r0, [r7, #0]
 8001eee:	f002 fe04 	bl	8004afa <USB_CoreInit>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0d7      	b.n	80020b4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fe32 	bl	8004b74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e04a      	b.n	8001fac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	333d      	adds	r3, #61	@ 0x3d
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	333c      	adds	r3, #60	@ 0x3c
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	b298      	uxth	r0, r3
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	3356      	adds	r3, #86	@ 0x56
 8001f52:	4602      	mov	r2, r0
 8001f54:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3340      	adds	r3, #64	@ 0x40
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	3344      	adds	r3, #68	@ 0x44
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3348      	adds	r3, #72	@ 0x48
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	334c      	adds	r3, #76	@ 0x4c
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d3af      	bcc.n	8001f16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e044      	b.n	8002046 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	3301      	adds	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3b5      	bcc.n	8001fbc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	687e      	ldr	r6, [r7, #4]
 8002058:	466d      	mov	r5, sp
 800205a:	f106 0410 	add.w	r4, r6, #16
 800205e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002066:	e894 0003 	ldmia.w	r4, {r0, r1}
 800206a:	e885 0003 	stmia.w	r5, {r0, r1}
 800206e:	1d33      	adds	r3, r6, #4
 8002070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f002 fdca 	bl	8004c0c <USB_DevInit>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2202      	movs	r2, #2
 8002082:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e014      	b.n	80020b4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f80a 	bl	80020bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 ff6c 	bl	8004f8a <USB_DevDisconnect>

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	f043 0303 	orr.w	r3, r3, #3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40007000 	.word	0x40007000

08002124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <HAL_PWREx_GetVoltageRange+0x18>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800214e:	d130      	bne.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002150:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800215c:	d038      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002166:	4a1e      	ldr	r2, [pc, #120]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002168:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800216e:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2232      	movs	r2, #50	@ 0x32
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	4a1b      	ldr	r2, [pc, #108]	@ (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9b      	lsrs	r3, r3, #18
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002184:	e002      	b.n	800218c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3b01      	subs	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002198:	d102      	bne.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f2      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ac:	d110      	bne.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e00f      	b.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021b2:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021be:	d007      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021c0:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021c8:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000
 80021e4:	20000000 	.word	0x20000000
 80021e8:	431bde83 	.word	0x431bde83

080021ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021fa:	6053      	str	r3, [r2, #4]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000

0800220c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff f9ae 	bl	8001574 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e063      	b.n	80022ec <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe feb1 	bl	8000fa0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800223e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f858 	bl	80022f8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	3b01      	subs	r3, #1
 8002258:	021a      	lsls	r2, r3, #8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	2120      	movs	r1, #32
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f850 	bl	8002314 <QSPI_WaitFlagStateUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002278:	7afb      	ldrb	r3, [r7, #11]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d131      	bne.n	80022e2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002288:	f023 0310 	bic.w	r3, r3, #16
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6852      	ldr	r2, [r2, #4]
 8002290:	0611      	lsls	r1, r2, #24
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	430b      	orrs	r3, r1
 800229e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <HAL_QSPI_Init+0xe8>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6912      	ldr	r2, [r2, #16]
 80022ae:	0411      	lsls	r1, r2, #16
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6952      	ldr	r2, [r2, #20]
 80022b4:	4311      	orrs	r1, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6992      	ldr	r2, [r2, #24]
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80022ea:	7afb      	ldrb	r3, [r7, #11]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	ffe0f8fe 	.word	0xffe0f8fe

080022f8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002324:	e01a      	b.n	800235c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d016      	beq.n	800235c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232e:	f7ff f921 	bl	8001574 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	429a      	cmp	r2, r3
 800233c:	d302      	bcc.n	8002344 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10b      	bne.n	800235c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2204      	movs	r2, #4
 8002348:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e00e      	b.n	800237a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	429a      	cmp	r2, r3
 8002376:	d1d6      	bne.n	8002326 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e3ca      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002396:	4b97      	ldr	r3, [pc, #604]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a0:	4b94      	ldr	r3, [pc, #592]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80e4 	beq.w	8002580 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_RCC_OscConfig+0x4a>
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	f040 808b 	bne.w	80024dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 8087 	bne.w	80024dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ce:	4b89      	ldr	r3, [pc, #548]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x62>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e3a2      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	4b82      	ldr	r3, [pc, #520]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_RCC_OscConfig+0x7c>
 80023f6:	4b7f      	ldr	r3, [pc, #508]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023fe:	e005      	b.n	800240c <HAL_RCC_OscConfig+0x88>
 8002400:	4b7c      	ldr	r3, [pc, #496]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800240c:	4293      	cmp	r3, r2
 800240e:	d223      	bcs.n	8002458 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fd55 	bl	8002ec4 <RCC_SetFlashLatencyFromMSIRange>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e383      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002424:	4b73      	ldr	r3, [pc, #460]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a72      	ldr	r2, [pc, #456]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b70      	ldr	r3, [pc, #448]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	496d      	ldr	r1, [pc, #436]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002442:	4b6c      	ldr	r3, [pc, #432]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	4968      	ldr	r1, [pc, #416]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
 8002456:	e025      	b.n	80024a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002458:	4b66      	ldr	r3, [pc, #408]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a65      	ldr	r2, [pc, #404]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b63      	ldr	r3, [pc, #396]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4960      	ldr	r1, [pc, #384]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002476:	4b5f      	ldr	r3, [pc, #380]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	495b      	ldr	r1, [pc, #364]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fd15 	bl	8002ec4 <RCC_SetFlashLatencyFromMSIRange>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e343      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024a4:	f000 fc4a 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b52      	ldr	r3, [pc, #328]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	091b      	lsrs	r3, r3, #4
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	4950      	ldr	r1, [pc, #320]	@ (80025f8 <HAL_RCC_OscConfig+0x274>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a4e      	ldr	r2, [pc, #312]	@ (80025fc <HAL_RCC_OscConfig+0x278>)
 80024c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002600 <HAL_RCC_OscConfig+0x27c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff f803 	bl	80014d4 <HAL_InitTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d052      	beq.n	800257e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	e327      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d032      	beq.n	800254a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024e4:	4b43      	ldr	r3, [pc, #268]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a42      	ldr	r2, [pc, #264]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024f0:	f7ff f840 	bl	8001574 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f8:	f7ff f83c 	bl	8001574 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e310      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800250a:	4b3a      	ldr	r3, [pc, #232]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002516:	4b37      	ldr	r3, [pc, #220]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a36      	ldr	r2, [pc, #216]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b34      	ldr	r3, [pc, #208]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4931      	ldr	r1, [pc, #196]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002534:	4b2f      	ldr	r3, [pc, #188]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	492c      	ldr	r1, [pc, #176]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
 8002548:	e01a      	b.n	8002580 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800254a:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a29      	ldr	r2, [pc, #164]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002556:	f7ff f80d 	bl	8001574 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800255e:	f7ff f809 	bl	8001574 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e2dd      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002570:	4b20      	ldr	r3, [pc, #128]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x1da>
 800257c:	e000      	b.n	8002580 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800257e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d074      	beq.n	8002676 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b08      	cmp	r3, #8
 8002590:	d005      	beq.n	800259e <HAL_RCC_OscConfig+0x21a>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	d10e      	bne.n	80025b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d10b      	bne.n	80025b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259e:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d064      	beq.n	8002674 <HAL_RCC_OscConfig+0x2f0>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d160      	bne.n	8002674 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e2ba      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x24a>
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0b      	ldr	r2, [pc, #44]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e026      	b.n	800261c <HAL_RCC_OscConfig+0x298>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d6:	d115      	bne.n	8002604 <HAL_RCC_OscConfig+0x280>
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a05      	ldr	r2, [pc, #20]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80025de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a02      	ldr	r2, [pc, #8]	@ (80025f4 <HAL_RCC_OscConfig+0x270>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e014      	b.n	800261c <HAL_RCC_OscConfig+0x298>
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08008dbc 	.word	0x08008dbc
 80025fc:	20000000 	.word	0x20000000
 8002600:	20000004 	.word	0x20000004
 8002604:	4ba0      	ldr	r3, [pc, #640]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a9f      	ldr	r2, [pc, #636]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b9d      	ldr	r3, [pc, #628]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a9c      	ldr	r2, [pc, #624]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800261a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe ffa6 	bl	8001574 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800262c:	f7fe ffa2 	bl	8001574 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	@ 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e276      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800263e:	4b92      	ldr	r3, [pc, #584]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x2a8>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe ff92 	bl	8001574 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002654:	f7fe ff8e 	bl	8001574 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	@ 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e262      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002666:	4b88      	ldr	r3, [pc, #544]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x2d0>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d060      	beq.n	8002744 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b04      	cmp	r3, #4
 8002686:	d005      	beq.n	8002694 <HAL_RCC_OscConfig+0x310>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d119      	bne.n	80026c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d116      	bne.n	80026c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002694:	4b7c      	ldr	r3, [pc, #496]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_OscConfig+0x328>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e23f      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ac:	4b76      	ldr	r3, [pc, #472]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	061b      	lsls	r3, r3, #24
 80026ba:	4973      	ldr	r1, [pc, #460]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c0:	e040      	b.n	8002744 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d023      	beq.n	8002712 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7fe ff4d 	bl	8001574 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026de:	f7fe ff49 	bl	8001574 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e21d      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f0:	4b65      	ldr	r3, [pc, #404]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b62      	ldr	r3, [pc, #392]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	495f      	ldr	r1, [pc, #380]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
 8002710:	e018      	b.n	8002744 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002712:	4b5d      	ldr	r3, [pc, #372]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a5c      	ldr	r2, [pc, #368]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800271c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe ff29 	bl	8001574 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002726:	f7fe ff25 	bl	8001574 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1f9      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002738:	4b53      	ldr	r3, [pc, #332]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d03c      	beq.n	80027ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01c      	beq.n	8002792 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002758:	4b4b      	ldr	r3, [pc, #300]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 800275a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800275e:	4a4a      	ldr	r2, [pc, #296]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe ff04 	bl	8001574 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe ff00 	bl	8001574 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1d4      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002782:	4b41      	ldr	r3, [pc, #260]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ef      	beq.n	8002770 <HAL_RCC_OscConfig+0x3ec>
 8002790:	e01b      	b.n	80027ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002792:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002798:	4a3b      	ldr	r2, [pc, #236]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a2:	f7fe fee7 	bl	8001574 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027aa:	f7fe fee3 	bl	8001574 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1b7      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027bc:	4b32      	ldr	r3, [pc, #200]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80027be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ef      	bne.n	80027aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80a6 	beq.w	8002924 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10d      	bne.n	8002804 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e8:	4b27      	ldr	r3, [pc, #156]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ec:	4a26      	ldr	r2, [pc, #152]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80027ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f4:	4b24      	ldr	r3, [pc, #144]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002800:	2301      	movs	r3, #1
 8002802:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002804:	4b21      	ldr	r3, [pc, #132]	@ (800288c <HAL_RCC_OscConfig+0x508>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d118      	bne.n	8002842 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002810:	4b1e      	ldr	r3, [pc, #120]	@ (800288c <HAL_RCC_OscConfig+0x508>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1d      	ldr	r2, [pc, #116]	@ (800288c <HAL_RCC_OscConfig+0x508>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281c:	f7fe feaa 	bl	8001574 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002824:	f7fe fea6 	bl	8001574 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e17a      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <HAL_RCC_OscConfig+0x508>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <HAL_RCC_OscConfig+0x4d8>
 800284a:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002850:	4a0d      	ldr	r2, [pc, #52]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800285a:	e029      	b.n	80028b0 <HAL_RCC_OscConfig+0x52c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b05      	cmp	r3, #5
 8002862:	d115      	bne.n	8002890 <HAL_RCC_OscConfig+0x50c>
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286a:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002874:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287a:	4a03      	ldr	r2, [pc, #12]	@ (8002888 <HAL_RCC_OscConfig+0x504>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x52c>
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	40007000 	.word	0x40007000
 8002890:	4b9c      	ldr	r3, [pc, #624]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002896:	4a9b      	ldr	r2, [pc, #620]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002898:	f023 0301 	bic.w	r3, r3, #1
 800289c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028a0:	4b98      	ldr	r3, [pc, #608]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	4a97      	ldr	r2, [pc, #604]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d016      	beq.n	80028e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe fe5c 	bl	8001574 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe fe58 	bl	8001574 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e12a      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ed      	beq.n	80028c0 <HAL_RCC_OscConfig+0x53c>
 80028e4:	e015      	b.n	8002912 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e6:	f7fe fe45 	bl	8001574 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fe fe41 	bl	8001574 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e113      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002904:	4b7f      	ldr	r3, [pc, #508]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ed      	bne.n	80028ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002912:	7ffb      	ldrb	r3, [r7, #31]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b7a      	ldr	r3, [pc, #488]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291c:	4a79      	ldr	r2, [pc, #484]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002922:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80fe 	beq.w	8002b2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	2b02      	cmp	r3, #2
 8002934:	f040 80d0 	bne.w	8002ad8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002938:	4b72      	ldr	r3, [pc, #456]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0203 	and.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	429a      	cmp	r2, r3
 800294a:	d130      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	3b01      	subs	r3, #1
 8002958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d127      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002968:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d11f      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002978:	2a07      	cmp	r2, #7
 800297a:	bf14      	ite	ne
 800297c:	2201      	movne	r2, #1
 800297e:	2200      	moveq	r2, #0
 8002980:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002982:	4293      	cmp	r3, r2
 8002984:	d113      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d109      	bne.n	80029ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	3b01      	subs	r3, #1
 80029a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d06e      	beq.n	8002a8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	d069      	beq.n	8002a88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029b4:	4b53      	ldr	r3, [pc, #332]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029c0:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0ad      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 80029d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029dc:	f7fe fdca 	bl	8001574 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e4:	f7fe fdc6 	bl	8001574 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e09a      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f6:	4b43      	ldr	r3, [pc, #268]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a02:	4b40      	ldr	r3, [pc, #256]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	4b40      	ldr	r3, [pc, #256]	@ (8002b08 <HAL_RCC_OscConfig+0x784>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a12:	3a01      	subs	r2, #1
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a1c:	0212      	lsls	r2, r2, #8
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a24:	0852      	lsrs	r2, r2, #1
 8002a26:	3a01      	subs	r2, #1
 8002a28:	0552      	lsls	r2, r2, #21
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a30:	0852      	lsrs	r2, r2, #1
 8002a32:	3a01      	subs	r2, #1
 8002a34:	0652      	lsls	r2, r2, #25
 8002a36:	4311      	orrs	r1, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a3c:	0912      	lsrs	r2, r2, #4
 8002a3e:	0452      	lsls	r2, r2, #17
 8002a40:	430a      	orrs	r2, r1
 8002a42:	4930      	ldr	r1, [pc, #192]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a48:	4b2e      	ldr	r3, [pc, #184]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a54:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a2a      	ldr	r2, [pc, #168]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a60:	f7fe fd88 	bl	8001574 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe fd84 	bl	8001574 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e058      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7a:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a86:	e050      	b.n	8002b2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e04f      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d148      	bne.n	8002b2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a98:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa4:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a16      	ldr	r2, [pc, #88]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ab0:	f7fe fd60 	bl	8001574 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fd5c 	bl	8001574 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e030      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x734>
 8002ad6:	e028      	b.n	8002b2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b0c      	cmp	r3, #12
 8002adc:	d023      	beq.n	8002b26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a08      	ldr	r2, [pc, #32]	@ (8002b04 <HAL_RCC_OscConfig+0x780>)
 8002ae4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fd43 	bl	8001574 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af0:	e00c      	b.n	8002b0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe fd3f 	bl	8001574 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d905      	bls.n	8002b0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e013      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
 8002b04:	40021000 	.word	0x40021000
 8002b08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <HAL_RCC_OscConfig+0x7b0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ec      	bne.n	8002af2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b18:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_OscConfig+0x7b0>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4905      	ldr	r1, [pc, #20]	@ (8002b34 <HAL_RCC_OscConfig+0x7b0>)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_RCC_OscConfig+0x7b4>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	60cb      	str	r3, [r1, #12]
 8002b24:	e001      	b.n	8002b2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	feeefffc 	.word	0xfeeefffc

08002b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0e7      	b.n	8002d20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b75      	ldr	r3, [pc, #468]	@ (8002d28 <HAL_RCC_ClockConfig+0x1ec>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d910      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b72      	ldr	r3, [pc, #456]	@ (8002d28 <HAL_RCC_ClockConfig+0x1ec>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 0207 	bic.w	r2, r3, #7
 8002b66:	4970      	ldr	r1, [pc, #448]	@ (8002d28 <HAL_RCC_ClockConfig+0x1ec>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002d28 <HAL_RCC_ClockConfig+0x1ec>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0cf      	b.n	8002d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	4b66      	ldr	r3, [pc, #408]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d908      	bls.n	8002bae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b63      	ldr	r3, [pc, #396]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4960      	ldr	r1, [pc, #384]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d04c      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d121      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0a6      	b.n	8002d20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bda:	4b54      	ldr	r3, [pc, #336]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d115      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e09a      	b.n	8002d20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e08e      	b.n	8002d20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c02:	4b4a      	ldr	r3, [pc, #296]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e086      	b.n	8002d20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c12:	4b46      	ldr	r3, [pc, #280]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f023 0203 	bic.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4943      	ldr	r1, [pc, #268]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c24:	f7fe fca6 	bl	8001574 <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2c:	f7fe fca2 	bl	8001574 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e06e      	b.n	8002d20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	4b3a      	ldr	r3, [pc, #232]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 020c 	and.w	r2, r3, #12
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d1eb      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d010      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	4b31      	ldr	r3, [pc, #196]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d208      	bcs.n	8002c82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c70:	4b2e      	ldr	r3, [pc, #184]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	492b      	ldr	r1, [pc, #172]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c82:	4b29      	ldr	r3, [pc, #164]	@ (8002d28 <HAL_RCC_ClockConfig+0x1ec>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d210      	bcs.n	8002cb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c90:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <HAL_RCC_ClockConfig+0x1ec>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 0207 	bic.w	r2, r3, #7
 8002c98:	4923      	ldr	r1, [pc, #140]	@ (8002d28 <HAL_RCC_ClockConfig+0x1ec>)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca0:	4b21      	ldr	r3, [pc, #132]	@ (8002d28 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e036      	b.n	8002d20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	4918      	ldr	r1, [pc, #96]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d009      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cdc:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4910      	ldr	r1, [pc, #64]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cf0:	f000 f824 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d2c <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	490b      	ldr	r1, [pc, #44]	@ (8002d30 <HAL_RCC_ClockConfig+0x1f4>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	4a09      	ldr	r2, [pc, #36]	@ (8002d34 <HAL_RCC_ClockConfig+0x1f8>)
 8002d0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <HAL_RCC_ClockConfig+0x1fc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe fbdd 	bl	80014d4 <HAL_InitTick>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40022000 	.word	0x40022000
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	08008dbc 	.word	0x08008dbc
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000004 	.word	0x20000004

08002d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	@ 0x24
 8002d40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d54:	4b3b      	ldr	r3, [pc, #236]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x34>
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d121      	bne.n	8002dae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d11e      	bne.n	8002dae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d70:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d7c:	4b31      	ldr	r3, [pc, #196]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e005      	b.n	8002d98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d98:	4a2b      	ldr	r2, [pc, #172]	@ (8002e48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d102      	bne.n	8002dba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	e004      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dc0:	4b23      	ldr	r3, [pc, #140]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d134      	bne.n	8002e34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dca:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d003      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0xac>
 8002de0:	e005      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8002de4:	617b      	str	r3, [r7, #20]
      break;
 8002de6:	e005      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002de8:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dea:	617b      	str	r3, [r7, #20]
      break;
 8002dec:	e002      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	617b      	str	r3, [r7, #20]
      break;
 8002df2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df4:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	3301      	adds	r3, #1
 8002e00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	fb03 f202 	mul.w	r2, r3, r2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	0e5b      	lsrs	r3, r3, #25
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	3301      	adds	r3, #1
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e34:	69bb      	ldr	r3, [r7, #24]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3724      	adds	r7, #36	@ 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08008dd4 	.word	0x08008dd4
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	007a1200 	.word	0x007a1200

08002e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e58:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000000 	.word	0x20000000

08002e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e70:	f7ff fff0 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	4904      	ldr	r1, [pc, #16]	@ (8002e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08008dcc 	.word	0x08008dcc

08002e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e9c:	f7ff ffda 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	0adb      	lsrs	r3, r3, #11
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4904      	ldr	r1, [pc, #16]	@ (8002ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	08008dcc 	.word	0x08008dcc

08002ec4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002edc:	f7ff f922 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002ee0:	6178      	str	r0, [r7, #20]
 8002ee2:	e014      	b.n	8002f0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ee4:	4b25      	ldr	r3, [pc, #148]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee8:	4a24      	ldr	r2, [pc, #144]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef0:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002efc:	f7ff f912 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002f00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f02:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f06:	4a1d      	ldr	r2, [pc, #116]	@ (8002f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f14:	d10b      	bne.n	8002f2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b80      	cmp	r3, #128	@ 0x80
 8002f1a:	d919      	bls.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f20:	d902      	bls.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f22:	2302      	movs	r3, #2
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	e013      	b.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f28:	2301      	movs	r3, #1
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	e010      	b.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b80      	cmp	r3, #128	@ 0x80
 8002f32:	d902      	bls.n	8002f3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f34:	2303      	movs	r3, #3
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	e00a      	b.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b80      	cmp	r3, #128	@ 0x80
 8002f3e:	d102      	bne.n	8002f46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f40:	2302      	movs	r3, #2
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	e004      	b.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b70      	cmp	r3, #112	@ 0x70
 8002f4a:	d101      	bne.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f023 0207 	bic.w	r2, r3, #7
 8002f58:	4909      	ldr	r1, [pc, #36]	@ (8002f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f60:	4b07      	ldr	r3, [pc, #28]	@ (8002f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d001      	beq.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40022000 	.word	0x40022000

08002f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f90:	2300      	movs	r3, #0
 8002f92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d041      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fa4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fa8:	d02a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002faa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fae:	d824      	bhi.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fb4:	d008      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fba:	d81e      	bhi.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fc4:	d010      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fc6:	e018      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fc8:	4b86      	ldr	r3, [pc, #536]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a85      	ldr	r2, [pc, #532]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fd4:	e015      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 facb 	bl	8003578 <RCCEx_PLLSAI1_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fe6:	e00c      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3320      	adds	r3, #32
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fbb6 	bl	8003760 <RCCEx_PLLSAI2_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff8:	e003      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ffe:	e000      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10b      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003008:	4b76      	ldr	r3, [pc, #472]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003016:	4973      	ldr	r1, [pc, #460]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800301e:	e001      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d041      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003034:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003038:	d02a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800303a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800303e:	d824      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003040:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003044:	d008      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003046:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800304a:	d81e      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003050:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003054:	d010      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003056:	e018      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003058:	4b62      	ldr	r3, [pc, #392]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a61      	ldr	r2, [pc, #388]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003062:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003064:	e015      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fa83 	bl	8003578 <RCCEx_PLLSAI1_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003076:	e00c      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3320      	adds	r3, #32
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fb6e 	bl	8003760 <RCCEx_PLLSAI2_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003088:	e003      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	74fb      	strb	r3, [r7, #19]
      break;
 800308e:	e000      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003098:	4b52      	ldr	r3, [pc, #328]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030a6:	494f      	ldr	r1, [pc, #316]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030ae:	e001      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80a0 	beq.w	8003202 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030c6:	4b47      	ldr	r3, [pc, #284]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030dc:	4b41      	ldr	r3, [pc, #260]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e0:	4a40      	ldr	r2, [pc, #256]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e8:	4b3e      	ldr	r3, [pc, #248]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f4:	2301      	movs	r3, #1
 80030f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f8:	4b3b      	ldr	r3, [pc, #236]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a3a      	ldr	r2, [pc, #232]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003104:	f7fe fa36 	bl	8001574 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800310a:	e009      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fe fa32 	bl	8001574 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d902      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	74fb      	strb	r3, [r7, #19]
        break;
 800311e:	e005      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003120:	4b31      	ldr	r3, [pc, #196]	@ (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ef      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d15c      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003132:	4b2c      	ldr	r3, [pc, #176]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003138:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800313c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01f      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	d019      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003150:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800315a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800315c:	4b21      	ldr	r3, [pc, #132]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003162:	4a20      	ldr	r2, [pc, #128]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800316c:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003172:	4a1c      	ldr	r2, [pc, #112]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800317c:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d016      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe f9f1 	bl	8001574 <HAL_GetTick>
 8003192:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003194:	e00b      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe f9ed 	bl	8001574 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d902      	bls.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	74fb      	strb	r3, [r7, #19]
            break;
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ae:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ec      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c2:	4b08      	ldr	r3, [pc, #32]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031d2:	4904      	ldr	r1, [pc, #16]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031da:	e009      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	74bb      	strb	r3, [r7, #18]
 80031e0:	e006      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f0:	7c7b      	ldrb	r3, [r7, #17]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d105      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4b9e      	ldr	r3, [pc, #632]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fa:	4a9d      	ldr	r2, [pc, #628]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003200:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800320e:	4b98      	ldr	r3, [pc, #608]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003214:	f023 0203 	bic.w	r2, r3, #3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	4994      	ldr	r1, [pc, #592]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003230:	4b8f      	ldr	r3, [pc, #572]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	f023 020c 	bic.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323e:	498c      	ldr	r1, [pc, #560]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003252:	4b87      	ldr	r3, [pc, #540]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003258:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	4983      	ldr	r1, [pc, #524]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003274:	4b7e      	ldr	r3, [pc, #504]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800327a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	497b      	ldr	r1, [pc, #492]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003296:	4b76      	ldr	r3, [pc, #472]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a4:	4972      	ldr	r1, [pc, #456]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c6:	496a      	ldr	r1, [pc, #424]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032da:	4b65      	ldr	r3, [pc, #404]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e8:	4961      	ldr	r1, [pc, #388]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032fc:	4b5c      	ldr	r3, [pc, #368]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330a:	4959      	ldr	r1, [pc, #356]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800331e:	4b54      	ldr	r3, [pc, #336]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003324:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332c:	4950      	ldr	r1, [pc, #320]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003340:	4b4b      	ldr	r3, [pc, #300]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003346:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	4948      	ldr	r1, [pc, #288]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003362:	4b43      	ldr	r3, [pc, #268]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003368:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	493f      	ldr	r1, [pc, #252]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d028      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003384:	4b3a      	ldr	r3, [pc, #232]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800338a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003392:	4937      	ldr	r1, [pc, #220]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800339e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033a2:	d106      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a4:	4b32      	ldr	r3, [pc, #200]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a31      	ldr	r2, [pc, #196]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ae:	60d3      	str	r3, [r2, #12]
 80033b0:	e011      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3304      	adds	r3, #4
 80033c0:	2101      	movs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f8d8 	bl	8003578 <RCCEx_PLLSAI1_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d028      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033e2:	4b23      	ldr	r3, [pc, #140]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f0:	491f      	ldr	r1, [pc, #124]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003400:	d106      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003402:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	4a1a      	ldr	r2, [pc, #104]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800340c:	60d3      	str	r3, [r2, #12]
 800340e:	e011      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003414:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003418:	d10c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3304      	adds	r3, #4
 800341e:	2101      	movs	r1, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f000 f8a9 	bl	8003578 <RCCEx_PLLSAI1_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02b      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003446:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800344e:	4908      	ldr	r1, [pc, #32]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800345e:	d109      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003460:	4b03      	ldr	r3, [pc, #12]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a02      	ldr	r2, [pc, #8]	@ (8003470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800346a:	60d3      	str	r3, [r2, #12]
 800346c:	e014      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f877 	bl	8003578 <RCCEx_PLLSAI1_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02f      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034b2:	4928      	ldr	r1, [pc, #160]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	2102      	movs	r1, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f854 	bl	8003578 <RCCEx_PLLSAI1_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d014      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	74bb      	strb	r3, [r7, #18]
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3320      	adds	r3, #32
 80034ee:	2102      	movs	r1, #2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 f935 	bl	8003760 <RCCEx_PLLSAI2_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003510:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800351e:	490d      	ldr	r1, [pc, #52]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003532:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003542:	4904      	ldr	r1, [pc, #16]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800354a:	7cbb      	ldrb	r3, [r7, #18]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000

08003558 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6013      	str	r3, [r2, #0]
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000

08003578 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003586:	4b75      	ldr	r3, [pc, #468]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d018      	beq.n	80035c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003592:	4b72      	ldr	r3, [pc, #456]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0203 	and.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d10d      	bne.n	80035be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
       ||
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035aa:	4b6c      	ldr	r3, [pc, #432]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
       ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d047      	beq.n	800364e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e044      	b.n	800364e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d018      	beq.n	80035fe <RCCEx_PLLSAI1_Config+0x86>
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d825      	bhi.n	800361c <RCCEx_PLLSAI1_Config+0xa4>
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d002      	beq.n	80035da <RCCEx_PLLSAI1_Config+0x62>
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d009      	beq.n	80035ec <RCCEx_PLLSAI1_Config+0x74>
 80035d8:	e020      	b.n	800361c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035da:	4b60      	ldr	r3, [pc, #384]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11d      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ea:	e01a      	b.n	8003622 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035ec:	4b5b      	ldr	r3, [pc, #364]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d116      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fc:	e013      	b.n	8003626 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035fe:	4b57      	ldr	r3, [pc, #348]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800360a:	4b54      	ldr	r3, [pc, #336]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800361a:	e006      	b.n	800362a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	e004      	b.n	800362c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003622:	bf00      	nop
 8003624:	e002      	b.n	800362c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800362a:	bf00      	nop
    }

    if(status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10d      	bne.n	800364e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003632:	4b4a      	ldr	r3, [pc, #296]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	430b      	orrs	r3, r1
 8003648:	4944      	ldr	r1, [pc, #272]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 800364a:	4313      	orrs	r3, r2
 800364c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d17d      	bne.n	8003750 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003654:	4b41      	ldr	r3, [pc, #260]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a40      	ldr	r2, [pc, #256]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 800365a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800365e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003660:	f7fd ff88 	bl	8001574 <HAL_GetTick>
 8003664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003666:	e009      	b.n	800367c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003668:	f7fd ff84 	bl	8001574 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d902      	bls.n	800367c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	73fb      	strb	r3, [r7, #15]
        break;
 800367a:	e005      	b.n	8003688 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800367c:	4b37      	ldr	r3, [pc, #220]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ef      	bne.n	8003668 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d160      	bne.n	8003750 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d111      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003694:	4b31      	ldr	r3, [pc, #196]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800369c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6892      	ldr	r2, [r2, #8]
 80036a4:	0211      	lsls	r1, r2, #8
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68d2      	ldr	r2, [r2, #12]
 80036aa:	0912      	lsrs	r2, r2, #4
 80036ac:	0452      	lsls	r2, r2, #17
 80036ae:	430a      	orrs	r2, r1
 80036b0:	492a      	ldr	r1, [pc, #168]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	610b      	str	r3, [r1, #16]
 80036b6:	e027      	b.n	8003708 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d112      	bne.n	80036e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036be:	4b27      	ldr	r3, [pc, #156]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80036c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6892      	ldr	r2, [r2, #8]
 80036ce:	0211      	lsls	r1, r2, #8
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6912      	ldr	r2, [r2, #16]
 80036d4:	0852      	lsrs	r2, r2, #1
 80036d6:	3a01      	subs	r2, #1
 80036d8:	0552      	lsls	r2, r2, #21
 80036da:	430a      	orrs	r2, r1
 80036dc:	491f      	ldr	r1, [pc, #124]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	610b      	str	r3, [r1, #16]
 80036e2:	e011      	b.n	8003708 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e4:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6892      	ldr	r2, [r2, #8]
 80036f4:	0211      	lsls	r1, r2, #8
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6952      	ldr	r2, [r2, #20]
 80036fa:	0852      	lsrs	r2, r2, #1
 80036fc:	3a01      	subs	r2, #1
 80036fe:	0652      	lsls	r2, r2, #25
 8003700:	430a      	orrs	r2, r1
 8003702:	4916      	ldr	r1, [pc, #88]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	4313      	orrs	r3, r2
 8003706:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003708:	4b14      	ldr	r3, [pc, #80]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a13      	ldr	r2, [pc, #76]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd ff2e 	bl	8001574 <HAL_GetTick>
 8003718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800371a:	e009      	b.n	8003730 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800371c:	f7fd ff2a 	bl	8001574 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d902      	bls.n	8003730 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	73fb      	strb	r3, [r7, #15]
          break;
 800372e:	e005      	b.n	800373c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003730:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ef      	beq.n	800371c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	4904      	ldr	r1, [pc, #16]	@ (800375c <RCCEx_PLLSAI1_Config+0x1e4>)
 800374c:	4313      	orrs	r3, r2
 800374e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000

08003760 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800376e:	4b6a      	ldr	r3, [pc, #424]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d018      	beq.n	80037ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800377a:	4b67      	ldr	r3, [pc, #412]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f003 0203 	and.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d10d      	bne.n	80037a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
       ||
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003792:	4b61      	ldr	r3, [pc, #388]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
       ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d047      	beq.n	8003836 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
 80037aa:	e044      	b.n	8003836 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d018      	beq.n	80037e6 <RCCEx_PLLSAI2_Config+0x86>
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d825      	bhi.n	8003804 <RCCEx_PLLSAI2_Config+0xa4>
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d002      	beq.n	80037c2 <RCCEx_PLLSAI2_Config+0x62>
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d009      	beq.n	80037d4 <RCCEx_PLLSAI2_Config+0x74>
 80037c0:	e020      	b.n	8003804 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037c2:	4b55      	ldr	r3, [pc, #340]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d11d      	bne.n	800380a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d2:	e01a      	b.n	800380a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037d4:	4b50      	ldr	r3, [pc, #320]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d116      	bne.n	800380e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e4:	e013      	b.n	800380e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037e6:	4b4c      	ldr	r3, [pc, #304]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037f2:	4b49      	ldr	r3, [pc, #292]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003802:	e006      	b.n	8003812 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      break;
 8003808:	e004      	b.n	8003814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800380a:	bf00      	nop
 800380c:	e002      	b.n	8003814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003812:	bf00      	nop
    }

    if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10d      	bne.n	8003836 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800381a:	4b3f      	ldr	r3, [pc, #252]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6819      	ldr	r1, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	430b      	orrs	r3, r1
 8003830:	4939      	ldr	r1, [pc, #228]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d167      	bne.n	800390c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800383c:	4b36      	ldr	r3, [pc, #216]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a35      	ldr	r2, [pc, #212]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003848:	f7fd fe94 	bl	8001574 <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800384e:	e009      	b.n	8003864 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003850:	f7fd fe90 	bl	8001574 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d902      	bls.n	8003864 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	73fb      	strb	r3, [r7, #15]
        break;
 8003862:	e005      	b.n	8003870 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003864:	4b2c      	ldr	r3, [pc, #176]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ef      	bne.n	8003850 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d14a      	bne.n	800390c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d111      	bne.n	80038a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800387c:	4b26      	ldr	r3, [pc, #152]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6892      	ldr	r2, [r2, #8]
 800388c:	0211      	lsls	r1, r2, #8
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68d2      	ldr	r2, [r2, #12]
 8003892:	0912      	lsrs	r2, r2, #4
 8003894:	0452      	lsls	r2, r2, #17
 8003896:	430a      	orrs	r2, r1
 8003898:	491f      	ldr	r1, [pc, #124]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	614b      	str	r3, [r1, #20]
 800389e:	e011      	b.n	80038c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6892      	ldr	r2, [r2, #8]
 80038b0:	0211      	lsls	r1, r2, #8
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6912      	ldr	r2, [r2, #16]
 80038b6:	0852      	lsrs	r2, r2, #1
 80038b8:	3a01      	subs	r2, #1
 80038ba:	0652      	lsls	r2, r2, #25
 80038bc:	430a      	orrs	r2, r1
 80038be:	4916      	ldr	r1, [pc, #88]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038c4:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a13      	ldr	r2, [pc, #76]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d0:	f7fd fe50 	bl	8001574 <HAL_GetTick>
 80038d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038d6:	e009      	b.n	80038ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038d8:	f7fd fe4c 	bl	8001574 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d902      	bls.n	80038ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	73fb      	strb	r3, [r7, #15]
          break;
 80038ea:	e005      	b.n	80038f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ef      	beq.n	80038d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038fe:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4904      	ldr	r1, [pc, #16]	@ (8003918 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003908:	4313      	orrs	r3, r2
 800390a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e095      	b.n	8003a5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800393e:	d009      	beq.n	8003954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	61da      	str	r2, [r3, #28]
 8003946:	e005      	b.n	8003954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd fb5a 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003994:	d902      	bls.n	800399c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e002      	b.n	80039a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800399c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80039aa:	d007      	beq.n	80039bc <HAL_SPI_Init+0xa0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039b4:	d002      	beq.n	80039bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fe:	ea42 0103 	orr.w	r1, r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	f003 0204 	and.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a38:	ea42 0103 	orr.w	r1, r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e049      	b.n	8003b08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fd fb11 	bl	80010b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f000 f9cf 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d001      	beq.n	8003b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e04f      	b.n	8003bc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01d      	beq.n	8003b86 <HAL_TIM_Base_Start_IT+0x76>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b52:	d018      	beq.n	8003b86 <HAL_TIM_Base_Start_IT+0x76>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_TIM_Base_Start_IT+0x76>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1e      	ldr	r2, [pc, #120]	@ (8003bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_TIM_Base_Start_IT+0x76>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d009      	beq.n	8003b86 <HAL_TIM_Base_Start_IT+0x76>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1b      	ldr	r2, [pc, #108]	@ (8003be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d004      	beq.n	8003b86 <HAL_TIM_Base_Start_IT+0x76>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d115      	bne.n	8003bb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <HAL_TIM_Base_Start_IT+0xdc>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b06      	cmp	r3, #6
 8003b96:	d015      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0xb4>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b9e:	d011      	beq.n	8003bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb0:	e008      	b.n	8003bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e000      	b.n	8003bc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	40013400 	.word	0x40013400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	00010007 	.word	0x00010007

08003bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d020      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01b      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0202 	mvn.w	r2, #2
 8003c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8e4 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003c40:	e005      	b.n	8003c4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8d6 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f8e7 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d020      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0204 	mvn.w	r2, #4
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8be 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f8b0 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f8c1 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d020      	beq.n	8003cec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0208 	mvn.w	r2, #8
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f898 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f88a 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f89b 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d020      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01b      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0210 	mvn.w	r2, #16
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f872 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f864 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f875 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0201 	mvn.w	r2, #1
 8003d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fc fc0a 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00c      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f98e 	bl	800409c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f986 	bl	80040b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00c      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f834 	bl	8003e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00c      	beq.n	8003dec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0220 	mvn.w	r2, #32
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f94e 	bl	8004088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	@ (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e62:	d00f      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3d      	ldr	r2, [pc, #244]	@ (8003f5c <TIM_Base_SetConfig+0x118>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	@ (8003f64 <TIM_Base_SetConfig+0x120>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8003f68 <TIM_Base_SetConfig+0x124>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2f      	ldr	r2, [pc, #188]	@ (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea4:	d01b      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8003f5c <TIM_Base_SetConfig+0x118>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d017      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f64 <TIM_Base_SetConfig+0x120>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00f      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	@ (8003f68 <TIM_Base_SetConfig+0x124>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	@ (8003f6c <TIM_Base_SetConfig+0x128>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a27      	ldr	r2, [pc, #156]	@ (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <TIM_Base_SetConfig+0x9a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	@ (8003f74 <TIM_Base_SetConfig+0x130>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a10      	ldr	r2, [pc, #64]	@ (8003f58 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00f      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a12      	ldr	r2, [pc, #72]	@ (8003f68 <TIM_Base_SetConfig+0x124>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a11      	ldr	r2, [pc, #68]	@ (8003f6c <TIM_Base_SetConfig+0x128>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a10      	ldr	r2, [pc, #64]	@ (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0f      	ldr	r2, [pc, #60]	@ (8003f74 <TIM_Base_SetConfig+0x130>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d103      	bne.n	8003f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	615a      	str	r2, [r3, #20]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800

08003f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e068      	b.n	8004062 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01d      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004002:	d018      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1b      	ldr	r2, [pc, #108]	@ (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1a      	ldr	r2, [pc, #104]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a13      	ldr	r2, [pc, #76]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a14      	ldr	r2, [pc, #80]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10c      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800403c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	4313      	orrs	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40013400 	.word	0x40013400
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	40014000 	.word	0x40014000

08004088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e040      	b.n	8004158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd f808 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	@ 0x24
 80040f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fae0 	bl	80046d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f825 	bl	8004160 <UART_SetConfig>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e01b      	b.n	8004158 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800412e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800413e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fb5f 	bl	8004814 <UART_CheckIdleState>
 8004156:	4603      	mov	r3, r0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b08a      	sub	sp, #40	@ 0x28
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	431a      	orrs	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	4313      	orrs	r3, r2
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4ba4      	ldr	r3, [pc, #656]	@ (8004420 <UART_SetConfig+0x2c0>)
 8004190:	4013      	ands	r3, r2
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004198:	430b      	orrs	r3, r1
 800419a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a99      	ldr	r2, [pc, #612]	@ (8004424 <UART_SetConfig+0x2c4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c8:	4313      	orrs	r3, r2
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041dc:	430a      	orrs	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a90      	ldr	r2, [pc, #576]	@ (8004428 <UART_SetConfig+0x2c8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d126      	bne.n	8004238 <UART_SetConfig+0xd8>
 80041ea:	4b90      	ldr	r3, [pc, #576]	@ (800442c <UART_SetConfig+0x2cc>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d81b      	bhi.n	8004230 <UART_SetConfig+0xd0>
 80041f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004200 <UART_SetConfig+0xa0>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004211 	.word	0x08004211
 8004204:	08004221 	.word	0x08004221
 8004208:	08004219 	.word	0x08004219
 800420c:	08004229 	.word	0x08004229
 8004210:	2301      	movs	r3, #1
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004216:	e116      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004218:	2302      	movs	r3, #2
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421e:	e112      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004220:	2304      	movs	r3, #4
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004226:	e10e      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004228:	2308      	movs	r3, #8
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422e:	e10a      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004236:	e106      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a7c      	ldr	r2, [pc, #496]	@ (8004430 <UART_SetConfig+0x2d0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d138      	bne.n	80042b4 <UART_SetConfig+0x154>
 8004242:	4b7a      	ldr	r3, [pc, #488]	@ (800442c <UART_SetConfig+0x2cc>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d82d      	bhi.n	80042ac <UART_SetConfig+0x14c>
 8004250:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <UART_SetConfig+0xf8>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	0800428d 	.word	0x0800428d
 800425c:	080042ad 	.word	0x080042ad
 8004260:	080042ad 	.word	0x080042ad
 8004264:	080042ad 	.word	0x080042ad
 8004268:	0800429d 	.word	0x0800429d
 800426c:	080042ad 	.word	0x080042ad
 8004270:	080042ad 	.word	0x080042ad
 8004274:	080042ad 	.word	0x080042ad
 8004278:	08004295 	.word	0x08004295
 800427c:	080042ad 	.word	0x080042ad
 8004280:	080042ad 	.word	0x080042ad
 8004284:	080042ad 	.word	0x080042ad
 8004288:	080042a5 	.word	0x080042a5
 800428c:	2300      	movs	r3, #0
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004292:	e0d8      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004294:	2302      	movs	r3, #2
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429a:	e0d4      	b.n	8004446 <UART_SetConfig+0x2e6>
 800429c:	2304      	movs	r3, #4
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a2:	e0d0      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042a4:	2308      	movs	r3, #8
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042aa:	e0cc      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042ac:	2310      	movs	r3, #16
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b2:	e0c8      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a5e      	ldr	r2, [pc, #376]	@ (8004434 <UART_SetConfig+0x2d4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d125      	bne.n	800430a <UART_SetConfig+0x1aa>
 80042be:	4b5b      	ldr	r3, [pc, #364]	@ (800442c <UART_SetConfig+0x2cc>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042c8:	2b30      	cmp	r3, #48	@ 0x30
 80042ca:	d016      	beq.n	80042fa <UART_SetConfig+0x19a>
 80042cc:	2b30      	cmp	r3, #48	@ 0x30
 80042ce:	d818      	bhi.n	8004302 <UART_SetConfig+0x1a2>
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d00a      	beq.n	80042ea <UART_SetConfig+0x18a>
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d814      	bhi.n	8004302 <UART_SetConfig+0x1a2>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <UART_SetConfig+0x182>
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d008      	beq.n	80042f2 <UART_SetConfig+0x192>
 80042e0:	e00f      	b.n	8004302 <UART_SetConfig+0x1a2>
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e8:	e0ad      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042ea:	2302      	movs	r3, #2
 80042ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f0:	e0a9      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042f2:	2304      	movs	r3, #4
 80042f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f8:	e0a5      	b.n	8004446 <UART_SetConfig+0x2e6>
 80042fa:	2308      	movs	r3, #8
 80042fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004300:	e0a1      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004302:	2310      	movs	r3, #16
 8004304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004308:	e09d      	b.n	8004446 <UART_SetConfig+0x2e6>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a4a      	ldr	r2, [pc, #296]	@ (8004438 <UART_SetConfig+0x2d8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d125      	bne.n	8004360 <UART_SetConfig+0x200>
 8004314:	4b45      	ldr	r3, [pc, #276]	@ (800442c <UART_SetConfig+0x2cc>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800431e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004320:	d016      	beq.n	8004350 <UART_SetConfig+0x1f0>
 8004322:	2bc0      	cmp	r3, #192	@ 0xc0
 8004324:	d818      	bhi.n	8004358 <UART_SetConfig+0x1f8>
 8004326:	2b80      	cmp	r3, #128	@ 0x80
 8004328:	d00a      	beq.n	8004340 <UART_SetConfig+0x1e0>
 800432a:	2b80      	cmp	r3, #128	@ 0x80
 800432c:	d814      	bhi.n	8004358 <UART_SetConfig+0x1f8>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <UART_SetConfig+0x1d8>
 8004332:	2b40      	cmp	r3, #64	@ 0x40
 8004334:	d008      	beq.n	8004348 <UART_SetConfig+0x1e8>
 8004336:	e00f      	b.n	8004358 <UART_SetConfig+0x1f8>
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433e:	e082      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004340:	2302      	movs	r3, #2
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004346:	e07e      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004348:	2304      	movs	r3, #4
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434e:	e07a      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004350:	2308      	movs	r3, #8
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004356:	e076      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004358:	2310      	movs	r3, #16
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435e:	e072      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a35      	ldr	r2, [pc, #212]	@ (800443c <UART_SetConfig+0x2dc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d12a      	bne.n	80043c0 <UART_SetConfig+0x260>
 800436a:	4b30      	ldr	r3, [pc, #192]	@ (800442c <UART_SetConfig+0x2cc>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004378:	d01a      	beq.n	80043b0 <UART_SetConfig+0x250>
 800437a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800437e:	d81b      	bhi.n	80043b8 <UART_SetConfig+0x258>
 8004380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004384:	d00c      	beq.n	80043a0 <UART_SetConfig+0x240>
 8004386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438a:	d815      	bhi.n	80043b8 <UART_SetConfig+0x258>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <UART_SetConfig+0x238>
 8004390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004394:	d008      	beq.n	80043a8 <UART_SetConfig+0x248>
 8004396:	e00f      	b.n	80043b8 <UART_SetConfig+0x258>
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439e:	e052      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043a0:	2302      	movs	r3, #2
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a6:	e04e      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043a8:	2304      	movs	r3, #4
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ae:	e04a      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043b0:	2308      	movs	r3, #8
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b6:	e046      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043b8:	2310      	movs	r3, #16
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043be:	e042      	b.n	8004446 <UART_SetConfig+0x2e6>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a17      	ldr	r2, [pc, #92]	@ (8004424 <UART_SetConfig+0x2c4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d13a      	bne.n	8004440 <UART_SetConfig+0x2e0>
 80043ca:	4b18      	ldr	r3, [pc, #96]	@ (800442c <UART_SetConfig+0x2cc>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043d8:	d01a      	beq.n	8004410 <UART_SetConfig+0x2b0>
 80043da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043de:	d81b      	bhi.n	8004418 <UART_SetConfig+0x2b8>
 80043e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043e4:	d00c      	beq.n	8004400 <UART_SetConfig+0x2a0>
 80043e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ea:	d815      	bhi.n	8004418 <UART_SetConfig+0x2b8>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <UART_SetConfig+0x298>
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f4:	d008      	beq.n	8004408 <UART_SetConfig+0x2a8>
 80043f6:	e00f      	b.n	8004418 <UART_SetConfig+0x2b8>
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fe:	e022      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004400:	2302      	movs	r3, #2
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004406:	e01e      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004408:	2304      	movs	r3, #4
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440e:	e01a      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004410:	2308      	movs	r3, #8
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004416:	e016      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004418:	2310      	movs	r3, #16
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441e:	e012      	b.n	8004446 <UART_SetConfig+0x2e6>
 8004420:	efff69f3 	.word	0xefff69f3
 8004424:	40008000 	.word	0x40008000
 8004428:	40013800 	.word	0x40013800
 800442c:	40021000 	.word	0x40021000
 8004430:	40004400 	.word	0x40004400
 8004434:	40004800 	.word	0x40004800
 8004438:	40004c00 	.word	0x40004c00
 800443c:	40005000 	.word	0x40005000
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a9f      	ldr	r2, [pc, #636]	@ (80046c8 <UART_SetConfig+0x568>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d17a      	bne.n	8004546 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004450:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004454:	2b08      	cmp	r3, #8
 8004456:	d824      	bhi.n	80044a2 <UART_SetConfig+0x342>
 8004458:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <UART_SetConfig+0x300>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004485 	.word	0x08004485
 8004464:	080044a3 	.word	0x080044a3
 8004468:	0800448d 	.word	0x0800448d
 800446c:	080044a3 	.word	0x080044a3
 8004470:	08004493 	.word	0x08004493
 8004474:	080044a3 	.word	0x080044a3
 8004478:	080044a3 	.word	0x080044a3
 800447c:	080044a3 	.word	0x080044a3
 8004480:	0800449b 	.word	0x0800449b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004484:	f7fe fcf2 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8004488:	61f8      	str	r0, [r7, #28]
        break;
 800448a:	e010      	b.n	80044ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800448c:	4b8f      	ldr	r3, [pc, #572]	@ (80046cc <UART_SetConfig+0x56c>)
 800448e:	61fb      	str	r3, [r7, #28]
        break;
 8004490:	e00d      	b.n	80044ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004492:	f7fe fc53 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8004496:	61f8      	str	r0, [r7, #28]
        break;
 8004498:	e009      	b.n	80044ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800449e:	61fb      	str	r3, [r7, #28]
        break;
 80044a0:	e005      	b.n	80044ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80fb 	beq.w	80046ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d305      	bcc.n	80044d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d903      	bls.n	80044da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044d8:	e0e8      	b.n	80046ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	2200      	movs	r2, #0
 80044de:	461c      	mov	r4, r3
 80044e0:	4615      	mov	r5, r2
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	022b      	lsls	r3, r5, #8
 80044ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044f0:	0222      	lsls	r2, r4, #8
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	6849      	ldr	r1, [r1, #4]
 80044f6:	0849      	lsrs	r1, r1, #1
 80044f8:	2000      	movs	r0, #0
 80044fa:	4688      	mov	r8, r1
 80044fc:	4681      	mov	r9, r0
 80044fe:	eb12 0a08 	adds.w	sl, r2, r8
 8004502:	eb43 0b09 	adc.w	fp, r3, r9
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004514:	4650      	mov	r0, sl
 8004516:	4659      	mov	r1, fp
 8004518:	f7fb fe5a 	bl	80001d0 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4613      	mov	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800452a:	d308      	bcc.n	800453e <UART_SetConfig+0x3de>
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004532:	d204      	bcs.n	800453e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	60da      	str	r2, [r3, #12]
 800453c:	e0b6      	b.n	80046ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004544:	e0b2      	b.n	80046ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800454e:	d15e      	bne.n	800460e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004550:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004554:	2b08      	cmp	r3, #8
 8004556:	d828      	bhi.n	80045aa <UART_SetConfig+0x44a>
 8004558:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <UART_SetConfig+0x400>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004585 	.word	0x08004585
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004595 	.word	0x08004595
 800456c:	080045ab 	.word	0x080045ab
 8004570:	0800459b 	.word	0x0800459b
 8004574:	080045ab 	.word	0x080045ab
 8004578:	080045ab 	.word	0x080045ab
 800457c:	080045ab 	.word	0x080045ab
 8004580:	080045a3 	.word	0x080045a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004584:	f7fe fc72 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8004588:	61f8      	str	r0, [r7, #28]
        break;
 800458a:	e014      	b.n	80045b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7fe fc84 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
 8004590:	61f8      	str	r0, [r7, #28]
        break;
 8004592:	e010      	b.n	80045b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004594:	4b4d      	ldr	r3, [pc, #308]	@ (80046cc <UART_SetConfig+0x56c>)
 8004596:	61fb      	str	r3, [r7, #28]
        break;
 8004598:	e00d      	b.n	80045b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459a:	f7fe fbcf 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 800459e:	61f8      	str	r0, [r7, #28]
        break;
 80045a0:	e009      	b.n	80045b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045a6:	61fb      	str	r3, [r7, #28]
        break;
 80045a8:	e005      	b.n	80045b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d077      	beq.n	80046ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	005a      	lsls	r2, r3, #1
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	441a      	add	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b0f      	cmp	r3, #15
 80045d6:	d916      	bls.n	8004606 <UART_SetConfig+0x4a6>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045de:	d212      	bcs.n	8004606 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f023 030f 	bic.w	r3, r3, #15
 80045e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	8afb      	ldrh	r3, [r7, #22]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	8afa      	ldrh	r2, [r7, #22]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	e052      	b.n	80046ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800460c:	e04e      	b.n	80046ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800460e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004612:	2b08      	cmp	r3, #8
 8004614:	d827      	bhi.n	8004666 <UART_SetConfig+0x506>
 8004616:	a201      	add	r2, pc, #4	@ (adr r2, 800461c <UART_SetConfig+0x4bc>)
 8004618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461c:	08004641 	.word	0x08004641
 8004620:	08004649 	.word	0x08004649
 8004624:	08004651 	.word	0x08004651
 8004628:	08004667 	.word	0x08004667
 800462c:	08004657 	.word	0x08004657
 8004630:	08004667 	.word	0x08004667
 8004634:	08004667 	.word	0x08004667
 8004638:	08004667 	.word	0x08004667
 800463c:	0800465f 	.word	0x0800465f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7fe fc14 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8004644:	61f8      	str	r0, [r7, #28]
        break;
 8004646:	e014      	b.n	8004672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7fe fc26 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
 800464c:	61f8      	str	r0, [r7, #28]
        break;
 800464e:	e010      	b.n	8004672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004650:	4b1e      	ldr	r3, [pc, #120]	@ (80046cc <UART_SetConfig+0x56c>)
 8004652:	61fb      	str	r3, [r7, #28]
        break;
 8004654:	e00d      	b.n	8004672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004656:	f7fe fb71 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 800465a:	61f8      	str	r0, [r7, #28]
        break;
 800465c:	e009      	b.n	8004672 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004662:	61fb      	str	r3, [r7, #28]
        break;
 8004664:	e005      	b.n	8004672 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004670:	bf00      	nop
    }

    if (pclk != 0U)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d019      	beq.n	80046ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	085a      	lsrs	r2, r3, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	fbb2 f3f3 	udiv	r3, r2, r3
 800468a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b0f      	cmp	r3, #15
 8004690:	d909      	bls.n	80046a6 <UART_SetConfig+0x546>
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004698:	d205      	bcs.n	80046a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60da      	str	r2, [r3, #12]
 80046a4:	e002      	b.n	80046ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3728      	adds	r7, #40	@ 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c6:	bf00      	nop
 80046c8:	40008000 	.word	0x40008000
 80046cc:	00f42400 	.word	0x00f42400

080046d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ce:	d10a      	bne.n	80047e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b098      	sub	sp, #96	@ 0x60
 8004818:	af02      	add	r7, sp, #8
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004824:	f7fc fea6 	bl	8001574 <HAL_GetTick>
 8004828:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d12e      	bne.n	8004896 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004838:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f88c 	bl	8004964 <UART_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d021      	beq.n	8004896 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004866:	653b      	str	r3, [r7, #80]	@ 0x50
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004870:	647b      	str	r3, [r7, #68]	@ 0x44
 8004872:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800487e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e6      	bne.n	8004852 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e062      	b.n	800495c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d149      	bne.n	8004938 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ac:	2200      	movs	r2, #0
 80048ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f856 	bl	8004964 <UART_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d03c      	beq.n	8004938 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	623b      	str	r3, [r7, #32]
   return(result);
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e6      	bne.n	80048be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004910:	61fa      	str	r2, [r7, #28]
 8004912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	617b      	str	r3, [r7, #20]
   return(result);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e5      	bne.n	80048f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e011      	b.n	800495c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3758      	adds	r7, #88	@ 0x58
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004974:	e049      	b.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d045      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800497e:	f7fc fdf9 	bl	8001574 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	429a      	cmp	r2, r3
 800498c:	d302      	bcc.n	8004994 <UART_WaitOnFlagUntilTimeout+0x30>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e048      	b.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d031      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d110      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2208      	movs	r2, #8
 80049ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f838 	bl	8004a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2208      	movs	r2, #8
 80049c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e029      	b.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e4:	d111      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f81e 	bl	8004a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e00f      	b.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d0a6      	beq.n	8004976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b095      	sub	sp, #84	@ 0x54
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a58:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3308      	adds	r3, #8
 8004a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e5      	bne.n	8004a6c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d118      	bne.n	8004ada <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f023 0310 	bic.w	r3, r3, #16
 8004abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6979      	ldr	r1, [r7, #20]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e6      	bne.n	8004aa8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004aee:	bf00      	nop
 8004af0:	3754      	adds	r7, #84	@ 0x54
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004afa:	b084      	sub	sp, #16
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	f107 001c 	add.w	r0, r7, #28
 8004b08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa65 	bl	8004fe8 <USB_CoreReset>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b34:	e005      	b.n	8004b42 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b4e:	b004      	add	sp, #16
 8004b50:	4770      	bx	lr

08004b52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d115      	bne.n	8004bc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	f7fc fcf2 	bl	800158c <HAL_Delay>
      ms++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa0c 	bl	8004fcc <USB_GetMode>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d01e      	beq.n	8004bf8 <USB_SetCurrentMode+0x84>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b31      	cmp	r3, #49	@ 0x31
 8004bbe:	d9f0      	bls.n	8004ba2 <USB_SetCurrentMode+0x2e>
 8004bc0:	e01a      	b.n	8004bf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d115      	bne.n	8004bf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f7fc fcd9 	bl	800158c <HAL_Delay>
      ms++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f9f3 	bl	8004fcc <USB_GetMode>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <USB_SetCurrentMode+0x84>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b31      	cmp	r3, #49	@ 0x31
 8004bf0:	d9f0      	bls.n	8004bd4 <USB_SetCurrentMode+0x60>
 8004bf2:	e001      	b.n	8004bf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e005      	b.n	8004c04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b32      	cmp	r3, #50	@ 0x32
 8004bfc:	d101      	bne.n	8004c02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e009      	b.n	8004c40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	3340      	adds	r3, #64	@ 0x40
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	2200      	movs	r2, #0
 8004c38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b0e      	cmp	r3, #14
 8004c44:	d9f2      	bls.n	8004c2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d11c      	bne.n	8004c86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c64:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e005      	b.n	8004c92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c9e:	2103      	movs	r1, #3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f959 	bl	8004f58 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ca6:	2110      	movs	r1, #16
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f8f1 	bl	8004e90 <USB_FlushTxFifo>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f91d 	bl	8004ef8 <USB_FlushRxFifo>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cce:	461a      	mov	r2, r3
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e043      	b.n	8004d7a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d08:	d118      	bne.n	8004d3c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e013      	b.n	8004d4e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d32:	461a      	mov	r2, r3
 8004d34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e008      	b.n	8004d4e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	3301      	adds	r3, #1
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3b7      	bcc.n	8004cf2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e043      	b.n	8004e10 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d9e:	d118      	bne.n	8004dd2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db2:	461a      	mov	r2, r3
 8004db4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e013      	b.n	8004de4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	e008      	b.n	8004de4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004df0:	461a      	mov	r2, r3
 8004df2:	2300      	movs	r3, #0
 8004df4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e02:	461a      	mov	r2, r3
 8004e04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d3b7      	bcc.n	8004d88 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f043 0210 	orr.w	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	4b10      	ldr	r3, [pc, #64]	@ (8004e8c <USB_DevInit+0x280>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f043 0208 	orr.w	r2, r3, #8
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d107      	bne.n	8004e7a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e72:	f043 0304 	orr.w	r3, r3, #4
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e86:	b004      	add	sp, #16
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	803c3800 	.word	0x803c3800

08004e90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4a13      	ldr	r2, [pc, #76]	@ (8004ef4 <USB_FlushTxFifo+0x64>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e01b      	b.n	8004ee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	daf2      	bge.n	8004e9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	019b      	lsls	r3, r3, #6
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a08      	ldr	r2, [pc, #32]	@ (8004ef4 <USB_FlushTxFifo+0x64>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e006      	b.n	8004ee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d0f0      	beq.n	8004ec8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	00030d40 	.word	0x00030d40

08004ef8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3301      	adds	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4a11      	ldr	r2, [pc, #68]	@ (8004f54 <USB_FlushRxFifo+0x5c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e018      	b.n	8004f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	daf2      	bge.n	8004f04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2210      	movs	r2, #16
 8004f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a08      	ldr	r2, [pc, #32]	@ (8004f54 <USB_FlushRxFifo+0x5c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e006      	b.n	8004f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d0f0      	beq.n	8004f28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	00030d40 	.word	0x00030d40

08004f58 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004fa4:	f023 0303 	bic.w	r3, r3, #3
 8004fa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb8:	f043 0302 	orr.w	r3, r3, #2
 8004fbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a13      	ldr	r2, [pc, #76]	@ (800504c <USB_CoreReset+0x64>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e01b      	b.n	800503e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	daf2      	bge.n	8004ff4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4a09      	ldr	r2, [pc, #36]	@ (800504c <USB_CoreReset+0x64>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d901      	bls.n	8005030 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e006      	b.n	800503e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d0f0      	beq.n	800501e <USB_CoreReset+0x36>

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	00030d40 	.word	0x00030d40

08005050 <__NVIC_SetPriority>:
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005060:	2b00      	cmp	r3, #0
 8005062:	db0a      	blt.n	800507a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	490c      	ldr	r1, [pc, #48]	@ (800509c <__NVIC_SetPriority+0x4c>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	0112      	lsls	r2, r2, #4
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	440b      	add	r3, r1
 8005074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005078:	e00a      	b.n	8005090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	4908      	ldr	r1, [pc, #32]	@ (80050a0 <__NVIC_SetPriority+0x50>)
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	3b04      	subs	r3, #4
 8005088:	0112      	lsls	r2, r2, #4
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	440b      	add	r3, r1
 800508e:	761a      	strb	r2, [r3, #24]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	e000e100 	.word	0xe000e100
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050a8:	2100      	movs	r1, #0
 80050aa:	f06f 0004 	mvn.w	r0, #4
 80050ae:	f7ff ffcf 	bl	8005050 <__NVIC_SetPriority>
#endif
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050be:	f3ef 8305 	mrs	r3, IPSR
 80050c2:	603b      	str	r3, [r7, #0]
  return(result);
 80050c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050ca:	f06f 0305 	mvn.w	r3, #5
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	e00c      	b.n	80050ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050d2:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <osKernelInitialize+0x44>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050da:	4b08      	ldr	r3, [pc, #32]	@ (80050fc <osKernelInitialize+0x44>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	e002      	b.n	80050ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295
 80050ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050ec:	687b      	ldr	r3, [r7, #4]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	200007b4 	.word	0x200007b4

08005100 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005106:	f3ef 8305 	mrs	r3, IPSR
 800510a:	603b      	str	r3, [r7, #0]
  return(result);
 800510c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005112:	f06f 0305 	mvn.w	r3, #5
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e010      	b.n	800513c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800511a:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <osKernelStart+0x48>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d109      	bne.n	8005136 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005122:	f7ff ffbf 	bl	80050a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005126:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <osKernelStart+0x48>)
 8005128:	2202      	movs	r2, #2
 800512a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800512c:	f001 ffc2 	bl	80070b4 <vTaskStartScheduler>
      stat = osOK;
 8005130:	2300      	movs	r3, #0
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	e002      	b.n	800513c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005136:	f04f 33ff 	mov.w	r3, #4294967295
 800513a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800513c:	687b      	ldr	r3, [r7, #4]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200007b4 	.word	0x200007b4

0800514c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b08e      	sub	sp, #56	@ 0x38
 8005150:	af04      	add	r7, sp, #16
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800515c:	f3ef 8305 	mrs	r3, IPSR
 8005160:	617b      	str	r3, [r7, #20]
  return(result);
 8005162:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005164:	2b00      	cmp	r3, #0
 8005166:	d17e      	bne.n	8005266 <osThreadNew+0x11a>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d07b      	beq.n	8005266 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800516e:	2380      	movs	r3, #128	@ 0x80
 8005170:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005172:	2318      	movs	r3, #24
 8005174:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d045      	beq.n	8005212 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <osThreadNew+0x48>
        name = attr->name;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <osThreadNew+0x6e>
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b38      	cmp	r3, #56	@ 0x38
 80051ac:	d805      	bhi.n	80051ba <osThreadNew+0x6e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <osThreadNew+0x72>
        return (NULL);
 80051ba:	2300      	movs	r3, #0
 80051bc:	e054      	b.n	8005268 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	089b      	lsrs	r3, r3, #2
 80051cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <osThreadNew+0xa8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b5b      	cmp	r3, #91	@ 0x5b
 80051dc:	d90a      	bls.n	80051f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <osThreadNew+0xa8>
        mem = 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e010      	b.n	8005216 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10c      	bne.n	8005216 <osThreadNew+0xca>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <osThreadNew+0xca>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <osThreadNew+0xca>
          mem = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	e001      	b.n	8005216 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d110      	bne.n	800523e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005224:	9202      	str	r2, [sp, #8]
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6a3a      	ldr	r2, [r7, #32]
 8005230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f001 fd62 	bl	8006cfc <xTaskCreateStatic>
 8005238:	4603      	mov	r3, r0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e013      	b.n	8005266 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d110      	bne.n	8005266 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	b29a      	uxth	r2, r3
 8005248:	f107 0310 	add.w	r3, r7, #16
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f001 fdb0 	bl	8006dbc <xTaskCreate>
 800525c:	4603      	mov	r3, r0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d001      	beq.n	8005266 <osThreadNew+0x11a>
            hTask = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005266:	693b      	ldr	r3, [r7, #16]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3728      	adds	r7, #40	@ 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005278:	f3ef 8305 	mrs	r3, IPSR
 800527c:	60bb      	str	r3, [r7, #8]
  return(result);
 800527e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <osDelay+0x1c>
    stat = osErrorISR;
 8005284:	f06f 0305 	mvn.w	r3, #5
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e007      	b.n	800529c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 fed6 	bl	8007048 <vTaskDelay>
    }
  }

  return (stat);
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b088      	sub	sp, #32
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052b2:	f3ef 8305 	mrs	r3, IPSR
 80052b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80052b8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d174      	bne.n	80053a8 <osMutexNew+0x102>
    if (attr != NULL) {
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <osMutexNew+0x26>
      type = attr->attr_bits;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e001      	b.n	80052d0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <osMutexNew+0x3a>
      rmtx = 1U;
 80052da:	2301      	movs	r3, #1
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e001      	b.n	80052e4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d15c      	bne.n	80053a8 <osMutexNew+0x102>
      mem = -1;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
 80052f2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d015      	beq.n	8005326 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d006      	beq.n	8005310 <osMutexNew+0x6a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b4f      	cmp	r3, #79	@ 0x4f
 8005308:	d902      	bls.n	8005310 <osMutexNew+0x6a>
          mem = 1;
 800530a:	2301      	movs	r3, #1
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	e00c      	b.n	800532a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d108      	bne.n	800532a <osMutexNew+0x84>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <osMutexNew+0x84>
            mem = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	e001      	b.n	800532a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d112      	bne.n	8005356 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	4619      	mov	r1, r3
 800533c:	2004      	movs	r0, #4
 800533e:	f000 fd70 	bl	8005e22 <xQueueCreateMutexStatic>
 8005342:	61f8      	str	r0, [r7, #28]
 8005344:	e016      	b.n	8005374 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	4619      	mov	r1, r3
 800534c:	2001      	movs	r0, #1
 800534e:	f000 fd68 	bl	8005e22 <xQueueCreateMutexStatic>
 8005352:	61f8      	str	r0, [r7, #28]
 8005354:	e00e      	b.n	8005374 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005362:	2004      	movs	r0, #4
 8005364:	f000 fd45 	bl	8005df2 <xQueueCreateMutex>
 8005368:	61f8      	str	r0, [r7, #28]
 800536a:	e003      	b.n	8005374 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800536c:	2001      	movs	r0, #1
 800536e:	f000 fd40 	bl	8005df2 <xQueueCreateMutex>
 8005372:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <osMutexNew+0xee>
        if (attr != NULL) {
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <osMutexNew+0xe2>
          name = attr->name;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	e001      	b.n	800538c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	69f8      	ldr	r0, [r7, #28]
 8005390:	f001 fc2c 	bl	8006bec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d006      	beq.n	80053a8 <osMutexNew+0x102>
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80053a8:	69fb      	ldr	r3, [r7, #28]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b086      	sub	sp, #24
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f023 0301 	bic.w	r3, r3, #1
 80053c2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d0:	f3ef 8305 	mrs	r3, IPSR
 80053d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80053d6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80053dc:	f06f 0305 	mvn.w	r3, #5
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e02c      	b.n	800543e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80053ea:	f06f 0303 	mvn.w	r3, #3
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e025      	b.n	800543e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d011      	beq.n	800541c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6938      	ldr	r0, [r7, #16]
 80053fc:	f000 fd61 	bl	8005ec2 <xQueueTakeMutexRecursive>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d01b      	beq.n	800543e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800540c:	f06f 0301 	mvn.w	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e014      	b.n	800543e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005414:	f06f 0302 	mvn.w	r3, #2
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e010      	b.n	800543e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	6938      	ldr	r0, [r7, #16]
 8005420:	f001 f906 	bl	8006630 <xQueueSemaphoreTake>
 8005424:	4603      	mov	r3, r0
 8005426:	2b01      	cmp	r3, #1
 8005428:	d009      	beq.n	800543e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005430:	f06f 0301 	mvn.w	r3, #1
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e002      	b.n	800543e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005438:	f06f 0302 	mvn.w	r3, #2
 800543c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800543e:	697b      	ldr	r3, [r7, #20]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f023 0301 	bic.w	r3, r3, #1
 8005456:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005464:	f3ef 8305 	mrs	r3, IPSR
 8005468:	60bb      	str	r3, [r7, #8]
  return(result);
 800546a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005470:	f06f 0305 	mvn.w	r3, #5
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e01f      	b.n	80054b8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800547e:	f06f 0303 	mvn.w	r3, #3
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e018      	b.n	80054b8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800548c:	6938      	ldr	r0, [r7, #16]
 800548e:	f000 fce3 	bl	8005e58 <xQueueGiveMutexRecursive>
 8005492:	4603      	mov	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d00f      	beq.n	80054b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005498:	f06f 0302 	mvn.w	r3, #2
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e00b      	b.n	80054b8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80054a0:	2300      	movs	r3, #0
 80054a2:	2200      	movs	r2, #0
 80054a4:	2100      	movs	r1, #0
 80054a6:	6938      	ldr	r0, [r7, #16]
 80054a8:	f000 fdb0 	bl	800600c <xQueueGenericSend>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d002      	beq.n	80054b8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80054b2:	f06f 0302 	mvn.w	r3, #2
 80054b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80054b8:	697b      	ldr	r3, [r7, #20]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b08a      	sub	sp, #40	@ 0x28
 80054c6:	af02      	add	r7, sp, #8
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054d2:	f3ef 8305 	mrs	r3, IPSR
 80054d6:	613b      	str	r3, [r7, #16]
  return(result);
 80054d8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d175      	bne.n	80055ca <osSemaphoreNew+0x108>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d072      	beq.n	80055ca <osSemaphoreNew+0x108>
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d86e      	bhi.n	80055ca <osSemaphoreNew+0x108>
    mem = -1;
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d015      	beq.n	8005524 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d006      	beq.n	800550e <osSemaphoreNew+0x4c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b4f      	cmp	r3, #79	@ 0x4f
 8005506:	d902      	bls.n	800550e <osSemaphoreNew+0x4c>
        mem = 1;
 8005508:	2301      	movs	r3, #1
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	e00c      	b.n	8005528 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d108      	bne.n	8005528 <osSemaphoreNew+0x66>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <osSemaphoreNew+0x66>
          mem = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e001      	b.n	8005528 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	d04c      	beq.n	80055ca <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d128      	bne.n	8005588 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d10a      	bne.n	8005552 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2203      	movs	r2, #3
 8005542:	9200      	str	r2, [sp, #0]
 8005544:	2200      	movs	r2, #0
 8005546:	2100      	movs	r1, #0
 8005548:	2001      	movs	r0, #1
 800554a:	f000 fb5d 	bl	8005c08 <xQueueGenericCreateStatic>
 800554e:	61f8      	str	r0, [r7, #28]
 8005550:	e005      	b.n	800555e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005552:	2203      	movs	r2, #3
 8005554:	2100      	movs	r1, #0
 8005556:	2001      	movs	r0, #1
 8005558:	f000 fbd3 	bl	8005d02 <xQueueGenericCreate>
 800555c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d022      	beq.n	80055aa <osSemaphoreNew+0xe8>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01f      	beq.n	80055aa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800556a:	2300      	movs	r3, #0
 800556c:	2200      	movs	r2, #0
 800556e:	2100      	movs	r1, #0
 8005570:	69f8      	ldr	r0, [r7, #28]
 8005572:	f000 fd4b 	bl	800600c <xQueueGenericSend>
 8005576:	4603      	mov	r3, r0
 8005578:	2b01      	cmp	r3, #1
 800557a:	d016      	beq.n	80055aa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800557c:	69f8      	ldr	r0, [r7, #28]
 800557e:	f001 f9e9 	bl	8006954 <vQueueDelete>
            hSemaphore = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	e010      	b.n	80055aa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d108      	bne.n	80055a0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	461a      	mov	r2, r3
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 fcca 	bl	8005f30 <xQueueCreateCountingSemaphoreStatic>
 800559c:	61f8      	str	r0, [r7, #28]
 800559e:	e004      	b.n	80055aa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fcfd 	bl	8005fa2 <xQueueCreateCountingSemaphore>
 80055a8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00c      	beq.n	80055ca <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <osSemaphoreNew+0xfc>
          name = attr->name;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e001      	b.n	80055c2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80055c2:	6979      	ldr	r1, [r7, #20]
 80055c4:	69f8      	ldr	r0, [r7, #28]
 80055c6:	f001 fb11 	bl	8006bec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80055ca:	69fb      	ldr	r3, [r7, #28]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80055ec:	f06f 0303 	mvn.w	r3, #3
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e039      	b.n	8005668 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f4:	f3ef 8305 	mrs	r3, IPSR
 80055f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80055fa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d022      	beq.n	8005646 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005606:	f06f 0303 	mvn.w	r3, #3
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e02c      	b.n	8005668 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005612:	f107 0308 	add.w	r3, r7, #8
 8005616:	461a      	mov	r2, r3
 8005618:	2100      	movs	r1, #0
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f001 f918 	bl	8006850 <xQueueReceiveFromISR>
 8005620:	4603      	mov	r3, r0
 8005622:	2b01      	cmp	r3, #1
 8005624:	d003      	beq.n	800562e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005626:	f06f 0302 	mvn.w	r3, #2
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	e01c      	b.n	8005668 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d019      	beq.n	8005668 <osSemaphoreAcquire+0x94>
 8005634:	4b0f      	ldr	r3, [pc, #60]	@ (8005674 <osSemaphoreAcquire+0xa0>)
 8005636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	e010      	b.n	8005668 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6938      	ldr	r0, [r7, #16]
 800564a:	f000 fff1 	bl	8006630 <xQueueSemaphoreTake>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d009      	beq.n	8005668 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800565a:	f06f 0301 	mvn.w	r3, #1
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e002      	b.n	8005668 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005662:	f06f 0302 	mvn.w	r3, #2
 8005666:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005668:	697b      	ldr	r3, [r7, #20]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800568e:	f06f 0303 	mvn.w	r3, #3
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	e02c      	b.n	80056f0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005696:	f3ef 8305 	mrs	r3, IPSR
 800569a:	60fb      	str	r3, [r7, #12]
  return(result);
 800569c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d01a      	beq.n	80056d8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4619      	mov	r1, r3
 80056ac:	6938      	ldr	r0, [r7, #16]
 80056ae:	f000 fe4d 	bl	800634c <xQueueGiveFromISR>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d003      	beq.n	80056c0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80056b8:	f06f 0302 	mvn.w	r3, #2
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e017      	b.n	80056f0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d014      	beq.n	80056f0 <osSemaphoreRelease+0x78>
 80056c6:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <osSemaphoreRelease+0x84>)
 80056c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	e00b      	b.n	80056f0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80056d8:	2300      	movs	r3, #0
 80056da:	2200      	movs	r2, #0
 80056dc:	2100      	movs	r1, #0
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f000 fc94 	bl	800600c <xQueueGenericSend>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d002      	beq.n	80056f0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80056ea:	f06f 0302 	mvn.w	r3, #2
 80056ee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80056f0:	697b      	ldr	r3, [r7, #20]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	@ 0x28
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005710:	f3ef 8305 	mrs	r3, IPSR
 8005714:	613b      	str	r3, [r7, #16]
  return(result);
 8005716:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005718:	2b00      	cmp	r3, #0
 800571a:	d15f      	bne.n	80057dc <osMessageQueueNew+0xdc>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d05c      	beq.n	80057dc <osMessageQueueNew+0xdc>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d059      	beq.n	80057dc <osMessageQueueNew+0xdc>
    mem = -1;
 8005728:	f04f 33ff 	mov.w	r3, #4294967295
 800572c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d029      	beq.n	8005788 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <osMessageQueueNew+0x62>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	2b4f      	cmp	r3, #79	@ 0x4f
 8005742:	d90e      	bls.n	8005762 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695a      	ldr	r2, [r3, #20]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	429a      	cmp	r2, r3
 800575a:	d302      	bcc.n	8005762 <osMessageQueueNew+0x62>
        mem = 1;
 800575c:	2301      	movs	r3, #1
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	e014      	b.n	800578c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d110      	bne.n	800578c <osMessageQueueNew+0x8c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10c      	bne.n	800578c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <osMessageQueueNew+0x8c>
          mem = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e001      	b.n	800578c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10b      	bne.n	80057aa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2100      	movs	r1, #0
 800579c:	9100      	str	r1, [sp, #0]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fa31 	bl	8005c08 <xQueueGenericCreateStatic>
 80057a6:	61f8      	str	r0, [r7, #28]
 80057a8:	e008      	b.n	80057bc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d105      	bne.n	80057bc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80057b0:	2200      	movs	r2, #0
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 faa4 	bl	8005d02 <xQueueGenericCreate>
 80057ba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e001      	b.n	80057d4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	69f8      	ldr	r0, [r7, #28]
 80057d8:	f001 fa08 	bl	8006bec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80057dc:	69fb      	ldr	r3, [r7, #28]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005800:	f3ef 8305 	mrs	r3, IPSR
 8005804:	617b      	str	r3, [r7, #20]
  return(result);
 8005806:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005808:	2b00      	cmp	r3, #0
 800580a:	d028      	beq.n	800585e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <osMessageQueuePut+0x36>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <osMessageQueuePut+0x36>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800581e:	f06f 0303 	mvn.w	r3, #3
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	e038      	b.n	8005898 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800582a:	f107 0210 	add.w	r2, r7, #16
 800582e:	2300      	movs	r3, #0
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	69b8      	ldr	r0, [r7, #24]
 8005834:	f000 fcec 	bl	8006210 <xQueueGenericSendFromISR>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d003      	beq.n	8005846 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800583e:	f06f 0302 	mvn.w	r3, #2
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e028      	b.n	8005898 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d025      	beq.n	8005898 <osMessageQueuePut+0xb0>
 800584c:	4b15      	ldr	r3, [pc, #84]	@ (80058a4 <osMessageQueuePut+0xbc>)
 800584e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	e01c      	b.n	8005898 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <osMessageQueuePut+0x82>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d103      	bne.n	8005872 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800586a:	f06f 0303 	mvn.w	r3, #3
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	e012      	b.n	8005898 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005872:	2300      	movs	r3, #0
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	69b8      	ldr	r0, [r7, #24]
 800587a:	f000 fbc7 	bl	800600c <xQueueGenericSend>
 800587e:	4603      	mov	r3, r0
 8005880:	2b01      	cmp	r3, #1
 8005882:	d009      	beq.n	8005898 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800588a:	f06f 0301 	mvn.w	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e002      	b.n	8005898 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005892:	f06f 0302 	mvn.w	r3, #2
 8005896:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005898:	69fb      	ldr	r3, [r7, #28]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3720      	adds	r7, #32
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	e000ed04 	.word	0xe000ed04

080058a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058be:	f3ef 8305 	mrs	r3, IPSR
 80058c2:	617b      	str	r3, [r7, #20]
  return(result);
 80058c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d028      	beq.n	800591c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <osMessageQueueGet+0x34>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <osMessageQueueGet+0x34>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80058dc:	f06f 0303 	mvn.w	r3, #3
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	e037      	b.n	8005954 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80058e4:	2300      	movs	r3, #0
 80058e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80058e8:	f107 0310 	add.w	r3, r7, #16
 80058ec:	461a      	mov	r2, r3
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	69b8      	ldr	r0, [r7, #24]
 80058f2:	f000 ffad 	bl	8006850 <xQueueReceiveFromISR>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d003      	beq.n	8005904 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80058fc:	f06f 0302 	mvn.w	r3, #2
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e027      	b.n	8005954 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d024      	beq.n	8005954 <osMessageQueueGet+0xac>
 800590a:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <osMessageQueueGet+0xb8>)
 800590c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	e01b      	b.n	8005954 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <osMessageQueueGet+0x80>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d103      	bne.n	8005930 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005928:	f06f 0303 	mvn.w	r3, #3
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	e011      	b.n	8005954 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	69b8      	ldr	r0, [r7, #24]
 8005936:	f000 fd99 	bl	800646c <xQueueReceive>
 800593a:	4603      	mov	r3, r0
 800593c:	2b01      	cmp	r3, #1
 800593e:	d009      	beq.n	8005954 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005946:	f06f 0301 	mvn.w	r3, #1
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e002      	b.n	8005954 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800594e:	f06f 0302 	mvn.w	r3, #2
 8005952:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005954:	69fb      	ldr	r3, [r7, #28]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	e000ed04 	.word	0xe000ed04

08005964 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a07      	ldr	r2, [pc, #28]	@ (8005990 <vApplicationGetIdleTaskMemory+0x2c>)
 8005974:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	4a06      	ldr	r2, [pc, #24]	@ (8005994 <vApplicationGetIdleTaskMemory+0x30>)
 800597a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2280      	movs	r2, #128	@ 0x80
 8005980:	601a      	str	r2, [r3, #0]
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	200007b8 	.word	0x200007b8
 8005994:	20000814 	.word	0x20000814

08005998 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a07      	ldr	r2, [pc, #28]	@ (80059c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80059a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4a06      	ldr	r2, [pc, #24]	@ (80059c8 <vApplicationGetTimerTaskMemory+0x30>)
 80059ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059b6:	601a      	str	r2, [r3, #0]
}
 80059b8:	bf00      	nop
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	20000a14 	.word	0x20000a14
 80059c8:	20000a70 	.word	0x20000a70

080059cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f103 0208 	add.w	r2, r3, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295
 80059e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f103 0208 	add.w	r2, r3, #8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f103 0208 	add.w	r2, r3, #8
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
}
 8005a62:	bf00      	nop
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d103      	bne.n	8005a8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e00c      	b.n	8005aa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3308      	adds	r3, #8
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e002      	b.n	8005a9c <vListInsert+0x2e>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d2f6      	bcs.n	8005a96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6892      	ldr	r2, [r2, #8]
 8005af6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6852      	ldr	r2, [r2, #4]
 8005b00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d103      	bne.n	8005b14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	1e5a      	subs	r2, r3, #1
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	e7fd      	b.n	8005b5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b60:	f002 fd72 	bl	8008648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	441a      	add	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b90:	3b01      	subs	r3, #1
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	441a      	add	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	22ff      	movs	r2, #255	@ 0xff
 8005ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	22ff      	movs	r2, #255	@ 0xff
 8005bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d114      	bne.n	8005be0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01a      	beq.n	8005bf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 fd04 	bl	80075d0 <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d012      	beq.n	8005bf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <xQueueGenericReset+0xd0>)
 8005bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	e009      	b.n	8005bf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3310      	adds	r3, #16
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fef1 	bl	80059cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3324      	adds	r3, #36	@ 0x24
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff feec 	bl	80059cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bf4:	f002 fd5a 	bl	80086ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bf8:	2301      	movs	r3, #1
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08e      	sub	sp, #56	@ 0x38
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10b      	bne.n	8005c34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c2e:	bf00      	nop
 8005c30:	bf00      	nop
 8005c32:	e7fd      	b.n	8005c30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <xQueueGenericCreateStatic+0x56>
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <xQueueGenericCreateStatic+0x5a>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <xQueueGenericCreateStatic+0x5c>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10b      	bne.n	8005c80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	623b      	str	r3, [r7, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	e7fd      	b.n	8005c7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <xQueueGenericCreateStatic+0x84>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <xQueueGenericCreateStatic+0x88>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <xQueueGenericCreateStatic+0x8a>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	61fb      	str	r3, [r7, #28]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cae:	2350      	movs	r3, #80	@ 0x50
 8005cb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b50      	cmp	r3, #80	@ 0x50
 8005cb6:	d00b      	beq.n	8005cd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	61bb      	str	r3, [r7, #24]
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00d      	beq.n	8005cf8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ce4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	4613      	mov	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f840 	bl	8005d78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3730      	adds	r7, #48	@ 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b08a      	sub	sp, #40	@ 0x28
 8005d06:	af02      	add	r7, sp, #8
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	613b      	str	r3, [r7, #16]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	3350      	adds	r3, #80	@ 0x50
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f002 fda5 	bl	800888c <pvPortMalloc>
 8005d42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d011      	beq.n	8005d6e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	3350      	adds	r3, #80	@ 0x50
 8005d52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d5c:	79fa      	ldrb	r2, [r7, #7]
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	4613      	mov	r3, r2
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f805 	bl	8005d78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
	}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e002      	b.n	8005d9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005da6:	2101      	movs	r1, #1
 8005da8:	69b8      	ldr	r0, [r7, #24]
 8005daa:	f7ff fec3 	bl	8005b34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00e      	beq.n	8005dea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005dde:	2300      	movs	r3, #0
 8005de0:	2200      	movs	r2, #0
 8005de2:	2100      	movs	r1, #0
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f911 	bl	800600c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b086      	sub	sp, #24
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	4603      	mov	r3, r0
 8005dfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	461a      	mov	r2, r3
 8005e08:	6939      	ldr	r1, [r7, #16]
 8005e0a:	6978      	ldr	r0, [r7, #20]
 8005e0c:	f7ff ff79 	bl	8005d02 <xQueueGenericCreate>
 8005e10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f7ff ffd3 	bl	8005dbe <prvInitialiseMutex>

		return xNewQueue;
 8005e18:	68fb      	ldr	r3, [r7, #12]
	}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b088      	sub	sp, #32
 8005e26:	af02      	add	r7, sp, #8
 8005e28:	4603      	mov	r3, r0
 8005e2a:	6039      	str	r1, [r7, #0]
 8005e2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	6939      	ldr	r1, [r7, #16]
 8005e40:	6978      	ldr	r0, [r7, #20]
 8005e42:	f7ff fee1 	bl	8005c08 <xQueueGenericCreateStatic>
 8005e46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f7ff ffb8 	bl	8005dbe <prvInitialiseMutex>

		return xNewQueue;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
	}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	60fb      	str	r3, [r7, #12]
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	e7fd      	b.n	8005e7e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	689c      	ldr	r4, [r3, #8]
 8005e86:	f001 fd63 	bl	8007950 <xTaskGetCurrentTaskHandle>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	d111      	bne.n	8005eb4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	1e5a      	subs	r2, r3, #1
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	6938      	ldr	r0, [r7, #16]
 8005eaa:	f000 f8af 	bl	800600c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	e001      	b.n	8005eb8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005eb8:	697b      	ldr	r3, [r7, #20]
	}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd90      	pop	{r4, r7, pc}

08005ec2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005ec2:	b590      	push	{r4, r7, lr}
 8005ec4:	b087      	sub	sp, #28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	60fb      	str	r3, [r7, #12]
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	689c      	ldr	r4, [r3, #8]
 8005ef2:	f001 fd2d 	bl	8007950 <xTaskGetCurrentTaskHandle>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	429c      	cmp	r4, r3
 8005efa:	d107      	bne.n	8005f0c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005f06:	2301      	movs	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e00c      	b.n	8005f26 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	6938      	ldr	r0, [r7, #16]
 8005f10:	f000 fb8e 	bl	8006630 <xQueueSemaphoreTake>
 8005f14:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005f26:	697b      	ldr	r3, [r7, #20]
	}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd90      	pop	{r4, r7, pc}

08005f30 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	@ 0x28
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10b      	bne.n	8005f5a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	61bb      	str	r3, [r7, #24]
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop
 8005f58:	e7fd      	b.n	8005f56 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d90b      	bls.n	8005f7a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	617b      	str	r3, [r7, #20]
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	e7fd      	b.n	8005f76 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	2100      	movs	r1, #0
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fe3f 	bl	8005c08 <xQueueGenericCreateStatic>
 8005f8a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f98:	69fb      	ldr	r3, [r7, #28]
	}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b086      	sub	sp, #24
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	613b      	str	r3, [r7, #16]
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d90b      	bls.n	8005fea <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	60fb      	str	r3, [r7, #12]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005fea:	2202      	movs	r2, #2
 8005fec:	2100      	movs	r1, #0
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff fe87 	bl	8005d02 <xQueueGenericCreate>
 8005ff4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006002:	697b      	ldr	r3, [r7, #20]
	}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08e      	sub	sp, #56	@ 0x38
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800601a:	2300      	movs	r3, #0
 800601c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <xQueueGenericSend+0x34>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <xQueueGenericSend+0x42>
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <xQueueGenericSend+0x46>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <xQueueGenericSend+0x48>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <xQueueGenericSend+0x64>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	e7fd      	b.n	800606c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d103      	bne.n	800607e <xQueueGenericSend+0x72>
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <xQueueGenericSend+0x76>
 800607e:	2301      	movs	r3, #1
 8006080:	e000      	b.n	8006084 <xQueueGenericSend+0x78>
 8006082:	2300      	movs	r3, #0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <xQueueGenericSend+0x94>
	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	623b      	str	r3, [r7, #32]
}
 800609a:	bf00      	nop
 800609c:	bf00      	nop
 800609e:	e7fd      	b.n	800609c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060a0:	f001 fc66 	bl	8007970 <xTaskGetSchedulerState>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <xQueueGenericSend+0xa4>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <xQueueGenericSend+0xa8>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <xQueueGenericSend+0xaa>
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <xQueueGenericSend+0xc6>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	61fb      	str	r3, [r7, #28]
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	e7fd      	b.n	80060ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060d2:	f002 fab9 	bl	8008648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060de:	429a      	cmp	r2, r3
 80060e0:	d302      	bcc.n	80060e8 <xQueueGenericSend+0xdc>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d129      	bne.n	800613c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060ee:	f000 fc6d 	bl	80069cc <prvCopyDataToQueue>
 80060f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d010      	beq.n	800611e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fe:	3324      	adds	r3, #36	@ 0x24
 8006100:	4618      	mov	r0, r3
 8006102:	f001 fa65 	bl	80075d0 <xTaskRemoveFromEventList>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d013      	beq.n	8006134 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800610c:	4b3f      	ldr	r3, [pc, #252]	@ (800620c <xQueueGenericSend+0x200>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	e00a      	b.n	8006134 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800611e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006124:	4b39      	ldr	r3, [pc, #228]	@ (800620c <xQueueGenericSend+0x200>)
 8006126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006134:	f002 faba 	bl	80086ac <vPortExitCritical>
				return pdPASS;
 8006138:	2301      	movs	r3, #1
 800613a:	e063      	b.n	8006204 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d103      	bne.n	800614a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006142:	f002 fab3 	bl	80086ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006146:	2300      	movs	r3, #0
 8006148:	e05c      	b.n	8006204 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800614a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614c:	2b00      	cmp	r3, #0
 800614e:	d106      	bne.n	800615e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006150:	f107 0314 	add.w	r3, r7, #20
 8006154:	4618      	mov	r0, r3
 8006156:	f001 fa9f 	bl	8007698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800615a:	2301      	movs	r3, #1
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800615e:	f002 faa5 	bl	80086ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006162:	f001 f80f 	bl	8007184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006166:	f002 fa6f 	bl	8008648 <vPortEnterCritical>
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006170:	b25b      	sxtb	r3, r3
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d103      	bne.n	8006180 <xQueueGenericSend+0x174>
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006186:	b25b      	sxtb	r3, r3
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618c:	d103      	bne.n	8006196 <xQueueGenericSend+0x18a>
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006196:	f002 fa89 	bl	80086ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800619a:	1d3a      	adds	r2, r7, #4
 800619c:	f107 0314 	add.w	r3, r7, #20
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fa8e 	bl	80076c4 <xTaskCheckForTimeOut>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d124      	bne.n	80061f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061b0:	f000 fd04 	bl	8006bbc <prvIsQueueFull>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d018      	beq.n	80061ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	3310      	adds	r3, #16
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	4611      	mov	r1, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 f9b2 	bl	800752c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061ca:	f000 fc8f 	bl	8006aec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061ce:	f000 ffe7 	bl	80071a0 <xTaskResumeAll>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f47f af7c 	bne.w	80060d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80061da:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <xQueueGenericSend+0x200>)
 80061dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	e772      	b.n	80060d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061ee:	f000 fc7d 	bl	8006aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061f2:	f000 ffd5 	bl	80071a0 <xTaskResumeAll>
 80061f6:	e76c      	b.n	80060d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061fa:	f000 fc77 	bl	8006aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061fe:	f000 ffcf 	bl	80071a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006202:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006204:	4618      	mov	r0, r3
 8006206:	3738      	adds	r7, #56	@ 0x38
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b090      	sub	sp, #64	@ 0x40
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10b      	bne.n	8006240 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <xQueueGenericSendFromISR+0x3e>
 8006246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <xQueueGenericSendFromISR+0x42>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <xQueueGenericSendFromISR+0x44>
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10b      	bne.n	8006270 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800626a:	bf00      	nop
 800626c:	bf00      	nop
 800626e:	e7fd      	b.n	800626c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d103      	bne.n	800627e <xQueueGenericSendFromISR+0x6e>
 8006276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <xQueueGenericSendFromISR+0x72>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <xQueueGenericSendFromISR+0x74>
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10b      	bne.n	80062a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	623b      	str	r3, [r7, #32]
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	e7fd      	b.n	800629c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062a0:	f002 fab2 	bl	8008808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062a4:	f3ef 8211 	mrs	r2, BASEPRI
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	61fa      	str	r2, [r7, #28]
 80062ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d302      	bcc.n	80062d2 <xQueueGenericSendFromISR+0xc2>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d12f      	bne.n	8006332 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062e8:	f000 fb70 	bl	80069cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d112      	bne.n	800631c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d016      	beq.n	800632c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006300:	3324      	adds	r3, #36	@ 0x24
 8006302:	4618      	mov	r0, r3
 8006304:	f001 f964 	bl	80075d0 <xTaskRemoveFromEventList>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00e      	beq.n	800632c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e007      	b.n	800632c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800631c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006320:	3301      	adds	r3, #1
 8006322:	b2db      	uxtb	r3, r3
 8006324:	b25a      	sxtb	r2, r3
 8006326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800632c:	2301      	movs	r3, #1
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006330:	e001      	b.n	8006336 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006332:	2300      	movs	r3, #0
 8006334:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006338:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006340:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006344:	4618      	mov	r0, r3
 8006346:	3740      	adds	r7, #64	@ 0x40
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08e      	sub	sp, #56	@ 0x38
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	623b      	str	r3, [r7, #32]
}
 8006372:	bf00      	nop
 8006374:	bf00      	nop
 8006376:	e7fd      	b.n	8006374 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	61fb      	str	r3, [r7, #28]
}
 8006392:	bf00      	nop
 8006394:	bf00      	nop
 8006396:	e7fd      	b.n	8006394 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d103      	bne.n	80063a8 <xQueueGiveFromISR+0x5c>
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <xQueueGiveFromISR+0x60>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <xQueueGiveFromISR+0x62>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <xQueueGiveFromISR+0x7e>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	61bb      	str	r3, [r7, #24]
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	e7fd      	b.n	80063c6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063ca:	f002 fa1d 	bl	8008808 <vPortValidateInterruptPriority>
	__asm volatile
 80063ce:	f3ef 8211 	mrs	r2, BASEPRI
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	617a      	str	r2, [r7, #20]
 80063e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80063e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d22b      	bcs.n	8006452 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800640c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d112      	bne.n	800643c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d016      	beq.n	800644c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	3324      	adds	r3, #36	@ 0x24
 8006422:	4618      	mov	r0, r3
 8006424:	f001 f8d4 	bl	80075d0 <xTaskRemoveFromEventList>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00e      	beq.n	800644c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e007      	b.n	800644c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800643c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006440:	3301      	adds	r3, #1
 8006442:	b2db      	uxtb	r3, r3
 8006444:	b25a      	sxtb	r2, r3
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800644c:	2301      	movs	r3, #1
 800644e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006450:	e001      	b.n	8006456 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006452:	2300      	movs	r3, #0
 8006454:	637b      	str	r3, [r7, #52]	@ 0x34
 8006456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006458:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f383 8811 	msr	BASEPRI, r3
}
 8006460:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006464:	4618      	mov	r0, r3
 8006466:	3738      	adds	r7, #56	@ 0x38
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	@ 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <xQueueReceive+0x32>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	623b      	str	r3, [r7, #32]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d103      	bne.n	80064ac <xQueueReceive+0x40>
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <xQueueReceive+0x44>
 80064ac:	2301      	movs	r3, #1
 80064ae:	e000      	b.n	80064b2 <xQueueReceive+0x46>
 80064b0:	2300      	movs	r3, #0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <xQueueReceive+0x62>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	61fb      	str	r3, [r7, #28]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064ce:	f001 fa4f 	bl	8007970 <xTaskGetSchedulerState>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <xQueueReceive+0x72>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <xQueueReceive+0x76>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <xQueueReceive+0x78>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <xQueueReceive+0x94>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	61bb      	str	r3, [r7, #24]
}
 80064fa:	bf00      	nop
 80064fc:	bf00      	nop
 80064fe:	e7fd      	b.n	80064fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006500:	f002 f8a2 	bl	8008648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	2b00      	cmp	r3, #0
 800650e:	d01f      	beq.n	8006550 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006514:	f000 fac4 	bl	8006aa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651a:	1e5a      	subs	r2, r3, #1
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00f      	beq.n	8006548 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652a:	3310      	adds	r3, #16
 800652c:	4618      	mov	r0, r3
 800652e:	f001 f84f 	bl	80075d0 <xTaskRemoveFromEventList>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006538:	4b3c      	ldr	r3, [pc, #240]	@ (800662c <xQueueReceive+0x1c0>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006548:	f002 f8b0 	bl	80086ac <vPortExitCritical>
				return pdPASS;
 800654c:	2301      	movs	r3, #1
 800654e:	e069      	b.n	8006624 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d103      	bne.n	800655e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006556:	f002 f8a9 	bl	80086ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800655a:	2300      	movs	r3, #0
 800655c:	e062      	b.n	8006624 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800655e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006564:	f107 0310 	add.w	r3, r7, #16
 8006568:	4618      	mov	r0, r3
 800656a:	f001 f895 	bl	8007698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800656e:	2301      	movs	r3, #1
 8006570:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006572:	f002 f89b 	bl	80086ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006576:	f000 fe05 	bl	8007184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800657a:	f002 f865 	bl	8008648 <vPortEnterCritical>
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006584:	b25b      	sxtb	r3, r3
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d103      	bne.n	8006594 <xQueueReceive+0x128>
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006596:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800659a:	b25b      	sxtb	r3, r3
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d103      	bne.n	80065aa <xQueueReceive+0x13e>
 80065a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065aa:	f002 f87f 	bl	80086ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ae:	1d3a      	adds	r2, r7, #4
 80065b0:	f107 0310 	add.w	r3, r7, #16
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 f884 	bl	80076c4 <xTaskCheckForTimeOut>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d123      	bne.n	800660a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065c4:	f000 fae4 	bl	8006b90 <prvIsQueueEmpty>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d017      	beq.n	80065fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	3324      	adds	r3, #36	@ 0x24
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 ffa8 	bl	800752c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065de:	f000 fa85 	bl	8006aec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065e2:	f000 fddd 	bl	80071a0 <xTaskResumeAll>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d189      	bne.n	8006500 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80065ec:	4b0f      	ldr	r3, [pc, #60]	@ (800662c <xQueueReceive+0x1c0>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	e780      	b.n	8006500 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006600:	f000 fa74 	bl	8006aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006604:	f000 fdcc 	bl	80071a0 <xTaskResumeAll>
 8006608:	e77a      	b.n	8006500 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800660a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800660c:	f000 fa6e 	bl	8006aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006610:	f000 fdc6 	bl	80071a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006616:	f000 fabb 	bl	8006b90 <prvIsQueueEmpty>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	f43f af6f 	beq.w	8006500 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006622:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006624:	4618      	mov	r0, r3
 8006626:	3730      	adds	r7, #48	@ 0x30
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08e      	sub	sp, #56	@ 0x38
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006642:	2300      	movs	r3, #0
 8006644:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10b      	bne.n	8006664 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	623b      	str	r3, [r7, #32]
}
 800665e:	bf00      	nop
 8006660:	bf00      	nop
 8006662:	e7fd      	b.n	8006660 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00b      	beq.n	8006684 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	61fb      	str	r3, [r7, #28]
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	e7fd      	b.n	8006680 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006684:	f001 f974 	bl	8007970 <xTaskGetSchedulerState>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <xQueueSemaphoreTake+0x64>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <xQueueSemaphoreTake+0x68>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <xQueueSemaphoreTake+0x6a>
 8006698:	2300      	movs	r3, #0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	61bb      	str	r3, [r7, #24]
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	e7fd      	b.n	80066b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066b6:	f001 ffc7 	bl	8008648 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d024      	beq.n	8006710 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c8:	1e5a      	subs	r2, r3, #1
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80066d6:	f001 fac5 	bl	8007c64 <pvTaskIncrementMutexHeldCount>
 80066da:	4602      	mov	r2, r0
 80066dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00f      	beq.n	8006708 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ea:	3310      	adds	r3, #16
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 ff6f 	bl	80075d0 <xTaskRemoveFromEventList>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066f8:	4b54      	ldr	r3, [pc, #336]	@ (800684c <xQueueSemaphoreTake+0x21c>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006708:	f001 ffd0 	bl	80086ac <vPortExitCritical>
				return pdPASS;
 800670c:	2301      	movs	r3, #1
 800670e:	e098      	b.n	8006842 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d112      	bne.n	800673c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	617b      	str	r3, [r7, #20]
}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	e7fd      	b.n	8006730 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006734:	f001 ffba 	bl	80086ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006738:	2300      	movs	r3, #0
 800673a:	e082      	b.n	8006842 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800673c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006742:	f107 030c 	add.w	r3, r7, #12
 8006746:	4618      	mov	r0, r3
 8006748:	f000 ffa6 	bl	8007698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800674c:	2301      	movs	r3, #1
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006750:	f001 ffac 	bl	80086ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006754:	f000 fd16 	bl	8007184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006758:	f001 ff76 	bl	8008648 <vPortEnterCritical>
 800675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006762:	b25b      	sxtb	r3, r3
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d103      	bne.n	8006772 <xQueueSemaphoreTake+0x142>
 800676a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006778:	b25b      	sxtb	r3, r3
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d103      	bne.n	8006788 <xQueueSemaphoreTake+0x158>
 8006780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006788:	f001 ff90 	bl	80086ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800678c:	463a      	mov	r2, r7
 800678e:	f107 030c 	add.w	r3, r7, #12
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f000 ff95 	bl	80076c4 <xTaskCheckForTimeOut>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d132      	bne.n	8006806 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067a2:	f000 f9f5 	bl	8006b90 <prvIsQueueEmpty>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d026      	beq.n	80067fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80067b4:	f001 ff48 	bl	8008648 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 f8f5 	bl	80079ac <xTaskPriorityInherit>
 80067c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80067c4:	f001 ff72 	bl	80086ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ca:	3324      	adds	r3, #36	@ 0x24
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	4611      	mov	r1, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 feab 	bl	800752c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067d8:	f000 f988 	bl	8006aec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067dc:	f000 fce0 	bl	80071a0 <xTaskResumeAll>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f47f af67 	bne.w	80066b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80067e8:	4b18      	ldr	r3, [pc, #96]	@ (800684c <xQueueSemaphoreTake+0x21c>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	e75d      	b.n	80066b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80067fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067fc:	f000 f976 	bl	8006aec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006800:	f000 fcce 	bl	80071a0 <xTaskResumeAll>
 8006804:	e757      	b.n	80066b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006806:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006808:	f000 f970 	bl	8006aec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800680c:	f000 fcc8 	bl	80071a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006812:	f000 f9bd 	bl	8006b90 <prvIsQueueEmpty>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	f43f af4c 	beq.w	80066b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00d      	beq.n	8006840 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006824:	f001 ff10 	bl	8008648 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006828:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800682a:	f000 f8b7 	bl	800699c <prvGetDisinheritPriorityAfterTimeout>
 800682e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006836:	4618      	mov	r0, r3
 8006838:	f001 f990 	bl	8007b5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800683c:	f001 ff36 	bl	80086ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006842:	4618      	mov	r0, r3
 8006844:	3738      	adds	r7, #56	@ 0x38
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08e      	sub	sp, #56	@ 0x38
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10b      	bne.n	800687e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	623b      	str	r3, [r7, #32]
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	e7fd      	b.n	800687a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <xQueueReceiveFromISR+0x3c>
 8006884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <xQueueReceiveFromISR+0x40>
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <xQueueReceiveFromISR+0x42>
 8006890:	2300      	movs	r3, #0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10b      	bne.n	80068ae <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	61fb      	str	r3, [r7, #28]
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	e7fd      	b.n	80068aa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068ae:	f001 ffab 	bl	8008808 <vPortValidateInterruptPriority>
	__asm volatile
 80068b2:	f3ef 8211 	mrs	r2, BASEPRI
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	61ba      	str	r2, [r7, #24]
 80068c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80068ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d02f      	beq.n	800693a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068e8:	f000 f8da 	bl	8006aa0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	1e5a      	subs	r2, r3, #1
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80068f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fc:	d112      	bne.n	8006924 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d016      	beq.n	8006934 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	3310      	adds	r3, #16
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fe60 	bl	80075d0 <xTaskRemoveFromEventList>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00e      	beq.n	8006934 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	e007      	b.n	8006934 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006928:	3301      	adds	r3, #1
 800692a:	b2db      	uxtb	r3, r3
 800692c:	b25a      	sxtb	r2, r3
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006934:	2301      	movs	r3, #1
 8006936:	637b      	str	r3, [r7, #52]	@ 0x34
 8006938:	e001      	b.n	800693e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800693a:	2300      	movs	r3, #0
 800693c:	637b      	str	r3, [r7, #52]	@ 0x34
 800693e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006940:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f383 8811 	msr	BASEPRI, r3
}
 8006948:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800694a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800694c:	4618      	mov	r0, r3
 800694e:	3738      	adds	r7, #56	@ 0x38
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <vQueueDelete+0x2a>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60bb      	str	r3, [r7, #8]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f95e 	bl	8006c40 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f002 f84a 	bl	8008a28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d006      	beq.n	80069ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	e001      	b.n	80069be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80069be:	68fb      	ldr	r3, [r7, #12]
	}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10d      	bne.n	8006a06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d14d      	bne.n	8006a8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 f840 	bl	8007a7c <xTaskPriorityDisinherit>
 80069fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	609a      	str	r2, [r3, #8]
 8006a04:	e043      	b.n	8006a8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d119      	bne.n	8006a40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6858      	ldr	r0, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	461a      	mov	r2, r3
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	f002 f952 	bl	8008cc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a24:	441a      	add	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d32b      	bcc.n	8006a8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	605a      	str	r2, [r3, #4]
 8006a3e:	e026      	b.n	8006a8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68d8      	ldr	r0, [r3, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a48:	461a      	mov	r2, r3
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	f002 f938 	bl	8008cc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a58:	425b      	negs	r3, r3
 8006a5a:	441a      	add	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d207      	bcs.n	8006a7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a74:	425b      	negs	r3, r3
 8006a76:	441a      	add	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d105      	bne.n	8006a8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006a96:	697b      	ldr	r3, [r7, #20]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d018      	beq.n	8006ae4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	441a      	add	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68da      	ldr	r2, [r3, #12]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d303      	bcc.n	8006ad4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68d9      	ldr	r1, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006adc:	461a      	mov	r2, r3
 8006ade:	6838      	ldr	r0, [r7, #0]
 8006ae0:	f002 f8ee 	bl	8008cc0 <memcpy>
	}
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006af4:	f001 fda8 	bl	8008648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006afe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b00:	e011      	b.n	8006b26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d012      	beq.n	8006b30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3324      	adds	r3, #36	@ 0x24
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fd5e 	bl	80075d0 <xTaskRemoveFromEventList>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b1a:	f000 fe37 	bl	800778c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dce9      	bgt.n	8006b02 <prvUnlockQueue+0x16>
 8006b2e:	e000      	b.n	8006b32 <prvUnlockQueue+0x46>
					break;
 8006b30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	22ff      	movs	r2, #255	@ 0xff
 8006b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006b3a:	f001 fdb7 	bl	80086ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b3e:	f001 fd83 	bl	8008648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b4a:	e011      	b.n	8006b70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d012      	beq.n	8006b7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3310      	adds	r3, #16
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fd39 	bl	80075d0 <xTaskRemoveFromEventList>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b64:	f000 fe12 	bl	800778c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dce9      	bgt.n	8006b4c <prvUnlockQueue+0x60>
 8006b78:	e000      	b.n	8006b7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	22ff      	movs	r2, #255	@ 0xff
 8006b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006b84:	f001 fd92 	bl	80086ac <vPortExitCritical>
}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b98:	f001 fd56 	bl	8008648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	e001      	b.n	8006bae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bae:	f001 fd7d 	bl	80086ac <vPortExitCritical>

	return xReturn;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bc4:	f001 fd40 	bl	8008648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d102      	bne.n	8006bda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e001      	b.n	8006bde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bde:	f001 fd65 	bl	80086ac <vPortExitCritical>

	return xReturn;
 8006be2:	68fb      	ldr	r3, [r7, #12]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	e014      	b.n	8006c26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8006c3c <vQueueAddToRegistry+0x50>)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10b      	bne.n	8006c20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c08:	490c      	ldr	r1, [pc, #48]	@ (8006c3c <vQueueAddToRegistry+0x50>)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c12:	4a0a      	ldr	r2, [pc, #40]	@ (8006c3c <vQueueAddToRegistry+0x50>)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	4413      	add	r3, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c1e:	e006      	b.n	8006c2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b07      	cmp	r3, #7
 8006c2a:	d9e7      	bls.n	8006bfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20000e70 	.word	0x20000e70

08006c40 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c48:	2300      	movs	r3, #0
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e016      	b.n	8006c7c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006c4e:	4a10      	ldr	r2, [pc, #64]	@ (8006c90 <vQueueUnregisterQueue+0x50>)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	4413      	add	r3, r2
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d10b      	bne.n	8006c76 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006c90 <vQueueUnregisterQueue+0x50>)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2100      	movs	r1, #0
 8006c64:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006c68:	4a09      	ldr	r2, [pc, #36]	@ (8006c90 <vQueueUnregisterQueue+0x50>)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	4413      	add	r3, r2
 8006c70:	2200      	movs	r2, #0
 8006c72:	605a      	str	r2, [r3, #4]
				break;
 8006c74:	e006      	b.n	8006c84 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b07      	cmp	r3, #7
 8006c80:	d9e5      	bls.n	8006c4e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20000e70 	.word	0x20000e70

08006c94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ca4:	f001 fcd0 	bl	8008648 <vPortEnterCritical>
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cae:	b25b      	sxtb	r3, r3
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb4:	d103      	bne.n	8006cbe <vQueueWaitForMessageRestricted+0x2a>
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cc4:	b25b      	sxtb	r3, r3
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d103      	bne.n	8006cd4 <vQueueWaitForMessageRestricted+0x40>
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cd4:	f001 fcea 	bl	80086ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d106      	bne.n	8006cee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	3324      	adds	r3, #36	@ 0x24
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fc45 	bl	8007578 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006cee:	6978      	ldr	r0, [r7, #20]
 8006cf0:	f7ff fefc 	bl	8006aec <prvUnlockQueue>
	}
 8006cf4:	bf00      	nop
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	@ 0x38
 8006d00:	af04      	add	r7, sp, #16
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	623b      	str	r3, [r7, #32]
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	61fb      	str	r3, [r7, #28]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d46:	235c      	movs	r3, #92	@ 0x5c
 8006d48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d4e:	d00b      	beq.n	8006d68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	61bb      	str	r3, [r7, #24]
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01e      	beq.n	8006dae <xTaskCreateStatic+0xb2>
 8006d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01b      	beq.n	8006dae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9303      	str	r3, [sp, #12]
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	9302      	str	r3, [sp, #8]
 8006d90:	f107 0314 	add.w	r3, r7, #20
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f850 	bl	8006e46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006da6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006da8:	f000 f8de 	bl	8006f68 <prvAddNewTaskToReadyList>
 8006dac:	e001      	b.n	8006db2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006db2:	697b      	ldr	r3, [r7, #20]
	}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3728      	adds	r7, #40	@ 0x28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08c      	sub	sp, #48	@ 0x30
 8006dc0:	af04      	add	r7, sp, #16
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 fd5b 	bl	800888c <pvPortMalloc>
 8006dd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00e      	beq.n	8006dfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006dde:	205c      	movs	r0, #92	@ 0x5c
 8006de0:	f001 fd54 	bl	800888c <pvPortMalloc>
 8006de4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006df2:	e005      	b.n	8006e00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006df4:	6978      	ldr	r0, [r7, #20]
 8006df6:	f001 fe17 	bl	8008a28 <vPortFree>
 8006dfa:	e001      	b.n	8006e00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d017      	beq.n	8006e36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e0e:	88fa      	ldrh	r2, [r7, #6]
 8006e10:	2300      	movs	r3, #0
 8006e12:	9303      	str	r3, [sp, #12]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	9302      	str	r3, [sp, #8]
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f80e 	bl	8006e46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e2a:	69f8      	ldr	r0, [r7, #28]
 8006e2c:	f000 f89c 	bl	8006f68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e30:	2301      	movs	r3, #1
 8006e32:	61bb      	str	r3, [r7, #24]
 8006e34:	e002      	b.n	8006e3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e36:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
	}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3720      	adds	r7, #32
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
 8006e52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	21a5      	movs	r1, #165	@ 0xa5
 8006e60:	f001 ff02 	bl	8008c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f023 0307 	bic.w	r3, r3, #7
 8006e7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	617b      	str	r3, [r7, #20]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01f      	beq.n	8006ee6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	e012      	b.n	8006ed2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	7819      	ldrb	r1, [r3, #0]
 8006eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	4413      	add	r3, r2
 8006eba:	3334      	adds	r3, #52	@ 0x34
 8006ebc:	460a      	mov	r2, r1
 8006ebe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d006      	beq.n	8006eda <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	2b0f      	cmp	r3, #15
 8006ed6:	d9e9      	bls.n	8006eac <prvInitialiseNewTask+0x66>
 8006ed8:	e000      	b.n	8006edc <prvInitialiseNewTask+0x96>
			{
				break;
 8006eda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ee4:	e003      	b.n	8006eee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef0:	2b37      	cmp	r3, #55	@ 0x37
 8006ef2:	d901      	bls.n	8006ef8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ef4:	2337      	movs	r3, #55	@ 0x37
 8006ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006efc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f02:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	2200      	movs	r2, #0
 8006f08:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fd7c 	bl	8005a0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	3318      	adds	r3, #24
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fe fd77 	bl	8005a0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f32:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	2200      	movs	r2, #0
 8006f38:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	68f9      	ldr	r1, [r7, #12]
 8006f46:	69b8      	ldr	r0, [r7, #24]
 8006f48:	f001 fa4e 	bl	80083e8 <pxPortInitialiseStack>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f5e:	bf00      	nop
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f70:	f001 fb6a 	bl	8008648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f74:	4b2d      	ldr	r3, [pc, #180]	@ (800702c <prvAddNewTaskToReadyList+0xc4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800702c <prvAddNewTaskToReadyList+0xc4>)
 8006f7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8007030 <prvAddNewTaskToReadyList+0xc8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d109      	bne.n	8006f9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f86:	4a2a      	ldr	r2, [pc, #168]	@ (8007030 <prvAddNewTaskToReadyList+0xc8>)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f8c:	4b27      	ldr	r3, [pc, #156]	@ (800702c <prvAddNewTaskToReadyList+0xc4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d110      	bne.n	8006fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f94:	f000 fc1e 	bl	80077d4 <prvInitialiseTaskLists>
 8006f98:	e00d      	b.n	8006fb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f9a:	4b26      	ldr	r3, [pc, #152]	@ (8007034 <prvAddNewTaskToReadyList+0xcc>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fa2:	4b23      	ldr	r3, [pc, #140]	@ (8007030 <prvAddNewTaskToReadyList+0xc8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d802      	bhi.n	8006fb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8007030 <prvAddNewTaskToReadyList+0xc8>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fb6:	4b20      	ldr	r3, [pc, #128]	@ (8007038 <prvAddNewTaskToReadyList+0xd0>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8007038 <prvAddNewTaskToReadyList+0xd0>)
 8006fbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8007038 <prvAddNewTaskToReadyList+0xd0>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800703c <prvAddNewTaskToReadyList+0xd4>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d903      	bls.n	8006fdc <prvAddNewTaskToReadyList+0x74>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd8:	4a18      	ldr	r2, [pc, #96]	@ (800703c <prvAddNewTaskToReadyList+0xd4>)
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4a15      	ldr	r2, [pc, #84]	@ (8007040 <prvAddNewTaskToReadyList+0xd8>)
 8006fea:	441a      	add	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	f7fe fd17 	bl	8005a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ff8:	f001 fb58 	bl	80086ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <prvAddNewTaskToReadyList+0xcc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00e      	beq.n	8007022 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007004:	4b0a      	ldr	r3, [pc, #40]	@ (8007030 <prvAddNewTaskToReadyList+0xc8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700e:	429a      	cmp	r2, r3
 8007010:	d207      	bcs.n	8007022 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007012:	4b0c      	ldr	r3, [pc, #48]	@ (8007044 <prvAddNewTaskToReadyList+0xdc>)
 8007014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20001384 	.word	0x20001384
 8007030:	20000eb0 	.word	0x20000eb0
 8007034:	20001390 	.word	0x20001390
 8007038:	200013a0 	.word	0x200013a0
 800703c:	2000138c 	.word	0x2000138c
 8007040:	20000eb4 	.word	0x20000eb4
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d018      	beq.n	800708c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800705a:	4b14      	ldr	r3, [pc, #80]	@ (80070ac <vTaskDelay+0x64>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <vTaskDelay+0x32>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	60bb      	str	r3, [r7, #8]
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop
 8007078:	e7fd      	b.n	8007076 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800707a:	f000 f883 	bl	8007184 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800707e:	2100      	movs	r1, #0
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fe03 	bl	8007c8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007086:	f000 f88b 	bl	80071a0 <xTaskResumeAll>
 800708a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d107      	bne.n	80070a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007092:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <vTaskDelay+0x68>)
 8007094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200013ac 	.word	0x200013ac
 80070b0:	e000ed04 	.word	0xe000ed04

080070b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08a      	sub	sp, #40	@ 0x28
 80070b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070c2:	463a      	mov	r2, r7
 80070c4:	1d39      	adds	r1, r7, #4
 80070c6:	f107 0308 	add.w	r3, r7, #8
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fc4a 	bl	8005964 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	9202      	str	r2, [sp, #8]
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	2300      	movs	r3, #0
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	2300      	movs	r3, #0
 80070e0:	460a      	mov	r2, r1
 80070e2:	4922      	ldr	r1, [pc, #136]	@ (800716c <vTaskStartScheduler+0xb8>)
 80070e4:	4822      	ldr	r0, [pc, #136]	@ (8007170 <vTaskStartScheduler+0xbc>)
 80070e6:	f7ff fe09 	bl	8006cfc <xTaskCreateStatic>
 80070ea:	4603      	mov	r3, r0
 80070ec:	4a21      	ldr	r2, [pc, #132]	@ (8007174 <vTaskStartScheduler+0xc0>)
 80070ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070f0:	4b20      	ldr	r3, [pc, #128]	@ (8007174 <vTaskStartScheduler+0xc0>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070f8:	2301      	movs	r3, #1
 80070fa:	617b      	str	r3, [r7, #20]
 80070fc:	e001      	b.n	8007102 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d102      	bne.n	800710e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007108:	f000 fe14 	bl	8007d34 <xTimerCreateTimerTask>
 800710c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d116      	bne.n	8007142 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	613b      	str	r3, [r7, #16]
}
 8007126:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007128:	4b13      	ldr	r3, [pc, #76]	@ (8007178 <vTaskStartScheduler+0xc4>)
 800712a:	f04f 32ff 	mov.w	r2, #4294967295
 800712e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007130:	4b12      	ldr	r3, [pc, #72]	@ (800717c <vTaskStartScheduler+0xc8>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007136:	4b12      	ldr	r3, [pc, #72]	@ (8007180 <vTaskStartScheduler+0xcc>)
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800713c:	f001 f9e0 	bl	8008500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007140:	e00f      	b.n	8007162 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d10b      	bne.n	8007162 <vTaskStartScheduler+0xae>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	60fb      	str	r3, [r7, #12]
}
 800715c:	bf00      	nop
 800715e:	bf00      	nop
 8007160:	e7fd      	b.n	800715e <vTaskStartScheduler+0xaa>
}
 8007162:	bf00      	nop
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	08008d24 	.word	0x08008d24
 8007170:	080077a5 	.word	0x080077a5
 8007174:	200013a8 	.word	0x200013a8
 8007178:	200013a4 	.word	0x200013a4
 800717c:	20001390 	.word	0x20001390
 8007180:	20001388 	.word	0x20001388

08007184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007188:	4b04      	ldr	r3, [pc, #16]	@ (800719c <vTaskSuspendAll+0x18>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3301      	adds	r3, #1
 800718e:	4a03      	ldr	r2, [pc, #12]	@ (800719c <vTaskSuspendAll+0x18>)
 8007190:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007192:	bf00      	nop
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	200013ac 	.word	0x200013ac

080071a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071ae:	4b42      	ldr	r3, [pc, #264]	@ (80072b8 <xTaskResumeAll+0x118>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10b      	bne.n	80071ce <xTaskResumeAll+0x2e>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	603b      	str	r3, [r7, #0]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071ce:	f001 fa3b 	bl	8008648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071d2:	4b39      	ldr	r3, [pc, #228]	@ (80072b8 <xTaskResumeAll+0x118>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	4a37      	ldr	r2, [pc, #220]	@ (80072b8 <xTaskResumeAll+0x118>)
 80071da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071dc:	4b36      	ldr	r3, [pc, #216]	@ (80072b8 <xTaskResumeAll+0x118>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d162      	bne.n	80072aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071e4:	4b35      	ldr	r3, [pc, #212]	@ (80072bc <xTaskResumeAll+0x11c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d05e      	beq.n	80072aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071ec:	e02f      	b.n	800724e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ee:	4b34      	ldr	r3, [pc, #208]	@ (80072c0 <xTaskResumeAll+0x120>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3318      	adds	r3, #24
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fc70 	bl	8005ae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3304      	adds	r3, #4
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fc6b 	bl	8005ae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720e:	4b2d      	ldr	r3, [pc, #180]	@ (80072c4 <xTaskResumeAll+0x124>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d903      	bls.n	800721e <xTaskResumeAll+0x7e>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721a:	4a2a      	ldr	r2, [pc, #168]	@ (80072c4 <xTaskResumeAll+0x124>)
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4a27      	ldr	r2, [pc, #156]	@ (80072c8 <xTaskResumeAll+0x128>)
 800722c:	441a      	add	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3304      	adds	r3, #4
 8007232:	4619      	mov	r1, r3
 8007234:	4610      	mov	r0, r2
 8007236:	f7fe fbf6 	bl	8005a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723e:	4b23      	ldr	r3, [pc, #140]	@ (80072cc <xTaskResumeAll+0x12c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007244:	429a      	cmp	r2, r3
 8007246:	d302      	bcc.n	800724e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007248:	4b21      	ldr	r3, [pc, #132]	@ (80072d0 <xTaskResumeAll+0x130>)
 800724a:	2201      	movs	r2, #1
 800724c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800724e:	4b1c      	ldr	r3, [pc, #112]	@ (80072c0 <xTaskResumeAll+0x120>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1cb      	bne.n	80071ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800725c:	f000 fb58 	bl	8007910 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007260:	4b1c      	ldr	r3, [pc, #112]	@ (80072d4 <xTaskResumeAll+0x134>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d010      	beq.n	800728e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800726c:	f000 f846 	bl	80072fc <xTaskIncrementTick>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007276:	4b16      	ldr	r3, [pc, #88]	@ (80072d0 <xTaskResumeAll+0x130>)
 8007278:	2201      	movs	r2, #1
 800727a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3b01      	subs	r3, #1
 8007280:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f1      	bne.n	800726c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007288:	4b12      	ldr	r3, [pc, #72]	@ (80072d4 <xTaskResumeAll+0x134>)
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800728e:	4b10      	ldr	r3, [pc, #64]	@ (80072d0 <xTaskResumeAll+0x130>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007296:	2301      	movs	r3, #1
 8007298:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800729a:	4b0f      	ldr	r3, [pc, #60]	@ (80072d8 <xTaskResumeAll+0x138>)
 800729c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072aa:	f001 f9ff 	bl	80086ac <vPortExitCritical>

	return xAlreadyYielded;
 80072ae:	68bb      	ldr	r3, [r7, #8]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200013ac 	.word	0x200013ac
 80072bc:	20001384 	.word	0x20001384
 80072c0:	20001344 	.word	0x20001344
 80072c4:	2000138c 	.word	0x2000138c
 80072c8:	20000eb4 	.word	0x20000eb4
 80072cc:	20000eb0 	.word	0x20000eb0
 80072d0:	20001398 	.word	0x20001398
 80072d4:	20001394 	.word	0x20001394
 80072d8:	e000ed04 	.word	0xe000ed04

080072dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072e2:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <xTaskGetTickCount+0x1c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072e8:	687b      	ldr	r3, [r7, #4]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	20001388 	.word	0x20001388

080072fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007306:	4b4f      	ldr	r3, [pc, #316]	@ (8007444 <xTaskIncrementTick+0x148>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f040 8090 	bne.w	8007430 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007310:	4b4d      	ldr	r3, [pc, #308]	@ (8007448 <xTaskIncrementTick+0x14c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3301      	adds	r3, #1
 8007316:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007318:	4a4b      	ldr	r2, [pc, #300]	@ (8007448 <xTaskIncrementTick+0x14c>)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d121      	bne.n	8007368 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007324:	4b49      	ldr	r3, [pc, #292]	@ (800744c <xTaskIncrementTick+0x150>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <xTaskIncrementTick+0x4a>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	603b      	str	r3, [r7, #0]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <xTaskIncrementTick+0x46>
 8007346:	4b41      	ldr	r3, [pc, #260]	@ (800744c <xTaskIncrementTick+0x150>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	4b40      	ldr	r3, [pc, #256]	@ (8007450 <xTaskIncrementTick+0x154>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a3e      	ldr	r2, [pc, #248]	@ (800744c <xTaskIncrementTick+0x150>)
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	4a3e      	ldr	r2, [pc, #248]	@ (8007450 <xTaskIncrementTick+0x154>)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	4b3e      	ldr	r3, [pc, #248]	@ (8007454 <xTaskIncrementTick+0x158>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3301      	adds	r3, #1
 8007360:	4a3c      	ldr	r2, [pc, #240]	@ (8007454 <xTaskIncrementTick+0x158>)
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	f000 fad4 	bl	8007910 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007368:	4b3b      	ldr	r3, [pc, #236]	@ (8007458 <xTaskIncrementTick+0x15c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	429a      	cmp	r2, r3
 8007370:	d349      	bcc.n	8007406 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007372:	4b36      	ldr	r3, [pc, #216]	@ (800744c <xTaskIncrementTick+0x150>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800737c:	4b36      	ldr	r3, [pc, #216]	@ (8007458 <xTaskIncrementTick+0x15c>)
 800737e:	f04f 32ff 	mov.w	r2, #4294967295
 8007382:	601a      	str	r2, [r3, #0]
					break;
 8007384:	e03f      	b.n	8007406 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007386:	4b31      	ldr	r3, [pc, #196]	@ (800744c <xTaskIncrementTick+0x150>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d203      	bcs.n	80073a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800739e:	4a2e      	ldr	r2, [pc, #184]	@ (8007458 <xTaskIncrementTick+0x15c>)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073a4:	e02f      	b.n	8007406 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fb98 	bl	8005ae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d004      	beq.n	80073c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	3318      	adds	r3, #24
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fe fb8f 	bl	8005ae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c6:	4b25      	ldr	r3, [pc, #148]	@ (800745c <xTaskIncrementTick+0x160>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d903      	bls.n	80073d6 <xTaskIncrementTick+0xda>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	4a22      	ldr	r2, [pc, #136]	@ (800745c <xTaskIncrementTick+0x160>)
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007460 <xTaskIncrementTick+0x164>)
 80073e4:	441a      	add	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	3304      	adds	r3, #4
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f7fe fb1a 	bl	8005a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007464 <xTaskIncrementTick+0x168>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d3b8      	bcc.n	8007372 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007404:	e7b5      	b.n	8007372 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007406:	4b17      	ldr	r3, [pc, #92]	@ (8007464 <xTaskIncrementTick+0x168>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800740c:	4914      	ldr	r1, [pc, #80]	@ (8007460 <xTaskIncrementTick+0x164>)
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	440b      	add	r3, r1
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d901      	bls.n	8007422 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800741e:	2301      	movs	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007422:	4b11      	ldr	r3, [pc, #68]	@ (8007468 <xTaskIncrementTick+0x16c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800742a:	2301      	movs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	e004      	b.n	800743a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007430:	4b0e      	ldr	r3, [pc, #56]	@ (800746c <xTaskIncrementTick+0x170>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3301      	adds	r3, #1
 8007436:	4a0d      	ldr	r2, [pc, #52]	@ (800746c <xTaskIncrementTick+0x170>)
 8007438:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800743a:	697b      	ldr	r3, [r7, #20]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	200013ac 	.word	0x200013ac
 8007448:	20001388 	.word	0x20001388
 800744c:	2000133c 	.word	0x2000133c
 8007450:	20001340 	.word	0x20001340
 8007454:	2000139c 	.word	0x2000139c
 8007458:	200013a4 	.word	0x200013a4
 800745c:	2000138c 	.word	0x2000138c
 8007460:	20000eb4 	.word	0x20000eb4
 8007464:	20000eb0 	.word	0x20000eb0
 8007468:	20001398 	.word	0x20001398
 800746c:	20001394 	.word	0x20001394

08007470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007476:	4b28      	ldr	r3, [pc, #160]	@ (8007518 <vTaskSwitchContext+0xa8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800747e:	4b27      	ldr	r3, [pc, #156]	@ (800751c <vTaskSwitchContext+0xac>)
 8007480:	2201      	movs	r2, #1
 8007482:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007484:	e042      	b.n	800750c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007486:	4b25      	ldr	r3, [pc, #148]	@ (800751c <vTaskSwitchContext+0xac>)
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800748c:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <vTaskSwitchContext+0xb0>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	e011      	b.n	80074b8 <vTaskSwitchContext+0x48>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10b      	bne.n	80074b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	607b      	str	r3, [r7, #4]
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <vTaskSwitchContext+0x3e>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	491a      	ldr	r1, [pc, #104]	@ (8007524 <vTaskSwitchContext+0xb4>)
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0e3      	beq.n	8007494 <vTaskSwitchContext+0x24>
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4a13      	ldr	r2, [pc, #76]	@ (8007524 <vTaskSwitchContext+0xb4>)
 80074d8:	4413      	add	r3, r2
 80074da:	60bb      	str	r3, [r7, #8]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	605a      	str	r2, [r3, #4]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	3308      	adds	r3, #8
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d104      	bne.n	80074fc <vTaskSwitchContext+0x8c>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	605a      	str	r2, [r3, #4]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	4a09      	ldr	r2, [pc, #36]	@ (8007528 <vTaskSwitchContext+0xb8>)
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	4a06      	ldr	r2, [pc, #24]	@ (8007520 <vTaskSwitchContext+0xb0>)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6013      	str	r3, [r2, #0]
}
 800750c:	bf00      	nop
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	200013ac 	.word	0x200013ac
 800751c:	20001398 	.word	0x20001398
 8007520:	2000138c 	.word	0x2000138c
 8007524:	20000eb4 	.word	0x20000eb4
 8007528:	20000eb0 	.word	0x20000eb0

0800752c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60fb      	str	r3, [r7, #12]
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007554:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <vTaskPlaceOnEventList+0x48>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3318      	adds	r3, #24
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fe fa86 	bl	8005a6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007562:	2101      	movs	r1, #1
 8007564:	6838      	ldr	r0, [r7, #0]
 8007566:	f000 fb91 	bl	8007c8c <prvAddCurrentTaskToDelayedList>
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20000eb0 	.word	0x20000eb0

08007578 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10b      	bne.n	80075a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	617b      	str	r3, [r7, #20]
}
 800759c:	bf00      	nop
 800759e:	bf00      	nop
 80075a0:	e7fd      	b.n	800759e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075a2:	4b0a      	ldr	r3, [pc, #40]	@ (80075cc <vTaskPlaceOnEventListRestricted+0x54>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3318      	adds	r3, #24
 80075a8:	4619      	mov	r1, r3
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f7fe fa3b 	bl	8005a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80075b6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	68b8      	ldr	r0, [r7, #8]
 80075c0:	f000 fb64 	bl	8007c8c <prvAddCurrentTaskToDelayedList>
	}
 80075c4:	bf00      	nop
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000eb0 	.word	0x20000eb0

080075d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60fb      	str	r3, [r7, #12]
}
 80075f8:	bf00      	nop
 80075fa:	bf00      	nop
 80075fc:	e7fd      	b.n	80075fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3318      	adds	r3, #24
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe fa6c 	bl	8005ae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007608:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <xTaskRemoveFromEventList+0xb0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11d      	bne.n	800764c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	3304      	adds	r3, #4
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe fa63 	bl	8005ae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761e:	4b19      	ldr	r3, [pc, #100]	@ (8007684 <xTaskRemoveFromEventList+0xb4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	429a      	cmp	r2, r3
 8007624:	d903      	bls.n	800762e <xTaskRemoveFromEventList+0x5e>
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762a:	4a16      	ldr	r2, [pc, #88]	@ (8007684 <xTaskRemoveFromEventList+0xb4>)
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4a13      	ldr	r2, [pc, #76]	@ (8007688 <xTaskRemoveFromEventList+0xb8>)
 800763c:	441a      	add	r2, r3
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	3304      	adds	r3, #4
 8007642:	4619      	mov	r1, r3
 8007644:	4610      	mov	r0, r2
 8007646:	f7fe f9ee 	bl	8005a26 <vListInsertEnd>
 800764a:	e005      	b.n	8007658 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	3318      	adds	r3, #24
 8007650:	4619      	mov	r1, r3
 8007652:	480e      	ldr	r0, [pc, #56]	@ (800768c <xTaskRemoveFromEventList+0xbc>)
 8007654:	f7fe f9e7 	bl	8005a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765c:	4b0c      	ldr	r3, [pc, #48]	@ (8007690 <xTaskRemoveFromEventList+0xc0>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007662:	429a      	cmp	r2, r3
 8007664:	d905      	bls.n	8007672 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007666:	2301      	movs	r3, #1
 8007668:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800766a:	4b0a      	ldr	r3, [pc, #40]	@ (8007694 <xTaskRemoveFromEventList+0xc4>)
 800766c:	2201      	movs	r2, #1
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	e001      	b.n	8007676 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007672:	2300      	movs	r3, #0
 8007674:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007676:	697b      	ldr	r3, [r7, #20]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	200013ac 	.word	0x200013ac
 8007684:	2000138c 	.word	0x2000138c
 8007688:	20000eb4 	.word	0x20000eb4
 800768c:	20001344 	.word	0x20001344
 8007690:	20000eb0 	.word	0x20000eb0
 8007694:	20001398 	.word	0x20001398

08007698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076a0:	4b06      	ldr	r3, [pc, #24]	@ (80076bc <vTaskInternalSetTimeOutState+0x24>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076a8:	4b05      	ldr	r3, [pc, #20]	@ (80076c0 <vTaskInternalSetTimeOutState+0x28>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	605a      	str	r2, [r3, #4]
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	2000139c 	.word	0x2000139c
 80076c0:	20001388 	.word	0x20001388

080076c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10b      	bne.n	80076ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	613b      	str	r3, [r7, #16]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10b      	bne.n	800770a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800770a:	f000 ff9d 	bl	8008648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800770e:	4b1d      	ldr	r3, [pc, #116]	@ (8007784 <xTaskCheckForTimeOut+0xc0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007726:	d102      	bne.n	800772e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	e023      	b.n	8007776 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b15      	ldr	r3, [pc, #84]	@ (8007788 <xTaskCheckForTimeOut+0xc4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d007      	beq.n	800774a <xTaskCheckForTimeOut+0x86>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	429a      	cmp	r2, r3
 8007742:	d302      	bcc.n	800774a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007744:	2301      	movs	r3, #1
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	e015      	b.n	8007776 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	429a      	cmp	r2, r3
 8007752:	d20b      	bcs.n	800776c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	1ad2      	subs	r2, r2, r3
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff ff99 	bl	8007698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007766:	2300      	movs	r3, #0
 8007768:	61fb      	str	r3, [r7, #28]
 800776a:	e004      	b.n	8007776 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007772:	2301      	movs	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007776:	f000 ff99 	bl	80086ac <vPortExitCritical>

	return xReturn;
 800777a:	69fb      	ldr	r3, [r7, #28]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20001388 	.word	0x20001388
 8007788:	2000139c 	.word	0x2000139c

0800778c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007790:	4b03      	ldr	r3, [pc, #12]	@ (80077a0 <vTaskMissedYield+0x14>)
 8007792:	2201      	movs	r2, #1
 8007794:	601a      	str	r2, [r3, #0]
}
 8007796:	bf00      	nop
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr
 80077a0:	20001398 	.word	0x20001398

080077a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077ac:	f000 f852 	bl	8007854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077b0:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <prvIdleTask+0x28>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d9f9      	bls.n	80077ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80077b8:	4b05      	ldr	r3, [pc, #20]	@ (80077d0 <prvIdleTask+0x2c>)
 80077ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077c8:	e7f0      	b.n	80077ac <prvIdleTask+0x8>
 80077ca:	bf00      	nop
 80077cc:	20000eb4 	.word	0x20000eb4
 80077d0:	e000ed04 	.word	0xe000ed04

080077d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077da:	2300      	movs	r3, #0
 80077dc:	607b      	str	r3, [r7, #4]
 80077de:	e00c      	b.n	80077fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	4613      	mov	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4a12      	ldr	r2, [pc, #72]	@ (8007834 <prvInitialiseTaskLists+0x60>)
 80077ec:	4413      	add	r3, r2
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe f8ec 	bl	80059cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3301      	adds	r3, #1
 80077f8:	607b      	str	r3, [r7, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b37      	cmp	r3, #55	@ 0x37
 80077fe:	d9ef      	bls.n	80077e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007800:	480d      	ldr	r0, [pc, #52]	@ (8007838 <prvInitialiseTaskLists+0x64>)
 8007802:	f7fe f8e3 	bl	80059cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007806:	480d      	ldr	r0, [pc, #52]	@ (800783c <prvInitialiseTaskLists+0x68>)
 8007808:	f7fe f8e0 	bl	80059cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800780c:	480c      	ldr	r0, [pc, #48]	@ (8007840 <prvInitialiseTaskLists+0x6c>)
 800780e:	f7fe f8dd 	bl	80059cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007812:	480c      	ldr	r0, [pc, #48]	@ (8007844 <prvInitialiseTaskLists+0x70>)
 8007814:	f7fe f8da 	bl	80059cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007818:	480b      	ldr	r0, [pc, #44]	@ (8007848 <prvInitialiseTaskLists+0x74>)
 800781a:	f7fe f8d7 	bl	80059cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800781e:	4b0b      	ldr	r3, [pc, #44]	@ (800784c <prvInitialiseTaskLists+0x78>)
 8007820:	4a05      	ldr	r2, [pc, #20]	@ (8007838 <prvInitialiseTaskLists+0x64>)
 8007822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007824:	4b0a      	ldr	r3, [pc, #40]	@ (8007850 <prvInitialiseTaskLists+0x7c>)
 8007826:	4a05      	ldr	r2, [pc, #20]	@ (800783c <prvInitialiseTaskLists+0x68>)
 8007828:	601a      	str	r2, [r3, #0]
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000eb4 	.word	0x20000eb4
 8007838:	20001314 	.word	0x20001314
 800783c:	20001328 	.word	0x20001328
 8007840:	20001344 	.word	0x20001344
 8007844:	20001358 	.word	0x20001358
 8007848:	20001370 	.word	0x20001370
 800784c:	2000133c 	.word	0x2000133c
 8007850:	20001340 	.word	0x20001340

08007854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800785a:	e019      	b.n	8007890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800785c:	f000 fef4 	bl	8008648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007860:	4b10      	ldr	r3, [pc, #64]	@ (80078a4 <prvCheckTasksWaitingTermination+0x50>)
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe f937 	bl	8005ae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007872:	4b0d      	ldr	r3, [pc, #52]	@ (80078a8 <prvCheckTasksWaitingTermination+0x54>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3b01      	subs	r3, #1
 8007878:	4a0b      	ldr	r2, [pc, #44]	@ (80078a8 <prvCheckTasksWaitingTermination+0x54>)
 800787a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800787c:	4b0b      	ldr	r3, [pc, #44]	@ (80078ac <prvCheckTasksWaitingTermination+0x58>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3b01      	subs	r3, #1
 8007882:	4a0a      	ldr	r2, [pc, #40]	@ (80078ac <prvCheckTasksWaitingTermination+0x58>)
 8007884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007886:	f000 ff11 	bl	80086ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f810 	bl	80078b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007890:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <prvCheckTasksWaitingTermination+0x58>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e1      	bne.n	800785c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20001358 	.word	0x20001358
 80078a8:	20001384 	.word	0x20001384
 80078ac:	2000136c 	.word	0x2000136c

080078b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d108      	bne.n	80078d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 f8ae 	bl	8008a28 <vPortFree>
				vPortFree( pxTCB );
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 f8ab 	bl	8008a28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078d2:	e019      	b.n	8007908 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d103      	bne.n	80078e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f001 f8a2 	bl	8008a28 <vPortFree>
	}
 80078e4:	e010      	b.n	8007908 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d00b      	beq.n	8007908 <prvDeleteTCB+0x58>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	60fb      	str	r3, [r7, #12]
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	e7fd      	b.n	8007904 <prvDeleteTCB+0x54>
	}
 8007908:	bf00      	nop
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007916:	4b0c      	ldr	r3, [pc, #48]	@ (8007948 <prvResetNextTaskUnblockTime+0x38>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007920:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <prvResetNextTaskUnblockTime+0x3c>)
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007928:	e008      	b.n	800793c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800792a:	4b07      	ldr	r3, [pc, #28]	@ (8007948 <prvResetNextTaskUnblockTime+0x38>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	4a04      	ldr	r2, [pc, #16]	@ (800794c <prvResetNextTaskUnblockTime+0x3c>)
 800793a:	6013      	str	r3, [r2, #0]
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	2000133c 	.word	0x2000133c
 800794c:	200013a4 	.word	0x200013a4

08007950 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007956:	4b05      	ldr	r3, [pc, #20]	@ (800796c <xTaskGetCurrentTaskHandle+0x1c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800795c:	687b      	ldr	r3, [r7, #4]
	}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000eb0 	.word	0x20000eb0

08007970 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007976:	4b0b      	ldr	r3, [pc, #44]	@ (80079a4 <xTaskGetSchedulerState+0x34>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800797e:	2301      	movs	r3, #1
 8007980:	607b      	str	r3, [r7, #4]
 8007982:	e008      	b.n	8007996 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007984:	4b08      	ldr	r3, [pc, #32]	@ (80079a8 <xTaskGetSchedulerState+0x38>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d102      	bne.n	8007992 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800798c:	2302      	movs	r3, #2
 800798e:	607b      	str	r3, [r7, #4]
 8007990:	e001      	b.n	8007996 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007992:	2300      	movs	r3, #0
 8007994:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007996:	687b      	ldr	r3, [r7, #4]
	}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	20001390 	.word	0x20001390
 80079a8:	200013ac 	.word	0x200013ac

080079ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d051      	beq.n	8007a66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a70 <xTaskPriorityInherit+0xc4>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d241      	bcs.n	8007a54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	db06      	blt.n	80079e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d8:	4b25      	ldr	r3, [pc, #148]	@ (8007a70 <xTaskPriorityInherit+0xc4>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6959      	ldr	r1, [r3, #20]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a74 <xTaskPriorityInherit+0xc8>)
 80079f8:	4413      	add	r3, r2
 80079fa:	4299      	cmp	r1, r3
 80079fc:	d122      	bne.n	8007a44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe f86c 	bl	8005ae0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a08:	4b19      	ldr	r3, [pc, #100]	@ (8007a70 <xTaskPriorityInherit+0xc4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a16:	4b18      	ldr	r3, [pc, #96]	@ (8007a78 <xTaskPriorityInherit+0xcc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d903      	bls.n	8007a26 <xTaskPriorityInherit+0x7a>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a22:	4a15      	ldr	r2, [pc, #84]	@ (8007a78 <xTaskPriorityInherit+0xcc>)
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4a10      	ldr	r2, [pc, #64]	@ (8007a74 <xTaskPriorityInherit+0xc8>)
 8007a34:	441a      	add	r2, r3
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7fd fff2 	bl	8005a26 <vListInsertEnd>
 8007a42:	e004      	b.n	8007a4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a44:	4b0a      	ldr	r3, [pc, #40]	@ (8007a70 <xTaskPriorityInherit+0xc4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e008      	b.n	8007a66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a58:	4b05      	ldr	r3, [pc, #20]	@ (8007a70 <xTaskPriorityInherit+0xc4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d201      	bcs.n	8007a66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a62:	2301      	movs	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a66:	68fb      	ldr	r3, [r7, #12]
	}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000eb0 	.word	0x20000eb0
 8007a74:	20000eb4 	.word	0x20000eb4
 8007a78:	2000138c 	.word	0x2000138c

08007a7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d058      	beq.n	8007b44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a92:	4b2f      	ldr	r3, [pc, #188]	@ (8007b50 <xTaskPriorityDisinherit+0xd4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d00b      	beq.n	8007ab4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	60fb      	str	r3, [r7, #12]
}
 8007aae:	bf00      	nop
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10b      	bne.n	8007ad4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	60bb      	str	r3, [r7, #8]
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	e7fd      	b.n	8007ad0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad8:	1e5a      	subs	r2, r3, #1
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d02c      	beq.n	8007b44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d128      	bne.n	8007b44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fd fff2 	bl	8005ae0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b14:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <xTaskPriorityDisinherit+0xd8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d903      	bls.n	8007b24 <xTaskPriorityDisinherit+0xa8>
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b20:	4a0c      	ldr	r2, [pc, #48]	@ (8007b54 <xTaskPriorityDisinherit+0xd8>)
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a09      	ldr	r2, [pc, #36]	@ (8007b58 <xTaskPriorityDisinherit+0xdc>)
 8007b32:	441a      	add	r2, r3
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f7fd ff73 	bl	8005a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b40:	2301      	movs	r3, #1
 8007b42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b44:	697b      	ldr	r3, [r7, #20]
	}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20000eb0 	.word	0x20000eb0
 8007b54:	2000138c 	.word	0x2000138c
 8007b58:	20000eb4 	.word	0x20000eb4

08007b5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d06c      	beq.n	8007c4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10b      	bne.n	8007b94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	60fb      	str	r3, [r7, #12]
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	e7fd      	b.n	8007b90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d902      	bls.n	8007ba4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	61fb      	str	r3, [r7, #28]
 8007ba2:	e002      	b.n	8007baa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ba8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d04c      	beq.n	8007c4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d147      	bne.n	8007c4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007bbe:	4b26      	ldr	r3, [pc, #152]	@ (8007c58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d10b      	bne.n	8007be0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	60bb      	str	r3, [r7, #8]
}
 8007bda:	bf00      	nop
 8007bdc:	bf00      	nop
 8007bde:	e7fd      	b.n	8007bdc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	db04      	blt.n	8007bfe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	6959      	ldr	r1, [r3, #20]
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a13      	ldr	r2, [pc, #76]	@ (8007c5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c0e:	4413      	add	r3, r2
 8007c10:	4299      	cmp	r1, r3
 8007c12:	d11c      	bne.n	8007c4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fd ff61 	bl	8005ae0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c22:	4b0f      	ldr	r3, [pc, #60]	@ (8007c60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d903      	bls.n	8007c32 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8007c60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4a07      	ldr	r2, [pc, #28]	@ (8007c5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c40:	441a      	add	r2, r3
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	3304      	adds	r3, #4
 8007c46:	4619      	mov	r1, r3
 8007c48:	4610      	mov	r0, r2
 8007c4a:	f7fd feec 	bl	8005a26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c4e:	bf00      	nop
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20000eb0 	.word	0x20000eb0
 8007c5c:	20000eb4 	.word	0x20000eb4
 8007c60:	2000138c 	.word	0x2000138c

08007c64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c68:	4b07      	ldr	r3, [pc, #28]	@ (8007c88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d004      	beq.n	8007c7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c70:	4b05      	ldr	r3, [pc, #20]	@ (8007c88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c76:	3201      	adds	r2, #1
 8007c78:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007c7a:	4b03      	ldr	r3, [pc, #12]	@ (8007c88 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
	}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	20000eb0 	.word	0x20000eb0

08007c8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c96:	4b21      	ldr	r3, [pc, #132]	@ (8007d1c <prvAddCurrentTaskToDelayedList+0x90>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c9c:	4b20      	ldr	r3, [pc, #128]	@ (8007d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fd ff1c 	bl	8005ae0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cae:	d10a      	bne.n	8007cc6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4819      	ldr	r0, [pc, #100]	@ (8007d24 <prvAddCurrentTaskToDelayedList+0x98>)
 8007cc0:	f7fd feb1 	bl	8005a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cc4:	e026      	b.n	8007d14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4413      	add	r3, r2
 8007ccc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cce:	4b14      	ldr	r3, [pc, #80]	@ (8007d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d209      	bcs.n	8007cf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cde:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8007d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4610      	mov	r0, r2
 8007cec:	f7fd febf 	bl	8005a6e <vListInsert>
}
 8007cf0:	e010      	b.n	8007d14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d20 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	f7fd feb5 	bl	8005a6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d04:	4b0a      	ldr	r3, [pc, #40]	@ (8007d30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d202      	bcs.n	8007d14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d0e:	4a08      	ldr	r2, [pc, #32]	@ (8007d30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	6013      	str	r3, [r2, #0]
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20001388 	.word	0x20001388
 8007d20:	20000eb0 	.word	0x20000eb0
 8007d24:	20001370 	.word	0x20001370
 8007d28:	20001340 	.word	0x20001340
 8007d2c:	2000133c 	.word	0x2000133c
 8007d30:	200013a4 	.word	0x200013a4

08007d34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08a      	sub	sp, #40	@ 0x28
 8007d38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d3e:	f000 fb13 	bl	8008368 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d42:	4b1d      	ldr	r3, [pc, #116]	@ (8007db8 <xTimerCreateTimerTask+0x84>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d021      	beq.n	8007d8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d52:	1d3a      	adds	r2, r7, #4
 8007d54:	f107 0108 	add.w	r1, r7, #8
 8007d58:	f107 030c 	add.w	r3, r7, #12
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fd fe1b 	bl	8005998 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	9202      	str	r2, [sp, #8]
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	2300      	movs	r3, #0
 8007d72:	460a      	mov	r2, r1
 8007d74:	4911      	ldr	r1, [pc, #68]	@ (8007dbc <xTimerCreateTimerTask+0x88>)
 8007d76:	4812      	ldr	r0, [pc, #72]	@ (8007dc0 <xTimerCreateTimerTask+0x8c>)
 8007d78:	f7fe ffc0 	bl	8006cfc <xTaskCreateStatic>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	4a11      	ldr	r2, [pc, #68]	@ (8007dc4 <xTimerCreateTimerTask+0x90>)
 8007d80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d82:	4b10      	ldr	r3, [pc, #64]	@ (8007dc4 <xTimerCreateTimerTask+0x90>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10b      	bne.n	8007dac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	613b      	str	r3, [r7, #16]
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	e7fd      	b.n	8007da8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dac:	697b      	ldr	r3, [r7, #20]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	200013e0 	.word	0x200013e0
 8007dbc:	08008d2c 	.word	0x08008d2c
 8007dc0:	08007f01 	.word	0x08007f01
 8007dc4:	200013e4 	.word	0x200013e4

08007dc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08a      	sub	sp, #40	@ 0x28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10b      	bne.n	8007df8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	623b      	str	r3, [r7, #32]
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	e7fd      	b.n	8007df4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007df8:	4b19      	ldr	r3, [pc, #100]	@ (8007e60 <xTimerGenericCommand+0x98>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d02a      	beq.n	8007e56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	dc18      	bgt.n	8007e44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e12:	f7ff fdad 	bl	8007970 <xTaskGetSchedulerState>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d109      	bne.n	8007e30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e1c:	4b10      	ldr	r3, [pc, #64]	@ (8007e60 <xTimerGenericCommand+0x98>)
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	f107 0110 	add.w	r1, r7, #16
 8007e24:	2300      	movs	r3, #0
 8007e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e28:	f7fe f8f0 	bl	800600c <xQueueGenericSend>
 8007e2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e2e:	e012      	b.n	8007e56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e30:	4b0b      	ldr	r3, [pc, #44]	@ (8007e60 <xTimerGenericCommand+0x98>)
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	f107 0110 	add.w	r1, r7, #16
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f7fe f8e6 	bl	800600c <xQueueGenericSend>
 8007e40:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e42:	e008      	b.n	8007e56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e44:	4b06      	ldr	r3, [pc, #24]	@ (8007e60 <xTimerGenericCommand+0x98>)
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	f107 0110 	add.w	r1, r7, #16
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	f7fe f9de 	bl	8006210 <xQueueGenericSendFromISR>
 8007e54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3728      	adds	r7, #40	@ 0x28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	200013e0 	.word	0x200013e0

08007e64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e6e:	4b23      	ldr	r3, [pc, #140]	@ (8007efc <prvProcessExpiredTimer+0x98>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fd fe2f 	bl	8005ae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d023      	beq.n	8007ed8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	699a      	ldr	r2, [r3, #24]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	18d1      	adds	r1, r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	6978      	ldr	r0, [r7, #20]
 8007e9e:	f000 f8d5 	bl	800804c <prvInsertTimerInActiveList>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d020      	beq.n	8007eea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	2300      	movs	r3, #0
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	6978      	ldr	r0, [r7, #20]
 8007eb4:	f7ff ff88 	bl	8007dc8 <xTimerGenericCommand>
 8007eb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d114      	bne.n	8007eea <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	60fb      	str	r3, [r7, #12]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ede:	f023 0301 	bic.w	r3, r3, #1
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	6978      	ldr	r0, [r7, #20]
 8007ef0:	4798      	blx	r3
}
 8007ef2:	bf00      	nop
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	200013d8 	.word	0x200013d8

08007f00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f08:	f107 0308 	add.w	r3, r7, #8
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 f859 	bl	8007fc4 <prvGetNextExpireTime>
 8007f12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4619      	mov	r1, r3
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f805 	bl	8007f28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f1e:	f000 f8d7 	bl	80080d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f22:	bf00      	nop
 8007f24:	e7f0      	b.n	8007f08 <prvTimerTask+0x8>
	...

08007f28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f32:	f7ff f927 	bl	8007184 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f36:	f107 0308 	add.w	r3, r7, #8
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 f866 	bl	800800c <prvSampleTimeNow>
 8007f40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d130      	bne.n	8007faa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <prvProcessTimerOrBlockTask+0x3c>
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d806      	bhi.n	8007f64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f56:	f7ff f923 	bl	80071a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f5a:	68f9      	ldr	r1, [r7, #12]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f7ff ff81 	bl	8007e64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f62:	e024      	b.n	8007fae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f6a:	4b13      	ldr	r3, [pc, #76]	@ (8007fb8 <prvProcessTimerOrBlockTask+0x90>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <prvProcessTimerOrBlockTask+0x50>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <prvProcessTimerOrBlockTask+0x52>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <prvProcessTimerOrBlockTask+0x94>)
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	f7fe fe83 	bl	8006c94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f8e:	f7ff f907 	bl	80071a0 <xTaskResumeAll>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f98:	4b09      	ldr	r3, [pc, #36]	@ (8007fc0 <prvProcessTimerOrBlockTask+0x98>)
 8007f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	f3bf 8f6f 	isb	sy
}
 8007fa8:	e001      	b.n	8007fae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007faa:	f7ff f8f9 	bl	80071a0 <xTaskResumeAll>
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	200013dc 	.word	0x200013dc
 8007fbc:	200013e0 	.word	0x200013e0
 8007fc0:	e000ed04 	.word	0xe000ed04

08007fc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8008008 <prvGetNextExpireTime+0x44>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <prvGetNextExpireTime+0x16>
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	e000      	b.n	8007fdc <prvGetNextExpireTime+0x18>
 8007fda:	2200      	movs	r2, #0
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d105      	bne.n	8007ff4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fe8:	4b07      	ldr	r3, [pc, #28]	@ (8008008 <prvGetNextExpireTime+0x44>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60fb      	str	r3, [r7, #12]
 8007ff2:	e001      	b.n	8007ff8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	200013d8 	.word	0x200013d8

0800800c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008014:	f7ff f962 	bl	80072dc <xTaskGetTickCount>
 8008018:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800801a:	4b0b      	ldr	r3, [pc, #44]	@ (8008048 <prvSampleTimeNow+0x3c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	429a      	cmp	r2, r3
 8008022:	d205      	bcs.n	8008030 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008024:	f000 f93a 	bl	800829c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	e002      	b.n	8008036 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008036:	4a04      	ldr	r2, [pc, #16]	@ (8008048 <prvSampleTimeNow+0x3c>)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800803c:	68fb      	ldr	r3, [r7, #12]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	200013e8 	.word	0x200013e8

0800804c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800805a:	2300      	movs	r3, #0
 800805c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	429a      	cmp	r2, r3
 8008070:	d812      	bhi.n	8008098 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	1ad2      	subs	r2, r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	429a      	cmp	r2, r3
 800807e:	d302      	bcc.n	8008086 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008080:	2301      	movs	r3, #1
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e01b      	b.n	80080be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008086:	4b10      	ldr	r3, [pc, #64]	@ (80080c8 <prvInsertTimerInActiveList+0x7c>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3304      	adds	r3, #4
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f7fd fcec 	bl	8005a6e <vListInsert>
 8008096:	e012      	b.n	80080be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d206      	bcs.n	80080ae <prvInsertTimerInActiveList+0x62>
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d302      	bcc.n	80080ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e007      	b.n	80080be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ae:	4b07      	ldr	r3, [pc, #28]	@ (80080cc <prvInsertTimerInActiveList+0x80>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fd fcd8 	bl	8005a6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080be:	697b      	ldr	r3, [r7, #20]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	200013dc 	.word	0x200013dc
 80080cc:	200013d8 	.word	0x200013d8

080080d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08e      	sub	sp, #56	@ 0x38
 80080d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080d6:	e0ce      	b.n	8008276 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	da19      	bge.n	8008112 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080de:	1d3b      	adds	r3, r7, #4
 80080e0:	3304      	adds	r3, #4
 80080e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10b      	bne.n	8008102 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	61fb      	str	r3, [r7, #28]
}
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
 8008100:	e7fd      	b.n	80080fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008108:	6850      	ldr	r0, [r2, #4]
 800810a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800810c:	6892      	ldr	r2, [r2, #8]
 800810e:	4611      	mov	r1, r2
 8008110:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	f2c0 80ae 	blt.w	8008276 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800811e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d004      	beq.n	8008130 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008128:	3304      	adds	r3, #4
 800812a:	4618      	mov	r0, r3
 800812c:	f7fd fcd8 	bl	8005ae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008130:	463b      	mov	r3, r7
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff ff6a 	bl	800800c <prvSampleTimeNow>
 8008138:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b09      	cmp	r3, #9
 800813e:	f200 8097 	bhi.w	8008270 <prvProcessReceivedCommands+0x1a0>
 8008142:	a201      	add	r2, pc, #4	@ (adr r2, 8008148 <prvProcessReceivedCommands+0x78>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	08008171 	.word	0x08008171
 800814c:	08008171 	.word	0x08008171
 8008150:	08008171 	.word	0x08008171
 8008154:	080081e7 	.word	0x080081e7
 8008158:	080081fb 	.word	0x080081fb
 800815c:	08008247 	.word	0x08008247
 8008160:	08008171 	.word	0x08008171
 8008164:	08008171 	.word	0x08008171
 8008168:	080081e7 	.word	0x080081e7
 800816c:	080081fb 	.word	0x080081fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008176:	f043 0301 	orr.w	r3, r3, #1
 800817a:	b2da      	uxtb	r2, r3
 800817c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	18d1      	adds	r1, r2, r3
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800818e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008190:	f7ff ff5c 	bl	800804c <prvInsertTimerInActiveList>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d06c      	beq.n	8008274 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d061      	beq.n	8008274 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	441a      	add	r2, r3
 80081b8:	2300      	movs	r3, #0
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	2300      	movs	r3, #0
 80081be:	2100      	movs	r1, #0
 80081c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081c2:	f7ff fe01 	bl	8007dc8 <xTimerGenericCommand>
 80081c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d152      	bne.n	8008274 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	61bb      	str	r3, [r7, #24]
}
 80081e0:	bf00      	nop
 80081e2:	bf00      	nop
 80081e4:	e7fd      	b.n	80081e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081ec:	f023 0301 	bic.w	r3, r3, #1
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081f8:	e03d      	b.n	8008276 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008200:	f043 0301 	orr.w	r3, r3, #1
 8008204:	b2da      	uxtb	r2, r3
 8008206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008208:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008210:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10b      	bne.n	8008232 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	617b      	str	r3, [r7, #20]
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008234:	699a      	ldr	r2, [r3, #24]
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	18d1      	adds	r1, r2, r3
 800823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800823e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008240:	f7ff ff04 	bl	800804c <prvInsertTimerInActiveList>
					break;
 8008244:	e017      	b.n	8008276 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d103      	bne.n	800825c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008254:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008256:	f000 fbe7 	bl	8008a28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800825a:	e00c      	b.n	8008276 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800825c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	b2da      	uxtb	r2, r3
 8008268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800826e:	e002      	b.n	8008276 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008270:	bf00      	nop
 8008272:	e000      	b.n	8008276 <prvProcessReceivedCommands+0x1a6>
					break;
 8008274:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008276:	4b08      	ldr	r3, [pc, #32]	@ (8008298 <prvProcessReceivedCommands+0x1c8>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	1d39      	adds	r1, r7, #4
 800827c:	2200      	movs	r2, #0
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe f8f4 	bl	800646c <xQueueReceive>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	f47f af26 	bne.w	80080d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800828c:	bf00      	nop
 800828e:	bf00      	nop
 8008290:	3730      	adds	r7, #48	@ 0x30
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	200013e0 	.word	0x200013e0

0800829c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082a2:	e049      	b.n	8008338 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082a4:	4b2e      	ldr	r3, [pc, #184]	@ (8008360 <prvSwitchTimerLists+0xc4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008360 <prvSwitchTimerLists+0xc4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fd fc0f 	bl	8005ae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d02f      	beq.n	8008338 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4413      	add	r3, r2
 80082e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d90e      	bls.n	8008308 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082f6:	4b1a      	ldr	r3, [pc, #104]	@ (8008360 <prvSwitchTimerLists+0xc4>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4619      	mov	r1, r3
 8008300:	4610      	mov	r0, r2
 8008302:	f7fd fbb4 	bl	8005a6e <vListInsert>
 8008306:	e017      	b.n	8008338 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008308:	2300      	movs	r3, #0
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	2100      	movs	r1, #0
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fd58 	bl	8007dc8 <xTimerGenericCommand>
 8008318:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10b      	bne.n	8008338 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	603b      	str	r3, [r7, #0]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008338:	4b09      	ldr	r3, [pc, #36]	@ (8008360 <prvSwitchTimerLists+0xc4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1b0      	bne.n	80082a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008342:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <prvSwitchTimerLists+0xc4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008348:	4b06      	ldr	r3, [pc, #24]	@ (8008364 <prvSwitchTimerLists+0xc8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a04      	ldr	r2, [pc, #16]	@ (8008360 <prvSwitchTimerLists+0xc4>)
 800834e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008350:	4a04      	ldr	r2, [pc, #16]	@ (8008364 <prvSwitchTimerLists+0xc8>)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	6013      	str	r3, [r2, #0]
}
 8008356:	bf00      	nop
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	200013d8 	.word	0x200013d8
 8008364:	200013dc 	.word	0x200013dc

08008368 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800836e:	f000 f96b 	bl	8008648 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008372:	4b15      	ldr	r3, [pc, #84]	@ (80083c8 <prvCheckForValidListAndQueue+0x60>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d120      	bne.n	80083bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800837a:	4814      	ldr	r0, [pc, #80]	@ (80083cc <prvCheckForValidListAndQueue+0x64>)
 800837c:	f7fd fb26 	bl	80059cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008380:	4813      	ldr	r0, [pc, #76]	@ (80083d0 <prvCheckForValidListAndQueue+0x68>)
 8008382:	f7fd fb23 	bl	80059cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008386:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <prvCheckForValidListAndQueue+0x6c>)
 8008388:	4a10      	ldr	r2, [pc, #64]	@ (80083cc <prvCheckForValidListAndQueue+0x64>)
 800838a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800838c:	4b12      	ldr	r3, [pc, #72]	@ (80083d8 <prvCheckForValidListAndQueue+0x70>)
 800838e:	4a10      	ldr	r2, [pc, #64]	@ (80083d0 <prvCheckForValidListAndQueue+0x68>)
 8008390:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008392:	2300      	movs	r3, #0
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	4b11      	ldr	r3, [pc, #68]	@ (80083dc <prvCheckForValidListAndQueue+0x74>)
 8008398:	4a11      	ldr	r2, [pc, #68]	@ (80083e0 <prvCheckForValidListAndQueue+0x78>)
 800839a:	2110      	movs	r1, #16
 800839c:	200a      	movs	r0, #10
 800839e:	f7fd fc33 	bl	8005c08 <xQueueGenericCreateStatic>
 80083a2:	4603      	mov	r3, r0
 80083a4:	4a08      	ldr	r2, [pc, #32]	@ (80083c8 <prvCheckForValidListAndQueue+0x60>)
 80083a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083a8:	4b07      	ldr	r3, [pc, #28]	@ (80083c8 <prvCheckForValidListAndQueue+0x60>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d005      	beq.n	80083bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083b0:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <prvCheckForValidListAndQueue+0x60>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	490b      	ldr	r1, [pc, #44]	@ (80083e4 <prvCheckForValidListAndQueue+0x7c>)
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fc18 	bl	8006bec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083bc:	f000 f976 	bl	80086ac <vPortExitCritical>
}
 80083c0:	bf00      	nop
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200013e0 	.word	0x200013e0
 80083cc:	200013b0 	.word	0x200013b0
 80083d0:	200013c4 	.word	0x200013c4
 80083d4:	200013d8 	.word	0x200013d8
 80083d8:	200013dc 	.word	0x200013dc
 80083dc:	2000148c 	.word	0x2000148c
 80083e0:	200013ec 	.word	0x200013ec
 80083e4:	08008d34 	.word	0x08008d34

080083e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3b04      	subs	r3, #4
 80083f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3b04      	subs	r3, #4
 8008406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f023 0201 	bic.w	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3b04      	subs	r3, #4
 8008416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008418:	4a0c      	ldr	r2, [pc, #48]	@ (800844c <pxPortInitialiseStack+0x64>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3b14      	subs	r3, #20
 8008422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3b04      	subs	r3, #4
 800842e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f06f 0202 	mvn.w	r2, #2
 8008436:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3b20      	subs	r3, #32
 800843c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800843e:	68fb      	ldr	r3, [r7, #12]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	08008451 	.word	0x08008451

08008450 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800845a:	4b13      	ldr	r3, [pc, #76]	@ (80084a8 <prvTaskExitError+0x58>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	d00b      	beq.n	800847c <prvTaskExitError+0x2c>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	60fb      	str	r3, [r7, #12]
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	e7fd      	b.n	8008478 <prvTaskExitError+0x28>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	60bb      	str	r3, [r7, #8]
}
 800848e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008490:	bf00      	nop
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0fc      	beq.n	8008492 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	2000000c 	.word	0x2000000c
 80084ac:	00000000 	.word	0x00000000

080084b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084b0:	4b07      	ldr	r3, [pc, #28]	@ (80084d0 <pxCurrentTCBConst2>)
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	6808      	ldr	r0, [r1, #0]
 80084b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	f380 8809 	msr	PSP, r0
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f04f 0000 	mov.w	r0, #0
 80084c6:	f380 8811 	msr	BASEPRI, r0
 80084ca:	4770      	bx	lr
 80084cc:	f3af 8000 	nop.w

080084d0 <pxCurrentTCBConst2>:
 80084d0:	20000eb0 	.word	0x20000eb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084d8:	4808      	ldr	r0, [pc, #32]	@ (80084fc <prvPortStartFirstTask+0x24>)
 80084da:	6800      	ldr	r0, [r0, #0]
 80084dc:	6800      	ldr	r0, [r0, #0]
 80084de:	f380 8808 	msr	MSP, r0
 80084e2:	f04f 0000 	mov.w	r0, #0
 80084e6:	f380 8814 	msr	CONTROL, r0
 80084ea:	b662      	cpsie	i
 80084ec:	b661      	cpsie	f
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	df00      	svc	0
 80084f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084fa:	bf00      	nop
 80084fc:	e000ed08 	.word	0xe000ed08

08008500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008506:	4b47      	ldr	r3, [pc, #284]	@ (8008624 <xPortStartScheduler+0x124>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a47      	ldr	r2, [pc, #284]	@ (8008628 <xPortStartScheduler+0x128>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d10b      	bne.n	8008528 <xPortStartScheduler+0x28>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	613b      	str	r3, [r7, #16]
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008528:	4b3e      	ldr	r3, [pc, #248]	@ (8008624 <xPortStartScheduler+0x124>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a3f      	ldr	r2, [pc, #252]	@ (800862c <xPortStartScheduler+0x12c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d10b      	bne.n	800854a <xPortStartScheduler+0x4a>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60fb      	str	r3, [r7, #12]
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	e7fd      	b.n	8008546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800854a:	4b39      	ldr	r3, [pc, #228]	@ (8008630 <xPortStartScheduler+0x130>)
 800854c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	22ff      	movs	r2, #255	@ 0xff
 800855a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800856c:	b2da      	uxtb	r2, r3
 800856e:	4b31      	ldr	r3, [pc, #196]	@ (8008634 <xPortStartScheduler+0x134>)
 8008570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008572:	4b31      	ldr	r3, [pc, #196]	@ (8008638 <xPortStartScheduler+0x138>)
 8008574:	2207      	movs	r2, #7
 8008576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008578:	e009      	b.n	800858e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800857a:	4b2f      	ldr	r3, [pc, #188]	@ (8008638 <xPortStartScheduler+0x138>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3b01      	subs	r3, #1
 8008580:	4a2d      	ldr	r2, [pc, #180]	@ (8008638 <xPortStartScheduler+0x138>)
 8008582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	b2db      	uxtb	r3, r3
 800858c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008596:	2b80      	cmp	r3, #128	@ 0x80
 8008598:	d0ef      	beq.n	800857a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800859a:	4b27      	ldr	r3, [pc, #156]	@ (8008638 <xPortStartScheduler+0x138>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f1c3 0307 	rsb	r3, r3, #7
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d00b      	beq.n	80085be <xPortStartScheduler+0xbe>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	60bb      	str	r3, [r7, #8]
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	e7fd      	b.n	80085ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085be:	4b1e      	ldr	r3, [pc, #120]	@ (8008638 <xPortStartScheduler+0x138>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008638 <xPortStartScheduler+0x138>)
 80085c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008638 <xPortStartScheduler+0x138>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085d0:	4a19      	ldr	r2, [pc, #100]	@ (8008638 <xPortStartScheduler+0x138>)
 80085d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085dc:	4b17      	ldr	r3, [pc, #92]	@ (800863c <xPortStartScheduler+0x13c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a16      	ldr	r2, [pc, #88]	@ (800863c <xPortStartScheduler+0x13c>)
 80085e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085e8:	4b14      	ldr	r3, [pc, #80]	@ (800863c <xPortStartScheduler+0x13c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a13      	ldr	r2, [pc, #76]	@ (800863c <xPortStartScheduler+0x13c>)
 80085ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085f4:	f000 f8da 	bl	80087ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085f8:	4b11      	ldr	r3, [pc, #68]	@ (8008640 <xPortStartScheduler+0x140>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085fe:	f000 f8f9 	bl	80087f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008602:	4b10      	ldr	r3, [pc, #64]	@ (8008644 <xPortStartScheduler+0x144>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a0f      	ldr	r2, [pc, #60]	@ (8008644 <xPortStartScheduler+0x144>)
 8008608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800860c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800860e:	f7ff ff63 	bl	80084d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008612:	f7fe ff2d 	bl	8007470 <vTaskSwitchContext>
	prvTaskExitError();
 8008616:	f7ff ff1b 	bl	8008450 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	e000ed00 	.word	0xe000ed00
 8008628:	410fc271 	.word	0x410fc271
 800862c:	410fc270 	.word	0x410fc270
 8008630:	e000e400 	.word	0xe000e400
 8008634:	200014dc 	.word	0x200014dc
 8008638:	200014e0 	.word	0x200014e0
 800863c:	e000ed20 	.word	0xe000ed20
 8008640:	2000000c 	.word	0x2000000c
 8008644:	e000ef34 	.word	0xe000ef34

08008648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	607b      	str	r3, [r7, #4]
}
 8008660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008662:	4b10      	ldr	r3, [pc, #64]	@ (80086a4 <vPortEnterCritical+0x5c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3301      	adds	r3, #1
 8008668:	4a0e      	ldr	r2, [pc, #56]	@ (80086a4 <vPortEnterCritical+0x5c>)
 800866a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800866c:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <vPortEnterCritical+0x5c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d110      	bne.n	8008696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008674:	4b0c      	ldr	r3, [pc, #48]	@ (80086a8 <vPortEnterCritical+0x60>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00b      	beq.n	8008696 <vPortEnterCritical+0x4e>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	603b      	str	r3, [r7, #0]
}
 8008690:	bf00      	nop
 8008692:	bf00      	nop
 8008694:	e7fd      	b.n	8008692 <vPortEnterCritical+0x4a>
	}
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	2000000c 	.word	0x2000000c
 80086a8:	e000ed04 	.word	0xe000ed04

080086ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086b2:	4b12      	ldr	r3, [pc, #72]	@ (80086fc <vPortExitCritical+0x50>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10b      	bne.n	80086d2 <vPortExitCritical+0x26>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	607b      	str	r3, [r7, #4]
}
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	e7fd      	b.n	80086ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086d2:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <vPortExitCritical+0x50>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	4a08      	ldr	r2, [pc, #32]	@ (80086fc <vPortExitCritical+0x50>)
 80086da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086dc:	4b07      	ldr	r3, [pc, #28]	@ (80086fc <vPortExitCritical+0x50>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d105      	bne.n	80086f0 <vPortExitCritical+0x44>
 80086e4:	2300      	movs	r3, #0
 80086e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f383 8811 	msr	BASEPRI, r3
}
 80086ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	2000000c 	.word	0x2000000c

08008700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008700:	f3ef 8009 	mrs	r0, PSP
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	4b15      	ldr	r3, [pc, #84]	@ (8008760 <pxCurrentTCBConst>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	f01e 0f10 	tst.w	lr, #16
 8008710:	bf08      	it	eq
 8008712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871a:	6010      	str	r0, [r2, #0]
 800871c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008724:	f380 8811 	msr	BASEPRI, r0
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f7fe fe9e 	bl	8007470 <vTaskSwitchContext>
 8008734:	f04f 0000 	mov.w	r0, #0
 8008738:	f380 8811 	msr	BASEPRI, r0
 800873c:	bc09      	pop	{r0, r3}
 800873e:	6819      	ldr	r1, [r3, #0]
 8008740:	6808      	ldr	r0, [r1, #0]
 8008742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008746:	f01e 0f10 	tst.w	lr, #16
 800874a:	bf08      	it	eq
 800874c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008750:	f380 8809 	msr	PSP, r0
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	f3af 8000 	nop.w

08008760 <pxCurrentTCBConst>:
 8008760:	20000eb0 	.word	0x20000eb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop

08008768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	607b      	str	r3, [r7, #4]
}
 8008780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008782:	f7fe fdbb 	bl	80072fc <xTaskIncrementTick>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800878c:	4b06      	ldr	r3, [pc, #24]	@ (80087a8 <xPortSysTickHandler+0x40>)
 800878e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	2300      	movs	r3, #0
 8008796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f383 8811 	msr	BASEPRI, r3
}
 800879e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	e000ed04 	.word	0xe000ed04

080087ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087b0:	4b0b      	ldr	r3, [pc, #44]	@ (80087e0 <vPortSetupTimerInterrupt+0x34>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087b6:	4b0b      	ldr	r3, [pc, #44]	@ (80087e4 <vPortSetupTimerInterrupt+0x38>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087bc:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <vPortSetupTimerInterrupt+0x3c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a0a      	ldr	r2, [pc, #40]	@ (80087ec <vPortSetupTimerInterrupt+0x40>)
 80087c2:	fba2 2303 	umull	r2, r3, r2, r3
 80087c6:	099b      	lsrs	r3, r3, #6
 80087c8:	4a09      	ldr	r2, [pc, #36]	@ (80087f0 <vPortSetupTimerInterrupt+0x44>)
 80087ca:	3b01      	subs	r3, #1
 80087cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087ce:	4b04      	ldr	r3, [pc, #16]	@ (80087e0 <vPortSetupTimerInterrupt+0x34>)
 80087d0:	2207      	movs	r2, #7
 80087d2:	601a      	str	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	e000e010 	.word	0xe000e010
 80087e4:	e000e018 	.word	0xe000e018
 80087e8:	20000000 	.word	0x20000000
 80087ec:	10624dd3 	.word	0x10624dd3
 80087f0:	e000e014 	.word	0xe000e014

080087f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008804 <vPortEnableVFP+0x10>
 80087f8:	6801      	ldr	r1, [r0, #0]
 80087fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087fe:	6001      	str	r1, [r0, #0]
 8008800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008802:	bf00      	nop
 8008804:	e000ed88 	.word	0xe000ed88

08008808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800880e:	f3ef 8305 	mrs	r3, IPSR
 8008812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b0f      	cmp	r3, #15
 8008818:	d915      	bls.n	8008846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800881a:	4a18      	ldr	r2, [pc, #96]	@ (800887c <vPortValidateInterruptPriority+0x74>)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008824:	4b16      	ldr	r3, [pc, #88]	@ (8008880 <vPortValidateInterruptPriority+0x78>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	7afa      	ldrb	r2, [r7, #11]
 800882a:	429a      	cmp	r2, r3
 800882c:	d20b      	bcs.n	8008846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
}
 8008840:	bf00      	nop
 8008842:	bf00      	nop
 8008844:	e7fd      	b.n	8008842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008846:	4b0f      	ldr	r3, [pc, #60]	@ (8008884 <vPortValidateInterruptPriority+0x7c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800884e:	4b0e      	ldr	r3, [pc, #56]	@ (8008888 <vPortValidateInterruptPriority+0x80>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d90b      	bls.n	800886e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	603b      	str	r3, [r7, #0]
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	e7fd      	b.n	800886a <vPortValidateInterruptPriority+0x62>
	}
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	e000e3f0 	.word	0xe000e3f0
 8008880:	200014dc 	.word	0x200014dc
 8008884:	e000ed0c 	.word	0xe000ed0c
 8008888:	200014e0 	.word	0x200014e0

0800888c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08a      	sub	sp, #40	@ 0x28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008894:	2300      	movs	r3, #0
 8008896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008898:	f7fe fc74 	bl	8007184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800889c:	4b5c      	ldr	r3, [pc, #368]	@ (8008a10 <pvPortMalloc+0x184>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088a4:	f000 f924 	bl	8008af0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008a14 <pvPortMalloc+0x188>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4013      	ands	r3, r2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f040 8095 	bne.w	80089e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01e      	beq.n	80088fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80088bc:	2208      	movs	r2, #8
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4413      	add	r3, r2
 80088c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d015      	beq.n	80088fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	3308      	adds	r3, #8
 80088d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f003 0307 	and.w	r3, r3, #7
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00b      	beq.n	80088fa <pvPortMalloc+0x6e>
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	617b      	str	r3, [r7, #20]
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop
 80088f8:	e7fd      	b.n	80088f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d06f      	beq.n	80089e0 <pvPortMalloc+0x154>
 8008900:	4b45      	ldr	r3, [pc, #276]	@ (8008a18 <pvPortMalloc+0x18c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d86a      	bhi.n	80089e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800890a:	4b44      	ldr	r3, [pc, #272]	@ (8008a1c <pvPortMalloc+0x190>)
 800890c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800890e:	4b43      	ldr	r3, [pc, #268]	@ (8008a1c <pvPortMalloc+0x190>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008914:	e004      	b.n	8008920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	429a      	cmp	r2, r3
 8008928:	d903      	bls.n	8008932 <pvPortMalloc+0xa6>
 800892a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f1      	bne.n	8008916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008932:	4b37      	ldr	r3, [pc, #220]	@ (8008a10 <pvPortMalloc+0x184>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008938:	429a      	cmp	r2, r3
 800893a:	d051      	beq.n	80089e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2208      	movs	r2, #8
 8008942:	4413      	add	r3, r2
 8008944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800894e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	1ad2      	subs	r2, r2, r3
 8008956:	2308      	movs	r3, #8
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	429a      	cmp	r2, r3
 800895c:	d920      	bls.n	80089a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800895e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4413      	add	r3, r2
 8008964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00b      	beq.n	8008988 <pvPortMalloc+0xfc>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	613b      	str	r3, [r7, #16]
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800899a:	69b8      	ldr	r0, [r7, #24]
 800899c:	f000 f90a 	bl	8008bb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a18 <pvPortMalloc+0x18c>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008a18 <pvPortMalloc+0x18c>)
 80089ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008a18 <pvPortMalloc+0x18c>)
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008a20 <pvPortMalloc+0x194>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d203      	bcs.n	80089c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089ba:	4b17      	ldr	r3, [pc, #92]	@ (8008a18 <pvPortMalloc+0x18c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a18      	ldr	r2, [pc, #96]	@ (8008a20 <pvPortMalloc+0x194>)
 80089c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	4b13      	ldr	r3, [pc, #76]	@ (8008a14 <pvPortMalloc+0x188>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089d6:	4b13      	ldr	r3, [pc, #76]	@ (8008a24 <pvPortMalloc+0x198>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3301      	adds	r3, #1
 80089dc:	4a11      	ldr	r2, [pc, #68]	@ (8008a24 <pvPortMalloc+0x198>)
 80089de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089e0:	f7fe fbde 	bl	80071a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	f003 0307 	and.w	r3, r3, #7
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00b      	beq.n	8008a06 <pvPortMalloc+0x17a>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60fb      	str	r3, [r7, #12]
}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	e7fd      	b.n	8008a02 <pvPortMalloc+0x176>
	return pvReturn;
 8008a06:	69fb      	ldr	r3, [r7, #28]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3728      	adds	r7, #40	@ 0x28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	200020a4 	.word	0x200020a4
 8008a14:	200020b8 	.word	0x200020b8
 8008a18:	200020a8 	.word	0x200020a8
 8008a1c:	2000209c 	.word	0x2000209c
 8008a20:	200020ac 	.word	0x200020ac
 8008a24:	200020b0 	.word	0x200020b0

08008a28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d04f      	beq.n	8008ada <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a3a:	2308      	movs	r3, #8
 8008a3c:	425b      	negs	r3, r3
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	4413      	add	r3, r2
 8008a42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4b25      	ldr	r3, [pc, #148]	@ (8008ae4 <vPortFree+0xbc>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4013      	ands	r3, r2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10b      	bne.n	8008a6e <vPortFree+0x46>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	60fb      	str	r3, [r7, #12]
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	e7fd      	b.n	8008a6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00b      	beq.n	8008a8e <vPortFree+0x66>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	60bb      	str	r3, [r7, #8]
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	4b14      	ldr	r3, [pc, #80]	@ (8008ae4 <vPortFree+0xbc>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4013      	ands	r3, r2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01e      	beq.n	8008ada <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d11a      	bne.n	8008ada <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae4 <vPortFree+0xbc>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	43db      	mvns	r3, r3
 8008aae:	401a      	ands	r2, r3
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ab4:	f7fe fb66 	bl	8007184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae8 <vPortFree+0xc0>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	4a09      	ldr	r2, [pc, #36]	@ (8008ae8 <vPortFree+0xc0>)
 8008ac4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ac6:	6938      	ldr	r0, [r7, #16]
 8008ac8:	f000 f874 	bl	8008bb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008acc:	4b07      	ldr	r3, [pc, #28]	@ (8008aec <vPortFree+0xc4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	4a06      	ldr	r2, [pc, #24]	@ (8008aec <vPortFree+0xc4>)
 8008ad4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ad6:	f7fe fb63 	bl	80071a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ada:	bf00      	nop
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	200020b8 	.word	0x200020b8
 8008ae8:	200020a8 	.word	0x200020a8
 8008aec:	200020b4 	.word	0x200020b4

08008af0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008af6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008afa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008afc:	4b27      	ldr	r3, [pc, #156]	@ (8008b9c <prvHeapInit+0xac>)
 8008afe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00c      	beq.n	8008b24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3307      	adds	r3, #7
 8008b0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f023 0307 	bic.w	r3, r3, #7
 8008b16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8008b9c <prvHeapInit+0xac>)
 8008b20:	4413      	add	r3, r2
 8008b22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba0 <prvHeapInit+0xb0>)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ba0 <prvHeapInit+0xb0>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	4413      	add	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b3c:	2208      	movs	r2, #8
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	1a9b      	subs	r3, r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0307 	bic.w	r3, r3, #7
 8008b4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	4a15      	ldr	r2, [pc, #84]	@ (8008ba4 <prvHeapInit+0xb4>)
 8008b50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b52:	4b14      	ldr	r3, [pc, #80]	@ (8008ba4 <prvHeapInit+0xb4>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2200      	movs	r2, #0
 8008b58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b5a:	4b12      	ldr	r3, [pc, #72]	@ (8008ba4 <prvHeapInit+0xb4>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	1ad2      	subs	r2, r2, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b70:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba4 <prvHeapInit+0xb4>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8008ba8 <prvHeapInit+0xb8>)
 8008b7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	4a09      	ldr	r2, [pc, #36]	@ (8008bac <prvHeapInit+0xbc>)
 8008b86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b88:	4b09      	ldr	r3, [pc, #36]	@ (8008bb0 <prvHeapInit+0xc0>)
 8008b8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b8e:	601a      	str	r2, [r3, #0]
}
 8008b90:	bf00      	nop
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	200014e4 	.word	0x200014e4
 8008ba0:	2000209c 	.word	0x2000209c
 8008ba4:	200020a4 	.word	0x200020a4
 8008ba8:	200020ac 	.word	0x200020ac
 8008bac:	200020a8 	.word	0x200020a8
 8008bb0:	200020b8 	.word	0x200020b8

08008bb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bbc:	4b28      	ldr	r3, [pc, #160]	@ (8008c60 <prvInsertBlockIntoFreeList+0xac>)
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	e002      	b.n	8008bc8 <prvInsertBlockIntoFreeList+0x14>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d8f7      	bhi.n	8008bc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d108      	bne.n	8008bf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	441a      	add	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d118      	bne.n	8008c3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	4b15      	ldr	r3, [pc, #84]	@ (8008c64 <prvInsertBlockIntoFreeList+0xb0>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d00d      	beq.n	8008c32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	441a      	add	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	e008      	b.n	8008c44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c32:	4b0c      	ldr	r3, [pc, #48]	@ (8008c64 <prvInsertBlockIntoFreeList+0xb0>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e003      	b.n	8008c44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d002      	beq.n	8008c52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c52:	bf00      	nop
 8008c54:	3714      	adds	r7, #20
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	2000209c 	.word	0x2000209c
 8008c64:	200020a4 	.word	0x200020a4

08008c68 <memset>:
 8008c68:	4402      	add	r2, r0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d100      	bne.n	8008c72 <memset+0xa>
 8008c70:	4770      	bx	lr
 8008c72:	f803 1b01 	strb.w	r1, [r3], #1
 8008c76:	e7f9      	b.n	8008c6c <memset+0x4>

08008c78 <__libc_init_array>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8008cb0 <__libc_init_array+0x38>)
 8008c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8008cb4 <__libc_init_array+0x3c>)
 8008c7e:	1b64      	subs	r4, r4, r5
 8008c80:	10a4      	asrs	r4, r4, #2
 8008c82:	2600      	movs	r6, #0
 8008c84:	42a6      	cmp	r6, r4
 8008c86:	d109      	bne.n	8008c9c <__libc_init_array+0x24>
 8008c88:	4d0b      	ldr	r5, [pc, #44]	@ (8008cb8 <__libc_init_array+0x40>)
 8008c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8008cbc <__libc_init_array+0x44>)
 8008c8c:	f000 f826 	bl	8008cdc <_init>
 8008c90:	1b64      	subs	r4, r4, r5
 8008c92:	10a4      	asrs	r4, r4, #2
 8008c94:	2600      	movs	r6, #0
 8008c96:	42a6      	cmp	r6, r4
 8008c98:	d105      	bne.n	8008ca6 <__libc_init_array+0x2e>
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca0:	4798      	blx	r3
 8008ca2:	3601      	adds	r6, #1
 8008ca4:	e7ee      	b.n	8008c84 <__libc_init_array+0xc>
 8008ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008caa:	4798      	blx	r3
 8008cac:	3601      	adds	r6, #1
 8008cae:	e7f2      	b.n	8008c96 <__libc_init_array+0x1e>
 8008cb0:	08008e0c 	.word	0x08008e0c
 8008cb4:	08008e0c 	.word	0x08008e0c
 8008cb8:	08008e0c 	.word	0x08008e0c
 8008cbc:	08008e10 	.word	0x08008e10

08008cc0 <memcpy>:
 8008cc0:	440a      	add	r2, r1
 8008cc2:	4291      	cmp	r1, r2
 8008cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cc8:	d100      	bne.n	8008ccc <memcpy+0xc>
 8008cca:	4770      	bx	lr
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cd6:	4291      	cmp	r1, r2
 8008cd8:	d1f9      	bne.n	8008cce <memcpy+0xe>
 8008cda:	bd10      	pop	{r4, pc}

08008cdc <_init>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	bf00      	nop
 8008ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce2:	bc08      	pop	{r3}
 8008ce4:	469e      	mov	lr, r3
 8008ce6:	4770      	bx	lr

08008ce8 <_fini>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr
