
HW7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800a130  0800a130  0000b130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a638  0800a638  0000c710  2**0
                  CONTENTS
  4 .ARM          00000008  0800a638  0800a638  0000b638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a640  0800a640  0000c710  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a640  0800a640  0000b640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a644  0800a644  0000b644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000710  20000000  0800a648  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000840  20000710  0800ad58  0000c710  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f50  0800ad58  0000cf50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c710  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116af  00000000  00000000  0000c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002988  00000000  00000000  0001ddef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00020778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027cc2  00000000  00000000  00021600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012a9a  00000000  00000000  000492c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f083a  00000000  00000000  0005bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000b8  00000000  00000000  0014c596  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000ae4  00000000  00000000  0014c64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005000  00000000  00000000  0014d134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00152134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  00152199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  00152ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000710 	.word	0x20000710
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a114 	.word	0x0800a114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000714 	.word	0x20000714
 80001cc:	0800a114 	.word	0x0800a114

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000fec:	1d39      	adds	r1, r7, #4
 8000fee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <__io_putchar+0x20>)
 8000ff6:	f003 fd23 	bl	8004a40 <HAL_UART_Transmit>
	return ch;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000d1c 	.word	0x20000d1c

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	f5ad 6da7 	sub.w	sp, sp, #1336	@ 0x538
 800100e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f000 fffe 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f8b2 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f000 f932 	bl	8001280 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800101c:	f000 f900 	bl	8001220 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8001020:	f000 fe8a 	bl	8001d38 <BSP_ACCELERO_Init>
  int16_t accel_data[3] ; // Array to hold X, Y, Z data
  int16_t *pDataXYZ = accel_data;
 8001024:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8001028:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
  float32_t input[320] = {0};
 800102c:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8001030:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001034:	4618      	mov	r0, r3
 8001036:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800103a:	461a      	mov	r2, r3
 800103c:	2100      	movs	r1, #0
 800103e:	f005 fc90 	bl	8006962 <memset>
  float32_t *input_ptr;
  for(int i = 0; i < 320; i++){
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8001048:	e01b      	b.n	8001082 <main+0x7a>
	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800104a:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 800104e:	f000 feb1 	bl	8001db4 <BSP_ACCELERO_AccGetXYZ>
	  input[i] = accel_data[0];
 8001052:	f9b7 350c 	ldrsh.w	r3, [r7, #1292]	@ 0x50c
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8001062:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 8001066:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	edc3 7a00 	vstr	s15, [r3]
//printf("%f", input[i]);
	  HAL_Delay(10);
 8001072:	200a      	movs	r0, #10
 8001074:	f001 f840 	bl	80020f8 <HAL_Delay>
  for(int i = 0; i < 320; i++){
 8001078:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 800107c:	3301      	adds	r3, #1
 800107e:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8001082:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001086:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800108a:	dbde      	blt.n	800104a <main+0x42>
  }
  input_ptr = &input;
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  arm_fir_instance_f32 S;
  arm_status status;
  float32_t  *inputF32, *outputF32;

    /* Initialize input and output buffer pointers */
  inputF32 = &testInput_f32_1kHz_15kHz[0];
 8001094:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <main+0x14c>)
 8001096:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
  outputF32 = &testOutput[0];
 800109a:	4b2f      	ldr	r3, [pc, #188]	@ (8001158 <main+0x150>)
 800109c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514

    /* Call FIR init function to initialize the instance structure. */
  arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 80010a0:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <main+0x154>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4638      	mov	r0, r7
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001160 <main+0x158>)
 80010aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001164 <main+0x15c>)
 80010ac:	211d      	movs	r1, #29
 80010ae:	f004 fa25 	bl	80054fc <arm_fir_init_f32>

  for(i=0; i < numBlocks; i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 80010b8:	e01d      	b.n	80010f6 <main+0xee>
    {
      arm_fir_f32(&S, input_ptr + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 80010ba:	4b28      	ldr	r3, [pc, #160]	@ (800115c <main+0x154>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80010cc:	18d1      	adds	r1, r2, r3
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <main+0x154>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	f8d7 2514 	ldr.w	r2, [r7, #1300]	@ 0x514
 80010e0:	441a      	add	r2, r3
 80010e2:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <main+0x154>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4638      	mov	r0, r7
 80010e8:	f004 fa18 	bl	800551c <arm_fir_f32>
  for(i=0; i < numBlocks; i++)
 80010ec:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 80010f0:	3301      	adds	r3, #1
 80010f2:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 80010f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <main+0x160>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8d7 2528 	ldr.w	r2, [r7, #1320]	@ 0x528
 80010fe:	429a      	cmp	r2, r3
 8001100:	d3db      	bcc.n	80010ba <main+0xb2>
    }
  printf("success");
 8001102:	481a      	ldr	r0, [pc, #104]	@ (800116c <main+0x164>)
 8001104:	f005 fbb8 	bl	8006878 <iprintf>
  for(int i = 0; i<320; i++){
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 800110e:	e017      	b.n	8001140 <main+0x138>
	  printf("%f\n",testOutput[i]);
 8001110:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <main+0x150>)
 8001112:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa13 	bl	8000548 <__aeabi_f2d>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4812      	ldr	r0, [pc, #72]	@ (8001170 <main+0x168>)
 8001128:	f005 fba6 	bl	8006878 <iprintf>
	  printf("\n%d", i);
 800112c:	f8d7 1524 	ldr.w	r1, [r7, #1316]	@ 0x524
 8001130:	4810      	ldr	r0, [pc, #64]	@ (8001174 <main+0x16c>)
 8001132:	f005 fba1 	bl	8006878 <iprintf>
  for(int i = 0; i<320; i++){
 8001136:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800113a:	3301      	adds	r3, #1
 800113c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8001140:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001144:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001148:	dbe2      	blt.n	8001110 <main+0x108>
  }
  printf("finished");
 800114a:	480b      	ldr	r0, [pc, #44]	@ (8001178 <main+0x170>)
 800114c:	f005 fb94 	bl	8006878 <iprintf>
  while(1);
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <main+0x148>
 8001154:	20000000 	.word	0x20000000
 8001158:	2000072c 	.word	0x2000072c
 800115c:	20000500 	.word	0x20000500
 8001160:	20000c2c 	.word	0x20000c2c
 8001164:	0800a14c 	.word	0x0800a14c
 8001168:	20000504 	.word	0x20000504
 800116c:	0800a130 	.word	0x0800a130
 8001170:	0800a138 	.word	0x0800a138
 8001174:	0800a13c 	.word	0x0800a13c
 8001178:	0800a140 	.word	0x0800a140

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b096      	sub	sp, #88	@ 0x58
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2244      	movs	r2, #68	@ 0x44
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f005 fbe9 	bl	8006962 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800119e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011a2:	f002 f8ed 	bl	8003380 <HAL_PWREx_ControlVoltageScaling>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011ac:	f000 fa92 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011b0:	2310      	movs	r3, #16
 80011b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011bc:	2360      	movs	r3, #96	@ 0x60
 80011be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	2302      	movs	r3, #2
 80011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011c4:	2301      	movs	r3, #1
 80011c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011cc:	2328      	movs	r3, #40	@ 0x28
 80011ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011d0:	2307      	movs	r3, #7
 80011d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 f923 	bl	800342c <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011ec:	f000 fa72 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f0:	230f      	movs	r3, #15
 80011f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f4:	2303      	movs	r3, #3
 80011f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	2104      	movs	r1, #4
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fceb 	bl	8003be4 <HAL_RCC_ClockConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001214:	f000 fa5e 	bl	80016d4 <Error_Handler>
  }
}
 8001218:	bf00      	nop
 800121a:	3758      	adds	r7, #88	@ 0x58
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001226:	4a15      	ldr	r2, [pc, #84]	@ (800127c <MX_USART1_UART_Init+0x5c>)
 8001228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_USART1_UART_Init+0x58>)
 8001264:	f003 fb9e 	bl	80049a4 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800126e:	f000 fa31 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000d1c 	.word	0x20000d1c
 800127c:	40013800 	.word	0x40013800

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	@ 0x28
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001296:	4bbc      	ldr	r3, [pc, #752]	@ (8001588 <MX_GPIO_Init+0x308>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4abb      	ldr	r2, [pc, #748]	@ (8001588 <MX_GPIO_Init+0x308>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4bb9      	ldr	r3, [pc, #740]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4bb6      	ldr	r3, [pc, #728]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4ab5      	ldr	r2, [pc, #724]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4bb3      	ldr	r3, [pc, #716]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4bb0      	ldr	r3, [pc, #704]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4aaf      	ldr	r2, [pc, #700]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4bad      	ldr	r3, [pc, #692]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4baa      	ldr	r3, [pc, #680]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	4aa9      	ldr	r2, [pc, #676]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ea:	4ba7      	ldr	r3, [pc, #668]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4ba4      	ldr	r3, [pc, #656]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4aa3      	ldr	r2, [pc, #652]	@ (8001588 <MX_GPIO_Init+0x308>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4ba1      	ldr	r3, [pc, #644]	@ (8001588 <MX_GPIO_Init+0x308>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001314:	489d      	ldr	r0, [pc, #628]	@ (800158c <MX_GPIO_Init+0x30c>)
 8001316:	f001 f9cf 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001324:	f001 f9c8 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001328:	2200      	movs	r2, #0
 800132a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800132e:	4898      	ldr	r0, [pc, #608]	@ (8001590 <MX_GPIO_Init+0x310>)
 8001330:	f001 f9c2 	bl	80026b8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f241 0181 	movw	r1, #4225	@ 0x1081
 800133a:	4896      	ldr	r0, [pc, #600]	@ (8001594 <MX_GPIO_Init+0x314>)
 800133c:	f001 f9bc 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001346:	4893      	ldr	r0, [pc, #588]	@ (8001594 <MX_GPIO_Init+0x314>)
 8001348:	f001 f9b6 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001352:	4891      	ldr	r0, [pc, #580]	@ (8001598 <MX_GPIO_Init+0x318>)
 8001354:	f001 f9b0 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	2120      	movs	r1, #32
 800135c:	488c      	ldr	r0, [pc, #560]	@ (8001590 <MX_GPIO_Init+0x310>)
 800135e:	f001 f9ab 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2101      	movs	r1, #1
 8001366:	4889      	ldr	r0, [pc, #548]	@ (800158c <MX_GPIO_Init+0x30c>)
 8001368:	f001 f9a6 	bl	80026b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800136c:	f240 1315 	movw	r3, #277	@ 0x115
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4881      	ldr	r0, [pc, #516]	@ (800158c <MX_GPIO_Init+0x30c>)
 8001386:	f000 ffed 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800138a:	236a      	movs	r3, #106	@ 0x6a
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	487b      	ldr	r0, [pc, #492]	@ (800158c <MX_GPIO_Init+0x30c>)
 80013a0:	f000 ffe0 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80013a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4877      	ldr	r0, [pc, #476]	@ (8001598 <MX_GPIO_Init+0x318>)
 80013bc:	f000 ffd2 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80013c0:	233f      	movs	r3, #63	@ 0x3f
 80013c2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013c4:	230b      	movs	r3, #11
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4871      	ldr	r0, [pc, #452]	@ (8001598 <MX_GPIO_Init+0x318>)
 80013d4:	f000 ffc6 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80013d8:	2303      	movs	r3, #3
 80013da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013e8:	2308      	movs	r3, #8
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f6:	f000 ffb5 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80013fa:	f248 1304 	movw	r3, #33028	@ 0x8104
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001416:	f000 ffa5 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800141a:	2308      	movs	r3, #8
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800142a:	2301      	movs	r3, #1
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f000 ff94 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800143c:	2310      	movs	r3, #16
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001440:	230b      	movs	r3, #11
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001452:	f000 ff87 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001456:	23e0      	movs	r3, #224	@ 0xe0
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001466:	2305      	movs	r3, #5
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001474:	f000 ff76 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001478:	2301      	movs	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4840      	ldr	r0, [pc, #256]	@ (8001590 <MX_GPIO_Init+0x310>)
 800148e:	f000 ff69 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001492:	2302      	movs	r3, #2
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001496:	230b      	movs	r3, #11
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	483a      	ldr	r0, [pc, #232]	@ (8001590 <MX_GPIO_Init+0x310>)
 80014a6:	f000 ff5d 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80014aa:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80014ae:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4833      	ldr	r0, [pc, #204]	@ (8001590 <MX_GPIO_Init+0x310>)
 80014c4:	f000 ff4e 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80014c8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014da:	2306      	movs	r3, #6
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4829      	ldr	r0, [pc, #164]	@ (800158c <MX_GPIO_Init+0x30c>)
 80014e6:	f000 ff3d 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80014ea:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80014ee:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014fc:	230a      	movs	r3, #10
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4821      	ldr	r0, [pc, #132]	@ (800158c <MX_GPIO_Init+0x30c>)
 8001508:	f000 ff2c 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800150c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001512:	2312      	movs	r3, #18
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800151e:	2304      	movs	r3, #4
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4819      	ldr	r0, [pc, #100]	@ (8001590 <MX_GPIO_Init+0x310>)
 800152a:	f000 ff1b 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800152e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001540:	2307      	movs	r3, #7
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4812      	ldr	r0, [pc, #72]	@ (8001594 <MX_GPIO_Init+0x314>)
 800154c:	f000 ff0a 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001550:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001554:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001556:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	480b      	ldr	r0, [pc, #44]	@ (8001594 <MX_GPIO_Init+0x314>)
 8001568:	f000 fefc 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800156c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	e00a      	b.n	800159c <MX_GPIO_Init+0x31c>
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000
 800158c:	48001000 	.word	0x48001000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000c00 	.word	0x48000c00
 8001598:	48000800 	.word	0x48000800
 800159c:	484a      	ldr	r0, [pc, #296]	@ (80016c8 <MX_GPIO_Init+0x448>)
 800159e:	f000 fee1 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80015a2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4844      	ldr	r0, [pc, #272]	@ (80016cc <MX_GPIO_Init+0x44c>)
 80015bc:	f000 fed2 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80015c0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	483d      	ldr	r0, [pc, #244]	@ (80016cc <MX_GPIO_Init+0x44c>)
 80015d8:	f000 fec4 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80015dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f4:	f000 feb6 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80015f8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800160a:	230a      	movs	r3, #10
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001618:	f000 fea4 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800161c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800162e:	2306      	movs	r3, #6
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4824      	ldr	r0, [pc, #144]	@ (80016cc <MX_GPIO_Init+0x44c>)
 800163a:	f000 fe93 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800163e:	2302      	movs	r3, #2
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800164e:	2305      	movs	r3, #5
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	481b      	ldr	r0, [pc, #108]	@ (80016c8 <MX_GPIO_Init+0x448>)
 800165a:	f000 fe83 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800165e:	2378      	movs	r3, #120	@ 0x78
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800166e:	2307      	movs	r3, #7
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	4813      	ldr	r0, [pc, #76]	@ (80016c8 <MX_GPIO_Init+0x448>)
 800167a:	f000 fe73 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800167e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001684:	2312      	movs	r3, #18
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001690:	2304      	movs	r3, #4
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	480d      	ldr	r0, [pc, #52]	@ (80016d0 <MX_GPIO_Init+0x450>)
 800169c:	f000 fe62 	bl	8002364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2017      	movs	r0, #23
 80016a6:	f000 fe26 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016aa:	2017      	movs	r0, #23
 80016ac:	f000 fe3f 	bl	800232e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2028      	movs	r0, #40	@ 0x28
 80016b6:	f000 fe1e 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ba:	2028      	movs	r0, #40	@ 0x28
 80016bc:	f000 fe37 	bl	800232e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	@ 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	48000c00 	.word	0x48000c00
 80016cc:	48000800 	.word	0x48000800
 80016d0:	48000400 	.word	0x48000400

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <Error_Handler+0x8>

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_MspInit+0x44>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <HAL_MspInit+0x44>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_MspInit+0x44>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_MspInit+0x44>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	4a08      	ldr	r2, [pc, #32]	@ (8001724 <HAL_MspInit+0x44>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001708:	6593      	str	r3, [r2, #88]	@ 0x58
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_MspInit+0x44>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0ac      	sub	sp, #176	@ 0xb0
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2288      	movs	r2, #136	@ 0x88
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f005 f90a 	bl	8006962 <memset>
  if(huart->Instance==USART1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a21      	ldr	r2, [pc, #132]	@ (80017d8 <HAL_UART_MspInit+0xb0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d13a      	bne.n	80017ce <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001758:	2301      	movs	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800175c:	2300      	movs	r3, #0
 800175e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fc61 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001770:	f7ff ffb0 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_UART_MspInit+0xb4>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001778:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <HAL_UART_MspInit+0xb4>)
 800177a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800177e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <HAL_UART_MspInit+0xb4>)
 8001782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <HAL_UART_MspInit+0xb4>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001790:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <HAL_UART_MspInit+0xb4>)
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001798:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <HAL_UART_MspInit+0xb4>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80017a4:	23c0      	movs	r3, #192	@ 0xc0
 80017a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017bc:	2307      	movs	r3, #7
 80017be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <HAL_UART_MspInit+0xb8>)
 80017ca:	f000 fdcb 	bl	8002364 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017ce:	bf00      	nop
 80017d0:	37b0      	adds	r7, #176	@ 0xb0
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40013800 	.word	0x40013800
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000400 	.word	0x48000400

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <MemManage_Handler+0x4>

080017fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <UsageFault_Handler+0x4>

0800180c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183a:	f000 fc3d 	bl	80020b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}

08001842 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001846:	2020      	movs	r0, #32
 8001848:	f000 ff4e 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800184c:	2040      	movs	r0, #64	@ 0x40
 800184e:	f000 ff4b 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001852:	2080      	movs	r0, #128	@ 0x80
 8001854:	f000 ff48 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001858:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800185c:	f000 ff44 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001868:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800186c:	f000 ff3c 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001870:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001874:	f000 ff38 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001878:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800187c:	f000 ff34 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001880:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001884:	f000 ff30 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001888:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800188c:	f000 ff2c 	bl	80026e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return 1;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <_kill>:

int _kill(int pid, int sig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ae:	f005 f8ab 	bl	8006a08 <__errno>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2216      	movs	r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
  return -1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_exit>:

void _exit (int status)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffe7 	bl	80018a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d6:	bf00      	nop
 80018d8:	e7fd      	b.n	80018d6 <_exit+0x12>

080018da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b086      	sub	sp, #24
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e00a      	b.n	8001902 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ec:	f3af 8000 	nop.w
 80018f0:	4601      	mov	r1, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	60ba      	str	r2, [r7, #8]
 80018f8:	b2ca      	uxtb	r2, r1
 80018fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	dbf0      	blt.n	80018ec <_read+0x12>
  }

  return len;
 800190a:	687b      	ldr	r3, [r7, #4]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e009      	b.n	800193a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	60ba      	str	r2, [r7, #8]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fb58 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	dbf1      	blt.n	8001926 <_write+0x12>
  }
  return len;
 8001942:	687b      	ldr	r3, [r7, #4]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_close>:

int _close(int file)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001974:	605a      	str	r2, [r3, #4]
  return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_isatty>:

int _isatty(int file)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <_sbrk+0x5c>)
 80019be:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <_sbrk+0x60>)
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c8:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d0:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <_sbrk+0x64>)
 80019d2:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <_sbrk+0x68>)
 80019d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d6:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d207      	bcs.n	80019f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e4:	f005 f810 	bl	8006a08 <__errno>
 80019e8:	4603      	mov	r3, r0
 80019ea:	220c      	movs	r2, #12
 80019ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	e009      	b.n	8001a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f4:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <_sbrk+0x64>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <_sbrk+0x64>)
 8001a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20018000 	.word	0x20018000
 8001a14:	00000400 	.word	0x00000400
 8001a18:	20000da4 	.word	0x20000da4
 8001a1c:	20000f50 	.word	0x20000f50

08001a20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <SystemInit+0x20>)
 8001a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <SystemInit+0x20>)
 8001a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a48:	f7ff ffea 	bl	8001a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a4e:	490d      	ldr	r1, [pc, #52]	@ (8001a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a50:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <LoopForever+0xe>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a54:	e002      	b.n	8001a5c <LoopCopyDataInit>

08001a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5a:	3304      	adds	r3, #4

08001a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a60:	d3f9      	bcc.n	8001a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a64:	4c0a      	ldr	r4, [pc, #40]	@ (8001a90 <LoopForever+0x16>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a68:	e001      	b.n	8001a6e <LoopFillZerobss>

08001a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a6c:	3204      	adds	r2, #4

08001a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a70:	d3fb      	bcc.n	8001a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a72:	f004 ffcf 	bl	8006a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a76:	f7ff fac7 	bl	8001008 <main>

08001a7a <LoopForever>:

LoopForever:
    b LoopForever
 8001a7a:	e7fe      	b.n	8001a7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	20000710 	.word	0x20000710
  ldr r2, =_sidata
 8001a88:	0800a648 	.word	0x0800a648
  ldr r2, =_sbss
 8001a8c:	20000710 	.word	0x20000710
  ldr r4, =_ebss
 8001a90:	20000f50 	.word	0x20000f50

08001a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC1_2_IRQHandler>
	...

08001a98 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001aa0:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa4:	4a26      	ldr	r2, [pc, #152]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aac:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001ab8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001abc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001abe:	2312      	movs	r3, #18
 8001ac0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001aca:	2304      	movs	r3, #4
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	481b      	ldr	r0, [pc, #108]	@ (8001b44 <I2Cx_MspInit+0xac>)
 8001ad6:	f000 fc45 	bl	8002364 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4818      	ldr	r0, [pc, #96]	@ (8001b44 <I2Cx_MspInit+0xac>)
 8001ae2:	f000 fc3f 	bl	8002364 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001ae6:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	4a15      	ldr	r2, [pc, #84]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001aec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b02:	4a0f      	ldr	r2, [pc, #60]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001b04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b08:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <I2Cx_MspInit+0xa8>)
 8001b10:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001b14:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	210f      	movs	r1, #15
 8001b1a:	2021      	movs	r0, #33	@ 0x21
 8001b1c:	f000 fbeb 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001b20:	2021      	movs	r0, #33	@ 0x21
 8001b22:	f000 fc04 	bl	800232e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	210f      	movs	r1, #15
 8001b2a:	2022      	movs	r0, #34	@ 0x22
 8001b2c:	f000 fbe3 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001b30:	2022      	movs	r0, #34	@ 0x22
 8001b32:	f000 fbfc 	bl	800232e <HAL_NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	@ 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000400 	.word	0x48000400

08001b48 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <I2Cx_Init+0x54>)
 8001b54:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a11      	ldr	r2, [pc, #68]	@ (8001ba0 <I2Cx_Init+0x58>)
 8001b5a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff89 	bl	8001a98 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fdd1 	bl	800272e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f001 fb9c 	bl	80032cc <HAL_I2CEx_ConfigAnalogFilter>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40005800 	.word	0x40005800
 8001ba0:	00702681 	.word	0x00702681

08001ba4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af04      	add	r7, sp, #16
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	4608      	mov	r0, r1
 8001bae:	4611      	mov	r1, r2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	72fb      	strb	r3, [r7, #11]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	813b      	strh	r3, [r7, #8]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	88f8      	ldrh	r0, [r7, #6]
 8001bc8:	893a      	ldrh	r2, [r7, #8]
 8001bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	4603      	mov	r3, r0
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 ff9a 	bl	8002b14 <HAL_I2C_Mem_Read>
 8001be0:	4603      	mov	r3, r0
 8001be2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001bea:	7afb      	ldrb	r3, [r7, #11]
 8001bec:	4619      	mov	r1, r3
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f832 	bl	8001c58 <I2Cx_Error>
  }
  return status;
 8001bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b08a      	sub	sp, #40	@ 0x28
 8001c02:	af04      	add	r7, sp, #16
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	4608      	mov	r0, r1
 8001c08:	4611      	mov	r1, r2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	72fb      	strb	r3, [r7, #11]
 8001c10:	460b      	mov	r3, r1
 8001c12:	813b      	strh	r3, [r7, #8]
 8001c14:	4613      	mov	r3, r2
 8001c16:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	b299      	uxth	r1, r3
 8001c20:	88f8      	ldrh	r0, [r7, #6]
 8001c22:	893a      	ldrh	r2, [r7, #8]
 8001c24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c28:	9302      	str	r3, [sp, #8]
 8001c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	4603      	mov	r3, r0
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fe59 	bl	80028ec <HAL_I2C_Mem_Write>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d004      	beq.n	8001c4e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	4619      	mov	r1, r3
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f805 	bl	8001c58 <I2Cx_Error>
  }
  return status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fdfd 	bl	8002864 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff6c 	bl	8001b48 <I2Cx_Init>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <SENSOR_IO_Init+0x10>)
 8001c7e:	f7ff ff63 	bl	8001b48 <I2Cx_Init>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000da8 	.word	0x20000da8

08001c8c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	460b      	mov	r3, r1
 8001c98:	71bb      	strb	r3, [r7, #6]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001c9e:	79bb      	ldrb	r3, [r7, #6]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	79f9      	ldrb	r1, [r7, #7]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	1d7b      	adds	r3, r7, #5
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	4803      	ldr	r0, [pc, #12]	@ (8001cbc <SENSOR_IO_Write+0x30>)
 8001cb0:	f7ff ffa5 	bl	8001bfe <I2Cx_WriteMultiple>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000da8 	.word	0x20000da8

08001cc0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	460a      	mov	r2, r1
 8001cca:	71fb      	strb	r3, [r7, #7]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	79f9      	ldrb	r1, [r7, #7]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f107 030f 	add.w	r3, r7, #15
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <SENSOR_IO_Read+0x38>)
 8001ce8:	f7ff ff5c 	bl	8001ba4 <I2Cx_ReadMultiple>

  return read_value;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000da8 	.word	0x20000da8

08001cfc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	603a      	str	r2, [r7, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	71bb      	strb	r3, [r7, #6]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001d12:	79bb      	ldrb	r3, [r7, #6]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	79f9      	ldrb	r1, [r7, #7]
 8001d18:	88bb      	ldrh	r3, [r7, #4]
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2301      	movs	r3, #1
 8001d22:	4804      	ldr	r0, [pc, #16]	@ (8001d34 <SENSOR_IO_ReadMultiple+0x38>)
 8001d24:	f7ff ff3e 	bl	8001ba4 <I2Cx_ReadMultiple>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000da8 	.word	0x20000da8

08001d38 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001d42:	2300      	movs	r3, #0
 8001d44:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001d46:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <BSP_ACCELERO_Init+0x74>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	4798      	blx	r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b6a      	cmp	r3, #106	@ 0x6a
 8001d50:	d002      	beq.n	8001d58 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	e024      	b.n	8001da2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <BSP_ACCELERO_Init+0x78>)
 8001d5a:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <BSP_ACCELERO_Init+0x74>)
 8001d5c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001d5e:	2330      	movs	r3, #48	@ 0x30
 8001d60:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001d66:	2300      	movs	r3, #0
 8001d68:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001d6a:	2340      	movs	r3, #64	@ 0x40
 8001d6c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001d76:	797a      	ldrb	r2, [r7, #5]
 8001d78:	7abb      	ldrb	r3, [r7, #10]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001d80:	7a3b      	ldrb	r3, [r7, #8]
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <BSP_ACCELERO_Init+0x78>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	89ba      	ldrh	r2, [r7, #12]
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4798      	blx	r3
  }  

  return ret;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	2000050c 	.word	0x2000050c
 8001db0:	20000dfc 	.word	0x20000dfc

08001db4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001dce:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
    }
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000dfc 	.word	0x20000dfc

08001de4 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001df2:	2110      	movs	r1, #16
 8001df4:	20d4      	movs	r0, #212	@ 0xd4
 8001df6:	f7ff ff63 	bl	8001cc0 <SENSOR_IO_Read>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001e02:	7bbb      	ldrb	r3, [r7, #14]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001e0a:	7bba      	ldrb	r2, [r7, #14]
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001e12:	7bbb      	ldrb	r3, [r7, #14]
 8001e14:	461a      	mov	r2, r3
 8001e16:	2110      	movs	r1, #16
 8001e18:	20d4      	movs	r0, #212	@ 0xd4
 8001e1a:	f7ff ff37 	bl	8001c8c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001e1e:	2112      	movs	r1, #18
 8001e20:	20d4      	movs	r0, #212	@ 0xd4
 8001e22:	f7ff ff4d 	bl	8001cc0 <SENSOR_IO_Read>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001e32:	7bbb      	ldrb	r3, [r7, #14]
 8001e34:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001e38:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001e3a:	7bba      	ldrb	r2, [r7, #14]
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001e42:	7bbb      	ldrb	r3, [r7, #14]
 8001e44:	461a      	mov	r2, r3
 8001e46:	2112      	movs	r1, #18
 8001e48:	20d4      	movs	r0, #212	@ 0xd4
 8001e4a:	f7ff ff1f 	bl	8001c8c <SENSOR_IO_Write>
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001e60:	2110      	movs	r1, #16
 8001e62:	20d4      	movs	r0, #212	@ 0xd4
 8001e64:	f7ff ff2c 	bl	8001cc0 <SENSOR_IO_Read>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	461a      	mov	r2, r3
 8001e78:	2110      	movs	r1, #16
 8001e7a:	20d4      	movs	r0, #212	@ 0xd4
 8001e7c:	f7ff ff06 	bl	8001c8c <SENSOR_IO_Write>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001e8c:	f7ff fef4 	bl	8001c78 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001e90:	210f      	movs	r1, #15
 8001e92:	20d4      	movs	r0, #212	@ 0xd4
 8001e94:	f7ff ff14 	bl	8001cc0 <SENSOR_IO_Read>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001eac:	2115      	movs	r1, #21
 8001eae:	20d4      	movs	r0, #212	@ 0xd4
 8001eb0:	f7ff ff06 	bl	8001cc0 <SENSOR_IO_Read>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	f023 0310 	bic.w	r3, r3, #16
 8001ebe:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	f043 0310 	orr.w	r3, r3, #16
 8001ecc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2115      	movs	r1, #21
 8001ed4:	20d4      	movs	r0, #212	@ 0xd4
 8001ed6:	f7ff fed9 	bl	8001c8c <SENSOR_IO_Write>
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001efa:	2110      	movs	r1, #16
 8001efc:	20d4      	movs	r0, #212	@ 0xd4
 8001efe:	f7ff fedf 	bl	8001cc0 <SENSOR_IO_Read>
 8001f02:	4603      	mov	r3, r0
 8001f04:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001f06:	f107 0208 	add.w	r2, r7, #8
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	2128      	movs	r1, #40	@ 0x28
 8001f0e:	20d4      	movs	r0, #212	@ 0xd4
 8001f10:	f7ff fef4 	bl	8001cfc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	77fb      	strb	r3, [r7, #31]
 8001f18:	e01a      	b.n	8001f50 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	3301      	adds	r3, #1
 8001f20:	3320      	adds	r3, #32
 8001f22:	443b      	add	r3, r7
 8001f24:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	7ffa      	ldrb	r2, [r7, #31]
 8001f2e:	0052      	lsls	r2, r2, #1
 8001f30:	3220      	adds	r2, #32
 8001f32:	443a      	add	r2, r7
 8001f34:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001f38:	4413      	add	r3, r2
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	7ffb      	ldrb	r3, [r7, #31]
 8001f3e:	b212      	sxth	r2, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	3320      	adds	r3, #32
 8001f44:	443b      	add	r3, r7
 8001f46:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	77fb      	strb	r3, [r7, #31]
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d9e1      	bls.n	8001f1a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b0c      	cmp	r3, #12
 8001f5e:	d829      	bhi.n	8001fb4 <LSM6DSL_AccReadXYZ+0xd0>
 8001f60:	a201      	add	r2, pc, #4	@ (adr r2, 8001f68 <LSM6DSL_AccReadXYZ+0x84>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001f9d 	.word	0x08001f9d
 8001f6c:	08001fb5 	.word	0x08001fb5
 8001f70:	08001fb5 	.word	0x08001fb5
 8001f74:	08001fb5 	.word	0x08001fb5
 8001f78:	08001faf 	.word	0x08001faf
 8001f7c:	08001fb5 	.word	0x08001fb5
 8001f80:	08001fb5 	.word	0x08001fb5
 8001f84:	08001fb5 	.word	0x08001fb5
 8001f88:	08001fa3 	.word	0x08001fa3
 8001f8c:	08001fb5 	.word	0x08001fb5
 8001f90:	08001fb5 	.word	0x08001fb5
 8001f94:	08001fb5 	.word	0x08001fb5
 8001f98:	08001fa9 	.word	0x08001fa9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001f9c:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <LSM6DSL_AccReadXYZ+0x11c>)
 8001f9e:	61bb      	str	r3, [r7, #24]
    break;
 8001fa0:	e008      	b.n	8001fb4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001fa2:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <LSM6DSL_AccReadXYZ+0x120>)
 8001fa4:	61bb      	str	r3, [r7, #24]
    break;
 8001fa6:	e005      	b.n	8001fb4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <LSM6DSL_AccReadXYZ+0x124>)
 8001faa:	61bb      	str	r3, [r7, #24]
    break;
 8001fac:	e002      	b.n	8001fb4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001fae:	4b17      	ldr	r3, [pc, #92]	@ (800200c <LSM6DSL_AccReadXYZ+0x128>)
 8001fb0:	61bb      	str	r3, [r7, #24]
    break;    
 8001fb2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	77fb      	strb	r3, [r7, #31]
 8001fb8:	e01a      	b.n	8001ff0 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001fba:	7ffb      	ldrb	r3, [r7, #31]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	3320      	adds	r3, #32
 8001fc0:	443b      	add	r3, r7
 8001fc2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	7ffb      	ldrb	r3, [r7, #31]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe2:	ee17 2a90 	vmov	r2, s15
 8001fe6:	b212      	sxth	r2, r2
 8001fe8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	3301      	adds	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
 8001ff0:	7ffb      	ldrb	r3, [r7, #31]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d9e1      	bls.n	8001fba <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	3d79db23 	.word	0x3d79db23
 8002004:	3df9db23 	.word	0x3df9db23
 8002008:	3e79db23 	.word	0x3e79db23
 800200c:	3ef9db23 	.word	0x3ef9db23

08002010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201a:	2003      	movs	r0, #3
 800201c:	f000 f960 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002020:	2000      	movs	r0, #0
 8002022:	f000 f80d 	bl	8002040 <HAL_InitTick>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	e001      	b.n	8002036 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002032:	f7ff fb55 	bl	80016e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002036:	79fb      	ldrb	r3, [r7, #7]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800204c:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <HAL_InitTick+0x6c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d023      	beq.n	800209c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002054:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <HAL_InitTick+0x70>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b14      	ldr	r3, [pc, #80]	@ (80020ac <HAL_InitTick+0x6c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f96d 	bl	800234a <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d809      	bhi.n	8002090 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207c:	2200      	movs	r2, #0
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f000 f937 	bl	80022f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002088:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <HAL_InitTick+0x74>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e007      	b.n	80020a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e004      	b.n	80020a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	e001      	b.n	80020a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000544 	.word	0x20000544
 80020b0:	20000508 	.word	0x20000508
 80020b4:	20000540 	.word	0x20000540

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000544 	.word	0x20000544
 80020dc:	20000e00 	.word	0x20000e00

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000e00 	.word	0x20000e00

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d005      	beq.n	800211e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_Delay+0x44>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211e:	bf00      	nop
 8002120:	f7ff ffde 	bl	80020e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d8f7      	bhi.n	8002120 <HAL_Delay+0x28>
  {
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000544 	.word	0x20000544

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db0b      	blt.n	80021ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4907      	ldr	r1, [pc, #28]	@ (80021dc <__NVIC_EnableIRQ+0x38>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	@ (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	@ (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	@ (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff8e 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff29 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff3e 	bl	8002188 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff8e 	bl	8002234 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5d 	bl	80021e0 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff31 	bl	80021a4 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa2 	bl	800229c <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e17f      	b.n	8002674 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8171 	beq.w	800266e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d005      	beq.n	80023a4 <HAL_GPIO_Init+0x40>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d130      	bne.n	8002406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0201 	and.w	r2, r3, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d118      	bne.n	8002444 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002418:	2201      	movs	r2, #1
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	08db      	lsrs	r3, r3, #3
 800242e:	f003 0201 	and.w	r2, r3, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b03      	cmp	r3, #3
 800244e:	d017      	beq.n	8002480 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d123      	bne.n	80024d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	6939      	ldr	r1, [r7, #16]
 80024d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80ac 	beq.w	800266e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b5f      	ldr	r3, [pc, #380]	@ (8002694 <HAL_GPIO_Init+0x330>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251a:	4a5e      	ldr	r2, [pc, #376]	@ (8002694 <HAL_GPIO_Init+0x330>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6613      	str	r3, [r2, #96]	@ 0x60
 8002522:	4b5c      	ldr	r3, [pc, #368]	@ (8002694 <HAL_GPIO_Init+0x330>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800252e:	4a5a      	ldr	r2, [pc, #360]	@ (8002698 <HAL_GPIO_Init+0x334>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	3302      	adds	r3, #2
 8002536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	220f      	movs	r2, #15
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002558:	d025      	beq.n	80025a6 <HAL_GPIO_Init+0x242>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4f      	ldr	r2, [pc, #316]	@ (800269c <HAL_GPIO_Init+0x338>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01f      	beq.n	80025a2 <HAL_GPIO_Init+0x23e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4e      	ldr	r2, [pc, #312]	@ (80026a0 <HAL_GPIO_Init+0x33c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d019      	beq.n	800259e <HAL_GPIO_Init+0x23a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4d      	ldr	r2, [pc, #308]	@ (80026a4 <HAL_GPIO_Init+0x340>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x236>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4c      	ldr	r2, [pc, #304]	@ (80026a8 <HAL_GPIO_Init+0x344>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00d      	beq.n	8002596 <HAL_GPIO_Init+0x232>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4b      	ldr	r2, [pc, #300]	@ (80026ac <HAL_GPIO_Init+0x348>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x22e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4a      	ldr	r2, [pc, #296]	@ (80026b0 <HAL_GPIO_Init+0x34c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_GPIO_Init+0x22a>
 800258a:	2306      	movs	r3, #6
 800258c:	e00c      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800258e:	2307      	movs	r3, #7
 8002590:	e00a      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a6:	2300      	movs	r3, #0
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025b8:	4937      	ldr	r1, [pc, #220]	@ (8002698 <HAL_GPIO_Init+0x334>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ea:	4a32      	ldr	r2, [pc, #200]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025f0:	4b30      	ldr	r3, [pc, #192]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002614:	4a27      	ldr	r2, [pc, #156]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800261a:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800263e:	4a1d      	ldr	r2, [pc, #116]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002644:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002668:	4a12      	ldr	r2, [pc, #72]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	f47f ae78 	bne.w	8002374 <HAL_GPIO_Init+0x10>
  }
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	48000400 	.word	0x48000400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	48000c00 	.word	0x48000c00
 80026a8:	48001000 	.word	0x48001000
 80026ac:	48001400 	.word	0x48001400
 80026b0:	48001800 	.word	0x48001800
 80026b4:	40010400 	.word	0x40010400

080026b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
 80026c4:	4613      	mov	r3, r2
 80026c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c8:	787b      	ldrb	r3, [r7, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d4:	e002      	b.n	80026dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026f2:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f806 	bl	8002718 <HAL_GPIO_EXTI_Callback>
  }
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40010400 	.word	0x40010400

08002718 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e08d      	b.n	800285c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f8b4 	bl	80028c2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2224      	movs	r2, #36	@ 0x24
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800277e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800278e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d107      	bne.n	80027a8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	e006      	b.n	80027b6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d108      	bne.n	80027d0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	e007      	b.n	80027e0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6812      	ldr	r2, [r2, #0]
 80027ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027f2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002802:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69d9      	ldr	r1, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0201 	orr.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e021      	b.n	80028ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	@ 0x24
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f821 	bl	80028d6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	4608      	mov	r0, r1
 80028f6:	4611      	mov	r1, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	817b      	strh	r3, [r7, #10]
 80028fe:	460b      	mov	r3, r1
 8002900:	813b      	strh	r3, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b20      	cmp	r3, #32
 8002910:	f040 80f9 	bne.w	8002b06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_I2C_Mem_Write+0x34>
 800291a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002926:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0ed      	b.n	8002b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_I2C_Mem_Write+0x4e>
 8002936:	2302      	movs	r3, #2
 8002938:	e0e6      	b.n	8002b08 <HAL_I2C_Mem_Write+0x21c>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002942:	f7ff fbcd 	bl	80020e0 <HAL_GetTick>
 8002946:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2319      	movs	r3, #25
 800294e:	2201      	movs	r2, #1
 8002950:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fac3 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0d1      	b.n	8002b08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2221      	movs	r2, #33	@ 0x21
 8002968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2240      	movs	r2, #64	@ 0x40
 8002970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a3a      	ldr	r2, [r7, #32]
 800297e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002984:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800298c:	88f8      	ldrh	r0, [r7, #6]
 800298e:	893a      	ldrh	r2, [r7, #8]
 8002990:	8979      	ldrh	r1, [r7, #10]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	4603      	mov	r3, r0
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f9d3 	bl	8002d48 <I2C_RequestMemoryWrite>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0a9      	b.n	8002b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2bff      	cmp	r3, #255	@ 0xff
 80029bc:	d90e      	bls.n	80029dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	22ff      	movs	r2, #255	@ 0xff
 80029c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	8979      	ldrh	r1, [r7, #10]
 80029cc:	2300      	movs	r3, #0
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fc47 	bl	8003268 <I2C_TransferConfig>
 80029da:	e00f      	b.n	80029fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	8979      	ldrh	r1, [r7, #10]
 80029ee:	2300      	movs	r3, #0
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fc36 	bl	8003268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fac6 	bl	8002f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e07b      	b.n	8002b08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	781a      	ldrb	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d034      	beq.n	8002ab4 <HAL_I2C_Mem_Write+0x1c8>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d130      	bne.n	8002ab4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2180      	movs	r1, #128	@ 0x80
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fa3f 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e04d      	b.n	8002b08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2bff      	cmp	r3, #255	@ 0xff
 8002a74:	d90e      	bls.n	8002a94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	22ff      	movs	r2, #255	@ 0xff
 8002a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	8979      	ldrh	r1, [r7, #10]
 8002a84:	2300      	movs	r3, #0
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fbeb 	bl	8003268 <I2C_TransferConfig>
 8002a92:	e00f      	b.n	8002ab4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	8979      	ldrh	r1, [r7, #10]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fbda 	bl	8003268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d19e      	bne.n	80029fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 faac 	bl	8003020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e01a      	b.n	8002b08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_I2C_Mem_Write+0x224>)
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	fe00e800 	.word	0xfe00e800

08002b14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	817b      	strh	r3, [r7, #10]
 8002b26:	460b      	mov	r3, r1
 8002b28:	813b      	strh	r3, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	f040 80fd 	bne.w	8002d36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x34>
 8002b42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0f1      	b.n	8002d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_I2C_Mem_Read+0x4e>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e0ea      	b.n	8002d38 <HAL_I2C_Mem_Read+0x224>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b6a:	f7ff fab9 	bl	80020e0 <HAL_GetTick>
 8002b6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2319      	movs	r3, #25
 8002b76:	2201      	movs	r2, #1
 8002b78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f9af 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0d5      	b.n	8002d38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2222      	movs	r2, #34	@ 0x22
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2240      	movs	r2, #64	@ 0x40
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a3a      	ldr	r2, [r7, #32]
 8002ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bb4:	88f8      	ldrh	r0, [r7, #6]
 8002bb6:	893a      	ldrh	r2, [r7, #8]
 8002bb8:	8979      	ldrh	r1, [r7, #10]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f913 	bl	8002df0 <I2C_RequestMemoryRead>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0ad      	b.n	8002d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2bff      	cmp	r3, #255	@ 0xff
 8002be4:	d90e      	bls.n	8002c04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	8979      	ldrh	r1, [r7, #10]
 8002bf4:	4b52      	ldr	r3, [pc, #328]	@ (8002d40 <HAL_I2C_Mem_Read+0x22c>)
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fb33 	bl	8003268 <I2C_TransferConfig>
 8002c02:	e00f      	b.n	8002c24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	8979      	ldrh	r1, [r7, #10]
 8002c16:	4b4a      	ldr	r3, [pc, #296]	@ (8002d40 <HAL_I2C_Mem_Read+0x22c>)
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fb22 	bl	8003268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2104      	movs	r1, #4
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f956 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e07c      	b.n	8002d38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d034      	beq.n	8002ce4 <HAL_I2C_Mem_Read+0x1d0>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d130      	bne.n	8002ce4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	@ 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f927 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e04d      	b.n	8002d38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2bff      	cmp	r3, #255	@ 0xff
 8002ca4:	d90e      	bls.n	8002cc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fad3 	bl	8003268 <I2C_TransferConfig>
 8002cc2:	e00f      	b.n	8002ce4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	8979      	ldrh	r1, [r7, #10]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fac2 	bl	8003268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d19a      	bne.n	8002c24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f994 	bl	8003020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e01a      	b.n	8002d38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2220      	movs	r2, #32
 8002d08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <HAL_I2C_Mem_Read+0x230>)
 8002d16:	400b      	ands	r3, r1
 8002d18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	80002400 	.word	0x80002400
 8002d44:	fe00e800 	.word	0xfe00e800

08002d48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	813b      	strh	r3, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	8979      	ldrh	r1, [r7, #10]
 8002d68:	4b20      	ldr	r3, [pc, #128]	@ (8002dec <I2C_RequestMemoryWrite+0xa4>)
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fa79 	bl	8003268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	69b9      	ldr	r1, [r7, #24]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f909 	bl	8002f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e02c      	b.n	8002de4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d9a:	e015      	b.n	8002dc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d9c:	893b      	ldrh	r3, [r7, #8]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	69b9      	ldr	r1, [r7, #24]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f8ef 	bl	8002f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e012      	b.n	8002de4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dbe:	893b      	ldrh	r3, [r7, #8]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2180      	movs	r1, #128	@ 0x80
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f884 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	80002000 	.word	0x80002000

08002df0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	460b      	mov	r3, r1
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	8979      	ldrh	r1, [r7, #10]
 8002e10:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <I2C_RequestMemoryRead+0xa4>)
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2300      	movs	r3, #0
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fa26 	bl	8003268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f8b6 	bl	8002f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e02c      	b.n	8002e8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d105      	bne.n	8002e42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e36:	893b      	ldrh	r3, [r7, #8]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e40:	e015      	b.n	8002e6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e42:	893b      	ldrh	r3, [r7, #8]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	69b9      	ldr	r1, [r7, #24]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f89c 	bl	8002f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e012      	b.n	8002e8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e64:	893b      	ldrh	r3, [r7, #8]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2140      	movs	r1, #64	@ 0x40
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f831 	bl	8002ee0 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	80002000 	.word	0x80002000

08002e98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d103      	bne.n	8002eb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d007      	beq.n	8002ed4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	619a      	str	r2, [r3, #24]
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef0:	e03b      	b.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f8d6 	bl	80030a8 <I2C_IsErrorOccurred>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e041      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d02d      	beq.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7ff f8e7 	bl	80020e0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d122      	bne.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d113      	bne.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00f      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d0b4      	beq.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f9e:	e033      	b.n	8003008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f87f 	bl	80030a8 <I2C_IsErrorOccurred>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e031      	b.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d025      	beq.n	8003008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7ff f890 	bl	80020e0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11a      	bne.n	8003008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d013      	beq.n	8003008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e007      	b.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b02      	cmp	r3, #2
 8003014:	d1c4      	bne.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800302c:	e02f      	b.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f838 	bl	80030a8 <I2C_IsErrorOccurred>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e02d      	b.n	800309e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7ff f84d 	bl	80020e0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11a      	bne.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b20      	cmp	r3, #32
 8003064:	d013      	beq.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	f043 0220 	orr.w	r2, r3, #32
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e007      	b.n	800309e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b20      	cmp	r3, #32
 800309a:	d1c8      	bne.n	800302e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	@ 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d068      	beq.n	80031a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2210      	movs	r2, #16
 80030da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030dc:	e049      	b.n	8003172 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d045      	beq.n	8003172 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe fffb 	bl	80020e0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_IsErrorOccurred+0x54>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d13a      	bne.n	8003172 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003106:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800310e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800311a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311e:	d121      	bne.n	8003164 <I2C_IsErrorOccurred+0xbc>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003126:	d01d      	beq.n	8003164 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	2b20      	cmp	r3, #32
 800312c:	d01a      	beq.n	8003164 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800313c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800313e:	f7fe ffcf 	bl	80020e0 <HAL_GetTick>
 8003142:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003144:	e00e      	b.n	8003164 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003146:	f7fe ffcb 	bl	80020e0 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b19      	cmp	r3, #25
 8003152:	d907      	bls.n	8003164 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f043 0320 	orr.w	r3, r3, #32
 800315a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003162:	e006      	b.n	8003172 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b20      	cmp	r3, #32
 8003170:	d1e9      	bne.n	8003146 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b20      	cmp	r3, #32
 800317e:	d003      	beq.n	8003188 <I2C_IsErrorOccurred+0xe0>
 8003180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0aa      	beq.n	80030de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2220      	movs	r2, #32
 8003196:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	f043 0308 	orr.w	r3, r3, #8
 80031e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	f043 0302 	orr.w	r3, r3, #2
 8003202:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01c      	beq.n	8003256 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f7ff fe3b 	bl	8002e98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <I2C_IsErrorOccurred+0x1bc>)
 800322e:	400b      	ands	r3, r1
 8003230:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800325a:	4618      	mov	r0, r3
 800325c:	3728      	adds	r7, #40	@ 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	fe00e800 	.word	0xfe00e800

08003268 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	817b      	strh	r3, [r7, #10]
 8003276:	4613      	mov	r3, r2
 8003278:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003280:	7a7b      	ldrb	r3, [r7, #9]
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003288:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	4313      	orrs	r3, r2
 8003292:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003296:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	0d5b      	lsrs	r3, r3, #21
 80032a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <I2C_TransferConfig+0x60>)
 80032a8:	430b      	orrs	r3, r1
 80032aa:	43db      	mvns	r3, r3
 80032ac:	ea02 0103 	and.w	r1, r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	03ff63ff 	.word	0x03ff63ff

080032cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d138      	bne.n	8003354 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e032      	b.n	8003356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	@ 0x24
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800331e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6819      	ldr	r1, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003368:	4b04      	ldr	r3, [pc, #16]	@ (800337c <HAL_PWREx_GetVoltageRange+0x18>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40007000 	.word	0x40007000

08003380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800338e:	d130      	bne.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003390:	4b23      	ldr	r3, [pc, #140]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800339c:	d038      	beq.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800339e:	4b20      	ldr	r3, [pc, #128]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003424 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2232      	movs	r2, #50	@ 0x32
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003428 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	0c9b      	lsrs	r3, r3, #18
 80033c0:	3301      	adds	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c4:	e002      	b.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033cc:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d8:	d102      	bne.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f2      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ec:	d110      	bne.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e00f      	b.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fe:	d007      	beq.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003400:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003408:	4a05      	ldr	r2, [pc, #20]	@ (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800340a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800340e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40007000 	.word	0x40007000
 8003424:	20000508 	.word	0x20000508
 8003428:	431bde83 	.word	0x431bde83

0800342c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e3ca      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343e:	4b97      	ldr	r3, [pc, #604]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003448:	4b94      	ldr	r3, [pc, #592]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80e4 	beq.w	8003628 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_RCC_OscConfig+0x4a>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	f040 808b 	bne.w	8003584 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b01      	cmp	r3, #1
 8003472:	f040 8087 	bne.w	8003584 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003476:	4b89      	ldr	r3, [pc, #548]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x62>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e3a2      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	4b82      	ldr	r3, [pc, #520]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <HAL_RCC_OscConfig+0x7c>
 800349e:	4b7f      	ldr	r3, [pc, #508]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034a6:	e005      	b.n	80034b4 <HAL_RCC_OscConfig+0x88>
 80034a8:	4b7c      	ldr	r3, [pc, #496]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d223      	bcs.n	8003500 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fd55 	bl	8003f6c <RCC_SetFlashLatencyFromMSIRange>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e383      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034cc:	4b73      	ldr	r3, [pc, #460]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a72      	ldr	r2, [pc, #456]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034d2:	f043 0308 	orr.w	r3, r3, #8
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b70      	ldr	r3, [pc, #448]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	496d      	ldr	r1, [pc, #436]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ea:	4b6c      	ldr	r3, [pc, #432]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	4968      	ldr	r1, [pc, #416]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
 80034fe:	e025      	b.n	800354c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003500:	4b66      	ldr	r3, [pc, #408]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003506:	f043 0308 	orr.w	r3, r3, #8
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b63      	ldr	r3, [pc, #396]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4960      	ldr	r1, [pc, #384]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351e:	4b5f      	ldr	r3, [pc, #380]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	495b      	ldr	r1, [pc, #364]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fd15 	bl	8003f6c <RCC_SetFlashLatencyFromMSIRange>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e343      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800354c:	f000 fc4a 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b52      	ldr	r3, [pc, #328]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	4950      	ldr	r1, [pc, #320]	@ (80036a0 <HAL_RCC_OscConfig+0x274>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
 8003568:	4a4e      	ldr	r2, [pc, #312]	@ (80036a4 <HAL_RCC_OscConfig+0x278>)
 800356a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800356c:	4b4e      	ldr	r3, [pc, #312]	@ (80036a8 <HAL_RCC_OscConfig+0x27c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fd65 	bl	8002040 <HAL_InitTick>
 8003576:	4603      	mov	r3, r0
 8003578:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d052      	beq.n	8003626 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	e327      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d032      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800358c:	4b43      	ldr	r3, [pc, #268]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a42      	ldr	r2, [pc, #264]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003598:	f7fe fda2 	bl	80020e0 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035a0:	f7fe fd9e 	bl	80020e0 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e310      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035b2:	4b3a      	ldr	r3, [pc, #232]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035be:	4b37      	ldr	r3, [pc, #220]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a36      	ldr	r2, [pc, #216]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035c4:	f043 0308 	orr.w	r3, r3, #8
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b34      	ldr	r3, [pc, #208]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4931      	ldr	r1, [pc, #196]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035dc:	4b2f      	ldr	r3, [pc, #188]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	492c      	ldr	r1, [pc, #176]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
 80035f0:	e01a      	b.n	8003628 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035f2:	4b2a      	ldr	r3, [pc, #168]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a29      	ldr	r2, [pc, #164]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fd6f 	bl	80020e0 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003606:	f7fe fd6b 	bl	80020e0 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e2dd      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003618:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x1da>
 8003624:	e000      	b.n	8003628 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003626:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d074      	beq.n	800371e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x21a>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d10e      	bne.n	800365e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d10b      	bne.n	800365e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003646:	4b15      	ldr	r3, [pc, #84]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d064      	beq.n	800371c <HAL_RCC_OscConfig+0x2f0>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d160      	bne.n	800371c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e2ba      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x24a>
 8003668:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0b      	ldr	r2, [pc, #44]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e026      	b.n	80036c4 <HAL_RCC_OscConfig+0x298>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800367e:	d115      	bne.n	80036ac <HAL_RCC_OscConfig+0x280>
 8003680:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a05      	ldr	r2, [pc, #20]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003686:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b03      	ldr	r3, [pc, #12]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a02      	ldr	r2, [pc, #8]	@ (800369c <HAL_RCC_OscConfig+0x270>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e014      	b.n	80036c4 <HAL_RCC_OscConfig+0x298>
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	0800a1c0 	.word	0x0800a1c0
 80036a4:	20000508 	.word	0x20000508
 80036a8:	20000540 	.word	0x20000540
 80036ac:	4ba0      	ldr	r3, [pc, #640]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a9c      	ldr	r2, [pc, #624]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fd08 	bl	80020e0 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fe fd04 	bl	80020e0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	@ 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e276      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e6:	4b92      	ldr	r3, [pc, #584]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x2a8>
 80036f2:	e014      	b.n	800371e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fe fcf4 	bl	80020e0 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe fcf0 	bl	80020e0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e262      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370e:	4b88      	ldr	r3, [pc, #544]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x2d0>
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d060      	beq.n	80037ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d005      	beq.n	800373c <HAL_RCC_OscConfig+0x310>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b0c      	cmp	r3, #12
 8003734:	d119      	bne.n	800376a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d116      	bne.n	800376a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800373c:	4b7c      	ldr	r3, [pc, #496]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_OscConfig+0x328>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e23f      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b76      	ldr	r3, [pc, #472]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	4973      	ldr	r1, [pc, #460]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003768:	e040      	b.n	80037ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d023      	beq.n	80037ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003772:	4b6f      	ldr	r3, [pc, #444]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6e      	ldr	r2, [pc, #440]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fe fcaf 	bl	80020e0 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003786:	f7fe fcab 	bl	80020e0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e21d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003798:	4b65      	ldr	r3, [pc, #404]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a4:	4b62      	ldr	r3, [pc, #392]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	061b      	lsls	r3, r3, #24
 80037b2:	495f      	ldr	r1, [pc, #380]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
 80037b8:	e018      	b.n	80037ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5c      	ldr	r2, [pc, #368]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fe fc8b 	bl	80020e0 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ce:	f7fe fc87 	bl	80020e0 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1f9      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037e0:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03c      	beq.n	8003872 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01c      	beq.n	800383a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003800:	4b4b      	ldr	r3, [pc, #300]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003806:	4a4a      	ldr	r2, [pc, #296]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe fc66 	bl	80020e0 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003818:	f7fe fc62 	bl	80020e0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e1d4      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800382a:	4b41      	ldr	r3, [pc, #260]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ef      	beq.n	8003818 <HAL_RCC_OscConfig+0x3ec>
 8003838:	e01b      	b.n	8003872 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383a:	4b3d      	ldr	r3, [pc, #244]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800383c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003840:	4a3b      	ldr	r2, [pc, #236]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fe fc49 	bl	80020e0 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003852:	f7fe fc45 	bl	80020e0 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e1b7      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003864:	4b32      	ldr	r3, [pc, #200]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ef      	bne.n	8003852 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a6 	beq.w	80039cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003884:	4b2a      	ldr	r3, [pc, #168]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003890:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800389a:	6593      	str	r3, [r2, #88]	@ 0x58
 800389c:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a8:	2301      	movs	r3, #1
 80038aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ac:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <HAL_RCC_OscConfig+0x508>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d118      	bne.n	80038ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_RCC_OscConfig+0x508>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003934 <HAL_RCC_OscConfig+0x508>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c4:	f7fe fc0c 	bl	80020e0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038cc:	f7fe fc08 	bl	80020e0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e17a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038de:	4b15      	ldr	r3, [pc, #84]	@ (8003934 <HAL_RCC_OscConfig+0x508>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d108      	bne.n	8003904 <HAL_RCC_OscConfig+0x4d8>
 80038f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003902:	e029      	b.n	8003958 <HAL_RCC_OscConfig+0x52c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b05      	cmp	r3, #5
 800390a:	d115      	bne.n	8003938 <HAL_RCC_OscConfig+0x50c>
 800390c:	4b08      	ldr	r3, [pc, #32]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003912:	4a07      	ldr	r2, [pc, #28]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800391c:	4b04      	ldr	r3, [pc, #16]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003922:	4a03      	ldr	r2, [pc, #12]	@ (8003930 <HAL_RCC_OscConfig+0x504>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800392c:	e014      	b.n	8003958 <HAL_RCC_OscConfig+0x52c>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	4b9c      	ldr	r3, [pc, #624]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	4a9b      	ldr	r2, [pc, #620]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003948:	4b98      	ldr	r3, [pc, #608]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394e:	4a97      	ldr	r2, [pc, #604]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d016      	beq.n	800398e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fe fbbe 	bl	80020e0 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003966:	e00a      	b.n	800397e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003968:	f7fe fbba 	bl	80020e0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e12a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ed      	beq.n	8003968 <HAL_RCC_OscConfig+0x53c>
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe fba7 	bl	80020e0 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fe fba3 	bl	80020e0 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e113      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ac:	4b7f      	ldr	r3, [pc, #508]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ed      	bne.n	8003996 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ba:	7ffb      	ldrb	r3, [r7, #31]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c0:	4b7a      	ldr	r3, [pc, #488]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c4:	4a79      	ldr	r2, [pc, #484]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80fe 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	2b02      	cmp	r3, #2
 80039dc:	f040 80d0 	bne.w	8003b80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039e0:	4b72      	ldr	r3, [pc, #456]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0203 	and.w	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d130      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	3b01      	subs	r3, #1
 8003a00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d127      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d11f      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a20:	2a07      	cmp	r2, #7
 8003a22:	bf14      	ite	ne
 8003a24:	2201      	movne	r2, #1
 8003a26:	2200      	moveq	r2, #0
 8003a28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d113      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d06e      	beq.n	8003b34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b0c      	cmp	r3, #12
 8003a5a:	d069      	beq.n	8003b30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a5c:	4b53      	ldr	r3, [pc, #332]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a68:	4b50      	ldr	r3, [pc, #320]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0ad      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a78:	4b4c      	ldr	r3, [pc, #304]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a4b      	ldr	r2, [pc, #300]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a84:	f7fe fb2c 	bl	80020e0 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe fb28 	bl	80020e0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e09a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a9e:	4b43      	ldr	r3, [pc, #268]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aaa:	4b40      	ldr	r3, [pc, #256]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	4b40      	ldr	r3, [pc, #256]	@ (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003aba:	3a01      	subs	r2, #1
 8003abc:	0112      	lsls	r2, r2, #4
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ac4:	0212      	lsls	r2, r2, #8
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003acc:	0852      	lsrs	r2, r2, #1
 8003ace:	3a01      	subs	r2, #1
 8003ad0:	0552      	lsls	r2, r2, #21
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ad8:	0852      	lsrs	r2, r2, #1
 8003ada:	3a01      	subs	r2, #1
 8003adc:	0652      	lsls	r2, r2, #25
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ae4:	0912      	lsrs	r2, r2, #4
 8003ae6:	0452      	lsls	r2, r2, #17
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	4930      	ldr	r1, [pc, #192]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003af0:	4b2e      	ldr	r3, [pc, #184]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2d      	ldr	r2, [pc, #180]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003afc:	4b2b      	ldr	r3, [pc, #172]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b08:	f7fe faea 	bl	80020e0 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe fae6 	bl	80020e0 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e058      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	4b22      	ldr	r3, [pc, #136]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b2e:	e050      	b.n	8003bd2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e04f      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b34:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d148      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b40:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b4c:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b58:	f7fe fac2 	bl	80020e0 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe fabe 	bl	80020e0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e030      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b72:	4b0e      	ldr	r3, [pc, #56]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x734>
 8003b7e:	e028      	b.n	8003bd2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d023      	beq.n	8003bce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b86:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a08      	ldr	r2, [pc, #32]	@ (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7fe faa5 	bl	80020e0 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b98:	e00c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9a:	f7fe faa1 	bl	80020e0 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d905      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e013      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb4:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_OscConfig+0x7b0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ec      	bne.n	8003b9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bc0:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_RCC_OscConfig+0x7b0>)
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	4905      	ldr	r1, [pc, #20]	@ (8003bdc <HAL_RCC_OscConfig+0x7b0>)
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_RCC_OscConfig+0x7b4>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60cb      	str	r3, [r1, #12]
 8003bcc:	e001      	b.n	8003bd2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	feeefffc 	.word	0xfeeefffc

08003be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0e7      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b75      	ldr	r3, [pc, #468]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d910      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b72      	ldr	r3, [pc, #456]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 0207 	bic.w	r2, r3, #7
 8003c0e:	4970      	ldr	r1, [pc, #448]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b6e      	ldr	r3, [pc, #440]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0cf      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d010      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	4b66      	ldr	r3, [pc, #408]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d908      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c44:	4b63      	ldr	r3, [pc, #396]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4960      	ldr	r1, [pc, #384]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d04c      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d121      	bne.n	8003cba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0a6      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c82:	4b54      	ldr	r3, [pc, #336]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d115      	bne.n	8003cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e09a      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e08e      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003caa:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e086      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cba:	4b46      	ldr	r3, [pc, #280]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f023 0203 	bic.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4943      	ldr	r1, [pc, #268]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ccc:	f7fe fa08 	bl	80020e0 <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd4:	f7fe fa04 	bl	80020e0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e06e      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 020c 	and.w	r2, r3, #12
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d1eb      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d208      	bcs.n	8003d2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	492b      	ldr	r1, [pc, #172]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2a:	4b29      	ldr	r3, [pc, #164]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d210      	bcs.n	8003d5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d38:	4b25      	ldr	r3, [pc, #148]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 0207 	bic.w	r2, r3, #7
 8003d40:	4923      	ldr	r1, [pc, #140]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d48:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d001      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e036      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d66:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4918      	ldr	r1, [pc, #96]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d84:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4910      	ldr	r1, [pc, #64]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d98:	f000 f824 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	490b      	ldr	r1, [pc, #44]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
 8003db4:	4a09      	ldr	r2, [pc, #36]	@ (8003ddc <HAL_RCC_ClockConfig+0x1f8>)
 8003db6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003db8:	4b09      	ldr	r3, [pc, #36]	@ (8003de0 <HAL_RCC_ClockConfig+0x1fc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe f93f 	bl	8002040 <HAL_InitTick>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40022000 	.word	0x40022000
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	0800a1c0 	.word	0x0800a1c0
 8003ddc:	20000508 	.word	0x20000508
 8003de0:	20000540 	.word	0x20000540

08003de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	@ 0x24
 8003de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df2:	4b3e      	ldr	r3, [pc, #248]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x34>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d121      	bne.n	8003e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d11e      	bne.n	8003e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e18:	4b34      	ldr	r3, [pc, #208]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e24:	4b31      	ldr	r3, [pc, #196]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e005      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e34:	4b2d      	ldr	r3, [pc, #180]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e40:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10d      	bne.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	e004      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e68:	4b23      	ldr	r3, [pc, #140]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d134      	bne.n	8003edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e72:	4b1e      	ldr	r3, [pc, #120]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d003      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0xac>
 8003e88:	e005      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e8c:	617b      	str	r3, [r7, #20]
      break;
 8003e8e:	e005      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e90:	4b19      	ldr	r3, [pc, #100]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e92:	617b      	str	r3, [r7, #20]
      break;
 8003e94:	e002      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	617b      	str	r3, [r7, #20]
      break;
 8003e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e9c:	4b13      	ldr	r3, [pc, #76]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eaa:	4b10      	ldr	r3, [pc, #64]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	fb03 f202 	mul.w	r2, r3, r2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	0e5b      	lsrs	r3, r3, #25
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	3301      	adds	r3, #1
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003edc:	69bb      	ldr	r3, [r7, #24]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3724      	adds	r7, #36	@ 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	0800a1d8 	.word	0x0800a1d8
 8003ef4:	00f42400 	.word	0x00f42400
 8003ef8:	007a1200 	.word	0x007a1200

08003efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f00:	4b03      	ldr	r3, [pc, #12]	@ (8003f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000508 	.word	0x20000508

08003f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f18:	f7ff fff0 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	4904      	ldr	r1, [pc, #16]	@ (8003f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f2a:	5ccb      	ldrb	r3, [r1, r3]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	0800a1d0 	.word	0x0800a1d0

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f44:	f7ff ffda 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0adb      	lsrs	r3, r3, #11
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4904      	ldr	r1, [pc, #16]	@ (8003f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000
 8003f68:	0800a1d0 	.word	0x0800a1d0

08003f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f78:	4b2a      	ldr	r3, [pc, #168]	@ (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f84:	f7ff f9ee 	bl	8003364 <HAL_PWREx_GetVoltageRange>
 8003f88:	6178      	str	r0, [r7, #20]
 8003f8a:	e014      	b.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b25      	ldr	r3, [pc, #148]	@ (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f90:	4a24      	ldr	r2, [pc, #144]	@ (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f98:	4b22      	ldr	r3, [pc, #136]	@ (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fa4:	f7ff f9de 	bl	8003364 <HAL_PWREx_GetVoltageRange>
 8003fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003faa:	4b1e      	ldr	r3, [pc, #120]	@ (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fae:	4a1d      	ldr	r2, [pc, #116]	@ (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fbc:	d10b      	bne.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b80      	cmp	r3, #128	@ 0x80
 8003fc2:	d919      	bls.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fc8:	d902      	bls.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fca:	2302      	movs	r3, #2
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	e013      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e010      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b80      	cmp	r3, #128	@ 0x80
 8003fda:	d902      	bls.n	8003fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fdc:	2303      	movs	r3, #3
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e00a      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b80      	cmp	r3, #128	@ 0x80
 8003fe6:	d102      	bne.n	8003fee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fe8:	2302      	movs	r3, #2
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	e004      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b70      	cmp	r3, #112	@ 0x70
 8003ff2:	d101      	bne.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 0207 	bic.w	r2, r3, #7
 8004000:	4909      	ldr	r1, [pc, #36]	@ (8004028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004008:	4b07      	ldr	r3, [pc, #28]	@ (8004028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	d001      	beq.n	800401a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	40022000 	.word	0x40022000

0800402c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004034:	2300      	movs	r3, #0
 8004036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004038:	2300      	movs	r3, #0
 800403a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004044:	2b00      	cmp	r3, #0
 8004046:	d041      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800404c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004050:	d02a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004052:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004056:	d824      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004058:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800405c:	d008      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800405e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004062:	d81e      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004068:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800406c:	d010      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800406e:	e018      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004070:	4b86      	ldr	r3, [pc, #536]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a85      	ldr	r2, [pc, #532]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800407c:	e015      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fabb 	bl	8004600 <RCCEx_PLLSAI1_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800408e:	e00c      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3320      	adds	r3, #32
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fba6 	bl	80047e8 <RCCEx_PLLSAI2_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	74fb      	strb	r3, [r7, #19]
      break;
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040b0:	4b76      	ldr	r3, [pc, #472]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040be:	4973      	ldr	r1, [pc, #460]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040c6:	e001      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d041      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040e0:	d02a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040e6:	d824      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040ec:	d008      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040f2:	d81e      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040fc:	d010      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040fe:	e018      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004100:	4b62      	ldr	r3, [pc, #392]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a61      	ldr	r2, [pc, #388]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800410c:	e015      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3304      	adds	r3, #4
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fa73 	bl	8004600 <RCCEx_PLLSAI1_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800411e:	e00c      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3320      	adds	r3, #32
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fb5e 	bl	80047e8 <RCCEx_PLLSAI2_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	74fb      	strb	r3, [r7, #19]
      break;
 8004136:	e000      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004140:	4b52      	ldr	r3, [pc, #328]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004146:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800414e:	494f      	ldr	r1, [pc, #316]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004156:	e001      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a0 	beq.w	80042aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800416e:	4b47      	ldr	r3, [pc, #284]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b41      	ldr	r3, [pc, #260]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004188:	4a40      	ldr	r2, [pc, #256]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004190:	4b3e      	ldr	r3, [pc, #248]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419c:	2301      	movs	r3, #1
 800419e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ac:	f7fd ff98 	bl	80020e0 <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041b2:	e009      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b4:	f7fd ff94 	bl	80020e0 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d902      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	74fb      	strb	r3, [r7, #19]
        break;
 80041c6:	e005      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041c8:	4b31      	ldr	r3, [pc, #196]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ef      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d15c      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041da:	4b2c      	ldr	r3, [pc, #176]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01f      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d019      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041f8:	4b24      	ldr	r3, [pc, #144]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004204:	4b21      	ldr	r3, [pc, #132]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420a:	4a20      	ldr	r2, [pc, #128]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004214:	4b1d      	ldr	r3, [pc, #116]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421a:	4a1c      	ldr	r2, [pc, #112]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004224:	4a19      	ldr	r2, [pc, #100]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fd ff53 	bl	80020e0 <HAL_GetTick>
 800423a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423c:	e00b      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423e:	f7fd ff4f 	bl	80020e0 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d902      	bls.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	74fb      	strb	r3, [r7, #19]
            break;
 8004254:	e006      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0ec      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800426a:	4b08      	ldr	r3, [pc, #32]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427a:	4904      	ldr	r1, [pc, #16]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004282:	e009      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	74bb      	strb	r3, [r7, #18]
 8004288:	e006      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
 8004290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004298:	7c7b      	ldrb	r3, [r7, #17]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429e:	4b9e      	ldr	r3, [pc, #632]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	4a9d      	ldr	r2, [pc, #628]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b6:	4b98      	ldr	r3, [pc, #608]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042bc:	f023 0203 	bic.w	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c4:	4994      	ldr	r1, [pc, #592]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f023 020c 	bic.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e6:	498c      	ldr	r1, [pc, #560]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042fa:	4b87      	ldr	r3, [pc, #540]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	4983      	ldr	r1, [pc, #524]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800431c:	4b7e      	ldr	r3, [pc, #504]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	497b      	ldr	r1, [pc, #492]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800433e:	4b76      	ldr	r3, [pc, #472]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434c:	4972      	ldr	r1, [pc, #456]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004360:	4b6d      	ldr	r3, [pc, #436]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436e:	496a      	ldr	r1, [pc, #424]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004382:	4b65      	ldr	r3, [pc, #404]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004390:	4961      	ldr	r1, [pc, #388]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b2:	4959      	ldr	r1, [pc, #356]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c6:	4b54      	ldr	r3, [pc, #336]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d4:	4950      	ldr	r1, [pc, #320]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	4948      	ldr	r1, [pc, #288]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800440a:	4b43      	ldr	r3, [pc, #268]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004410:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004418:	493f      	ldr	r1, [pc, #252]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d028      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800442c:	4b3a      	ldr	r3, [pc, #232]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800443a:	4937      	ldr	r1, [pc, #220]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800444a:	d106      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444c:	4b32      	ldr	r3, [pc, #200]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a31      	ldr	r2, [pc, #196]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004456:	60d3      	str	r3, [r2, #12]
 8004458:	e011      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800445e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004462:	d10c      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f8c8 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d028      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800448a:	4b23      	ldr	r3, [pc, #140]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004490:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004498:	491f      	ldr	r1, [pc, #124]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044a8:	d106      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044b4:	60d3      	str	r3, [r2, #12]
 80044b6:	e011      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044c0:	d10c      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2101      	movs	r1, #1
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f899 	bl	8004600 <RCCEx_PLLSAI1_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d2:	7cfb      	ldrb	r3, [r7, #19]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02b      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f6:	4908      	ldr	r1, [pc, #32]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004506:	d109      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004508:	4b03      	ldr	r3, [pc, #12]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4a02      	ldr	r2, [pc, #8]	@ (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004512:	60d3      	str	r3, [r2, #12]
 8004514:	e014      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004520:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004524:	d10c      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	2101      	movs	r1, #1
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f867 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004536:	7cfb      	ldrb	r3, [r7, #19]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800453c:	7cfb      	ldrb	r3, [r7, #19]
 800453e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02f      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800454c:	4b2b      	ldr	r3, [pc, #172]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800455a:	4928      	ldr	r1, [pc, #160]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800456a:	d10d      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f844 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d014      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004582:	7cfb      	ldrb	r3, [r7, #19]
 8004584:	74bb      	strb	r3, [r7, #18]
 8004586:	e011      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800458c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004590:	d10c      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3320      	adds	r3, #32
 8004596:	2102      	movs	r1, #2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 f925 	bl	80047e8 <RCCEx_PLLSAI2_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045b8:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045be:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045c6:	490d      	ldr	r1, [pc, #52]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045da:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ea:	4904      	ldr	r1, [pc, #16]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40021000 	.word	0x40021000

08004600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800460e:	4b75      	ldr	r3, [pc, #468]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d018      	beq.n	800464c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800461a:	4b72      	ldr	r3, [pc, #456]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0203 	and.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d10d      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
       ||
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004632:	4b6c      	ldr	r3, [pc, #432]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
       ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d047      	beq.n	80046d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	e044      	b.n	80046d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d018      	beq.n	8004686 <RCCEx_PLLSAI1_Config+0x86>
 8004654:	2b03      	cmp	r3, #3
 8004656:	d825      	bhi.n	80046a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004658:	2b01      	cmp	r3, #1
 800465a:	d002      	beq.n	8004662 <RCCEx_PLLSAI1_Config+0x62>
 800465c:	2b02      	cmp	r3, #2
 800465e:	d009      	beq.n	8004674 <RCCEx_PLLSAI1_Config+0x74>
 8004660:	e020      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004662:	4b60      	ldr	r3, [pc, #384]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11d      	bne.n	80046aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004672:	e01a      	b.n	80046aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004674:	4b5b      	ldr	r3, [pc, #364]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467c:	2b00      	cmp	r3, #0
 800467e:	d116      	bne.n	80046ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004684:	e013      	b.n	80046ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004686:	4b57      	ldr	r3, [pc, #348]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004692:	4b54      	ldr	r3, [pc, #336]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046a2:	e006      	b.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e004      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ba:	4b4a      	ldr	r3, [pc, #296]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	430b      	orrs	r3, r1
 80046d0:	4944      	ldr	r1, [pc, #272]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d17d      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046dc:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a40      	ldr	r2, [pc, #256]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e8:	f7fd fcfa 	bl	80020e0 <HAL_GetTick>
 80046ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ee:	e009      	b.n	8004704 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f0:	f7fd fcf6 	bl	80020e0 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d902      	bls.n	8004704 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	73fb      	strb	r3, [r7, #15]
        break;
 8004702:	e005      	b.n	8004710 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004704:	4b37      	ldr	r3, [pc, #220]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ef      	bne.n	80046f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d160      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d111      	bne.n	8004740 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800471c:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6892      	ldr	r2, [r2, #8]
 800472c:	0211      	lsls	r1, r2, #8
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	0912      	lsrs	r2, r2, #4
 8004734:	0452      	lsls	r2, r2, #17
 8004736:	430a      	orrs	r2, r1
 8004738:	492a      	ldr	r1, [pc, #168]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]
 800473e:	e027      	b.n	8004790 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d112      	bne.n	800476c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004746:	4b27      	ldr	r3, [pc, #156]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800474e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6892      	ldr	r2, [r2, #8]
 8004756:	0211      	lsls	r1, r2, #8
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6912      	ldr	r2, [r2, #16]
 800475c:	0852      	lsrs	r2, r2, #1
 800475e:	3a01      	subs	r2, #1
 8004760:	0552      	lsls	r2, r2, #21
 8004762:	430a      	orrs	r2, r1
 8004764:	491f      	ldr	r1, [pc, #124]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	610b      	str	r3, [r1, #16]
 800476a:	e011      	b.n	8004790 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800476c:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004774:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6892      	ldr	r2, [r2, #8]
 800477c:	0211      	lsls	r1, r2, #8
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6952      	ldr	r2, [r2, #20]
 8004782:	0852      	lsrs	r2, r2, #1
 8004784:	3a01      	subs	r2, #1
 8004786:	0652      	lsls	r2, r2, #25
 8004788:	430a      	orrs	r2, r1
 800478a:	4916      	ldr	r1, [pc, #88]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004790:	4b14      	ldr	r3, [pc, #80]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a13      	ldr	r2, [pc, #76]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004796:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800479a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd fca0 	bl	80020e0 <HAL_GetTick>
 80047a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047a2:	e009      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047a4:	f7fd fc9c 	bl	80020e0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d902      	bls.n	80047b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	73fb      	strb	r3, [r7, #15]
          break;
 80047b6:	e005      	b.n	80047c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b8:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ef      	beq.n	80047a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047ca:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	4904      	ldr	r1, [pc, #16]	@ (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047f6:	4b6a      	ldr	r3, [pc, #424]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d018      	beq.n	8004834 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004802:	4b67      	ldr	r3, [pc, #412]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0203 	and.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d10d      	bne.n	800482e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
       ||
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800481a:	4b61      	ldr	r3, [pc, #388]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
       ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d047      	beq.n	80048be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	e044      	b.n	80048be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d018      	beq.n	800486e <RCCEx_PLLSAI2_Config+0x86>
 800483c:	2b03      	cmp	r3, #3
 800483e:	d825      	bhi.n	800488c <RCCEx_PLLSAI2_Config+0xa4>
 8004840:	2b01      	cmp	r3, #1
 8004842:	d002      	beq.n	800484a <RCCEx_PLLSAI2_Config+0x62>
 8004844:	2b02      	cmp	r3, #2
 8004846:	d009      	beq.n	800485c <RCCEx_PLLSAI2_Config+0x74>
 8004848:	e020      	b.n	800488c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800484a:	4b55      	ldr	r3, [pc, #340]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11d      	bne.n	8004892 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800485a:	e01a      	b.n	8004892 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800485c:	4b50      	ldr	r3, [pc, #320]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004864:	2b00      	cmp	r3, #0
 8004866:	d116      	bne.n	8004896 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486c:	e013      	b.n	8004896 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800486e:	4b4c      	ldr	r3, [pc, #304]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10f      	bne.n	800489a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800487a:	4b49      	ldr	r3, [pc, #292]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800488a:	e006      	b.n	800489a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	e004      	b.n	800489c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004892:	bf00      	nop
 8004894:	e002      	b.n	800489c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004896:	bf00      	nop
 8004898:	e000      	b.n	800489c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800489a:	bf00      	nop
    }

    if(status == HAL_OK)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10d      	bne.n	80048be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048a2:	4b3f      	ldr	r3, [pc, #252]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6819      	ldr	r1, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	430b      	orrs	r3, r1
 80048b8:	4939      	ldr	r1, [pc, #228]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d167      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048c4:	4b36      	ldr	r3, [pc, #216]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a35      	ldr	r2, [pc, #212]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d0:	f7fd fc06 	bl	80020e0 <HAL_GetTick>
 80048d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048d6:	e009      	b.n	80048ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048d8:	f7fd fc02 	bl	80020e0 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d902      	bls.n	80048ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	73fb      	strb	r3, [r7, #15]
        break;
 80048ea:	e005      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ec:	4b2c      	ldr	r3, [pc, #176]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ef      	bne.n	80048d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d14a      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d111      	bne.n	8004928 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004904:	4b26      	ldr	r3, [pc, #152]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800490c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6892      	ldr	r2, [r2, #8]
 8004914:	0211      	lsls	r1, r2, #8
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68d2      	ldr	r2, [r2, #12]
 800491a:	0912      	lsrs	r2, r2, #4
 800491c:	0452      	lsls	r2, r2, #17
 800491e:	430a      	orrs	r2, r1
 8004920:	491f      	ldr	r1, [pc, #124]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	614b      	str	r3, [r1, #20]
 8004926:	e011      	b.n	800494c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004928:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004930:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	0211      	lsls	r1, r2, #8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6912      	ldr	r2, [r2, #16]
 800493e:	0852      	lsrs	r2, r2, #1
 8004940:	3a01      	subs	r2, #1
 8004942:	0652      	lsls	r2, r2, #25
 8004944:	430a      	orrs	r2, r1
 8004946:	4916      	ldr	r1, [pc, #88]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800494c:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a13      	ldr	r2, [pc, #76]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fd fbc2 	bl	80020e0 <HAL_GetTick>
 800495c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800495e:	e009      	b.n	8004974 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004960:	f7fd fbbe 	bl	80020e0 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d902      	bls.n	8004974 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	73fb      	strb	r3, [r7, #15]
          break;
 8004972:	e005      	b.n	8004980 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004974:	4b0a      	ldr	r3, [pc, #40]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0ef      	beq.n	8004960 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004986:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	4904      	ldr	r1, [pc, #16]	@ (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004990:	4313      	orrs	r3, r2
 8004992:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000

080049a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e040      	b.n	8004a38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc feae 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	@ 0x24
 80049d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fb6a 	bl	80050c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f8af 	bl	8004b54 <UART_SetConfig>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e01b      	b.n	8004a38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fbe9 	bl	8005208 <UART_CheckIdleState>
 8004a36:	4603      	mov	r3, r0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	@ 0x28
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d177      	bne.n	8004b48 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_UART_Transmit+0x24>
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e070      	b.n	8004b4a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2221      	movs	r2, #33	@ 0x21
 8004a74:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a76:	f7fd fb33 	bl	80020e0 <HAL_GetTick>
 8004a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	88fa      	ldrh	r2, [r7, #6]
 8004a80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a94:	d108      	bne.n	8004aa8 <HAL_UART_Transmit+0x68>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	e003      	b.n	8004ab0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ab0:	e02f      	b.n	8004b12 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2180      	movs	r1, #128	@ 0x80
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fc4b 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e03b      	b.n	8004b4a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	3302      	adds	r3, #2
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	e007      	b.n	8004b00 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	3301      	adds	r3, #1
 8004afe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1c9      	bne.n	8004ab2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2140      	movs	r1, #64	@ 0x40
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fc15 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e005      	b.n	8004b4a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e000      	b.n	8004b4a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b58:	b08a      	sub	sp, #40	@ 0x28
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4ba4      	ldr	r3, [pc, #656]	@ (8004e14 <UART_SetConfig+0x2c0>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a99      	ldr	r2, [pc, #612]	@ (8004e18 <UART_SetConfig+0x2c4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a90      	ldr	r2, [pc, #576]	@ (8004e1c <UART_SetConfig+0x2c8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d126      	bne.n	8004c2c <UART_SetConfig+0xd8>
 8004bde:	4b90      	ldr	r3, [pc, #576]	@ (8004e20 <UART_SetConfig+0x2cc>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	d81b      	bhi.n	8004c24 <UART_SetConfig+0xd0>
 8004bec:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <UART_SetConfig+0xa0>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c15 	.word	0x08004c15
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e116      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c12:	e112      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004c14:	2304      	movs	r3, #4
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e10e      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c22:	e10a      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2a:	e106      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a7c      	ldr	r2, [pc, #496]	@ (8004e24 <UART_SetConfig+0x2d0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d138      	bne.n	8004ca8 <UART_SetConfig+0x154>
 8004c36:	4b7a      	ldr	r3, [pc, #488]	@ (8004e20 <UART_SetConfig+0x2cc>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b0c      	cmp	r3, #12
 8004c42:	d82d      	bhi.n	8004ca0 <UART_SetConfig+0x14c>
 8004c44:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <UART_SetConfig+0xf8>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c81 	.word	0x08004c81
 8004c50:	08004ca1 	.word	0x08004ca1
 8004c54:	08004ca1 	.word	0x08004ca1
 8004c58:	08004ca1 	.word	0x08004ca1
 8004c5c:	08004c91 	.word	0x08004c91
 8004c60:	08004ca1 	.word	0x08004ca1
 8004c64:	08004ca1 	.word	0x08004ca1
 8004c68:	08004ca1 	.word	0x08004ca1
 8004c6c:	08004c89 	.word	0x08004c89
 8004c70:	08004ca1 	.word	0x08004ca1
 8004c74:	08004ca1 	.word	0x08004ca1
 8004c78:	08004ca1 	.word	0x08004ca1
 8004c7c:	08004c99 	.word	0x08004c99
 8004c80:	2300      	movs	r3, #0
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c86:	e0d8      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8e:	e0d4      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004c90:	2304      	movs	r3, #4
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c96:	e0d0      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004c98:	2308      	movs	r3, #8
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9e:	e0cc      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca6:	e0c8      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a5e      	ldr	r2, [pc, #376]	@ (8004e28 <UART_SetConfig+0x2d4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d125      	bne.n	8004cfe <UART_SetConfig+0x1aa>
 8004cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8004e20 <UART_SetConfig+0x2cc>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004cbc:	2b30      	cmp	r3, #48	@ 0x30
 8004cbe:	d016      	beq.n	8004cee <UART_SetConfig+0x19a>
 8004cc0:	2b30      	cmp	r3, #48	@ 0x30
 8004cc2:	d818      	bhi.n	8004cf6 <UART_SetConfig+0x1a2>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d00a      	beq.n	8004cde <UART_SetConfig+0x18a>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d814      	bhi.n	8004cf6 <UART_SetConfig+0x1a2>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <UART_SetConfig+0x182>
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d008      	beq.n	8004ce6 <UART_SetConfig+0x192>
 8004cd4:	e00f      	b.n	8004cf6 <UART_SetConfig+0x1a2>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cdc:	e0ad      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce4:	e0a9      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cec:	e0a5      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004cee:	2308      	movs	r3, #8
 8004cf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf4:	e0a1      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004cf6:	2310      	movs	r3, #16
 8004cf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cfc:	e09d      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a4a      	ldr	r2, [pc, #296]	@ (8004e2c <UART_SetConfig+0x2d8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d125      	bne.n	8004d54 <UART_SetConfig+0x200>
 8004d08:	4b45      	ldr	r3, [pc, #276]	@ (8004e20 <UART_SetConfig+0x2cc>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d14:	d016      	beq.n	8004d44 <UART_SetConfig+0x1f0>
 8004d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d18:	d818      	bhi.n	8004d4c <UART_SetConfig+0x1f8>
 8004d1a:	2b80      	cmp	r3, #128	@ 0x80
 8004d1c:	d00a      	beq.n	8004d34 <UART_SetConfig+0x1e0>
 8004d1e:	2b80      	cmp	r3, #128	@ 0x80
 8004d20:	d814      	bhi.n	8004d4c <UART_SetConfig+0x1f8>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <UART_SetConfig+0x1d8>
 8004d26:	2b40      	cmp	r3, #64	@ 0x40
 8004d28:	d008      	beq.n	8004d3c <UART_SetConfig+0x1e8>
 8004d2a:	e00f      	b.n	8004d4c <UART_SetConfig+0x1f8>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d32:	e082      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004d34:	2302      	movs	r3, #2
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3a:	e07e      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d42:	e07a      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4a:	e076      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d52:	e072      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a35      	ldr	r2, [pc, #212]	@ (8004e30 <UART_SetConfig+0x2dc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d12a      	bne.n	8004db4 <UART_SetConfig+0x260>
 8004d5e:	4b30      	ldr	r3, [pc, #192]	@ (8004e20 <UART_SetConfig+0x2cc>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d6c:	d01a      	beq.n	8004da4 <UART_SetConfig+0x250>
 8004d6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d72:	d81b      	bhi.n	8004dac <UART_SetConfig+0x258>
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d78:	d00c      	beq.n	8004d94 <UART_SetConfig+0x240>
 8004d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d7e:	d815      	bhi.n	8004dac <UART_SetConfig+0x258>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <UART_SetConfig+0x238>
 8004d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d88:	d008      	beq.n	8004d9c <UART_SetConfig+0x248>
 8004d8a:	e00f      	b.n	8004dac <UART_SetConfig+0x258>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d92:	e052      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d9a:	e04e      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da2:	e04a      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004da4:	2308      	movs	r3, #8
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004daa:	e046      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004dac:	2310      	movs	r3, #16
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db2:	e042      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a17      	ldr	r2, [pc, #92]	@ (8004e18 <UART_SetConfig+0x2c4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d13a      	bne.n	8004e34 <UART_SetConfig+0x2e0>
 8004dbe:	4b18      	ldr	r3, [pc, #96]	@ (8004e20 <UART_SetConfig+0x2cc>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004dc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dcc:	d01a      	beq.n	8004e04 <UART_SetConfig+0x2b0>
 8004dce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dd2:	d81b      	bhi.n	8004e0c <UART_SetConfig+0x2b8>
 8004dd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dd8:	d00c      	beq.n	8004df4 <UART_SetConfig+0x2a0>
 8004dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dde:	d815      	bhi.n	8004e0c <UART_SetConfig+0x2b8>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <UART_SetConfig+0x298>
 8004de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de8:	d008      	beq.n	8004dfc <UART_SetConfig+0x2a8>
 8004dea:	e00f      	b.n	8004e0c <UART_SetConfig+0x2b8>
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df2:	e022      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfa:	e01e      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e02:	e01a      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004e04:	2308      	movs	r3, #8
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0a:	e016      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e12:	e012      	b.n	8004e3a <UART_SetConfig+0x2e6>
 8004e14:	efff69f3 	.word	0xefff69f3
 8004e18:	40008000 	.word	0x40008000
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40004400 	.word	0x40004400
 8004e28:	40004800 	.word	0x40004800
 8004e2c:	40004c00 	.word	0x40004c00
 8004e30:	40005000 	.word	0x40005000
 8004e34:	2310      	movs	r3, #16
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a9f      	ldr	r2, [pc, #636]	@ (80050bc <UART_SetConfig+0x568>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d17a      	bne.n	8004f3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d824      	bhi.n	8004e96 <UART_SetConfig+0x342>
 8004e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <UART_SetConfig+0x300>)
 8004e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e52:	bf00      	nop
 8004e54:	08004e79 	.word	0x08004e79
 8004e58:	08004e97 	.word	0x08004e97
 8004e5c:	08004e81 	.word	0x08004e81
 8004e60:	08004e97 	.word	0x08004e97
 8004e64:	08004e87 	.word	0x08004e87
 8004e68:	08004e97 	.word	0x08004e97
 8004e6c:	08004e97 	.word	0x08004e97
 8004e70:	08004e97 	.word	0x08004e97
 8004e74:	08004e8f 	.word	0x08004e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e78:	f7ff f84c 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8004e7c:	61f8      	str	r0, [r7, #28]
        break;
 8004e7e:	e010      	b.n	8004ea2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e80:	4b8f      	ldr	r3, [pc, #572]	@ (80050c0 <UART_SetConfig+0x56c>)
 8004e82:	61fb      	str	r3, [r7, #28]
        break;
 8004e84:	e00d      	b.n	8004ea2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e86:	f7fe ffad 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8004e8a:	61f8      	str	r0, [r7, #28]
        break;
 8004e8c:	e009      	b.n	8004ea2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e92:	61fb      	str	r3, [r7, #28]
        break;
 8004e94:	e005      	b.n	8004ea2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ea0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80fb 	beq.w	80050a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d305      	bcc.n	8004ec6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d903      	bls.n	8004ece <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ecc:	e0e8      	b.n	80050a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	461c      	mov	r4, r3
 8004ed4:	4615      	mov	r5, r2
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	022b      	lsls	r3, r5, #8
 8004ee0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ee4:	0222      	lsls	r2, r4, #8
 8004ee6:	68f9      	ldr	r1, [r7, #12]
 8004ee8:	6849      	ldr	r1, [r1, #4]
 8004eea:	0849      	lsrs	r1, r1, #1
 8004eec:	2000      	movs	r0, #0
 8004eee:	4688      	mov	r8, r1
 8004ef0:	4681      	mov	r9, r0
 8004ef2:	eb12 0a08 	adds.w	sl, r2, r8
 8004ef6:	eb43 0b09 	adc.w	fp, r3, r9
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f08:	4650      	mov	r0, sl
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	f7fb febc 	bl	8000c88 <__aeabi_uldivmod>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4613      	mov	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f1e:	d308      	bcc.n	8004f32 <UART_SetConfig+0x3de>
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f26:	d204      	bcs.n	8004f32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	60da      	str	r2, [r3, #12]
 8004f30:	e0b6      	b.n	80050a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f38:	e0b2      	b.n	80050a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f42:	d15e      	bne.n	8005002 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d828      	bhi.n	8004f9e <UART_SetConfig+0x44a>
 8004f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <UART_SetConfig+0x400>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f79 	.word	0x08004f79
 8004f58:	08004f81 	.word	0x08004f81
 8004f5c:	08004f89 	.word	0x08004f89
 8004f60:	08004f9f 	.word	0x08004f9f
 8004f64:	08004f8f 	.word	0x08004f8f
 8004f68:	08004f9f 	.word	0x08004f9f
 8004f6c:	08004f9f 	.word	0x08004f9f
 8004f70:	08004f9f 	.word	0x08004f9f
 8004f74:	08004f97 	.word	0x08004f97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f78:	f7fe ffcc 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8004f7c:	61f8      	str	r0, [r7, #28]
        break;
 8004f7e:	e014      	b.n	8004faa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f80:	f7fe ffde 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8004f84:	61f8      	str	r0, [r7, #28]
        break;
 8004f86:	e010      	b.n	8004faa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f88:	4b4d      	ldr	r3, [pc, #308]	@ (80050c0 <UART_SetConfig+0x56c>)
 8004f8a:	61fb      	str	r3, [r7, #28]
        break;
 8004f8c:	e00d      	b.n	8004faa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8e:	f7fe ff29 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8004f92:	61f8      	str	r0, [r7, #28]
        break;
 8004f94:	e009      	b.n	8004faa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f9a:	61fb      	str	r3, [r7, #28]
        break;
 8004f9c:	e005      	b.n	8004faa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d077      	beq.n	80050a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	005a      	lsls	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	441a      	add	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	2b0f      	cmp	r3, #15
 8004fca:	d916      	bls.n	8004ffa <UART_SetConfig+0x4a6>
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd2:	d212      	bcs.n	8004ffa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f023 030f 	bic.w	r3, r3, #15
 8004fdc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	8afb      	ldrh	r3, [r7, #22]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	8afa      	ldrh	r2, [r7, #22]
 8004ff6:	60da      	str	r2, [r3, #12]
 8004ff8:	e052      	b.n	80050a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005000:	e04e      	b.n	80050a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005002:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005006:	2b08      	cmp	r3, #8
 8005008:	d827      	bhi.n	800505a <UART_SetConfig+0x506>
 800500a:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <UART_SetConfig+0x4bc>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005035 	.word	0x08005035
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005045 	.word	0x08005045
 800501c:	0800505b 	.word	0x0800505b
 8005020:	0800504b 	.word	0x0800504b
 8005024:	0800505b 	.word	0x0800505b
 8005028:	0800505b 	.word	0x0800505b
 800502c:	0800505b 	.word	0x0800505b
 8005030:	08005053 	.word	0x08005053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005034:	f7fe ff6e 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8005038:	61f8      	str	r0, [r7, #28]
        break;
 800503a:	e014      	b.n	8005066 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800503c:	f7fe ff80 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8005040:	61f8      	str	r0, [r7, #28]
        break;
 8005042:	e010      	b.n	8005066 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005044:	4b1e      	ldr	r3, [pc, #120]	@ (80050c0 <UART_SetConfig+0x56c>)
 8005046:	61fb      	str	r3, [r7, #28]
        break;
 8005048:	e00d      	b.n	8005066 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504a:	f7fe fecb 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 800504e:	61f8      	str	r0, [r7, #28]
        break;
 8005050:	e009      	b.n	8005066 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005056:	61fb      	str	r3, [r7, #28]
        break;
 8005058:	e005      	b.n	8005066 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005064:	bf00      	nop
    }

    if (pclk != 0U)
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d019      	beq.n	80050a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	085a      	lsrs	r2, r3, #1
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	441a      	add	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b0f      	cmp	r3, #15
 8005084:	d909      	bls.n	800509a <UART_SetConfig+0x546>
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508c:	d205      	bcs.n	800509a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60da      	str	r2, [r3, #12]
 8005098:	e002      	b.n	80050a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80050ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3728      	adds	r7, #40	@ 0x28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ba:	bf00      	nop
 80050bc:	40008000 	.word	0x40008000
 80050c0:	00f42400 	.word	0x00f42400

080050c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01a      	beq.n	80051da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051c2:	d10a      	bne.n	80051da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
  }
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b098      	sub	sp, #96	@ 0x60
 800520c:	af02      	add	r7, sp, #8
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005218:	f7fc ff62 	bl	80020e0 <HAL_GetTick>
 800521c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b08      	cmp	r3, #8
 800522a:	d12e      	bne.n	800528a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800522c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005234:	2200      	movs	r2, #0
 8005236:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f88c 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d021      	beq.n	800528a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800525a:	653b      	str	r3, [r7, #80]	@ 0x50
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	461a      	mov	r2, r3
 8005262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005264:	647b      	str	r3, [r7, #68]	@ 0x44
 8005266:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800526a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e6      	bne.n	8005246 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e062      	b.n	8005350 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b04      	cmp	r3, #4
 8005296:	d149      	bne.n	800532c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005298:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a0:	2200      	movs	r2, #0
 80052a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f856 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d03c      	beq.n	800532c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	623b      	str	r3, [r7, #32]
   return(result);
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e6      	bne.n	80052b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3308      	adds	r3, #8
 80052ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3308      	adds	r3, #8
 8005302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005304:	61fa      	str	r2, [r7, #28]
 8005306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	69b9      	ldr	r1, [r7, #24]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	617b      	str	r3, [r7, #20]
   return(result);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e5      	bne.n	80052e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e011      	b.n	8005350 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3758      	adds	r7, #88	@ 0x58
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005368:	e04f      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d04b      	beq.n	800540a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fc feb5 	bl	80020e0 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <UART_WaitOnFlagUntilTimeout+0x30>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e04e      	b.n	800542a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d037      	beq.n	800540a <UART_WaitOnFlagUntilTimeout+0xb2>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b80      	cmp	r3, #128	@ 0x80
 800539e:	d034      	beq.n	800540a <UART_WaitOnFlagUntilTimeout+0xb2>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b40      	cmp	r3, #64	@ 0x40
 80053a4:	d031      	beq.n	800540a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d110      	bne.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2208      	movs	r2, #8
 80053ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f838 	bl	8005432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2208      	movs	r2, #8
 80053c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e029      	b.n	800542a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053e4:	d111      	bne.n	800540a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f81e 	bl	8005432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e00f      	b.n	800542a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4013      	ands	r3, r2
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	429a      	cmp	r2, r3
 8005418:	bf0c      	ite	eq
 800541a:	2301      	moveq	r3, #1
 800541c:	2300      	movne	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	429a      	cmp	r2, r3
 8005426:	d0a0      	beq.n	800536a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005432:	b480      	push	{r7}
 8005434:	b095      	sub	sp, #84	@ 0x54
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800544e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005458:	643b      	str	r3, [r7, #64]	@ 0x40
 800545a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800545e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e6      	bne.n	800543a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	61fb      	str	r3, [r7, #28]
   return(result);
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800548c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800548e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e5      	bne.n	800546c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d118      	bne.n	80054da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f023 0310 	bic.w	r3, r3, #16
 80054bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6979      	ldr	r1, [r7, #20]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	613b      	str	r3, [r7, #16]
   return(result);
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e6      	bne.n	80054a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80054ee:	bf00      	nop
 80054f0:	3754      	adds	r7, #84	@ 0x54
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <arm_fir_init_f32>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	9c04      	ldr	r4, [sp, #16]
 8005500:	6082      	str	r2, [r0, #8]
 8005502:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005506:	3c01      	subs	r4, #1
 8005508:	440c      	add	r4, r1
 800550a:	8001      	strh	r1, [r0, #0]
 800550c:	4605      	mov	r5, r0
 800550e:	00a2      	lsls	r2, r4, #2
 8005510:	4618      	mov	r0, r3
 8005512:	2100      	movs	r1, #0
 8005514:	f001 fa25 	bl	8006962 <memset>
 8005518:	6068      	str	r0, [r5, #4]
 800551a:	bd38      	pop	{r3, r4, r5, pc}

0800551c <arm_fir_f32>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	ed2d 8b10 	vpush	{d8-d15}
 8005524:	b08b      	sub	sp, #44	@ 0x2c
 8005526:	f8b0 8000 	ldrh.w	r8, [r0]
 800552a:	9003      	str	r0, [sp, #12]
 800552c:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 8005530:	461e      	mov	r6, r3
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 8005538:	3b01      	subs	r3, #1
 800553a:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800553e:	08f3      	lsrs	r3, r6, #3
 8005540:	9002      	str	r0, [sp, #8]
 8005542:	9500      	str	r5, [sp, #0]
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	f000 81f1 	beq.w	800592c <arm_fir_f32+0x410>
 800554a:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800554e:	f100 0620 	add.w	r6, r0, #32
 8005552:	9405      	str	r4, [sp, #20]
 8005554:	0164      	lsls	r4, r4, #5
 8005556:	4420      	add	r0, r4
 8005558:	f008 0a07 	and.w	sl, r8, #7
 800555c:	9607      	str	r6, [sp, #28]
 800555e:	9006      	str	r0, [sp, #24]
 8005560:	469c      	mov	ip, r3
 8005562:	4650      	mov	r0, sl
 8005564:	4623      	mov	r3, r4
 8005566:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800556a:	f8cd 8020 	str.w	r8, [sp, #32]
 800556e:	1937      	adds	r7, r6, r4
 8005570:	f109 0b1c 	add.w	fp, r9, #28
 8005574:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005578:	9209      	str	r2, [sp, #36]	@ 0x24
 800557a:	f8cd 9014 	str.w	r9, [sp, #20]
 800557e:	f101 0620 	add.w	r6, r1, #32
 8005582:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005586:	9106      	str	r1, [sp, #24]
 8005588:	3520      	adds	r5, #32
 800558a:	f102 0420 	add.w	r4, r2, #32
 800558e:	4698      	mov	r8, r3
 8005590:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8005594:	f845 3c20 	str.w	r3, [r5, #-32]
 8005598:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800559c:	f845 3c1c 	str.w	r3, [r5, #-28]
 80055a0:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80055a4:	f845 3c18 	str.w	r3, [r5, #-24]
 80055a8:	f856 3c14 	ldr.w	r3, [r6, #-20]
 80055ac:	f845 3c14 	str.w	r3, [r5, #-20]
 80055b0:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80055b4:	f845 3c10 	str.w	r3, [r5, #-16]
 80055b8:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80055bc:	f845 3c0c 	str.w	r3, [r5, #-12]
 80055c0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80055c4:	f845 3c08 	str.w	r3, [r5, #-8]
 80055c8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80055cc:	f845 3c04 	str.w	r3, [r5, #-4]
 80055d0:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 80055d4:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 80055d8:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 80055dc:	ed5b 0a04 	vldr	s1, [fp, #-16]
 80055e0:	ed1b 0a03 	vldr	s0, [fp, #-12]
 80055e4:	ed1b 8a02 	vldr	s16, [fp, #-8]
 80055e8:	ed5b 8a01 	vldr	s17, [fp, #-4]
 80055ec:	eddf 6af5 	vldr	s13, [pc, #980]	@ 80059c4 <arm_fir_f32+0x4a8>
 80055f0:	465a      	mov	r2, fp
 80055f2:	f1be 0f00 	cmp.w	lr, #0
 80055f6:	f000 81fe 	beq.w	80059f6 <arm_fir_f32+0x4da>
 80055fa:	f10b 0120 	add.w	r1, fp, #32
 80055fe:	eef0 ba66 	vmov.f32	s23, s13
 8005602:	eeb0 6a66 	vmov.f32	s12, s13
 8005606:	eeb0 9a66 	vmov.f32	s18, s13
 800560a:	eef0 9a66 	vmov.f32	s19, s13
 800560e:	eeb0 aa66 	vmov.f32	s20, s13
 8005612:	eef0 aa66 	vmov.f32	s21, s13
 8005616:	eeb0 ba66 	vmov.f32	s22, s13
 800561a:	460a      	mov	r2, r1
 800561c:	4653      	mov	r3, sl
 800561e:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 8005622:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 8005626:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 800562a:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800562e:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 8005632:	ed53 ca04 	vldr	s25, [r3, #-16]
 8005636:	ed53 2a03 	vldr	s5, [r3, #-12]
 800563a:	ed13 4a02 	vldr	s8, [r3, #-8]
 800563e:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005642:	ee67 fa02 	vmul.f32	s31, s14, s4
 8005646:	ee27 da21 	vmul.f32	s26, s14, s3
 800564a:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800564e:	ee27 ca01 	vmul.f32	s24, s14, s2
 8005652:	ee27 3a20 	vmul.f32	s6, s14, s1
 8005656:	ee67 3a00 	vmul.f32	s7, s14, s0
 800565a:	ee67 5a08 	vmul.f32	s11, s14, s16
 800565e:	ee27 fa28 	vmul.f32	s30, s14, s17
 8005662:	ee67 7a24 	vmul.f32	s15, s14, s9
 8005666:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800566a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800566e:	ee6e faa1 	vmul.f32	s31, s29, s3
 8005672:	ee2e da81 	vmul.f32	s26, s29, s2
 8005676:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 800567a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800567e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005682:	ee2e caa0 	vmul.f32	s24, s29, s1
 8005686:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800568a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800568e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005692:	ee6e 3a88 	vmul.f32	s7, s29, s16
 8005696:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800569a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800569e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056a2:	ee24 faae 	vmul.f32	s30, s9, s29
 80056a6:	ee6e ea82 	vmul.f32	s29, s29, s4
 80056aa:	ee2e 7a01 	vmul.f32	s14, s28, s2
 80056ae:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80056b2:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 80056b6:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80056ba:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80056be:	ee2e da20 	vmul.f32	s26, s28, s1
 80056c2:	ee2e ca00 	vmul.f32	s24, s28, s0
 80056c6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80056ca:	ee33 9a89 	vadd.f32	s18, s7, s18
 80056ce:	ee2e 3a08 	vmul.f32	s6, s28, s16
 80056d2:	ee6e 3a28 	vmul.f32	s7, s28, s17
 80056d6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80056da:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80056de:	ee64 5a8e 	vmul.f32	s11, s9, s28
 80056e2:	ee22 fa0e 	vmul.f32	s30, s4, s28
 80056e6:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 80056ea:	ee2e ea21 	vmul.f32	s28, s28, s3
 80056ee:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 80056f2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80056f6:	ed52 0a04 	vldr	s1, [r2, #-16]
 80056fa:	ee2d da80 	vmul.f32	s26, s27, s0
 80056fe:	ee37 ba0b 	vadd.f32	s22, s14, s22
 8005702:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005706:	ee73 9a29 	vadd.f32	s19, s6, s19
 800570a:	ee2d ca88 	vmul.f32	s24, s27, s16
 800570e:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 8005712:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005716:	ee35 6a86 	vadd.f32	s12, s11, s12
 800571a:	ee64 3aad 	vmul.f32	s7, s9, s27
 800571e:	ee62 5a2d 	vmul.f32	s11, s4, s27
 8005722:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8005726:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800572a:	ee21 faad 	vmul.f32	s30, s3, s27
 800572e:	ee6d da81 	vmul.f32	s27, s27, s2
 8005732:	ee6c fa80 	vmul.f32	s31, s25, s0
 8005736:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800573a:	ed12 0a03 	vldr	s0, [r2, #-12]
 800573e:	ee3d da2a 	vadd.f32	s26, s26, s21
 8005742:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005746:	ee6c aa88 	vmul.f32	s21, s25, s16
 800574a:	ee2c caa8 	vmul.f32	s24, s25, s17
 800574e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005752:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005756:	ee24 3aac 	vmul.f32	s6, s9, s25
 800575a:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800575e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005762:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8005766:	ee61 5aac 	vmul.f32	s11, s3, s25
 800576a:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800576e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8005772:	ee6c caa0 	vmul.f32	s25, s25, s1
 8005776:	ee62 ea88 	vmul.f32	s29, s5, s16
 800577a:	ee3a da8d 	vadd.f32	s26, s21, s26
 800577e:	ed12 8a02 	vldr	s16, [r2, #-8]
 8005782:	ee62 aaa8 	vmul.f32	s21, s5, s17
 8005786:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800578a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800578e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005792:	ee24 caa2 	vmul.f32	s24, s9, s5
 8005796:	ee22 3a22 	vmul.f32	s6, s4, s5
 800579a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800579e:	ee35 6a86 	vadd.f32	s12, s11, s12
 80057a2:	ee61 3aa2 	vmul.f32	s7, s3, s5
 80057a6:	ee61 5a22 	vmul.f32	s11, s2, s5
 80057aa:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80057ae:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 80057b2:	ee20 faa2 	vmul.f32	s30, s1, s5
 80057b6:	ee62 2a80 	vmul.f32	s5, s5, s0
 80057ba:	ee7e fa8b 	vadd.f32	s31, s29, s22
 80057be:	ee72 7aa7 	vadd.f32	s15, s5, s15
 80057c2:	ee24 ba28 	vmul.f32	s22, s8, s17
 80057c6:	ee7a aa8d 	vadd.f32	s21, s21, s26
 80057ca:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80057ce:	ee24 da84 	vmul.f32	s26, s9, s8
 80057d2:	ee22 ca04 	vmul.f32	s24, s4, s8
 80057d6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80057da:	ee33 9a89 	vadd.f32	s18, s7, s18
 80057de:	ee21 3a84 	vmul.f32	s6, s3, s8
 80057e2:	ee61 3a04 	vmul.f32	s7, s2, s8
 80057e6:	ee35 6a86 	vadd.f32	s12, s11, s12
 80057ea:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80057ee:	ee60 5a84 	vmul.f32	s11, s1, s8
 80057f2:	ee20 7a04 	vmul.f32	s14, s0, s8
 80057f6:	ee64 6a08 	vmul.f32	s13, s8, s16
 80057fa:	ed52 8a01 	vldr	s17, [r2, #-4]
 80057fe:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005802:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005806:	ee35 6a86 	vadd.f32	s12, s11, s12
 800580a:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800580e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005812:	ee3b ba2f 	vadd.f32	s22, s22, s31
 8005816:	ee64 4a85 	vmul.f32	s9, s9, s10
 800581a:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800581e:	ee22 4a05 	vmul.f32	s8, s4, s10
 8005822:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8005826:	ee61 2a85 	vmul.f32	s5, s3, s10
 800582a:	ee21 3a05 	vmul.f32	s6, s2, s10
 800582e:	ee60 3a85 	vmul.f32	s7, s1, s10
 8005832:	ee60 5a05 	vmul.f32	s11, s0, s10
 8005836:	ee68 ba05 	vmul.f32	s23, s16, s10
 800583a:	ee65 7a28 	vmul.f32	s15, s10, s17
 800583e:	3320      	adds	r3, #32
 8005840:	429f      	cmp	r7, r3
 8005842:	ee34 ba8b 	vadd.f32	s22, s9, s22
 8005846:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800584a:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800584e:	ee73 9a29 	vadd.f32	s19, s6, s19
 8005852:	ee33 9a89 	vadd.f32	s18, s7, s18
 8005856:	ee35 6a86 	vadd.f32	s12, s11, s12
 800585a:	ee7b ba87 	vadd.f32	s23, s23, s14
 800585e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8005862:	f102 0220 	add.w	r2, r2, #32
 8005866:	f47f aeda 	bne.w	800561e <arm_fir_f32+0x102>
 800586a:	eb0b 0208 	add.w	r2, fp, r8
 800586e:	46cb      	mov	fp, r9
 8005870:	b3a0      	cbz	r0, 80058dc <arm_fir_f32+0x3c0>
 8005872:	4603      	mov	r3, r0
 8005874:	ecfb 7a01 	vldmia	fp!, {s15}
 8005878:	ecf2 5a01 	vldmia	r2!, {s11}
 800587c:	ee27 2a82 	vmul.f32	s4, s15, s4
 8005880:	ee67 2aa1 	vmul.f32	s5, s15, s3
 8005884:	ee27 3a81 	vmul.f32	s6, s15, s2
 8005888:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800588c:	ee27 4a80 	vmul.f32	s8, s15, s0
 8005890:	ee67 4a88 	vmul.f32	s9, s15, s16
 8005894:	ee27 5aa8 	vmul.f32	s10, s15, s17
 8005898:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800589c:	3b01      	subs	r3, #1
 800589e:	ee3b ba02 	vadd.f32	s22, s22, s4
 80058a2:	ee7a aaa2 	vadd.f32	s21, s21, s5
 80058a6:	eeb0 2a61 	vmov.f32	s4, s3
 80058aa:	ee3a aa03 	vadd.f32	s20, s20, s6
 80058ae:	eef0 1a41 	vmov.f32	s3, s2
 80058b2:	ee79 9aa3 	vadd.f32	s19, s19, s7
 80058b6:	eeb0 1a60 	vmov.f32	s2, s1
 80058ba:	ee39 9a04 	vadd.f32	s18, s18, s8
 80058be:	eef0 0a40 	vmov.f32	s1, s0
 80058c2:	ee36 6a24 	vadd.f32	s12, s12, s9
 80058c6:	eeb0 0a48 	vmov.f32	s0, s16
 80058ca:	ee7b ba85 	vadd.f32	s23, s23, s10
 80058ce:	eeb0 8a68 	vmov.f32	s16, s17
 80058d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80058d6:	eef0 8a65 	vmov.f32	s17, s11
 80058da:	d1cb      	bne.n	8005874 <arm_fir_f32+0x358>
 80058dc:	f1bc 0c01 	subs.w	ip, ip, #1
 80058e0:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 80058e4:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 80058e8:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 80058ec:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 80058f0:	ed04 9a04 	vstr	s18, [r4, #-16]
 80058f4:	ed04 6a03 	vstr	s12, [r4, #-12]
 80058f8:	ed44 ba02 	vstr	s23, [r4, #-8]
 80058fc:	ed44 6a01 	vstr	s13, [r4, #-4]
 8005900:	f106 0620 	add.w	r6, r6, #32
 8005904:	f105 0520 	add.w	r5, r5, #32
 8005908:	f104 0420 	add.w	r4, r4, #32
 800590c:	468b      	mov	fp, r1
 800590e:	f47f ae3f 	bne.w	8005590 <arm_fir_f32+0x74>
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	9800      	ldr	r0, [sp, #0]
 8005916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800591c:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 8005920:	015b      	lsls	r3, r3, #5
 8005922:	4418      	add	r0, r3
 8005924:	4419      	add	r1, r3
 8005926:	441a      	add	r2, r3
 8005928:	4499      	add	r9, r3
 800592a:	9000      	str	r0, [sp, #0]
 800592c:	9b04      	ldr	r3, [sp, #16]
 800592e:	f013 0707 	ands.w	r7, r3, #7
 8005932:	d020      	beq.n	8005976 <arm_fir_f32+0x45a>
 8005934:	00bf      	lsls	r7, r7, #2
 8005936:	9e00      	ldr	r6, [sp, #0]
 8005938:	f8dd e008 	ldr.w	lr, [sp, #8]
 800593c:	eb01 0c07 	add.w	ip, r1, r7
 8005940:	464d      	mov	r5, r9
 8005942:	f851 3b04 	ldr.w	r3, [r1], #4
 8005946:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80059c4 <arm_fir_f32+0x4a8>
 800594a:	f846 3b04 	str.w	r3, [r6], #4
 800594e:	4674      	mov	r4, lr
 8005950:	4643      	mov	r3, r8
 8005952:	4628      	mov	r0, r5
 8005954:	ecf0 7a01 	vldmia	r0!, {s15}
 8005958:	ecf4 6a01 	vldmia	r4!, {s13}
 800595c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005960:	3b01      	subs	r3, #1
 8005962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005966:	d1f5      	bne.n	8005954 <arm_fir_f32+0x438>
 8005968:	4561      	cmp	r1, ip
 800596a:	eca2 7a01 	vstmia	r2!, {s14}
 800596e:	f105 0504 	add.w	r5, r5, #4
 8005972:	d1e6      	bne.n	8005942 <arm_fir_f32+0x426>
 8005974:	44b9      	add	r9, r7
 8005976:	f108 38ff 	add.w	r8, r8, #4294967295
 800597a:	9b03      	ldr	r3, [sp, #12]
 800597c:	ea5f 0498 	movs.w	r4, r8, lsr #2
 8005980:	685d      	ldr	r5, [r3, #4]
 8005982:	d021      	beq.n	80059c8 <arm_fir_f32+0x4ac>
 8005984:	f109 0210 	add.w	r2, r9, #16
 8005988:	f105 0310 	add.w	r3, r5, #16
 800598c:	4621      	mov	r1, r4
 800598e:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8005992:	f843 0c10 	str.w	r0, [r3, #-16]
 8005996:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800599a:	f843 0c0c 	str.w	r0, [r3, #-12]
 800599e:	f852 0c08 	ldr.w	r0, [r2, #-8]
 80059a2:	f843 0c08 	str.w	r0, [r3, #-8]
 80059a6:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80059aa:	f843 0c04 	str.w	r0, [r3, #-4]
 80059ae:	3901      	subs	r1, #1
 80059b0:	f102 0210 	add.w	r2, r2, #16
 80059b4:	f103 0310 	add.w	r3, r3, #16
 80059b8:	d1e9      	bne.n	800598e <arm_fir_f32+0x472>
 80059ba:	0124      	lsls	r4, r4, #4
 80059bc:	44a1      	add	r9, r4
 80059be:	4425      	add	r5, r4
 80059c0:	e002      	b.n	80059c8 <arm_fir_f32+0x4ac>
 80059c2:	bf00      	nop
 80059c4:	00000000 	.word	0x00000000
 80059c8:	f018 0803 	ands.w	r8, r8, #3
 80059cc:	d00e      	beq.n	80059ec <arm_fir_f32+0x4d0>
 80059ce:	f8d9 3000 	ldr.w	r3, [r9]
 80059d2:	602b      	str	r3, [r5, #0]
 80059d4:	f1b8 0801 	subs.w	r8, r8, #1
 80059d8:	d008      	beq.n	80059ec <arm_fir_f32+0x4d0>
 80059da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80059de:	606b      	str	r3, [r5, #4]
 80059e0:	f1b8 0f01 	cmp.w	r8, #1
 80059e4:	bf1c      	itt	ne
 80059e6:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 80059ea:	60ab      	strne	r3, [r5, #8]
 80059ec:	b00b      	add	sp, #44	@ 0x2c
 80059ee:	ecbd 8b10 	vpop	{d8-d15}
 80059f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f6:	eef0 ba66 	vmov.f32	s23, s13
 80059fa:	eeb0 6a66 	vmov.f32	s12, s13
 80059fe:	eeb0 9a66 	vmov.f32	s18, s13
 8005a02:	eef0 9a66 	vmov.f32	s19, s13
 8005a06:	eeb0 aa66 	vmov.f32	s20, s13
 8005a0a:	eef0 aa66 	vmov.f32	s21, s13
 8005a0e:	eeb0 ba66 	vmov.f32	s22, s13
 8005a12:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005a16:	f102 0120 	add.w	r1, r2, #32
 8005a1a:	e729      	b.n	8005870 <arm_fir_f32+0x354>

08005a1c <__cvt>:
 8005a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	ec57 6b10 	vmov	r6, r7, d0
 8005a24:	2f00      	cmp	r7, #0
 8005a26:	460c      	mov	r4, r1
 8005a28:	4619      	mov	r1, r3
 8005a2a:	463b      	mov	r3, r7
 8005a2c:	bfbb      	ittet	lt
 8005a2e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a32:	461f      	movlt	r7, r3
 8005a34:	2300      	movge	r3, #0
 8005a36:	232d      	movlt	r3, #45	@ 0x2d
 8005a38:	700b      	strb	r3, [r1, #0]
 8005a3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a3c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a40:	4691      	mov	r9, r2
 8005a42:	f023 0820 	bic.w	r8, r3, #32
 8005a46:	bfbc      	itt	lt
 8005a48:	4632      	movlt	r2, r6
 8005a4a:	4616      	movlt	r6, r2
 8005a4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a50:	d005      	beq.n	8005a5e <__cvt+0x42>
 8005a52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a56:	d100      	bne.n	8005a5a <__cvt+0x3e>
 8005a58:	3401      	adds	r4, #1
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	e000      	b.n	8005a60 <__cvt+0x44>
 8005a5e:	2103      	movs	r1, #3
 8005a60:	ab03      	add	r3, sp, #12
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	ab02      	add	r3, sp, #8
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	ec47 6b10 	vmov	d0, r6, r7
 8005a6c:	4653      	mov	r3, sl
 8005a6e:	4622      	mov	r2, r4
 8005a70:	f001 f886 	bl	8006b80 <_dtoa_r>
 8005a74:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a78:	4605      	mov	r5, r0
 8005a7a:	d119      	bne.n	8005ab0 <__cvt+0x94>
 8005a7c:	f019 0f01 	tst.w	r9, #1
 8005a80:	d00e      	beq.n	8005aa0 <__cvt+0x84>
 8005a82:	eb00 0904 	add.w	r9, r0, r4
 8005a86:	2200      	movs	r2, #0
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fb f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a92:	b108      	cbz	r0, 8005a98 <__cvt+0x7c>
 8005a94:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a98:	2230      	movs	r2, #48	@ 0x30
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	454b      	cmp	r3, r9
 8005a9e:	d31e      	bcc.n	8005ade <__cvt+0xc2>
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005aa4:	1b5b      	subs	r3, r3, r5
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	b004      	add	sp, #16
 8005aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ab4:	eb00 0904 	add.w	r9, r0, r4
 8005ab8:	d1e5      	bne.n	8005a86 <__cvt+0x6a>
 8005aba:	7803      	ldrb	r3, [r0, #0]
 8005abc:	2b30      	cmp	r3, #48	@ 0x30
 8005abe:	d10a      	bne.n	8005ad6 <__cvt+0xba>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f7fa fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 8005acc:	b918      	cbnz	r0, 8005ad6 <__cvt+0xba>
 8005ace:	f1c4 0401 	rsb	r4, r4, #1
 8005ad2:	f8ca 4000 	str.w	r4, [sl]
 8005ad6:	f8da 3000 	ldr.w	r3, [sl]
 8005ada:	4499      	add	r9, r3
 8005adc:	e7d3      	b.n	8005a86 <__cvt+0x6a>
 8005ade:	1c59      	adds	r1, r3, #1
 8005ae0:	9103      	str	r1, [sp, #12]
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	e7d9      	b.n	8005a9a <__cvt+0x7e>

08005ae6 <__exponent>:
 8005ae6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ae8:	2900      	cmp	r1, #0
 8005aea:	bfba      	itte	lt
 8005aec:	4249      	neglt	r1, r1
 8005aee:	232d      	movlt	r3, #45	@ 0x2d
 8005af0:	232b      	movge	r3, #43	@ 0x2b
 8005af2:	2909      	cmp	r1, #9
 8005af4:	7002      	strb	r2, [r0, #0]
 8005af6:	7043      	strb	r3, [r0, #1]
 8005af8:	dd29      	ble.n	8005b4e <__exponent+0x68>
 8005afa:	f10d 0307 	add.w	r3, sp, #7
 8005afe:	461d      	mov	r5, r3
 8005b00:	270a      	movs	r7, #10
 8005b02:	461a      	mov	r2, r3
 8005b04:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b08:	fb07 1416 	mls	r4, r7, r6, r1
 8005b0c:	3430      	adds	r4, #48	@ 0x30
 8005b0e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b12:	460c      	mov	r4, r1
 8005b14:	2c63      	cmp	r4, #99	@ 0x63
 8005b16:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	dcf1      	bgt.n	8005b02 <__exponent+0x1c>
 8005b1e:	3130      	adds	r1, #48	@ 0x30
 8005b20:	1e94      	subs	r4, r2, #2
 8005b22:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b26:	1c41      	adds	r1, r0, #1
 8005b28:	4623      	mov	r3, r4
 8005b2a:	42ab      	cmp	r3, r5
 8005b2c:	d30a      	bcc.n	8005b44 <__exponent+0x5e>
 8005b2e:	f10d 0309 	add.w	r3, sp, #9
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	42ac      	cmp	r4, r5
 8005b36:	bf88      	it	hi
 8005b38:	2300      	movhi	r3, #0
 8005b3a:	3302      	adds	r3, #2
 8005b3c:	4403      	add	r3, r0
 8005b3e:	1a18      	subs	r0, r3, r0
 8005b40:	b003      	add	sp, #12
 8005b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b44:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b48:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b4c:	e7ed      	b.n	8005b2a <__exponent+0x44>
 8005b4e:	2330      	movs	r3, #48	@ 0x30
 8005b50:	3130      	adds	r1, #48	@ 0x30
 8005b52:	7083      	strb	r3, [r0, #2]
 8005b54:	70c1      	strb	r1, [r0, #3]
 8005b56:	1d03      	adds	r3, r0, #4
 8005b58:	e7f1      	b.n	8005b3e <__exponent+0x58>
	...

08005b5c <_printf_float>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	b08d      	sub	sp, #52	@ 0x34
 8005b62:	460c      	mov	r4, r1
 8005b64:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b68:	4616      	mov	r6, r2
 8005b6a:	461f      	mov	r7, r3
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	f000 ff01 	bl	8006974 <_localeconv_r>
 8005b72:	6803      	ldr	r3, [r0, #0]
 8005b74:	9304      	str	r3, [sp, #16]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fa fb7a 	bl	8000270 <strlen>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b80:	f8d8 3000 	ldr.w	r3, [r8]
 8005b84:	9005      	str	r0, [sp, #20]
 8005b86:	3307      	adds	r3, #7
 8005b88:	f023 0307 	bic.w	r3, r3, #7
 8005b8c:	f103 0208 	add.w	r2, r3, #8
 8005b90:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005b94:	f8d4 b000 	ldr.w	fp, [r4]
 8005b98:	f8c8 2000 	str.w	r2, [r8]
 8005b9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ba0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ba4:	9307      	str	r3, [sp, #28]
 8005ba6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005baa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bb2:	4b9c      	ldr	r3, [pc, #624]	@ (8005e24 <_printf_float+0x2c8>)
 8005bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb8:	f7fa ffb8 	bl	8000b2c <__aeabi_dcmpun>
 8005bbc:	bb70      	cbnz	r0, 8005c1c <_printf_float+0xc0>
 8005bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc2:	4b98      	ldr	r3, [pc, #608]	@ (8005e24 <_printf_float+0x2c8>)
 8005bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc8:	f7fa ff92 	bl	8000af0 <__aeabi_dcmple>
 8005bcc:	bb30      	cbnz	r0, 8005c1c <_printf_float+0xc0>
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa ff81 	bl	8000adc <__aeabi_dcmplt>
 8005bda:	b110      	cbz	r0, 8005be2 <_printf_float+0x86>
 8005bdc:	232d      	movs	r3, #45	@ 0x2d
 8005bde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be2:	4a91      	ldr	r2, [pc, #580]	@ (8005e28 <_printf_float+0x2cc>)
 8005be4:	4b91      	ldr	r3, [pc, #580]	@ (8005e2c <_printf_float+0x2d0>)
 8005be6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005bea:	bf94      	ite	ls
 8005bec:	4690      	movls	r8, r2
 8005bee:	4698      	movhi	r8, r3
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	f02b 0304 	bic.w	r3, fp, #4
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	f04f 0900 	mov.w	r9, #0
 8005bfe:	9700      	str	r7, [sp, #0]
 8005c00:	4633      	mov	r3, r6
 8005c02:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c04:	4621      	mov	r1, r4
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 f9d2 	bl	8005fb0 <_printf_common>
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	f040 808d 	bne.w	8005d2c <_printf_float+0x1d0>
 8005c12:	f04f 30ff 	mov.w	r0, #4294967295
 8005c16:	b00d      	add	sp, #52	@ 0x34
 8005c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	4640      	mov	r0, r8
 8005c22:	4649      	mov	r1, r9
 8005c24:	f7fa ff82 	bl	8000b2c <__aeabi_dcmpun>
 8005c28:	b140      	cbz	r0, 8005c3c <_printf_float+0xe0>
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bfbc      	itt	lt
 8005c30:	232d      	movlt	r3, #45	@ 0x2d
 8005c32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c36:	4a7e      	ldr	r2, [pc, #504]	@ (8005e30 <_printf_float+0x2d4>)
 8005c38:	4b7e      	ldr	r3, [pc, #504]	@ (8005e34 <_printf_float+0x2d8>)
 8005c3a:	e7d4      	b.n	8005be6 <_printf_float+0x8a>
 8005c3c:	6863      	ldr	r3, [r4, #4]
 8005c3e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c42:	9206      	str	r2, [sp, #24]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	d13b      	bne.n	8005cc0 <_printf_float+0x164>
 8005c48:	2306      	movs	r3, #6
 8005c4a:	6063      	str	r3, [r4, #4]
 8005c4c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c50:	2300      	movs	r3, #0
 8005c52:	6022      	str	r2, [r4, #0]
 8005c54:	9303      	str	r3, [sp, #12]
 8005c56:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c58:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c5c:	ab09      	add	r3, sp, #36	@ 0x24
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	6861      	ldr	r1, [r4, #4]
 8005c62:	ec49 8b10 	vmov	d0, r8, r9
 8005c66:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	f7ff fed6 	bl	8005a1c <__cvt>
 8005c70:	9b06      	ldr	r3, [sp, #24]
 8005c72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c74:	2b47      	cmp	r3, #71	@ 0x47
 8005c76:	4680      	mov	r8, r0
 8005c78:	d129      	bne.n	8005cce <_printf_float+0x172>
 8005c7a:	1cc8      	adds	r0, r1, #3
 8005c7c:	db02      	blt.n	8005c84 <_printf_float+0x128>
 8005c7e:	6863      	ldr	r3, [r4, #4]
 8005c80:	4299      	cmp	r1, r3
 8005c82:	dd41      	ble.n	8005d08 <_printf_float+0x1ac>
 8005c84:	f1aa 0a02 	sub.w	sl, sl, #2
 8005c88:	fa5f fa8a 	uxtb.w	sl, sl
 8005c8c:	3901      	subs	r1, #1
 8005c8e:	4652      	mov	r2, sl
 8005c90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005c94:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c96:	f7ff ff26 	bl	8005ae6 <__exponent>
 8005c9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c9c:	1813      	adds	r3, r2, r0
 8005c9e:	2a01      	cmp	r2, #1
 8005ca0:	4681      	mov	r9, r0
 8005ca2:	6123      	str	r3, [r4, #16]
 8005ca4:	dc02      	bgt.n	8005cac <_printf_float+0x150>
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	07d2      	lsls	r2, r2, #31
 8005caa:	d501      	bpl.n	8005cb0 <_printf_float+0x154>
 8005cac:	3301      	adds	r3, #1
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0a2      	beq.n	8005bfe <_printf_float+0xa2>
 8005cb8:	232d      	movs	r3, #45	@ 0x2d
 8005cba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cbe:	e79e      	b.n	8005bfe <_printf_float+0xa2>
 8005cc0:	9a06      	ldr	r2, [sp, #24]
 8005cc2:	2a47      	cmp	r2, #71	@ 0x47
 8005cc4:	d1c2      	bne.n	8005c4c <_printf_float+0xf0>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1c0      	bne.n	8005c4c <_printf_float+0xf0>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e7bd      	b.n	8005c4a <_printf_float+0xee>
 8005cce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cd2:	d9db      	bls.n	8005c8c <_printf_float+0x130>
 8005cd4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cd8:	d118      	bne.n	8005d0c <_printf_float+0x1b0>
 8005cda:	2900      	cmp	r1, #0
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	dd0b      	ble.n	8005cf8 <_printf_float+0x19c>
 8005ce0:	6121      	str	r1, [r4, #16]
 8005ce2:	b913      	cbnz	r3, 8005cea <_printf_float+0x18e>
 8005ce4:	6822      	ldr	r2, [r4, #0]
 8005ce6:	07d0      	lsls	r0, r2, #31
 8005ce8:	d502      	bpl.n	8005cf0 <_printf_float+0x194>
 8005cea:	3301      	adds	r3, #1
 8005cec:	440b      	add	r3, r1
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005cf2:	f04f 0900 	mov.w	r9, #0
 8005cf6:	e7db      	b.n	8005cb0 <_printf_float+0x154>
 8005cf8:	b913      	cbnz	r3, 8005d00 <_printf_float+0x1a4>
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	07d2      	lsls	r2, r2, #31
 8005cfe:	d501      	bpl.n	8005d04 <_printf_float+0x1a8>
 8005d00:	3302      	adds	r3, #2
 8005d02:	e7f4      	b.n	8005cee <_printf_float+0x192>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e7f2      	b.n	8005cee <_printf_float+0x192>
 8005d08:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d0e:	4299      	cmp	r1, r3
 8005d10:	db05      	blt.n	8005d1e <_printf_float+0x1c2>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	6121      	str	r1, [r4, #16]
 8005d16:	07d8      	lsls	r0, r3, #31
 8005d18:	d5ea      	bpl.n	8005cf0 <_printf_float+0x194>
 8005d1a:	1c4b      	adds	r3, r1, #1
 8005d1c:	e7e7      	b.n	8005cee <_printf_float+0x192>
 8005d1e:	2900      	cmp	r1, #0
 8005d20:	bfd4      	ite	le
 8005d22:	f1c1 0202 	rsble	r2, r1, #2
 8005d26:	2201      	movgt	r2, #1
 8005d28:	4413      	add	r3, r2
 8005d2a:	e7e0      	b.n	8005cee <_printf_float+0x192>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	055a      	lsls	r2, r3, #21
 8005d30:	d407      	bmi.n	8005d42 <_printf_float+0x1e6>
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	4642      	mov	r2, r8
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	47b8      	blx	r7
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d12b      	bne.n	8005d98 <_printf_float+0x23c>
 8005d40:	e767      	b.n	8005c12 <_printf_float+0xb6>
 8005d42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d46:	f240 80dd 	bls.w	8005f04 <_printf_float+0x3a8>
 8005d4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2300      	movs	r3, #0
 8005d52:	f7fa feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d033      	beq.n	8005dc2 <_printf_float+0x266>
 8005d5a:	4a37      	ldr	r2, [pc, #220]	@ (8005e38 <_printf_float+0x2dc>)
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4628      	mov	r0, r5
 8005d62:	47b8      	blx	r7
 8005d64:	3001      	adds	r0, #1
 8005d66:	f43f af54 	beq.w	8005c12 <_printf_float+0xb6>
 8005d6a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d6e:	4543      	cmp	r3, r8
 8005d70:	db02      	blt.n	8005d78 <_printf_float+0x21c>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	07d8      	lsls	r0, r3, #31
 8005d76:	d50f      	bpl.n	8005d98 <_printf_float+0x23c>
 8005d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d7c:	4631      	mov	r1, r6
 8005d7e:	4628      	mov	r0, r5
 8005d80:	47b8      	blx	r7
 8005d82:	3001      	adds	r0, #1
 8005d84:	f43f af45 	beq.w	8005c12 <_printf_float+0xb6>
 8005d88:	f04f 0900 	mov.w	r9, #0
 8005d8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d90:	f104 0a1a 	add.w	sl, r4, #26
 8005d94:	45c8      	cmp	r8, r9
 8005d96:	dc09      	bgt.n	8005dac <_printf_float+0x250>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	079b      	lsls	r3, r3, #30
 8005d9c:	f100 8103 	bmi.w	8005fa6 <_printf_float+0x44a>
 8005da0:	68e0      	ldr	r0, [r4, #12]
 8005da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005da4:	4298      	cmp	r0, r3
 8005da6:	bfb8      	it	lt
 8005da8:	4618      	movlt	r0, r3
 8005daa:	e734      	b.n	8005c16 <_printf_float+0xba>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4652      	mov	r2, sl
 8005db0:	4631      	mov	r1, r6
 8005db2:	4628      	mov	r0, r5
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f af2b 	beq.w	8005c12 <_printf_float+0xb6>
 8005dbc:	f109 0901 	add.w	r9, r9, #1
 8005dc0:	e7e8      	b.n	8005d94 <_printf_float+0x238>
 8005dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	dc39      	bgt.n	8005e3c <_printf_float+0x2e0>
 8005dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e38 <_printf_float+0x2dc>)
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f af1d 	beq.w	8005c12 <_printf_float+0xb6>
 8005dd8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005ddc:	ea59 0303 	orrs.w	r3, r9, r3
 8005de0:	d102      	bne.n	8005de8 <_printf_float+0x28c>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	07d9      	lsls	r1, r3, #31
 8005de6:	d5d7      	bpl.n	8005d98 <_printf_float+0x23c>
 8005de8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	f43f af0d 	beq.w	8005c12 <_printf_float+0xb6>
 8005df8:	f04f 0a00 	mov.w	sl, #0
 8005dfc:	f104 0b1a 	add.w	fp, r4, #26
 8005e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e02:	425b      	negs	r3, r3
 8005e04:	4553      	cmp	r3, sl
 8005e06:	dc01      	bgt.n	8005e0c <_printf_float+0x2b0>
 8005e08:	464b      	mov	r3, r9
 8005e0a:	e793      	b.n	8005d34 <_printf_float+0x1d8>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	465a      	mov	r2, fp
 8005e10:	4631      	mov	r1, r6
 8005e12:	4628      	mov	r0, r5
 8005e14:	47b8      	blx	r7
 8005e16:	3001      	adds	r0, #1
 8005e18:	f43f aefb 	beq.w	8005c12 <_printf_float+0xb6>
 8005e1c:	f10a 0a01 	add.w	sl, sl, #1
 8005e20:	e7ee      	b.n	8005e00 <_printf_float+0x2a4>
 8005e22:	bf00      	nop
 8005e24:	7fefffff 	.word	0x7fefffff
 8005e28:	0800a208 	.word	0x0800a208
 8005e2c:	0800a20c 	.word	0x0800a20c
 8005e30:	0800a210 	.word	0x0800a210
 8005e34:	0800a214 	.word	0x0800a214
 8005e38:	0800a218 	.word	0x0800a218
 8005e3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e42:	4553      	cmp	r3, sl
 8005e44:	bfa8      	it	ge
 8005e46:	4653      	movge	r3, sl
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	4699      	mov	r9, r3
 8005e4c:	dc36      	bgt.n	8005ebc <_printf_float+0x360>
 8005e4e:	f04f 0b00 	mov.w	fp, #0
 8005e52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e56:	f104 021a 	add.w	r2, r4, #26
 8005e5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e5c:	9306      	str	r3, [sp, #24]
 8005e5e:	eba3 0309 	sub.w	r3, r3, r9
 8005e62:	455b      	cmp	r3, fp
 8005e64:	dc31      	bgt.n	8005eca <_printf_float+0x36e>
 8005e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e68:	459a      	cmp	sl, r3
 8005e6a:	dc3a      	bgt.n	8005ee2 <_printf_float+0x386>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	07da      	lsls	r2, r3, #31
 8005e70:	d437      	bmi.n	8005ee2 <_printf_float+0x386>
 8005e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e74:	ebaa 0903 	sub.w	r9, sl, r3
 8005e78:	9b06      	ldr	r3, [sp, #24]
 8005e7a:	ebaa 0303 	sub.w	r3, sl, r3
 8005e7e:	4599      	cmp	r9, r3
 8005e80:	bfa8      	it	ge
 8005e82:	4699      	movge	r9, r3
 8005e84:	f1b9 0f00 	cmp.w	r9, #0
 8005e88:	dc33      	bgt.n	8005ef2 <_printf_float+0x396>
 8005e8a:	f04f 0800 	mov.w	r8, #0
 8005e8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e92:	f104 0b1a 	add.w	fp, r4, #26
 8005e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e98:	ebaa 0303 	sub.w	r3, sl, r3
 8005e9c:	eba3 0309 	sub.w	r3, r3, r9
 8005ea0:	4543      	cmp	r3, r8
 8005ea2:	f77f af79 	ble.w	8005d98 <_printf_float+0x23c>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	465a      	mov	r2, fp
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b8      	blx	r7
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	f43f aeae 	beq.w	8005c12 <_printf_float+0xb6>
 8005eb6:	f108 0801 	add.w	r8, r8, #1
 8005eba:	e7ec      	b.n	8005e96 <_printf_float+0x33a>
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d1c2      	bne.n	8005e4e <_printf_float+0x2f2>
 8005ec8:	e6a3      	b.n	8005c12 <_printf_float+0xb6>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4631      	mov	r1, r6
 8005ece:	4628      	mov	r0, r5
 8005ed0:	9206      	str	r2, [sp, #24]
 8005ed2:	47b8      	blx	r7
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f43f ae9c 	beq.w	8005c12 <_printf_float+0xb6>
 8005eda:	9a06      	ldr	r2, [sp, #24]
 8005edc:	f10b 0b01 	add.w	fp, fp, #1
 8005ee0:	e7bb      	b.n	8005e5a <_printf_float+0x2fe>
 8005ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b8      	blx	r7
 8005eec:	3001      	adds	r0, #1
 8005eee:	d1c0      	bne.n	8005e72 <_printf_float+0x316>
 8005ef0:	e68f      	b.n	8005c12 <_printf_float+0xb6>
 8005ef2:	9a06      	ldr	r2, [sp, #24]
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	4442      	add	r2, r8
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	d1c3      	bne.n	8005e8a <_printf_float+0x32e>
 8005f02:	e686      	b.n	8005c12 <_printf_float+0xb6>
 8005f04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f08:	f1ba 0f01 	cmp.w	sl, #1
 8005f0c:	dc01      	bgt.n	8005f12 <_printf_float+0x3b6>
 8005f0e:	07db      	lsls	r3, r3, #31
 8005f10:	d536      	bpl.n	8005f80 <_printf_float+0x424>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4642      	mov	r2, r8
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f ae78 	beq.w	8005c12 <_printf_float+0xb6>
 8005f22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f ae70 	beq.w	8005c12 <_printf_float+0xb6>
 8005f32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f36:	2200      	movs	r2, #0
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f3e:	f7fa fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f42:	b9c0      	cbnz	r0, 8005f76 <_printf_float+0x41a>
 8005f44:	4653      	mov	r3, sl
 8005f46:	f108 0201 	add.w	r2, r8, #1
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	d10c      	bne.n	8005f6e <_printf_float+0x412>
 8005f54:	e65d      	b.n	8005c12 <_printf_float+0xb6>
 8005f56:	2301      	movs	r3, #1
 8005f58:	465a      	mov	r2, fp
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	47b8      	blx	r7
 8005f60:	3001      	adds	r0, #1
 8005f62:	f43f ae56 	beq.w	8005c12 <_printf_float+0xb6>
 8005f66:	f108 0801 	add.w	r8, r8, #1
 8005f6a:	45d0      	cmp	r8, sl
 8005f6c:	dbf3      	blt.n	8005f56 <_printf_float+0x3fa>
 8005f6e:	464b      	mov	r3, r9
 8005f70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f74:	e6df      	b.n	8005d36 <_printf_float+0x1da>
 8005f76:	f04f 0800 	mov.w	r8, #0
 8005f7a:	f104 0b1a 	add.w	fp, r4, #26
 8005f7e:	e7f4      	b.n	8005f6a <_printf_float+0x40e>
 8005f80:	2301      	movs	r3, #1
 8005f82:	4642      	mov	r2, r8
 8005f84:	e7e1      	b.n	8005f4a <_printf_float+0x3ee>
 8005f86:	2301      	movs	r3, #1
 8005f88:	464a      	mov	r2, r9
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b8      	blx	r7
 8005f90:	3001      	adds	r0, #1
 8005f92:	f43f ae3e 	beq.w	8005c12 <_printf_float+0xb6>
 8005f96:	f108 0801 	add.w	r8, r8, #1
 8005f9a:	68e3      	ldr	r3, [r4, #12]
 8005f9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f9e:	1a5b      	subs	r3, r3, r1
 8005fa0:	4543      	cmp	r3, r8
 8005fa2:	dcf0      	bgt.n	8005f86 <_printf_float+0x42a>
 8005fa4:	e6fc      	b.n	8005da0 <_printf_float+0x244>
 8005fa6:	f04f 0800 	mov.w	r8, #0
 8005faa:	f104 0919 	add.w	r9, r4, #25
 8005fae:	e7f4      	b.n	8005f9a <_printf_float+0x43e>

08005fb0 <_printf_common>:
 8005fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb4:	4616      	mov	r6, r2
 8005fb6:	4698      	mov	r8, r3
 8005fb8:	688a      	ldr	r2, [r1, #8]
 8005fba:	690b      	ldr	r3, [r1, #16]
 8005fbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	bfb8      	it	lt
 8005fc4:	4613      	movlt	r3, r2
 8005fc6:	6033      	str	r3, [r6, #0]
 8005fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fcc:	4607      	mov	r7, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	b10a      	cbz	r2, 8005fd6 <_printf_common+0x26>
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	6033      	str	r3, [r6, #0]
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	0699      	lsls	r1, r3, #26
 8005fda:	bf42      	ittt	mi
 8005fdc:	6833      	ldrmi	r3, [r6, #0]
 8005fde:	3302      	addmi	r3, #2
 8005fe0:	6033      	strmi	r3, [r6, #0]
 8005fe2:	6825      	ldr	r5, [r4, #0]
 8005fe4:	f015 0506 	ands.w	r5, r5, #6
 8005fe8:	d106      	bne.n	8005ff8 <_printf_common+0x48>
 8005fea:	f104 0a19 	add.w	sl, r4, #25
 8005fee:	68e3      	ldr	r3, [r4, #12]
 8005ff0:	6832      	ldr	r2, [r6, #0]
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	42ab      	cmp	r3, r5
 8005ff6:	dc26      	bgt.n	8006046 <_printf_common+0x96>
 8005ff8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ffc:	6822      	ldr	r2, [r4, #0]
 8005ffe:	3b00      	subs	r3, #0
 8006000:	bf18      	it	ne
 8006002:	2301      	movne	r3, #1
 8006004:	0692      	lsls	r2, r2, #26
 8006006:	d42b      	bmi.n	8006060 <_printf_common+0xb0>
 8006008:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800600c:	4641      	mov	r1, r8
 800600e:	4638      	mov	r0, r7
 8006010:	47c8      	blx	r9
 8006012:	3001      	adds	r0, #1
 8006014:	d01e      	beq.n	8006054 <_printf_common+0xa4>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	6922      	ldr	r2, [r4, #16]
 800601a:	f003 0306 	and.w	r3, r3, #6
 800601e:	2b04      	cmp	r3, #4
 8006020:	bf02      	ittt	eq
 8006022:	68e5      	ldreq	r5, [r4, #12]
 8006024:	6833      	ldreq	r3, [r6, #0]
 8006026:	1aed      	subeq	r5, r5, r3
 8006028:	68a3      	ldr	r3, [r4, #8]
 800602a:	bf0c      	ite	eq
 800602c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006030:	2500      	movne	r5, #0
 8006032:	4293      	cmp	r3, r2
 8006034:	bfc4      	itt	gt
 8006036:	1a9b      	subgt	r3, r3, r2
 8006038:	18ed      	addgt	r5, r5, r3
 800603a:	2600      	movs	r6, #0
 800603c:	341a      	adds	r4, #26
 800603e:	42b5      	cmp	r5, r6
 8006040:	d11a      	bne.n	8006078 <_printf_common+0xc8>
 8006042:	2000      	movs	r0, #0
 8006044:	e008      	b.n	8006058 <_printf_common+0xa8>
 8006046:	2301      	movs	r3, #1
 8006048:	4652      	mov	r2, sl
 800604a:	4641      	mov	r1, r8
 800604c:	4638      	mov	r0, r7
 800604e:	47c8      	blx	r9
 8006050:	3001      	adds	r0, #1
 8006052:	d103      	bne.n	800605c <_printf_common+0xac>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605c:	3501      	adds	r5, #1
 800605e:	e7c6      	b.n	8005fee <_printf_common+0x3e>
 8006060:	18e1      	adds	r1, r4, r3
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	2030      	movs	r0, #48	@ 0x30
 8006066:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800606a:	4422      	add	r2, r4
 800606c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006070:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006074:	3302      	adds	r3, #2
 8006076:	e7c7      	b.n	8006008 <_printf_common+0x58>
 8006078:	2301      	movs	r3, #1
 800607a:	4622      	mov	r2, r4
 800607c:	4641      	mov	r1, r8
 800607e:	4638      	mov	r0, r7
 8006080:	47c8      	blx	r9
 8006082:	3001      	adds	r0, #1
 8006084:	d0e6      	beq.n	8006054 <_printf_common+0xa4>
 8006086:	3601      	adds	r6, #1
 8006088:	e7d9      	b.n	800603e <_printf_common+0x8e>
	...

0800608c <_printf_i>:
 800608c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006090:	7e0f      	ldrb	r7, [r1, #24]
 8006092:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006094:	2f78      	cmp	r7, #120	@ 0x78
 8006096:	4691      	mov	r9, r2
 8006098:	4680      	mov	r8, r0
 800609a:	460c      	mov	r4, r1
 800609c:	469a      	mov	sl, r3
 800609e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060a2:	d807      	bhi.n	80060b4 <_printf_i+0x28>
 80060a4:	2f62      	cmp	r7, #98	@ 0x62
 80060a6:	d80a      	bhi.n	80060be <_printf_i+0x32>
 80060a8:	2f00      	cmp	r7, #0
 80060aa:	f000 80d2 	beq.w	8006252 <_printf_i+0x1c6>
 80060ae:	2f58      	cmp	r7, #88	@ 0x58
 80060b0:	f000 80b9 	beq.w	8006226 <_printf_i+0x19a>
 80060b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060bc:	e03a      	b.n	8006134 <_printf_i+0xa8>
 80060be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060c2:	2b15      	cmp	r3, #21
 80060c4:	d8f6      	bhi.n	80060b4 <_printf_i+0x28>
 80060c6:	a101      	add	r1, pc, #4	@ (adr r1, 80060cc <_printf_i+0x40>)
 80060c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060cc:	08006125 	.word	0x08006125
 80060d0:	08006139 	.word	0x08006139
 80060d4:	080060b5 	.word	0x080060b5
 80060d8:	080060b5 	.word	0x080060b5
 80060dc:	080060b5 	.word	0x080060b5
 80060e0:	080060b5 	.word	0x080060b5
 80060e4:	08006139 	.word	0x08006139
 80060e8:	080060b5 	.word	0x080060b5
 80060ec:	080060b5 	.word	0x080060b5
 80060f0:	080060b5 	.word	0x080060b5
 80060f4:	080060b5 	.word	0x080060b5
 80060f8:	08006239 	.word	0x08006239
 80060fc:	08006163 	.word	0x08006163
 8006100:	080061f3 	.word	0x080061f3
 8006104:	080060b5 	.word	0x080060b5
 8006108:	080060b5 	.word	0x080060b5
 800610c:	0800625b 	.word	0x0800625b
 8006110:	080060b5 	.word	0x080060b5
 8006114:	08006163 	.word	0x08006163
 8006118:	080060b5 	.word	0x080060b5
 800611c:	080060b5 	.word	0x080060b5
 8006120:	080061fb 	.word	0x080061fb
 8006124:	6833      	ldr	r3, [r6, #0]
 8006126:	1d1a      	adds	r2, r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6032      	str	r2, [r6, #0]
 800612c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006130:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006134:	2301      	movs	r3, #1
 8006136:	e09d      	b.n	8006274 <_printf_i+0x1e8>
 8006138:	6833      	ldr	r3, [r6, #0]
 800613a:	6820      	ldr	r0, [r4, #0]
 800613c:	1d19      	adds	r1, r3, #4
 800613e:	6031      	str	r1, [r6, #0]
 8006140:	0606      	lsls	r6, r0, #24
 8006142:	d501      	bpl.n	8006148 <_printf_i+0xbc>
 8006144:	681d      	ldr	r5, [r3, #0]
 8006146:	e003      	b.n	8006150 <_printf_i+0xc4>
 8006148:	0645      	lsls	r5, r0, #25
 800614a:	d5fb      	bpl.n	8006144 <_printf_i+0xb8>
 800614c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006150:	2d00      	cmp	r5, #0
 8006152:	da03      	bge.n	800615c <_printf_i+0xd0>
 8006154:	232d      	movs	r3, #45	@ 0x2d
 8006156:	426d      	negs	r5, r5
 8006158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800615c:	4859      	ldr	r0, [pc, #356]	@ (80062c4 <_printf_i+0x238>)
 800615e:	230a      	movs	r3, #10
 8006160:	e011      	b.n	8006186 <_printf_i+0xfa>
 8006162:	6821      	ldr	r1, [r4, #0]
 8006164:	6833      	ldr	r3, [r6, #0]
 8006166:	0608      	lsls	r0, r1, #24
 8006168:	f853 5b04 	ldr.w	r5, [r3], #4
 800616c:	d402      	bmi.n	8006174 <_printf_i+0xe8>
 800616e:	0649      	lsls	r1, r1, #25
 8006170:	bf48      	it	mi
 8006172:	b2ad      	uxthmi	r5, r5
 8006174:	2f6f      	cmp	r7, #111	@ 0x6f
 8006176:	4853      	ldr	r0, [pc, #332]	@ (80062c4 <_printf_i+0x238>)
 8006178:	6033      	str	r3, [r6, #0]
 800617a:	bf14      	ite	ne
 800617c:	230a      	movne	r3, #10
 800617e:	2308      	moveq	r3, #8
 8006180:	2100      	movs	r1, #0
 8006182:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006186:	6866      	ldr	r6, [r4, #4]
 8006188:	60a6      	str	r6, [r4, #8]
 800618a:	2e00      	cmp	r6, #0
 800618c:	bfa2      	ittt	ge
 800618e:	6821      	ldrge	r1, [r4, #0]
 8006190:	f021 0104 	bicge.w	r1, r1, #4
 8006194:	6021      	strge	r1, [r4, #0]
 8006196:	b90d      	cbnz	r5, 800619c <_printf_i+0x110>
 8006198:	2e00      	cmp	r6, #0
 800619a:	d04b      	beq.n	8006234 <_printf_i+0x1a8>
 800619c:	4616      	mov	r6, r2
 800619e:	fbb5 f1f3 	udiv	r1, r5, r3
 80061a2:	fb03 5711 	mls	r7, r3, r1, r5
 80061a6:	5dc7      	ldrb	r7, [r0, r7]
 80061a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ac:	462f      	mov	r7, r5
 80061ae:	42bb      	cmp	r3, r7
 80061b0:	460d      	mov	r5, r1
 80061b2:	d9f4      	bls.n	800619e <_printf_i+0x112>
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d10b      	bne.n	80061d0 <_printf_i+0x144>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	07df      	lsls	r7, r3, #31
 80061bc:	d508      	bpl.n	80061d0 <_printf_i+0x144>
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	6861      	ldr	r1, [r4, #4]
 80061c2:	4299      	cmp	r1, r3
 80061c4:	bfde      	ittt	le
 80061c6:	2330      	movle	r3, #48	@ 0x30
 80061c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d0:	1b92      	subs	r2, r2, r6
 80061d2:	6122      	str	r2, [r4, #16]
 80061d4:	f8cd a000 	str.w	sl, [sp]
 80061d8:	464b      	mov	r3, r9
 80061da:	aa03      	add	r2, sp, #12
 80061dc:	4621      	mov	r1, r4
 80061de:	4640      	mov	r0, r8
 80061e0:	f7ff fee6 	bl	8005fb0 <_printf_common>
 80061e4:	3001      	adds	r0, #1
 80061e6:	d14a      	bne.n	800627e <_printf_i+0x1f2>
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	b004      	add	sp, #16
 80061ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	f043 0320 	orr.w	r3, r3, #32
 80061f8:	6023      	str	r3, [r4, #0]
 80061fa:	4833      	ldr	r0, [pc, #204]	@ (80062c8 <_printf_i+0x23c>)
 80061fc:	2778      	movs	r7, #120	@ 0x78
 80061fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	6831      	ldr	r1, [r6, #0]
 8006206:	061f      	lsls	r7, r3, #24
 8006208:	f851 5b04 	ldr.w	r5, [r1], #4
 800620c:	d402      	bmi.n	8006214 <_printf_i+0x188>
 800620e:	065f      	lsls	r7, r3, #25
 8006210:	bf48      	it	mi
 8006212:	b2ad      	uxthmi	r5, r5
 8006214:	6031      	str	r1, [r6, #0]
 8006216:	07d9      	lsls	r1, r3, #31
 8006218:	bf44      	itt	mi
 800621a:	f043 0320 	orrmi.w	r3, r3, #32
 800621e:	6023      	strmi	r3, [r4, #0]
 8006220:	b11d      	cbz	r5, 800622a <_printf_i+0x19e>
 8006222:	2310      	movs	r3, #16
 8006224:	e7ac      	b.n	8006180 <_printf_i+0xf4>
 8006226:	4827      	ldr	r0, [pc, #156]	@ (80062c4 <_printf_i+0x238>)
 8006228:	e7e9      	b.n	80061fe <_printf_i+0x172>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	f023 0320 	bic.w	r3, r3, #32
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	e7f6      	b.n	8006222 <_printf_i+0x196>
 8006234:	4616      	mov	r6, r2
 8006236:	e7bd      	b.n	80061b4 <_printf_i+0x128>
 8006238:	6833      	ldr	r3, [r6, #0]
 800623a:	6825      	ldr	r5, [r4, #0]
 800623c:	6961      	ldr	r1, [r4, #20]
 800623e:	1d18      	adds	r0, r3, #4
 8006240:	6030      	str	r0, [r6, #0]
 8006242:	062e      	lsls	r6, r5, #24
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	d501      	bpl.n	800624c <_printf_i+0x1c0>
 8006248:	6019      	str	r1, [r3, #0]
 800624a:	e002      	b.n	8006252 <_printf_i+0x1c6>
 800624c:	0668      	lsls	r0, r5, #25
 800624e:	d5fb      	bpl.n	8006248 <_printf_i+0x1bc>
 8006250:	8019      	strh	r1, [r3, #0]
 8006252:	2300      	movs	r3, #0
 8006254:	6123      	str	r3, [r4, #16]
 8006256:	4616      	mov	r6, r2
 8006258:	e7bc      	b.n	80061d4 <_printf_i+0x148>
 800625a:	6833      	ldr	r3, [r6, #0]
 800625c:	1d1a      	adds	r2, r3, #4
 800625e:	6032      	str	r2, [r6, #0]
 8006260:	681e      	ldr	r6, [r3, #0]
 8006262:	6862      	ldr	r2, [r4, #4]
 8006264:	2100      	movs	r1, #0
 8006266:	4630      	mov	r0, r6
 8006268:	f7f9 ffb2 	bl	80001d0 <memchr>
 800626c:	b108      	cbz	r0, 8006272 <_printf_i+0x1e6>
 800626e:	1b80      	subs	r0, r0, r6
 8006270:	6060      	str	r0, [r4, #4]
 8006272:	6863      	ldr	r3, [r4, #4]
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	2300      	movs	r3, #0
 8006278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800627c:	e7aa      	b.n	80061d4 <_printf_i+0x148>
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	4632      	mov	r2, r6
 8006282:	4649      	mov	r1, r9
 8006284:	4640      	mov	r0, r8
 8006286:	47d0      	blx	sl
 8006288:	3001      	adds	r0, #1
 800628a:	d0ad      	beq.n	80061e8 <_printf_i+0x15c>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	079b      	lsls	r3, r3, #30
 8006290:	d413      	bmi.n	80062ba <_printf_i+0x22e>
 8006292:	68e0      	ldr	r0, [r4, #12]
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	4298      	cmp	r0, r3
 8006298:	bfb8      	it	lt
 800629a:	4618      	movlt	r0, r3
 800629c:	e7a6      	b.n	80061ec <_printf_i+0x160>
 800629e:	2301      	movs	r3, #1
 80062a0:	4632      	mov	r2, r6
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d09d      	beq.n	80061e8 <_printf_i+0x15c>
 80062ac:	3501      	adds	r5, #1
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	9903      	ldr	r1, [sp, #12]
 80062b2:	1a5b      	subs	r3, r3, r1
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	dcf2      	bgt.n	800629e <_printf_i+0x212>
 80062b8:	e7eb      	b.n	8006292 <_printf_i+0x206>
 80062ba:	2500      	movs	r5, #0
 80062bc:	f104 0619 	add.w	r6, r4, #25
 80062c0:	e7f5      	b.n	80062ae <_printf_i+0x222>
 80062c2:	bf00      	nop
 80062c4:	0800a21a 	.word	0x0800a21a
 80062c8:	0800a22b 	.word	0x0800a22b

080062cc <_scanf_float>:
 80062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	b087      	sub	sp, #28
 80062d2:	4617      	mov	r7, r2
 80062d4:	9303      	str	r3, [sp, #12]
 80062d6:	688b      	ldr	r3, [r1, #8]
 80062d8:	1e5a      	subs	r2, r3, #1
 80062da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80062de:	bf81      	itttt	hi
 80062e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80062e4:	eb03 0b05 	addhi.w	fp, r3, r5
 80062e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80062ec:	608b      	strhi	r3, [r1, #8]
 80062ee:	680b      	ldr	r3, [r1, #0]
 80062f0:	460a      	mov	r2, r1
 80062f2:	f04f 0500 	mov.w	r5, #0
 80062f6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80062fa:	f842 3b1c 	str.w	r3, [r2], #28
 80062fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006302:	4680      	mov	r8, r0
 8006304:	460c      	mov	r4, r1
 8006306:	bf98      	it	ls
 8006308:	f04f 0b00 	movls.w	fp, #0
 800630c:	9201      	str	r2, [sp, #4]
 800630e:	4616      	mov	r6, r2
 8006310:	46aa      	mov	sl, r5
 8006312:	46a9      	mov	r9, r5
 8006314:	9502      	str	r5, [sp, #8]
 8006316:	68a2      	ldr	r2, [r4, #8]
 8006318:	b152      	cbz	r2, 8006330 <_scanf_float+0x64>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006320:	d864      	bhi.n	80063ec <_scanf_float+0x120>
 8006322:	2b40      	cmp	r3, #64	@ 0x40
 8006324:	d83c      	bhi.n	80063a0 <_scanf_float+0xd4>
 8006326:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800632a:	b2c8      	uxtb	r0, r1
 800632c:	280e      	cmp	r0, #14
 800632e:	d93a      	bls.n	80063a6 <_scanf_float+0xda>
 8006330:	f1b9 0f00 	cmp.w	r9, #0
 8006334:	d003      	beq.n	800633e <_scanf_float+0x72>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006342:	f1ba 0f01 	cmp.w	sl, #1
 8006346:	f200 8117 	bhi.w	8006578 <_scanf_float+0x2ac>
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	429e      	cmp	r6, r3
 800634e:	f200 8108 	bhi.w	8006562 <_scanf_float+0x296>
 8006352:	2001      	movs	r0, #1
 8006354:	b007      	add	sp, #28
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800635e:	2a0d      	cmp	r2, #13
 8006360:	d8e6      	bhi.n	8006330 <_scanf_float+0x64>
 8006362:	a101      	add	r1, pc, #4	@ (adr r1, 8006368 <_scanf_float+0x9c>)
 8006364:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006368:	080064af 	.word	0x080064af
 800636c:	08006331 	.word	0x08006331
 8006370:	08006331 	.word	0x08006331
 8006374:	08006331 	.word	0x08006331
 8006378:	0800650f 	.word	0x0800650f
 800637c:	080064e7 	.word	0x080064e7
 8006380:	08006331 	.word	0x08006331
 8006384:	08006331 	.word	0x08006331
 8006388:	080064bd 	.word	0x080064bd
 800638c:	08006331 	.word	0x08006331
 8006390:	08006331 	.word	0x08006331
 8006394:	08006331 	.word	0x08006331
 8006398:	08006331 	.word	0x08006331
 800639c:	08006475 	.word	0x08006475
 80063a0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80063a4:	e7db      	b.n	800635e <_scanf_float+0x92>
 80063a6:	290e      	cmp	r1, #14
 80063a8:	d8c2      	bhi.n	8006330 <_scanf_float+0x64>
 80063aa:	a001      	add	r0, pc, #4	@ (adr r0, 80063b0 <_scanf_float+0xe4>)
 80063ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80063b0:	08006465 	.word	0x08006465
 80063b4:	08006331 	.word	0x08006331
 80063b8:	08006465 	.word	0x08006465
 80063bc:	080064fb 	.word	0x080064fb
 80063c0:	08006331 	.word	0x08006331
 80063c4:	0800640d 	.word	0x0800640d
 80063c8:	0800644b 	.word	0x0800644b
 80063cc:	0800644b 	.word	0x0800644b
 80063d0:	0800644b 	.word	0x0800644b
 80063d4:	0800644b 	.word	0x0800644b
 80063d8:	0800644b 	.word	0x0800644b
 80063dc:	0800644b 	.word	0x0800644b
 80063e0:	0800644b 	.word	0x0800644b
 80063e4:	0800644b 	.word	0x0800644b
 80063e8:	0800644b 	.word	0x0800644b
 80063ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80063ee:	d809      	bhi.n	8006404 <_scanf_float+0x138>
 80063f0:	2b60      	cmp	r3, #96	@ 0x60
 80063f2:	d8b2      	bhi.n	800635a <_scanf_float+0x8e>
 80063f4:	2b54      	cmp	r3, #84	@ 0x54
 80063f6:	d07b      	beq.n	80064f0 <_scanf_float+0x224>
 80063f8:	2b59      	cmp	r3, #89	@ 0x59
 80063fa:	d199      	bne.n	8006330 <_scanf_float+0x64>
 80063fc:	2d07      	cmp	r5, #7
 80063fe:	d197      	bne.n	8006330 <_scanf_float+0x64>
 8006400:	2508      	movs	r5, #8
 8006402:	e02c      	b.n	800645e <_scanf_float+0x192>
 8006404:	2b74      	cmp	r3, #116	@ 0x74
 8006406:	d073      	beq.n	80064f0 <_scanf_float+0x224>
 8006408:	2b79      	cmp	r3, #121	@ 0x79
 800640a:	e7f6      	b.n	80063fa <_scanf_float+0x12e>
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	05c8      	lsls	r0, r1, #23
 8006410:	d51b      	bpl.n	800644a <_scanf_float+0x17e>
 8006412:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006416:	6021      	str	r1, [r4, #0]
 8006418:	f109 0901 	add.w	r9, r9, #1
 800641c:	f1bb 0f00 	cmp.w	fp, #0
 8006420:	d003      	beq.n	800642a <_scanf_float+0x15e>
 8006422:	3201      	adds	r2, #1
 8006424:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006428:	60a2      	str	r2, [r4, #8]
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	3b01      	subs	r3, #1
 800642e:	60a3      	str	r3, [r4, #8]
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	3301      	adds	r3, #1
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3b01      	subs	r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
 800643e:	f340 8087 	ble.w	8006550 <_scanf_float+0x284>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	e765      	b.n	8006316 <_scanf_float+0x4a>
 800644a:	eb1a 0105 	adds.w	r1, sl, r5
 800644e:	f47f af6f 	bne.w	8006330 <_scanf_float+0x64>
 8006452:	6822      	ldr	r2, [r4, #0]
 8006454:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006458:	6022      	str	r2, [r4, #0]
 800645a:	460d      	mov	r5, r1
 800645c:	468a      	mov	sl, r1
 800645e:	f806 3b01 	strb.w	r3, [r6], #1
 8006462:	e7e2      	b.n	800642a <_scanf_float+0x15e>
 8006464:	6822      	ldr	r2, [r4, #0]
 8006466:	0610      	lsls	r0, r2, #24
 8006468:	f57f af62 	bpl.w	8006330 <_scanf_float+0x64>
 800646c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006470:	6022      	str	r2, [r4, #0]
 8006472:	e7f4      	b.n	800645e <_scanf_float+0x192>
 8006474:	f1ba 0f00 	cmp.w	sl, #0
 8006478:	d10e      	bne.n	8006498 <_scanf_float+0x1cc>
 800647a:	f1b9 0f00 	cmp.w	r9, #0
 800647e:	d10e      	bne.n	800649e <_scanf_float+0x1d2>
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006486:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800648a:	d108      	bne.n	800649e <_scanf_float+0x1d2>
 800648c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006490:	6022      	str	r2, [r4, #0]
 8006492:	f04f 0a01 	mov.w	sl, #1
 8006496:	e7e2      	b.n	800645e <_scanf_float+0x192>
 8006498:	f1ba 0f02 	cmp.w	sl, #2
 800649c:	d055      	beq.n	800654a <_scanf_float+0x27e>
 800649e:	2d01      	cmp	r5, #1
 80064a0:	d002      	beq.n	80064a8 <_scanf_float+0x1dc>
 80064a2:	2d04      	cmp	r5, #4
 80064a4:	f47f af44 	bne.w	8006330 <_scanf_float+0x64>
 80064a8:	3501      	adds	r5, #1
 80064aa:	b2ed      	uxtb	r5, r5
 80064ac:	e7d7      	b.n	800645e <_scanf_float+0x192>
 80064ae:	f1ba 0f01 	cmp.w	sl, #1
 80064b2:	f47f af3d 	bne.w	8006330 <_scanf_float+0x64>
 80064b6:	f04f 0a02 	mov.w	sl, #2
 80064ba:	e7d0      	b.n	800645e <_scanf_float+0x192>
 80064bc:	b97d      	cbnz	r5, 80064de <_scanf_float+0x212>
 80064be:	f1b9 0f00 	cmp.w	r9, #0
 80064c2:	f47f af38 	bne.w	8006336 <_scanf_float+0x6a>
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80064cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80064d0:	f040 8108 	bne.w	80066e4 <_scanf_float+0x418>
 80064d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80064d8:	6022      	str	r2, [r4, #0]
 80064da:	2501      	movs	r5, #1
 80064dc:	e7bf      	b.n	800645e <_scanf_float+0x192>
 80064de:	2d03      	cmp	r5, #3
 80064e0:	d0e2      	beq.n	80064a8 <_scanf_float+0x1dc>
 80064e2:	2d05      	cmp	r5, #5
 80064e4:	e7de      	b.n	80064a4 <_scanf_float+0x1d8>
 80064e6:	2d02      	cmp	r5, #2
 80064e8:	f47f af22 	bne.w	8006330 <_scanf_float+0x64>
 80064ec:	2503      	movs	r5, #3
 80064ee:	e7b6      	b.n	800645e <_scanf_float+0x192>
 80064f0:	2d06      	cmp	r5, #6
 80064f2:	f47f af1d 	bne.w	8006330 <_scanf_float+0x64>
 80064f6:	2507      	movs	r5, #7
 80064f8:	e7b1      	b.n	800645e <_scanf_float+0x192>
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	0591      	lsls	r1, r2, #22
 80064fe:	f57f af17 	bpl.w	8006330 <_scanf_float+0x64>
 8006502:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006506:	6022      	str	r2, [r4, #0]
 8006508:	f8cd 9008 	str.w	r9, [sp, #8]
 800650c:	e7a7      	b.n	800645e <_scanf_float+0x192>
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006514:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006518:	d006      	beq.n	8006528 <_scanf_float+0x25c>
 800651a:	0550      	lsls	r0, r2, #21
 800651c:	f57f af08 	bpl.w	8006330 <_scanf_float+0x64>
 8006520:	f1b9 0f00 	cmp.w	r9, #0
 8006524:	f000 80de 	beq.w	80066e4 <_scanf_float+0x418>
 8006528:	0591      	lsls	r1, r2, #22
 800652a:	bf58      	it	pl
 800652c:	9902      	ldrpl	r1, [sp, #8]
 800652e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006532:	bf58      	it	pl
 8006534:	eba9 0101 	subpl.w	r1, r9, r1
 8006538:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800653c:	bf58      	it	pl
 800653e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006542:	6022      	str	r2, [r4, #0]
 8006544:	f04f 0900 	mov.w	r9, #0
 8006548:	e789      	b.n	800645e <_scanf_float+0x192>
 800654a:	f04f 0a03 	mov.w	sl, #3
 800654e:	e786      	b.n	800645e <_scanf_float+0x192>
 8006550:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006554:	4639      	mov	r1, r7
 8006556:	4640      	mov	r0, r8
 8006558:	4798      	blx	r3
 800655a:	2800      	cmp	r0, #0
 800655c:	f43f aedb 	beq.w	8006316 <_scanf_float+0x4a>
 8006560:	e6e6      	b.n	8006330 <_scanf_float+0x64>
 8006562:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006566:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800656a:	463a      	mov	r2, r7
 800656c:	4640      	mov	r0, r8
 800656e:	4798      	blx	r3
 8006570:	6923      	ldr	r3, [r4, #16]
 8006572:	3b01      	subs	r3, #1
 8006574:	6123      	str	r3, [r4, #16]
 8006576:	e6e8      	b.n	800634a <_scanf_float+0x7e>
 8006578:	1e6b      	subs	r3, r5, #1
 800657a:	2b06      	cmp	r3, #6
 800657c:	d824      	bhi.n	80065c8 <_scanf_float+0x2fc>
 800657e:	2d02      	cmp	r5, #2
 8006580:	d836      	bhi.n	80065f0 <_scanf_float+0x324>
 8006582:	9b01      	ldr	r3, [sp, #4]
 8006584:	429e      	cmp	r6, r3
 8006586:	f67f aee4 	bls.w	8006352 <_scanf_float+0x86>
 800658a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800658e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006592:	463a      	mov	r2, r7
 8006594:	4640      	mov	r0, r8
 8006596:	4798      	blx	r3
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	3b01      	subs	r3, #1
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	e7f0      	b.n	8006582 <_scanf_float+0x2b6>
 80065a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80065a8:	463a      	mov	r2, r7
 80065aa:	4640      	mov	r0, r8
 80065ac:	4798      	blx	r3
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	6123      	str	r3, [r4, #16]
 80065b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065b8:	fa5f fa8a 	uxtb.w	sl, sl
 80065bc:	f1ba 0f02 	cmp.w	sl, #2
 80065c0:	d1ee      	bne.n	80065a0 <_scanf_float+0x2d4>
 80065c2:	3d03      	subs	r5, #3
 80065c4:	b2ed      	uxtb	r5, r5
 80065c6:	1b76      	subs	r6, r6, r5
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	05da      	lsls	r2, r3, #23
 80065cc:	d530      	bpl.n	8006630 <_scanf_float+0x364>
 80065ce:	055b      	lsls	r3, r3, #21
 80065d0:	d511      	bpl.n	80065f6 <_scanf_float+0x32a>
 80065d2:	9b01      	ldr	r3, [sp, #4]
 80065d4:	429e      	cmp	r6, r3
 80065d6:	f67f aebc 	bls.w	8006352 <_scanf_float+0x86>
 80065da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065e2:	463a      	mov	r2, r7
 80065e4:	4640      	mov	r0, r8
 80065e6:	4798      	blx	r3
 80065e8:	6923      	ldr	r3, [r4, #16]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	e7f0      	b.n	80065d2 <_scanf_float+0x306>
 80065f0:	46aa      	mov	sl, r5
 80065f2:	46b3      	mov	fp, r6
 80065f4:	e7de      	b.n	80065b4 <_scanf_float+0x2e8>
 80065f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	2965      	cmp	r1, #101	@ 0x65
 80065fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8006602:	f106 35ff 	add.w	r5, r6, #4294967295
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	d00c      	beq.n	8006624 <_scanf_float+0x358>
 800660a:	2945      	cmp	r1, #69	@ 0x45
 800660c:	d00a      	beq.n	8006624 <_scanf_float+0x358>
 800660e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006612:	463a      	mov	r2, r7
 8006614:	4640      	mov	r0, r8
 8006616:	4798      	blx	r3
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800661e:	3b01      	subs	r3, #1
 8006620:	1eb5      	subs	r5, r6, #2
 8006622:	6123      	str	r3, [r4, #16]
 8006624:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006628:	463a      	mov	r2, r7
 800662a:	4640      	mov	r0, r8
 800662c:	4798      	blx	r3
 800662e:	462e      	mov	r6, r5
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	f012 0210 	ands.w	r2, r2, #16
 8006636:	d001      	beq.n	800663c <_scanf_float+0x370>
 8006638:	2000      	movs	r0, #0
 800663a:	e68b      	b.n	8006354 <_scanf_float+0x88>
 800663c:	7032      	strb	r2, [r6, #0]
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006648:	d11c      	bne.n	8006684 <_scanf_float+0x3b8>
 800664a:	9b02      	ldr	r3, [sp, #8]
 800664c:	454b      	cmp	r3, r9
 800664e:	eba3 0209 	sub.w	r2, r3, r9
 8006652:	d123      	bne.n	800669c <_scanf_float+0x3d0>
 8006654:	9901      	ldr	r1, [sp, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	4640      	mov	r0, r8
 800665a:	f002 fc09 	bl	8008e70 <_strtod_r>
 800665e:	9b03      	ldr	r3, [sp, #12]
 8006660:	6821      	ldr	r1, [r4, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f011 0f02 	tst.w	r1, #2
 8006668:	ec57 6b10 	vmov	r6, r7, d0
 800666c:	f103 0204 	add.w	r2, r3, #4
 8006670:	d01f      	beq.n	80066b2 <_scanf_float+0x3e6>
 8006672:	9903      	ldr	r1, [sp, #12]
 8006674:	600a      	str	r2, [r1, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	e9c3 6700 	strd	r6, r7, [r3]
 800667c:	68e3      	ldr	r3, [r4, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60e3      	str	r3, [r4, #12]
 8006682:	e7d9      	b.n	8006638 <_scanf_float+0x36c>
 8006684:	9b04      	ldr	r3, [sp, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0e4      	beq.n	8006654 <_scanf_float+0x388>
 800668a:	9905      	ldr	r1, [sp, #20]
 800668c:	230a      	movs	r3, #10
 800668e:	3101      	adds	r1, #1
 8006690:	4640      	mov	r0, r8
 8006692:	f002 fc6d 	bl	8008f70 <_strtol_r>
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	9e05      	ldr	r6, [sp, #20]
 800669a:	1ac2      	subs	r2, r0, r3
 800669c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80066a0:	429e      	cmp	r6, r3
 80066a2:	bf28      	it	cs
 80066a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80066a8:	4910      	ldr	r1, [pc, #64]	@ (80066ec <_scanf_float+0x420>)
 80066aa:	4630      	mov	r0, r6
 80066ac:	f000 f8f6 	bl	800689c <siprintf>
 80066b0:	e7d0      	b.n	8006654 <_scanf_float+0x388>
 80066b2:	f011 0f04 	tst.w	r1, #4
 80066b6:	9903      	ldr	r1, [sp, #12]
 80066b8:	600a      	str	r2, [r1, #0]
 80066ba:	d1dc      	bne.n	8006676 <_scanf_float+0x3aa>
 80066bc:	681d      	ldr	r5, [r3, #0]
 80066be:	4632      	mov	r2, r6
 80066c0:	463b      	mov	r3, r7
 80066c2:	4630      	mov	r0, r6
 80066c4:	4639      	mov	r1, r7
 80066c6:	f7fa fa31 	bl	8000b2c <__aeabi_dcmpun>
 80066ca:	b128      	cbz	r0, 80066d8 <_scanf_float+0x40c>
 80066cc:	4808      	ldr	r0, [pc, #32]	@ (80066f0 <_scanf_float+0x424>)
 80066ce:	f000 f9c9 	bl	8006a64 <nanf>
 80066d2:	ed85 0a00 	vstr	s0, [r5]
 80066d6:	e7d1      	b.n	800667c <_scanf_float+0x3b0>
 80066d8:	4630      	mov	r0, r6
 80066da:	4639      	mov	r1, r7
 80066dc:	f7fa fa84 	bl	8000be8 <__aeabi_d2f>
 80066e0:	6028      	str	r0, [r5, #0]
 80066e2:	e7cb      	b.n	800667c <_scanf_float+0x3b0>
 80066e4:	f04f 0900 	mov.w	r9, #0
 80066e8:	e629      	b.n	800633e <_scanf_float+0x72>
 80066ea:	bf00      	nop
 80066ec:	0800a23c 	.word	0x0800a23c
 80066f0:	0800a5d5 	.word	0x0800a5d5

080066f4 <std>:
 80066f4:	2300      	movs	r3, #0
 80066f6:	b510      	push	{r4, lr}
 80066f8:	4604      	mov	r4, r0
 80066fa:	e9c0 3300 	strd	r3, r3, [r0]
 80066fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006702:	6083      	str	r3, [r0, #8]
 8006704:	8181      	strh	r1, [r0, #12]
 8006706:	6643      	str	r3, [r0, #100]	@ 0x64
 8006708:	81c2      	strh	r2, [r0, #14]
 800670a:	6183      	str	r3, [r0, #24]
 800670c:	4619      	mov	r1, r3
 800670e:	2208      	movs	r2, #8
 8006710:	305c      	adds	r0, #92	@ 0x5c
 8006712:	f000 f926 	bl	8006962 <memset>
 8006716:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <std+0x58>)
 8006718:	6263      	str	r3, [r4, #36]	@ 0x24
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <std+0x5c>)
 800671c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800671e:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <std+0x60>)
 8006720:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006722:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <std+0x64>)
 8006724:	6323      	str	r3, [r4, #48]	@ 0x30
 8006726:	4b0d      	ldr	r3, [pc, #52]	@ (800675c <std+0x68>)
 8006728:	6224      	str	r4, [r4, #32]
 800672a:	429c      	cmp	r4, r3
 800672c:	d006      	beq.n	800673c <std+0x48>
 800672e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006732:	4294      	cmp	r4, r2
 8006734:	d002      	beq.n	800673c <std+0x48>
 8006736:	33d0      	adds	r3, #208	@ 0xd0
 8006738:	429c      	cmp	r4, r3
 800673a:	d105      	bne.n	8006748 <std+0x54>
 800673c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006744:	f000 b98a 	b.w	8006a5c <__retarget_lock_init_recursive>
 8006748:	bd10      	pop	{r4, pc}
 800674a:	bf00      	nop
 800674c:	080068dd 	.word	0x080068dd
 8006750:	080068ff 	.word	0x080068ff
 8006754:	08006937 	.word	0x08006937
 8006758:	0800695b 	.word	0x0800695b
 800675c:	20000e04 	.word	0x20000e04

08006760 <stdio_exit_handler>:
 8006760:	4a02      	ldr	r2, [pc, #8]	@ (800676c <stdio_exit_handler+0xc>)
 8006762:	4903      	ldr	r1, [pc, #12]	@ (8006770 <stdio_exit_handler+0x10>)
 8006764:	4803      	ldr	r0, [pc, #12]	@ (8006774 <stdio_exit_handler+0x14>)
 8006766:	f000 b869 	b.w	800683c <_fwalk_sglue>
 800676a:	bf00      	nop
 800676c:	20000548 	.word	0x20000548
 8006770:	080095b1 	.word	0x080095b1
 8006774:	20000558 	.word	0x20000558

08006778 <cleanup_stdio>:
 8006778:	6841      	ldr	r1, [r0, #4]
 800677a:	4b0c      	ldr	r3, [pc, #48]	@ (80067ac <cleanup_stdio+0x34>)
 800677c:	4299      	cmp	r1, r3
 800677e:	b510      	push	{r4, lr}
 8006780:	4604      	mov	r4, r0
 8006782:	d001      	beq.n	8006788 <cleanup_stdio+0x10>
 8006784:	f002 ff14 	bl	80095b0 <_fflush_r>
 8006788:	68a1      	ldr	r1, [r4, #8]
 800678a:	4b09      	ldr	r3, [pc, #36]	@ (80067b0 <cleanup_stdio+0x38>)
 800678c:	4299      	cmp	r1, r3
 800678e:	d002      	beq.n	8006796 <cleanup_stdio+0x1e>
 8006790:	4620      	mov	r0, r4
 8006792:	f002 ff0d 	bl	80095b0 <_fflush_r>
 8006796:	68e1      	ldr	r1, [r4, #12]
 8006798:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <cleanup_stdio+0x3c>)
 800679a:	4299      	cmp	r1, r3
 800679c:	d004      	beq.n	80067a8 <cleanup_stdio+0x30>
 800679e:	4620      	mov	r0, r4
 80067a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067a4:	f002 bf04 	b.w	80095b0 <_fflush_r>
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	bf00      	nop
 80067ac:	20000e04 	.word	0x20000e04
 80067b0:	20000e6c 	.word	0x20000e6c
 80067b4:	20000ed4 	.word	0x20000ed4

080067b8 <global_stdio_init.part.0>:
 80067b8:	b510      	push	{r4, lr}
 80067ba:	4b0b      	ldr	r3, [pc, #44]	@ (80067e8 <global_stdio_init.part.0+0x30>)
 80067bc:	4c0b      	ldr	r4, [pc, #44]	@ (80067ec <global_stdio_init.part.0+0x34>)
 80067be:	4a0c      	ldr	r2, [pc, #48]	@ (80067f0 <global_stdio_init.part.0+0x38>)
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	4620      	mov	r0, r4
 80067c4:	2200      	movs	r2, #0
 80067c6:	2104      	movs	r1, #4
 80067c8:	f7ff ff94 	bl	80066f4 <std>
 80067cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067d0:	2201      	movs	r2, #1
 80067d2:	2109      	movs	r1, #9
 80067d4:	f7ff ff8e 	bl	80066f4 <std>
 80067d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067dc:	2202      	movs	r2, #2
 80067de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e2:	2112      	movs	r1, #18
 80067e4:	f7ff bf86 	b.w	80066f4 <std>
 80067e8:	20000f3c 	.word	0x20000f3c
 80067ec:	20000e04 	.word	0x20000e04
 80067f0:	08006761 	.word	0x08006761

080067f4 <__sfp_lock_acquire>:
 80067f4:	4801      	ldr	r0, [pc, #4]	@ (80067fc <__sfp_lock_acquire+0x8>)
 80067f6:	f000 b932 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 80067fa:	bf00      	nop
 80067fc:	20000f45 	.word	0x20000f45

08006800 <__sfp_lock_release>:
 8006800:	4801      	ldr	r0, [pc, #4]	@ (8006808 <__sfp_lock_release+0x8>)
 8006802:	f000 b92d 	b.w	8006a60 <__retarget_lock_release_recursive>
 8006806:	bf00      	nop
 8006808:	20000f45 	.word	0x20000f45

0800680c <__sinit>:
 800680c:	b510      	push	{r4, lr}
 800680e:	4604      	mov	r4, r0
 8006810:	f7ff fff0 	bl	80067f4 <__sfp_lock_acquire>
 8006814:	6a23      	ldr	r3, [r4, #32]
 8006816:	b11b      	cbz	r3, 8006820 <__sinit+0x14>
 8006818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800681c:	f7ff bff0 	b.w	8006800 <__sfp_lock_release>
 8006820:	4b04      	ldr	r3, [pc, #16]	@ (8006834 <__sinit+0x28>)
 8006822:	6223      	str	r3, [r4, #32]
 8006824:	4b04      	ldr	r3, [pc, #16]	@ (8006838 <__sinit+0x2c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1f5      	bne.n	8006818 <__sinit+0xc>
 800682c:	f7ff ffc4 	bl	80067b8 <global_stdio_init.part.0>
 8006830:	e7f2      	b.n	8006818 <__sinit+0xc>
 8006832:	bf00      	nop
 8006834:	08006779 	.word	0x08006779
 8006838:	20000f3c 	.word	0x20000f3c

0800683c <_fwalk_sglue>:
 800683c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006840:	4607      	mov	r7, r0
 8006842:	4688      	mov	r8, r1
 8006844:	4614      	mov	r4, r2
 8006846:	2600      	movs	r6, #0
 8006848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800684c:	f1b9 0901 	subs.w	r9, r9, #1
 8006850:	d505      	bpl.n	800685e <_fwalk_sglue+0x22>
 8006852:	6824      	ldr	r4, [r4, #0]
 8006854:	2c00      	cmp	r4, #0
 8006856:	d1f7      	bne.n	8006848 <_fwalk_sglue+0xc>
 8006858:	4630      	mov	r0, r6
 800685a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685e:	89ab      	ldrh	r3, [r5, #12]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d907      	bls.n	8006874 <_fwalk_sglue+0x38>
 8006864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006868:	3301      	adds	r3, #1
 800686a:	d003      	beq.n	8006874 <_fwalk_sglue+0x38>
 800686c:	4629      	mov	r1, r5
 800686e:	4638      	mov	r0, r7
 8006870:	47c0      	blx	r8
 8006872:	4306      	orrs	r6, r0
 8006874:	3568      	adds	r5, #104	@ 0x68
 8006876:	e7e9      	b.n	800684c <_fwalk_sglue+0x10>

08006878 <iprintf>:
 8006878:	b40f      	push	{r0, r1, r2, r3}
 800687a:	b507      	push	{r0, r1, r2, lr}
 800687c:	4906      	ldr	r1, [pc, #24]	@ (8006898 <iprintf+0x20>)
 800687e:	ab04      	add	r3, sp, #16
 8006880:	6808      	ldr	r0, [r1, #0]
 8006882:	f853 2b04 	ldr.w	r2, [r3], #4
 8006886:	6881      	ldr	r1, [r0, #8]
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	f002 fcf5 	bl	8009278 <_vfiprintf_r>
 800688e:	b003      	add	sp, #12
 8006890:	f85d eb04 	ldr.w	lr, [sp], #4
 8006894:	b004      	add	sp, #16
 8006896:	4770      	bx	lr
 8006898:	20000554 	.word	0x20000554

0800689c <siprintf>:
 800689c:	b40e      	push	{r1, r2, r3}
 800689e:	b500      	push	{lr}
 80068a0:	b09c      	sub	sp, #112	@ 0x70
 80068a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80068a4:	9002      	str	r0, [sp, #8]
 80068a6:	9006      	str	r0, [sp, #24]
 80068a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068ac:	4809      	ldr	r0, [pc, #36]	@ (80068d4 <siprintf+0x38>)
 80068ae:	9107      	str	r1, [sp, #28]
 80068b0:	9104      	str	r1, [sp, #16]
 80068b2:	4909      	ldr	r1, [pc, #36]	@ (80068d8 <siprintf+0x3c>)
 80068b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b8:	9105      	str	r1, [sp, #20]
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	a902      	add	r1, sp, #8
 80068c0:	f002 fbb4 	bl	800902c <_svfiprintf_r>
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	b01c      	add	sp, #112	@ 0x70
 80068cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d0:	b003      	add	sp, #12
 80068d2:	4770      	bx	lr
 80068d4:	20000554 	.word	0x20000554
 80068d8:	ffff0208 	.word	0xffff0208

080068dc <__sread>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	460c      	mov	r4, r1
 80068e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e4:	f000 f86c 	bl	80069c0 <_read_r>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	bfab      	itete	ge
 80068ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068ee:	89a3      	ldrhlt	r3, [r4, #12]
 80068f0:	181b      	addge	r3, r3, r0
 80068f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068f6:	bfac      	ite	ge
 80068f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068fa:	81a3      	strhlt	r3, [r4, #12]
 80068fc:	bd10      	pop	{r4, pc}

080068fe <__swrite>:
 80068fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006902:	461f      	mov	r7, r3
 8006904:	898b      	ldrh	r3, [r1, #12]
 8006906:	05db      	lsls	r3, r3, #23
 8006908:	4605      	mov	r5, r0
 800690a:	460c      	mov	r4, r1
 800690c:	4616      	mov	r6, r2
 800690e:	d505      	bpl.n	800691c <__swrite+0x1e>
 8006910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006914:	2302      	movs	r3, #2
 8006916:	2200      	movs	r2, #0
 8006918:	f000 f840 	bl	800699c <_lseek_r>
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006922:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	4632      	mov	r2, r6
 800692a:	463b      	mov	r3, r7
 800692c:	4628      	mov	r0, r5
 800692e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006932:	f000 b857 	b.w	80069e4 <_write_r>

08006936 <__sseek>:
 8006936:	b510      	push	{r4, lr}
 8006938:	460c      	mov	r4, r1
 800693a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693e:	f000 f82d 	bl	800699c <_lseek_r>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	bf15      	itete	ne
 8006948:	6560      	strne	r0, [r4, #84]	@ 0x54
 800694a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800694e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006952:	81a3      	strheq	r3, [r4, #12]
 8006954:	bf18      	it	ne
 8006956:	81a3      	strhne	r3, [r4, #12]
 8006958:	bd10      	pop	{r4, pc}

0800695a <__sclose>:
 800695a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695e:	f000 b80d 	b.w	800697c <_close_r>

08006962 <memset>:
 8006962:	4402      	add	r2, r0
 8006964:	4603      	mov	r3, r0
 8006966:	4293      	cmp	r3, r2
 8006968:	d100      	bne.n	800696c <memset+0xa>
 800696a:	4770      	bx	lr
 800696c:	f803 1b01 	strb.w	r1, [r3], #1
 8006970:	e7f9      	b.n	8006966 <memset+0x4>
	...

08006974 <_localeconv_r>:
 8006974:	4800      	ldr	r0, [pc, #0]	@ (8006978 <_localeconv_r+0x4>)
 8006976:	4770      	bx	lr
 8006978:	20000694 	.word	0x20000694

0800697c <_close_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d06      	ldr	r5, [pc, #24]	@ (8006998 <_close_r+0x1c>)
 8006980:	2300      	movs	r3, #0
 8006982:	4604      	mov	r4, r0
 8006984:	4608      	mov	r0, r1
 8006986:	602b      	str	r3, [r5, #0]
 8006988:	f7fa ffe0 	bl	800194c <_close>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_close_r+0x1a>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_close_r+0x1a>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	20000f40 	.word	0x20000f40

0800699c <_lseek_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d07      	ldr	r5, [pc, #28]	@ (80069bc <_lseek_r+0x20>)
 80069a0:	4604      	mov	r4, r0
 80069a2:	4608      	mov	r0, r1
 80069a4:	4611      	mov	r1, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	602a      	str	r2, [r5, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f7fa fff5 	bl	800199a <_lseek>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_lseek_r+0x1e>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_lseek_r+0x1e>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20000f40 	.word	0x20000f40

080069c0 <_read_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4d07      	ldr	r5, [pc, #28]	@ (80069e0 <_read_r+0x20>)
 80069c4:	4604      	mov	r4, r0
 80069c6:	4608      	mov	r0, r1
 80069c8:	4611      	mov	r1, r2
 80069ca:	2200      	movs	r2, #0
 80069cc:	602a      	str	r2, [r5, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f7fa ff83 	bl	80018da <_read>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_read_r+0x1e>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_read_r+0x1e>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	20000f40 	.word	0x20000f40

080069e4 <_write_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d07      	ldr	r5, [pc, #28]	@ (8006a04 <_write_r+0x20>)
 80069e8:	4604      	mov	r4, r0
 80069ea:	4608      	mov	r0, r1
 80069ec:	4611      	mov	r1, r2
 80069ee:	2200      	movs	r2, #0
 80069f0:	602a      	str	r2, [r5, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	f7fa ff8e 	bl	8001914 <_write>
 80069f8:	1c43      	adds	r3, r0, #1
 80069fa:	d102      	bne.n	8006a02 <_write_r+0x1e>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	b103      	cbz	r3, 8006a02 <_write_r+0x1e>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	bd38      	pop	{r3, r4, r5, pc}
 8006a04:	20000f40 	.word	0x20000f40

08006a08 <__errno>:
 8006a08:	4b01      	ldr	r3, [pc, #4]	@ (8006a10 <__errno+0x8>)
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	20000554 	.word	0x20000554

08006a14 <__libc_init_array>:
 8006a14:	b570      	push	{r4, r5, r6, lr}
 8006a16:	4d0d      	ldr	r5, [pc, #52]	@ (8006a4c <__libc_init_array+0x38>)
 8006a18:	4c0d      	ldr	r4, [pc, #52]	@ (8006a50 <__libc_init_array+0x3c>)
 8006a1a:	1b64      	subs	r4, r4, r5
 8006a1c:	10a4      	asrs	r4, r4, #2
 8006a1e:	2600      	movs	r6, #0
 8006a20:	42a6      	cmp	r6, r4
 8006a22:	d109      	bne.n	8006a38 <__libc_init_array+0x24>
 8006a24:	4d0b      	ldr	r5, [pc, #44]	@ (8006a54 <__libc_init_array+0x40>)
 8006a26:	4c0c      	ldr	r4, [pc, #48]	@ (8006a58 <__libc_init_array+0x44>)
 8006a28:	f003 fb74 	bl	800a114 <_init>
 8006a2c:	1b64      	subs	r4, r4, r5
 8006a2e:	10a4      	asrs	r4, r4, #2
 8006a30:	2600      	movs	r6, #0
 8006a32:	42a6      	cmp	r6, r4
 8006a34:	d105      	bne.n	8006a42 <__libc_init_array+0x2e>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3c:	4798      	blx	r3
 8006a3e:	3601      	adds	r6, #1
 8006a40:	e7ee      	b.n	8006a20 <__libc_init_array+0xc>
 8006a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a46:	4798      	blx	r3
 8006a48:	3601      	adds	r6, #1
 8006a4a:	e7f2      	b.n	8006a32 <__libc_init_array+0x1e>
 8006a4c:	0800a640 	.word	0x0800a640
 8006a50:	0800a640 	.word	0x0800a640
 8006a54:	0800a640 	.word	0x0800a640
 8006a58:	0800a644 	.word	0x0800a644

08006a5c <__retarget_lock_init_recursive>:
 8006a5c:	4770      	bx	lr

08006a5e <__retarget_lock_acquire_recursive>:
 8006a5e:	4770      	bx	lr

08006a60 <__retarget_lock_release_recursive>:
 8006a60:	4770      	bx	lr
	...

08006a64 <nanf>:
 8006a64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006a6c <nanf+0x8>
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	7fc00000 	.word	0x7fc00000

08006a70 <quorem>:
 8006a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	6903      	ldr	r3, [r0, #16]
 8006a76:	690c      	ldr	r4, [r1, #16]
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	4607      	mov	r7, r0
 8006a7c:	db7e      	blt.n	8006b7c <quorem+0x10c>
 8006a7e:	3c01      	subs	r4, #1
 8006a80:	f101 0814 	add.w	r8, r1, #20
 8006a84:	00a3      	lsls	r3, r4, #2
 8006a86:	f100 0514 	add.w	r5, r0, #20
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006aa2:	fbb2 f6f3 	udiv	r6, r2, r3
 8006aa6:	d32e      	bcc.n	8006b06 <quorem+0x96>
 8006aa8:	f04f 0a00 	mov.w	sl, #0
 8006aac:	46c4      	mov	ip, r8
 8006aae:	46ae      	mov	lr, r5
 8006ab0:	46d3      	mov	fp, sl
 8006ab2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ab6:	b298      	uxth	r0, r3
 8006ab8:	fb06 a000 	mla	r0, r6, r0, sl
 8006abc:	0c02      	lsrs	r2, r0, #16
 8006abe:	0c1b      	lsrs	r3, r3, #16
 8006ac0:	fb06 2303 	mla	r3, r6, r3, r2
 8006ac4:	f8de 2000 	ldr.w	r2, [lr]
 8006ac8:	b280      	uxth	r0, r0
 8006aca:	b292      	uxth	r2, r2
 8006acc:	1a12      	subs	r2, r2, r0
 8006ace:	445a      	add	r2, fp
 8006ad0:	f8de 0000 	ldr.w	r0, [lr]
 8006ad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ade:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ae2:	b292      	uxth	r2, r2
 8006ae4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ae8:	45e1      	cmp	r9, ip
 8006aea:	f84e 2b04 	str.w	r2, [lr], #4
 8006aee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006af2:	d2de      	bcs.n	8006ab2 <quorem+0x42>
 8006af4:	9b00      	ldr	r3, [sp, #0]
 8006af6:	58eb      	ldr	r3, [r5, r3]
 8006af8:	b92b      	cbnz	r3, 8006b06 <quorem+0x96>
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	3b04      	subs	r3, #4
 8006afe:	429d      	cmp	r5, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	d32f      	bcc.n	8006b64 <quorem+0xf4>
 8006b04:	613c      	str	r4, [r7, #16]
 8006b06:	4638      	mov	r0, r7
 8006b08:	f001 f9c2 	bl	8007e90 <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	db25      	blt.n	8006b5c <quorem+0xec>
 8006b10:	4629      	mov	r1, r5
 8006b12:	2000      	movs	r0, #0
 8006b14:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b18:	f8d1 c000 	ldr.w	ip, [r1]
 8006b1c:	fa1f fe82 	uxth.w	lr, r2
 8006b20:	fa1f f38c 	uxth.w	r3, ip
 8006b24:	eba3 030e 	sub.w	r3, r3, lr
 8006b28:	4403      	add	r3, r0
 8006b2a:	0c12      	lsrs	r2, r2, #16
 8006b2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b3a:	45c1      	cmp	r9, r8
 8006b3c:	f841 3b04 	str.w	r3, [r1], #4
 8006b40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b44:	d2e6      	bcs.n	8006b14 <quorem+0xa4>
 8006b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b4e:	b922      	cbnz	r2, 8006b5a <quorem+0xea>
 8006b50:	3b04      	subs	r3, #4
 8006b52:	429d      	cmp	r5, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	d30b      	bcc.n	8006b70 <quorem+0x100>
 8006b58:	613c      	str	r4, [r7, #16]
 8006b5a:	3601      	adds	r6, #1
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	b003      	add	sp, #12
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	3b04      	subs	r3, #4
 8006b68:	2a00      	cmp	r2, #0
 8006b6a:	d1cb      	bne.n	8006b04 <quorem+0x94>
 8006b6c:	3c01      	subs	r4, #1
 8006b6e:	e7c6      	b.n	8006afe <quorem+0x8e>
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	3b04      	subs	r3, #4
 8006b74:	2a00      	cmp	r2, #0
 8006b76:	d1ef      	bne.n	8006b58 <quorem+0xe8>
 8006b78:	3c01      	subs	r4, #1
 8006b7a:	e7ea      	b.n	8006b52 <quorem+0xe2>
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	e7ee      	b.n	8006b5e <quorem+0xee>

08006b80 <_dtoa_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	69c7      	ldr	r7, [r0, #28]
 8006b86:	b099      	sub	sp, #100	@ 0x64
 8006b88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b8c:	ec55 4b10 	vmov	r4, r5, d0
 8006b90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006b92:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b94:	4683      	mov	fp, r0
 8006b96:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b9a:	b97f      	cbnz	r7, 8006bbc <_dtoa_r+0x3c>
 8006b9c:	2010      	movs	r0, #16
 8006b9e:	f000 fdfd 	bl	800779c <malloc>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ba8:	b920      	cbnz	r0, 8006bb4 <_dtoa_r+0x34>
 8006baa:	4ba7      	ldr	r3, [pc, #668]	@ (8006e48 <_dtoa_r+0x2c8>)
 8006bac:	21ef      	movs	r1, #239	@ 0xef
 8006bae:	48a7      	ldr	r0, [pc, #668]	@ (8006e4c <_dtoa_r+0x2cc>)
 8006bb0:	f002 fe0e 	bl	80097d0 <__assert_func>
 8006bb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006bb8:	6007      	str	r7, [r0, #0]
 8006bba:	60c7      	str	r7, [r0, #12]
 8006bbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bc0:	6819      	ldr	r1, [r3, #0]
 8006bc2:	b159      	cbz	r1, 8006bdc <_dtoa_r+0x5c>
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	604a      	str	r2, [r1, #4]
 8006bc8:	2301      	movs	r3, #1
 8006bca:	4093      	lsls	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
 8006bce:	4658      	mov	r0, fp
 8006bd0:	f000 feda 	bl	8007988 <_Bfree>
 8006bd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	1e2b      	subs	r3, r5, #0
 8006bde:	bfb9      	ittee	lt
 8006be0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006be4:	9303      	strlt	r3, [sp, #12]
 8006be6:	2300      	movge	r3, #0
 8006be8:	6033      	strge	r3, [r6, #0]
 8006bea:	9f03      	ldr	r7, [sp, #12]
 8006bec:	4b98      	ldr	r3, [pc, #608]	@ (8006e50 <_dtoa_r+0x2d0>)
 8006bee:	bfbc      	itt	lt
 8006bf0:	2201      	movlt	r2, #1
 8006bf2:	6032      	strlt	r2, [r6, #0]
 8006bf4:	43bb      	bics	r3, r7
 8006bf6:	d112      	bne.n	8006c1e <_dtoa_r+0x9e>
 8006bf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006bfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c04:	4323      	orrs	r3, r4
 8006c06:	f000 854d 	beq.w	80076a4 <_dtoa_r+0xb24>
 8006c0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006e64 <_dtoa_r+0x2e4>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 854f 	beq.w	80076b4 <_dtoa_r+0xb34>
 8006c16:	f10a 0303 	add.w	r3, sl, #3
 8006c1a:	f000 bd49 	b.w	80076b0 <_dtoa_r+0xb30>
 8006c1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c22:	2200      	movs	r2, #0
 8006c24:	ec51 0b17 	vmov	r0, r1, d7
 8006c28:	2300      	movs	r3, #0
 8006c2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006c2e:	f7f9 ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c32:	4680      	mov	r8, r0
 8006c34:	b158      	cbz	r0, 8006c4e <_dtoa_r+0xce>
 8006c36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c38:	2301      	movs	r3, #1
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c3e:	b113      	cbz	r3, 8006c46 <_dtoa_r+0xc6>
 8006c40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c42:	4b84      	ldr	r3, [pc, #528]	@ (8006e54 <_dtoa_r+0x2d4>)
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006e68 <_dtoa_r+0x2e8>
 8006c4a:	f000 bd33 	b.w	80076b4 <_dtoa_r+0xb34>
 8006c4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006c52:	aa16      	add	r2, sp, #88	@ 0x58
 8006c54:	a917      	add	r1, sp, #92	@ 0x5c
 8006c56:	4658      	mov	r0, fp
 8006c58:	f001 fa3a 	bl	80080d0 <__d2b>
 8006c5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006c60:	4681      	mov	r9, r0
 8006c62:	2e00      	cmp	r6, #0
 8006c64:	d077      	beq.n	8006d56 <_dtoa_r+0x1d6>
 8006c66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c80:	4619      	mov	r1, r3
 8006c82:	2200      	movs	r2, #0
 8006c84:	4b74      	ldr	r3, [pc, #464]	@ (8006e58 <_dtoa_r+0x2d8>)
 8006c86:	f7f9 faff 	bl	8000288 <__aeabi_dsub>
 8006c8a:	a369      	add	r3, pc, #420	@ (adr r3, 8006e30 <_dtoa_r+0x2b0>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f7f9 fcb2 	bl	80005f8 <__aeabi_dmul>
 8006c94:	a368      	add	r3, pc, #416	@ (adr r3, 8006e38 <_dtoa_r+0x2b8>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 faf7 	bl	800028c <__adddf3>
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	460d      	mov	r5, r1
 8006ca4:	f7f9 fc3e 	bl	8000524 <__aeabi_i2d>
 8006ca8:	a365      	add	r3, pc, #404	@ (adr r3, 8006e40 <_dtoa_r+0x2c0>)
 8006caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cae:	f7f9 fca3 	bl	80005f8 <__aeabi_dmul>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 fae7 	bl	800028c <__adddf3>
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	f7f9 ff49 	bl	8000b58 <__aeabi_d2iz>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4607      	mov	r7, r0
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4620      	mov	r0, r4
 8006cce:	4629      	mov	r1, r5
 8006cd0:	f7f9 ff04 	bl	8000adc <__aeabi_dcmplt>
 8006cd4:	b140      	cbz	r0, 8006ce8 <_dtoa_r+0x168>
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	f7f9 fc24 	bl	8000524 <__aeabi_i2d>
 8006cdc:	4622      	mov	r2, r4
 8006cde:	462b      	mov	r3, r5
 8006ce0:	f7f9 fef2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ce4:	b900      	cbnz	r0, 8006ce8 <_dtoa_r+0x168>
 8006ce6:	3f01      	subs	r7, #1
 8006ce8:	2f16      	cmp	r7, #22
 8006cea:	d851      	bhi.n	8006d90 <_dtoa_r+0x210>
 8006cec:	4b5b      	ldr	r3, [pc, #364]	@ (8006e5c <_dtoa_r+0x2dc>)
 8006cee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cfa:	f7f9 feef 	bl	8000adc <__aeabi_dcmplt>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d048      	beq.n	8006d94 <_dtoa_r+0x214>
 8006d02:	3f01      	subs	r7, #1
 8006d04:	2300      	movs	r3, #0
 8006d06:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d0a:	1b9b      	subs	r3, r3, r6
 8006d0c:	1e5a      	subs	r2, r3, #1
 8006d0e:	bf44      	itt	mi
 8006d10:	f1c3 0801 	rsbmi	r8, r3, #1
 8006d14:	2300      	movmi	r3, #0
 8006d16:	9208      	str	r2, [sp, #32]
 8006d18:	bf54      	ite	pl
 8006d1a:	f04f 0800 	movpl.w	r8, #0
 8006d1e:	9308      	strmi	r3, [sp, #32]
 8006d20:	2f00      	cmp	r7, #0
 8006d22:	db39      	blt.n	8006d98 <_dtoa_r+0x218>
 8006d24:	9b08      	ldr	r3, [sp, #32]
 8006d26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006d28:	443b      	add	r3, r7
 8006d2a:	9308      	str	r3, [sp, #32]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d32:	2b09      	cmp	r3, #9
 8006d34:	d864      	bhi.n	8006e00 <_dtoa_r+0x280>
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	bfc4      	itt	gt
 8006d3a:	3b04      	subgt	r3, #4
 8006d3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d40:	f1a3 0302 	sub.w	r3, r3, #2
 8006d44:	bfcc      	ite	gt
 8006d46:	2400      	movgt	r4, #0
 8006d48:	2401      	movle	r4, #1
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d863      	bhi.n	8006e16 <_dtoa_r+0x296>
 8006d4e:	e8df f003 	tbb	[pc, r3]
 8006d52:	372a      	.short	0x372a
 8006d54:	5535      	.short	0x5535
 8006d56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006d5a:	441e      	add	r6, r3
 8006d5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	bfc1      	itttt	gt
 8006d64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d68:	409f      	lslgt	r7, r3
 8006d6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d72:	bfd6      	itet	le
 8006d74:	f1c3 0320 	rsble	r3, r3, #32
 8006d78:	ea47 0003 	orrgt.w	r0, r7, r3
 8006d7c:	fa04 f003 	lslle.w	r0, r4, r3
 8006d80:	f7f9 fbc0 	bl	8000504 <__aeabi_ui2d>
 8006d84:	2201      	movs	r2, #1
 8006d86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d8a:	3e01      	subs	r6, #1
 8006d8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006d8e:	e777      	b.n	8006c80 <_dtoa_r+0x100>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e7b8      	b.n	8006d06 <_dtoa_r+0x186>
 8006d94:	9012      	str	r0, [sp, #72]	@ 0x48
 8006d96:	e7b7      	b.n	8006d08 <_dtoa_r+0x188>
 8006d98:	427b      	negs	r3, r7
 8006d9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	eba8 0807 	sub.w	r8, r8, r7
 8006da2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006da4:	e7c4      	b.n	8006d30 <_dtoa_r+0x1b0>
 8006da6:	2300      	movs	r3, #0
 8006da8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006daa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	dc35      	bgt.n	8006e1c <_dtoa_r+0x29c>
 8006db0:	2301      	movs	r3, #1
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	9307      	str	r3, [sp, #28]
 8006db6:	461a      	mov	r2, r3
 8006db8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006dba:	e00b      	b.n	8006dd4 <_dtoa_r+0x254>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e7f3      	b.n	8006da8 <_dtoa_r+0x228>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dc6:	18fb      	adds	r3, r7, r3
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	9307      	str	r3, [sp, #28]
 8006dd0:	bfb8      	it	lt
 8006dd2:	2301      	movlt	r3, #1
 8006dd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	2204      	movs	r2, #4
 8006ddc:	f102 0514 	add.w	r5, r2, #20
 8006de0:	429d      	cmp	r5, r3
 8006de2:	d91f      	bls.n	8006e24 <_dtoa_r+0x2a4>
 8006de4:	6041      	str	r1, [r0, #4]
 8006de6:	4658      	mov	r0, fp
 8006de8:	f000 fd8e 	bl	8007908 <_Balloc>
 8006dec:	4682      	mov	sl, r0
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d13c      	bne.n	8006e6c <_dtoa_r+0x2ec>
 8006df2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e60 <_dtoa_r+0x2e0>)
 8006df4:	4602      	mov	r2, r0
 8006df6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006dfa:	e6d8      	b.n	8006bae <_dtoa_r+0x2e>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e7e0      	b.n	8006dc2 <_dtoa_r+0x242>
 8006e00:	2401      	movs	r4, #1
 8006e02:	2300      	movs	r3, #0
 8006e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	9307      	str	r3, [sp, #28]
 8006e10:	2200      	movs	r2, #0
 8006e12:	2312      	movs	r3, #18
 8006e14:	e7d0      	b.n	8006db8 <_dtoa_r+0x238>
 8006e16:	2301      	movs	r3, #1
 8006e18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e1a:	e7f5      	b.n	8006e08 <_dtoa_r+0x288>
 8006e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	9307      	str	r3, [sp, #28]
 8006e22:	e7d7      	b.n	8006dd4 <_dtoa_r+0x254>
 8006e24:	3101      	adds	r1, #1
 8006e26:	0052      	lsls	r2, r2, #1
 8006e28:	e7d8      	b.n	8006ddc <_dtoa_r+0x25c>
 8006e2a:	bf00      	nop
 8006e2c:	f3af 8000 	nop.w
 8006e30:	636f4361 	.word	0x636f4361
 8006e34:	3fd287a7 	.word	0x3fd287a7
 8006e38:	8b60c8b3 	.word	0x8b60c8b3
 8006e3c:	3fc68a28 	.word	0x3fc68a28
 8006e40:	509f79fb 	.word	0x509f79fb
 8006e44:	3fd34413 	.word	0x3fd34413
 8006e48:	0800a24e 	.word	0x0800a24e
 8006e4c:	0800a265 	.word	0x0800a265
 8006e50:	7ff00000 	.word	0x7ff00000
 8006e54:	0800a219 	.word	0x0800a219
 8006e58:	3ff80000 	.word	0x3ff80000
 8006e5c:	0800a360 	.word	0x0800a360
 8006e60:	0800a2bd 	.word	0x0800a2bd
 8006e64:	0800a24a 	.word	0x0800a24a
 8006e68:	0800a218 	.word	0x0800a218
 8006e6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e70:	6018      	str	r0, [r3, #0]
 8006e72:	9b07      	ldr	r3, [sp, #28]
 8006e74:	2b0e      	cmp	r3, #14
 8006e76:	f200 80a4 	bhi.w	8006fc2 <_dtoa_r+0x442>
 8006e7a:	2c00      	cmp	r4, #0
 8006e7c:	f000 80a1 	beq.w	8006fc2 <_dtoa_r+0x442>
 8006e80:	2f00      	cmp	r7, #0
 8006e82:	dd33      	ble.n	8006eec <_dtoa_r+0x36c>
 8006e84:	4bad      	ldr	r3, [pc, #692]	@ (800713c <_dtoa_r+0x5bc>)
 8006e86:	f007 020f 	and.w	r2, r7, #15
 8006e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e8e:	ed93 7b00 	vldr	d7, [r3]
 8006e92:	05f8      	lsls	r0, r7, #23
 8006e94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e9c:	d516      	bpl.n	8006ecc <_dtoa_r+0x34c>
 8006e9e:	4ba8      	ldr	r3, [pc, #672]	@ (8007140 <_dtoa_r+0x5c0>)
 8006ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ea8:	f7f9 fcd0 	bl	800084c <__aeabi_ddiv>
 8006eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb0:	f004 040f 	and.w	r4, r4, #15
 8006eb4:	2603      	movs	r6, #3
 8006eb6:	4da2      	ldr	r5, [pc, #648]	@ (8007140 <_dtoa_r+0x5c0>)
 8006eb8:	b954      	cbnz	r4, 8006ed0 <_dtoa_r+0x350>
 8006eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ec2:	f7f9 fcc3 	bl	800084c <__aeabi_ddiv>
 8006ec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eca:	e028      	b.n	8006f1e <_dtoa_r+0x39e>
 8006ecc:	2602      	movs	r6, #2
 8006ece:	e7f2      	b.n	8006eb6 <_dtoa_r+0x336>
 8006ed0:	07e1      	lsls	r1, r4, #31
 8006ed2:	d508      	bpl.n	8006ee6 <_dtoa_r+0x366>
 8006ed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ed8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006edc:	f7f9 fb8c 	bl	80005f8 <__aeabi_dmul>
 8006ee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ee4:	3601      	adds	r6, #1
 8006ee6:	1064      	asrs	r4, r4, #1
 8006ee8:	3508      	adds	r5, #8
 8006eea:	e7e5      	b.n	8006eb8 <_dtoa_r+0x338>
 8006eec:	f000 80d2 	beq.w	8007094 <_dtoa_r+0x514>
 8006ef0:	427c      	negs	r4, r7
 8006ef2:	4b92      	ldr	r3, [pc, #584]	@ (800713c <_dtoa_r+0x5bc>)
 8006ef4:	4d92      	ldr	r5, [pc, #584]	@ (8007140 <_dtoa_r+0x5c0>)
 8006ef6:	f004 020f 	and.w	r2, r4, #15
 8006efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f06:	f7f9 fb77 	bl	80005f8 <__aeabi_dmul>
 8006f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f0e:	1124      	asrs	r4, r4, #4
 8006f10:	2300      	movs	r3, #0
 8006f12:	2602      	movs	r6, #2
 8006f14:	2c00      	cmp	r4, #0
 8006f16:	f040 80b2 	bne.w	800707e <_dtoa_r+0x4fe>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1d3      	bne.n	8006ec6 <_dtoa_r+0x346>
 8006f1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 80b7 	beq.w	8007098 <_dtoa_r+0x518>
 8006f2a:	4b86      	ldr	r3, [pc, #536]	@ (8007144 <_dtoa_r+0x5c4>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	4620      	mov	r0, r4
 8006f30:	4629      	mov	r1, r5
 8006f32:	f7f9 fdd3 	bl	8000adc <__aeabi_dcmplt>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f000 80ae 	beq.w	8007098 <_dtoa_r+0x518>
 8006f3c:	9b07      	ldr	r3, [sp, #28]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80aa 	beq.w	8007098 <_dtoa_r+0x518>
 8006f44:	9b00      	ldr	r3, [sp, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	dd37      	ble.n	8006fba <_dtoa_r+0x43a>
 8006f4a:	1e7b      	subs	r3, r7, #1
 8006f4c:	9304      	str	r3, [sp, #16]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	4b7d      	ldr	r3, [pc, #500]	@ (8007148 <_dtoa_r+0x5c8>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7f9 fb4f 	bl	80005f8 <__aeabi_dmul>
 8006f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f5e:	9c00      	ldr	r4, [sp, #0]
 8006f60:	3601      	adds	r6, #1
 8006f62:	4630      	mov	r0, r6
 8006f64:	f7f9 fade 	bl	8000524 <__aeabi_i2d>
 8006f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f6c:	f7f9 fb44 	bl	80005f8 <__aeabi_dmul>
 8006f70:	4b76      	ldr	r3, [pc, #472]	@ (800714c <_dtoa_r+0x5cc>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	f7f9 f98a 	bl	800028c <__adddf3>
 8006f78:	4605      	mov	r5, r0
 8006f7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f7e:	2c00      	cmp	r4, #0
 8006f80:	f040 808d 	bne.w	800709e <_dtoa_r+0x51e>
 8006f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f88:	4b71      	ldr	r3, [pc, #452]	@ (8007150 <_dtoa_r+0x5d0>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f7f9 f97c 	bl	8000288 <__aeabi_dsub>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f98:	462a      	mov	r2, r5
 8006f9a:	4633      	mov	r3, r6
 8006f9c:	f7f9 fdbc 	bl	8000b18 <__aeabi_dcmpgt>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	f040 828b 	bne.w	80074bc <_dtoa_r+0x93c>
 8006fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006faa:	462a      	mov	r2, r5
 8006fac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006fb0:	f7f9 fd94 	bl	8000adc <__aeabi_dcmplt>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f040 8128 	bne.w	800720a <_dtoa_r+0x68a>
 8006fba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006fbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006fc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f2c0 815a 	blt.w	800727e <_dtoa_r+0x6fe>
 8006fca:	2f0e      	cmp	r7, #14
 8006fcc:	f300 8157 	bgt.w	800727e <_dtoa_r+0x6fe>
 8006fd0:	4b5a      	ldr	r3, [pc, #360]	@ (800713c <_dtoa_r+0x5bc>)
 8006fd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fd6:	ed93 7b00 	vldr	d7, [r3]
 8006fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	ed8d 7b00 	vstr	d7, [sp]
 8006fe2:	da03      	bge.n	8006fec <_dtoa_r+0x46c>
 8006fe4:	9b07      	ldr	r3, [sp, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f340 8101 	ble.w	80071ee <_dtoa_r+0x66e>
 8006fec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ff0:	4656      	mov	r6, sl
 8006ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f7f9 fc27 	bl	800084c <__aeabi_ddiv>
 8006ffe:	f7f9 fdab 	bl	8000b58 <__aeabi_d2iz>
 8007002:	4680      	mov	r8, r0
 8007004:	f7f9 fa8e 	bl	8000524 <__aeabi_i2d>
 8007008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800700c:	f7f9 faf4 	bl	80005f8 <__aeabi_dmul>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4620      	mov	r0, r4
 8007016:	4629      	mov	r1, r5
 8007018:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800701c:	f7f9 f934 	bl	8000288 <__aeabi_dsub>
 8007020:	f806 4b01 	strb.w	r4, [r6], #1
 8007024:	9d07      	ldr	r5, [sp, #28]
 8007026:	eba6 040a 	sub.w	r4, r6, sl
 800702a:	42a5      	cmp	r5, r4
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	f040 8117 	bne.w	8007262 <_dtoa_r+0x6e2>
 8007034:	f7f9 f92a 	bl	800028c <__adddf3>
 8007038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	f7f9 fd6a 	bl	8000b18 <__aeabi_dcmpgt>
 8007044:	2800      	cmp	r0, #0
 8007046:	f040 80f9 	bne.w	800723c <_dtoa_r+0x6bc>
 800704a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 fd39 	bl	8000ac8 <__aeabi_dcmpeq>
 8007056:	b118      	cbz	r0, 8007060 <_dtoa_r+0x4e0>
 8007058:	f018 0f01 	tst.w	r8, #1
 800705c:	f040 80ee 	bne.w	800723c <_dtoa_r+0x6bc>
 8007060:	4649      	mov	r1, r9
 8007062:	4658      	mov	r0, fp
 8007064:	f000 fc90 	bl	8007988 <_Bfree>
 8007068:	2300      	movs	r3, #0
 800706a:	7033      	strb	r3, [r6, #0]
 800706c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800706e:	3701      	adds	r7, #1
 8007070:	601f      	str	r7, [r3, #0]
 8007072:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 831d 	beq.w	80076b4 <_dtoa_r+0xb34>
 800707a:	601e      	str	r6, [r3, #0]
 800707c:	e31a      	b.n	80076b4 <_dtoa_r+0xb34>
 800707e:	07e2      	lsls	r2, r4, #31
 8007080:	d505      	bpl.n	800708e <_dtoa_r+0x50e>
 8007082:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007086:	f7f9 fab7 	bl	80005f8 <__aeabi_dmul>
 800708a:	3601      	adds	r6, #1
 800708c:	2301      	movs	r3, #1
 800708e:	1064      	asrs	r4, r4, #1
 8007090:	3508      	adds	r5, #8
 8007092:	e73f      	b.n	8006f14 <_dtoa_r+0x394>
 8007094:	2602      	movs	r6, #2
 8007096:	e742      	b.n	8006f1e <_dtoa_r+0x39e>
 8007098:	9c07      	ldr	r4, [sp, #28]
 800709a:	9704      	str	r7, [sp, #16]
 800709c:	e761      	b.n	8006f62 <_dtoa_r+0x3e2>
 800709e:	4b27      	ldr	r3, [pc, #156]	@ (800713c <_dtoa_r+0x5bc>)
 80070a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070aa:	4454      	add	r4, sl
 80070ac:	2900      	cmp	r1, #0
 80070ae:	d053      	beq.n	8007158 <_dtoa_r+0x5d8>
 80070b0:	4928      	ldr	r1, [pc, #160]	@ (8007154 <_dtoa_r+0x5d4>)
 80070b2:	2000      	movs	r0, #0
 80070b4:	f7f9 fbca 	bl	800084c <__aeabi_ddiv>
 80070b8:	4633      	mov	r3, r6
 80070ba:	462a      	mov	r2, r5
 80070bc:	f7f9 f8e4 	bl	8000288 <__aeabi_dsub>
 80070c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070c4:	4656      	mov	r6, sl
 80070c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ca:	f7f9 fd45 	bl	8000b58 <__aeabi_d2iz>
 80070ce:	4605      	mov	r5, r0
 80070d0:	f7f9 fa28 	bl	8000524 <__aeabi_i2d>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070dc:	f7f9 f8d4 	bl	8000288 <__aeabi_dsub>
 80070e0:	3530      	adds	r5, #48	@ 0x30
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070ea:	f806 5b01 	strb.w	r5, [r6], #1
 80070ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070f2:	f7f9 fcf3 	bl	8000adc <__aeabi_dcmplt>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d171      	bne.n	80071de <_dtoa_r+0x65e>
 80070fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070fe:	4911      	ldr	r1, [pc, #68]	@ (8007144 <_dtoa_r+0x5c4>)
 8007100:	2000      	movs	r0, #0
 8007102:	f7f9 f8c1 	bl	8000288 <__aeabi_dsub>
 8007106:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800710a:	f7f9 fce7 	bl	8000adc <__aeabi_dcmplt>
 800710e:	2800      	cmp	r0, #0
 8007110:	f040 8095 	bne.w	800723e <_dtoa_r+0x6be>
 8007114:	42a6      	cmp	r6, r4
 8007116:	f43f af50 	beq.w	8006fba <_dtoa_r+0x43a>
 800711a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800711e:	4b0a      	ldr	r3, [pc, #40]	@ (8007148 <_dtoa_r+0x5c8>)
 8007120:	2200      	movs	r2, #0
 8007122:	f7f9 fa69 	bl	80005f8 <__aeabi_dmul>
 8007126:	4b08      	ldr	r3, [pc, #32]	@ (8007148 <_dtoa_r+0x5c8>)
 8007128:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800712c:	2200      	movs	r2, #0
 800712e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007132:	f7f9 fa61 	bl	80005f8 <__aeabi_dmul>
 8007136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800713a:	e7c4      	b.n	80070c6 <_dtoa_r+0x546>
 800713c:	0800a360 	.word	0x0800a360
 8007140:	0800a338 	.word	0x0800a338
 8007144:	3ff00000 	.word	0x3ff00000
 8007148:	40240000 	.word	0x40240000
 800714c:	401c0000 	.word	0x401c0000
 8007150:	40140000 	.word	0x40140000
 8007154:	3fe00000 	.word	0x3fe00000
 8007158:	4631      	mov	r1, r6
 800715a:	4628      	mov	r0, r5
 800715c:	f7f9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8007160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007164:	9415      	str	r4, [sp, #84]	@ 0x54
 8007166:	4656      	mov	r6, sl
 8007168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800716c:	f7f9 fcf4 	bl	8000b58 <__aeabi_d2iz>
 8007170:	4605      	mov	r5, r0
 8007172:	f7f9 f9d7 	bl	8000524 <__aeabi_i2d>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800717e:	f7f9 f883 	bl	8000288 <__aeabi_dsub>
 8007182:	3530      	adds	r5, #48	@ 0x30
 8007184:	f806 5b01 	strb.w	r5, [r6], #1
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	42a6      	cmp	r6, r4
 800718e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	d124      	bne.n	80071e2 <_dtoa_r+0x662>
 8007198:	4bac      	ldr	r3, [pc, #688]	@ (800744c <_dtoa_r+0x8cc>)
 800719a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800719e:	f7f9 f875 	bl	800028c <__adddf3>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071aa:	f7f9 fcb5 	bl	8000b18 <__aeabi_dcmpgt>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d145      	bne.n	800723e <_dtoa_r+0x6be>
 80071b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071b6:	49a5      	ldr	r1, [pc, #660]	@ (800744c <_dtoa_r+0x8cc>)
 80071b8:	2000      	movs	r0, #0
 80071ba:	f7f9 f865 	bl	8000288 <__aeabi_dsub>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071c6:	f7f9 fc89 	bl	8000adc <__aeabi_dcmplt>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	f43f aef5 	beq.w	8006fba <_dtoa_r+0x43a>
 80071d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80071d2:	1e73      	subs	r3, r6, #1
 80071d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80071d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071da:	2b30      	cmp	r3, #48	@ 0x30
 80071dc:	d0f8      	beq.n	80071d0 <_dtoa_r+0x650>
 80071de:	9f04      	ldr	r7, [sp, #16]
 80071e0:	e73e      	b.n	8007060 <_dtoa_r+0x4e0>
 80071e2:	4b9b      	ldr	r3, [pc, #620]	@ (8007450 <_dtoa_r+0x8d0>)
 80071e4:	f7f9 fa08 	bl	80005f8 <__aeabi_dmul>
 80071e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ec:	e7bc      	b.n	8007168 <_dtoa_r+0x5e8>
 80071ee:	d10c      	bne.n	800720a <_dtoa_r+0x68a>
 80071f0:	4b98      	ldr	r3, [pc, #608]	@ (8007454 <_dtoa_r+0x8d4>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071f8:	f7f9 f9fe 	bl	80005f8 <__aeabi_dmul>
 80071fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007200:	f7f9 fc80 	bl	8000b04 <__aeabi_dcmpge>
 8007204:	2800      	cmp	r0, #0
 8007206:	f000 8157 	beq.w	80074b8 <_dtoa_r+0x938>
 800720a:	2400      	movs	r4, #0
 800720c:	4625      	mov	r5, r4
 800720e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007210:	43db      	mvns	r3, r3
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	4656      	mov	r6, sl
 8007216:	2700      	movs	r7, #0
 8007218:	4621      	mov	r1, r4
 800721a:	4658      	mov	r0, fp
 800721c:	f000 fbb4 	bl	8007988 <_Bfree>
 8007220:	2d00      	cmp	r5, #0
 8007222:	d0dc      	beq.n	80071de <_dtoa_r+0x65e>
 8007224:	b12f      	cbz	r7, 8007232 <_dtoa_r+0x6b2>
 8007226:	42af      	cmp	r7, r5
 8007228:	d003      	beq.n	8007232 <_dtoa_r+0x6b2>
 800722a:	4639      	mov	r1, r7
 800722c:	4658      	mov	r0, fp
 800722e:	f000 fbab 	bl	8007988 <_Bfree>
 8007232:	4629      	mov	r1, r5
 8007234:	4658      	mov	r0, fp
 8007236:	f000 fba7 	bl	8007988 <_Bfree>
 800723a:	e7d0      	b.n	80071de <_dtoa_r+0x65e>
 800723c:	9704      	str	r7, [sp, #16]
 800723e:	4633      	mov	r3, r6
 8007240:	461e      	mov	r6, r3
 8007242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007246:	2a39      	cmp	r2, #57	@ 0x39
 8007248:	d107      	bne.n	800725a <_dtoa_r+0x6da>
 800724a:	459a      	cmp	sl, r3
 800724c:	d1f8      	bne.n	8007240 <_dtoa_r+0x6c0>
 800724e:	9a04      	ldr	r2, [sp, #16]
 8007250:	3201      	adds	r2, #1
 8007252:	9204      	str	r2, [sp, #16]
 8007254:	2230      	movs	r2, #48	@ 0x30
 8007256:	f88a 2000 	strb.w	r2, [sl]
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	3201      	adds	r2, #1
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	e7bd      	b.n	80071de <_dtoa_r+0x65e>
 8007262:	4b7b      	ldr	r3, [pc, #492]	@ (8007450 <_dtoa_r+0x8d0>)
 8007264:	2200      	movs	r2, #0
 8007266:	f7f9 f9c7 	bl	80005f8 <__aeabi_dmul>
 800726a:	2200      	movs	r2, #0
 800726c:	2300      	movs	r3, #0
 800726e:	4604      	mov	r4, r0
 8007270:	460d      	mov	r5, r1
 8007272:	f7f9 fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 8007276:	2800      	cmp	r0, #0
 8007278:	f43f aebb 	beq.w	8006ff2 <_dtoa_r+0x472>
 800727c:	e6f0      	b.n	8007060 <_dtoa_r+0x4e0>
 800727e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007280:	2a00      	cmp	r2, #0
 8007282:	f000 80db 	beq.w	800743c <_dtoa_r+0x8bc>
 8007286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007288:	2a01      	cmp	r2, #1
 800728a:	f300 80bf 	bgt.w	800740c <_dtoa_r+0x88c>
 800728e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007290:	2a00      	cmp	r2, #0
 8007292:	f000 80b7 	beq.w	8007404 <_dtoa_r+0x884>
 8007296:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800729a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800729c:	4646      	mov	r6, r8
 800729e:	9a08      	ldr	r2, [sp, #32]
 80072a0:	2101      	movs	r1, #1
 80072a2:	441a      	add	r2, r3
 80072a4:	4658      	mov	r0, fp
 80072a6:	4498      	add	r8, r3
 80072a8:	9208      	str	r2, [sp, #32]
 80072aa:	f000 fc6b 	bl	8007b84 <__i2b>
 80072ae:	4605      	mov	r5, r0
 80072b0:	b15e      	cbz	r6, 80072ca <_dtoa_r+0x74a>
 80072b2:	9b08      	ldr	r3, [sp, #32]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	dd08      	ble.n	80072ca <_dtoa_r+0x74a>
 80072b8:	42b3      	cmp	r3, r6
 80072ba:	9a08      	ldr	r2, [sp, #32]
 80072bc:	bfa8      	it	ge
 80072be:	4633      	movge	r3, r6
 80072c0:	eba8 0803 	sub.w	r8, r8, r3
 80072c4:	1af6      	subs	r6, r6, r3
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	9308      	str	r3, [sp, #32]
 80072ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072cc:	b1f3      	cbz	r3, 800730c <_dtoa_r+0x78c>
 80072ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 80b7 	beq.w	8007444 <_dtoa_r+0x8c4>
 80072d6:	b18c      	cbz	r4, 80072fc <_dtoa_r+0x77c>
 80072d8:	4629      	mov	r1, r5
 80072da:	4622      	mov	r2, r4
 80072dc:	4658      	mov	r0, fp
 80072de:	f000 fd11 	bl	8007d04 <__pow5mult>
 80072e2:	464a      	mov	r2, r9
 80072e4:	4601      	mov	r1, r0
 80072e6:	4605      	mov	r5, r0
 80072e8:	4658      	mov	r0, fp
 80072ea:	f000 fc61 	bl	8007bb0 <__multiply>
 80072ee:	4649      	mov	r1, r9
 80072f0:	9004      	str	r0, [sp, #16]
 80072f2:	4658      	mov	r0, fp
 80072f4:	f000 fb48 	bl	8007988 <_Bfree>
 80072f8:	9b04      	ldr	r3, [sp, #16]
 80072fa:	4699      	mov	r9, r3
 80072fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072fe:	1b1a      	subs	r2, r3, r4
 8007300:	d004      	beq.n	800730c <_dtoa_r+0x78c>
 8007302:	4649      	mov	r1, r9
 8007304:	4658      	mov	r0, fp
 8007306:	f000 fcfd 	bl	8007d04 <__pow5mult>
 800730a:	4681      	mov	r9, r0
 800730c:	2101      	movs	r1, #1
 800730e:	4658      	mov	r0, fp
 8007310:	f000 fc38 	bl	8007b84 <__i2b>
 8007314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007316:	4604      	mov	r4, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 81cf 	beq.w	80076bc <_dtoa_r+0xb3c>
 800731e:	461a      	mov	r2, r3
 8007320:	4601      	mov	r1, r0
 8007322:	4658      	mov	r0, fp
 8007324:	f000 fcee 	bl	8007d04 <__pow5mult>
 8007328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800732a:	2b01      	cmp	r3, #1
 800732c:	4604      	mov	r4, r0
 800732e:	f300 8095 	bgt.w	800745c <_dtoa_r+0x8dc>
 8007332:	9b02      	ldr	r3, [sp, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 8087 	bne.w	8007448 <_dtoa_r+0x8c8>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 8089 	bne.w	8007458 <_dtoa_r+0x8d8>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800734c:	0d1b      	lsrs	r3, r3, #20
 800734e:	051b      	lsls	r3, r3, #20
 8007350:	b12b      	cbz	r3, 800735e <_dtoa_r+0x7de>
 8007352:	9b08      	ldr	r3, [sp, #32]
 8007354:	3301      	adds	r3, #1
 8007356:	9308      	str	r3, [sp, #32]
 8007358:	f108 0801 	add.w	r8, r8, #1
 800735c:	2301      	movs	r3, #1
 800735e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 81b0 	beq.w	80076c8 <_dtoa_r+0xb48>
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800736e:	6918      	ldr	r0, [r3, #16]
 8007370:	f000 fbbc 	bl	8007aec <__hi0bits>
 8007374:	f1c0 0020 	rsb	r0, r0, #32
 8007378:	9b08      	ldr	r3, [sp, #32]
 800737a:	4418      	add	r0, r3
 800737c:	f010 001f 	ands.w	r0, r0, #31
 8007380:	d077      	beq.n	8007472 <_dtoa_r+0x8f2>
 8007382:	f1c0 0320 	rsb	r3, r0, #32
 8007386:	2b04      	cmp	r3, #4
 8007388:	dd6b      	ble.n	8007462 <_dtoa_r+0x8e2>
 800738a:	9b08      	ldr	r3, [sp, #32]
 800738c:	f1c0 001c 	rsb	r0, r0, #28
 8007390:	4403      	add	r3, r0
 8007392:	4480      	add	r8, r0
 8007394:	4406      	add	r6, r0
 8007396:	9308      	str	r3, [sp, #32]
 8007398:	f1b8 0f00 	cmp.w	r8, #0
 800739c:	dd05      	ble.n	80073aa <_dtoa_r+0x82a>
 800739e:	4649      	mov	r1, r9
 80073a0:	4642      	mov	r2, r8
 80073a2:	4658      	mov	r0, fp
 80073a4:	f000 fd08 	bl	8007db8 <__lshift>
 80073a8:	4681      	mov	r9, r0
 80073aa:	9b08      	ldr	r3, [sp, #32]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd05      	ble.n	80073bc <_dtoa_r+0x83c>
 80073b0:	4621      	mov	r1, r4
 80073b2:	461a      	mov	r2, r3
 80073b4:	4658      	mov	r0, fp
 80073b6:	f000 fcff 	bl	8007db8 <__lshift>
 80073ba:	4604      	mov	r4, r0
 80073bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d059      	beq.n	8007476 <_dtoa_r+0x8f6>
 80073c2:	4621      	mov	r1, r4
 80073c4:	4648      	mov	r0, r9
 80073c6:	f000 fd63 	bl	8007e90 <__mcmp>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	da53      	bge.n	8007476 <_dtoa_r+0x8f6>
 80073ce:	1e7b      	subs	r3, r7, #1
 80073d0:	9304      	str	r3, [sp, #16]
 80073d2:	4649      	mov	r1, r9
 80073d4:	2300      	movs	r3, #0
 80073d6:	220a      	movs	r2, #10
 80073d8:	4658      	mov	r0, fp
 80073da:	f000 faf7 	bl	80079cc <__multadd>
 80073de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073e0:	4681      	mov	r9, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8172 	beq.w	80076cc <_dtoa_r+0xb4c>
 80073e8:	2300      	movs	r3, #0
 80073ea:	4629      	mov	r1, r5
 80073ec:	220a      	movs	r2, #10
 80073ee:	4658      	mov	r0, fp
 80073f0:	f000 faec 	bl	80079cc <__multadd>
 80073f4:	9b00      	ldr	r3, [sp, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	4605      	mov	r5, r0
 80073fa:	dc67      	bgt.n	80074cc <_dtoa_r+0x94c>
 80073fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fe:	2b02      	cmp	r3, #2
 8007400:	dc41      	bgt.n	8007486 <_dtoa_r+0x906>
 8007402:	e063      	b.n	80074cc <_dtoa_r+0x94c>
 8007404:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007406:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800740a:	e746      	b.n	800729a <_dtoa_r+0x71a>
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	1e5c      	subs	r4, r3, #1
 8007410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007412:	42a3      	cmp	r3, r4
 8007414:	bfbf      	itttt	lt
 8007416:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007418:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800741a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800741c:	1ae3      	sublt	r3, r4, r3
 800741e:	bfb4      	ite	lt
 8007420:	18d2      	addlt	r2, r2, r3
 8007422:	1b1c      	subge	r4, r3, r4
 8007424:	9b07      	ldr	r3, [sp, #28]
 8007426:	bfbc      	itt	lt
 8007428:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800742a:	2400      	movlt	r4, #0
 800742c:	2b00      	cmp	r3, #0
 800742e:	bfb5      	itete	lt
 8007430:	eba8 0603 	sublt.w	r6, r8, r3
 8007434:	9b07      	ldrge	r3, [sp, #28]
 8007436:	2300      	movlt	r3, #0
 8007438:	4646      	movge	r6, r8
 800743a:	e730      	b.n	800729e <_dtoa_r+0x71e>
 800743c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800743e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007440:	4646      	mov	r6, r8
 8007442:	e735      	b.n	80072b0 <_dtoa_r+0x730>
 8007444:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007446:	e75c      	b.n	8007302 <_dtoa_r+0x782>
 8007448:	2300      	movs	r3, #0
 800744a:	e788      	b.n	800735e <_dtoa_r+0x7de>
 800744c:	3fe00000 	.word	0x3fe00000
 8007450:	40240000 	.word	0x40240000
 8007454:	40140000 	.word	0x40140000
 8007458:	9b02      	ldr	r3, [sp, #8]
 800745a:	e780      	b.n	800735e <_dtoa_r+0x7de>
 800745c:	2300      	movs	r3, #0
 800745e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007460:	e782      	b.n	8007368 <_dtoa_r+0x7e8>
 8007462:	d099      	beq.n	8007398 <_dtoa_r+0x818>
 8007464:	9a08      	ldr	r2, [sp, #32]
 8007466:	331c      	adds	r3, #28
 8007468:	441a      	add	r2, r3
 800746a:	4498      	add	r8, r3
 800746c:	441e      	add	r6, r3
 800746e:	9208      	str	r2, [sp, #32]
 8007470:	e792      	b.n	8007398 <_dtoa_r+0x818>
 8007472:	4603      	mov	r3, r0
 8007474:	e7f6      	b.n	8007464 <_dtoa_r+0x8e4>
 8007476:	9b07      	ldr	r3, [sp, #28]
 8007478:	9704      	str	r7, [sp, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	dc20      	bgt.n	80074c0 <_dtoa_r+0x940>
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007482:	2b02      	cmp	r3, #2
 8007484:	dd1e      	ble.n	80074c4 <_dtoa_r+0x944>
 8007486:	9b00      	ldr	r3, [sp, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f47f aec0 	bne.w	800720e <_dtoa_r+0x68e>
 800748e:	4621      	mov	r1, r4
 8007490:	2205      	movs	r2, #5
 8007492:	4658      	mov	r0, fp
 8007494:	f000 fa9a 	bl	80079cc <__multadd>
 8007498:	4601      	mov	r1, r0
 800749a:	4604      	mov	r4, r0
 800749c:	4648      	mov	r0, r9
 800749e:	f000 fcf7 	bl	8007e90 <__mcmp>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f77f aeb3 	ble.w	800720e <_dtoa_r+0x68e>
 80074a8:	4656      	mov	r6, sl
 80074aa:	2331      	movs	r3, #49	@ 0x31
 80074ac:	f806 3b01 	strb.w	r3, [r6], #1
 80074b0:	9b04      	ldr	r3, [sp, #16]
 80074b2:	3301      	adds	r3, #1
 80074b4:	9304      	str	r3, [sp, #16]
 80074b6:	e6ae      	b.n	8007216 <_dtoa_r+0x696>
 80074b8:	9c07      	ldr	r4, [sp, #28]
 80074ba:	9704      	str	r7, [sp, #16]
 80074bc:	4625      	mov	r5, r4
 80074be:	e7f3      	b.n	80074a8 <_dtoa_r+0x928>
 80074c0:	9b07      	ldr	r3, [sp, #28]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8104 	beq.w	80076d4 <_dtoa_r+0xb54>
 80074cc:	2e00      	cmp	r6, #0
 80074ce:	dd05      	ble.n	80074dc <_dtoa_r+0x95c>
 80074d0:	4629      	mov	r1, r5
 80074d2:	4632      	mov	r2, r6
 80074d4:	4658      	mov	r0, fp
 80074d6:	f000 fc6f 	bl	8007db8 <__lshift>
 80074da:	4605      	mov	r5, r0
 80074dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d05a      	beq.n	8007598 <_dtoa_r+0xa18>
 80074e2:	6869      	ldr	r1, [r5, #4]
 80074e4:	4658      	mov	r0, fp
 80074e6:	f000 fa0f 	bl	8007908 <_Balloc>
 80074ea:	4606      	mov	r6, r0
 80074ec:	b928      	cbnz	r0, 80074fa <_dtoa_r+0x97a>
 80074ee:	4b84      	ldr	r3, [pc, #528]	@ (8007700 <_dtoa_r+0xb80>)
 80074f0:	4602      	mov	r2, r0
 80074f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80074f6:	f7ff bb5a 	b.w	8006bae <_dtoa_r+0x2e>
 80074fa:	692a      	ldr	r2, [r5, #16]
 80074fc:	3202      	adds	r2, #2
 80074fe:	0092      	lsls	r2, r2, #2
 8007500:	f105 010c 	add.w	r1, r5, #12
 8007504:	300c      	adds	r0, #12
 8007506:	f002 f94b 	bl	80097a0 <memcpy>
 800750a:	2201      	movs	r2, #1
 800750c:	4631      	mov	r1, r6
 800750e:	4658      	mov	r0, fp
 8007510:	f000 fc52 	bl	8007db8 <__lshift>
 8007514:	f10a 0301 	add.w	r3, sl, #1
 8007518:	9307      	str	r3, [sp, #28]
 800751a:	9b00      	ldr	r3, [sp, #0]
 800751c:	4453      	add	r3, sl
 800751e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007520:	9b02      	ldr	r3, [sp, #8]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	462f      	mov	r7, r5
 8007528:	930a      	str	r3, [sp, #40]	@ 0x28
 800752a:	4605      	mov	r5, r0
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	4621      	mov	r1, r4
 8007530:	3b01      	subs	r3, #1
 8007532:	4648      	mov	r0, r9
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	f7ff fa9b 	bl	8006a70 <quorem>
 800753a:	4639      	mov	r1, r7
 800753c:	9002      	str	r0, [sp, #8]
 800753e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007542:	4648      	mov	r0, r9
 8007544:	f000 fca4 	bl	8007e90 <__mcmp>
 8007548:	462a      	mov	r2, r5
 800754a:	9008      	str	r0, [sp, #32]
 800754c:	4621      	mov	r1, r4
 800754e:	4658      	mov	r0, fp
 8007550:	f000 fcba 	bl	8007ec8 <__mdiff>
 8007554:	68c2      	ldr	r2, [r0, #12]
 8007556:	4606      	mov	r6, r0
 8007558:	bb02      	cbnz	r2, 800759c <_dtoa_r+0xa1c>
 800755a:	4601      	mov	r1, r0
 800755c:	4648      	mov	r0, r9
 800755e:	f000 fc97 	bl	8007e90 <__mcmp>
 8007562:	4602      	mov	r2, r0
 8007564:	4631      	mov	r1, r6
 8007566:	4658      	mov	r0, fp
 8007568:	920e      	str	r2, [sp, #56]	@ 0x38
 800756a:	f000 fa0d 	bl	8007988 <_Bfree>
 800756e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007572:	9e07      	ldr	r6, [sp, #28]
 8007574:	ea43 0102 	orr.w	r1, r3, r2
 8007578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800757a:	4319      	orrs	r1, r3
 800757c:	d110      	bne.n	80075a0 <_dtoa_r+0xa20>
 800757e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007582:	d029      	beq.n	80075d8 <_dtoa_r+0xa58>
 8007584:	9b08      	ldr	r3, [sp, #32]
 8007586:	2b00      	cmp	r3, #0
 8007588:	dd02      	ble.n	8007590 <_dtoa_r+0xa10>
 800758a:	9b02      	ldr	r3, [sp, #8]
 800758c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007590:	9b00      	ldr	r3, [sp, #0]
 8007592:	f883 8000 	strb.w	r8, [r3]
 8007596:	e63f      	b.n	8007218 <_dtoa_r+0x698>
 8007598:	4628      	mov	r0, r5
 800759a:	e7bb      	b.n	8007514 <_dtoa_r+0x994>
 800759c:	2201      	movs	r2, #1
 800759e:	e7e1      	b.n	8007564 <_dtoa_r+0x9e4>
 80075a0:	9b08      	ldr	r3, [sp, #32]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	db04      	blt.n	80075b0 <_dtoa_r+0xa30>
 80075a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075a8:	430b      	orrs	r3, r1
 80075aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075ac:	430b      	orrs	r3, r1
 80075ae:	d120      	bne.n	80075f2 <_dtoa_r+0xa72>
 80075b0:	2a00      	cmp	r2, #0
 80075b2:	dded      	ble.n	8007590 <_dtoa_r+0xa10>
 80075b4:	4649      	mov	r1, r9
 80075b6:	2201      	movs	r2, #1
 80075b8:	4658      	mov	r0, fp
 80075ba:	f000 fbfd 	bl	8007db8 <__lshift>
 80075be:	4621      	mov	r1, r4
 80075c0:	4681      	mov	r9, r0
 80075c2:	f000 fc65 	bl	8007e90 <__mcmp>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	dc03      	bgt.n	80075d2 <_dtoa_r+0xa52>
 80075ca:	d1e1      	bne.n	8007590 <_dtoa_r+0xa10>
 80075cc:	f018 0f01 	tst.w	r8, #1
 80075d0:	d0de      	beq.n	8007590 <_dtoa_r+0xa10>
 80075d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075d6:	d1d8      	bne.n	800758a <_dtoa_r+0xa0a>
 80075d8:	9a00      	ldr	r2, [sp, #0]
 80075da:	2339      	movs	r3, #57	@ 0x39
 80075dc:	7013      	strb	r3, [r2, #0]
 80075de:	4633      	mov	r3, r6
 80075e0:	461e      	mov	r6, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80075e8:	2a39      	cmp	r2, #57	@ 0x39
 80075ea:	d052      	beq.n	8007692 <_dtoa_r+0xb12>
 80075ec:	3201      	adds	r2, #1
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	e612      	b.n	8007218 <_dtoa_r+0x698>
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	dd07      	ble.n	8007606 <_dtoa_r+0xa86>
 80075f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075fa:	d0ed      	beq.n	80075d8 <_dtoa_r+0xa58>
 80075fc:	9a00      	ldr	r2, [sp, #0]
 80075fe:	f108 0301 	add.w	r3, r8, #1
 8007602:	7013      	strb	r3, [r2, #0]
 8007604:	e608      	b.n	8007218 <_dtoa_r+0x698>
 8007606:	9b07      	ldr	r3, [sp, #28]
 8007608:	9a07      	ldr	r2, [sp, #28]
 800760a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800760e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007610:	4293      	cmp	r3, r2
 8007612:	d028      	beq.n	8007666 <_dtoa_r+0xae6>
 8007614:	4649      	mov	r1, r9
 8007616:	2300      	movs	r3, #0
 8007618:	220a      	movs	r2, #10
 800761a:	4658      	mov	r0, fp
 800761c:	f000 f9d6 	bl	80079cc <__multadd>
 8007620:	42af      	cmp	r7, r5
 8007622:	4681      	mov	r9, r0
 8007624:	f04f 0300 	mov.w	r3, #0
 8007628:	f04f 020a 	mov.w	r2, #10
 800762c:	4639      	mov	r1, r7
 800762e:	4658      	mov	r0, fp
 8007630:	d107      	bne.n	8007642 <_dtoa_r+0xac2>
 8007632:	f000 f9cb 	bl	80079cc <__multadd>
 8007636:	4607      	mov	r7, r0
 8007638:	4605      	mov	r5, r0
 800763a:	9b07      	ldr	r3, [sp, #28]
 800763c:	3301      	adds	r3, #1
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	e774      	b.n	800752c <_dtoa_r+0x9ac>
 8007642:	f000 f9c3 	bl	80079cc <__multadd>
 8007646:	4629      	mov	r1, r5
 8007648:	4607      	mov	r7, r0
 800764a:	2300      	movs	r3, #0
 800764c:	220a      	movs	r2, #10
 800764e:	4658      	mov	r0, fp
 8007650:	f000 f9bc 	bl	80079cc <__multadd>
 8007654:	4605      	mov	r5, r0
 8007656:	e7f0      	b.n	800763a <_dtoa_r+0xaba>
 8007658:	9b00      	ldr	r3, [sp, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	bfcc      	ite	gt
 800765e:	461e      	movgt	r6, r3
 8007660:	2601      	movle	r6, #1
 8007662:	4456      	add	r6, sl
 8007664:	2700      	movs	r7, #0
 8007666:	4649      	mov	r1, r9
 8007668:	2201      	movs	r2, #1
 800766a:	4658      	mov	r0, fp
 800766c:	f000 fba4 	bl	8007db8 <__lshift>
 8007670:	4621      	mov	r1, r4
 8007672:	4681      	mov	r9, r0
 8007674:	f000 fc0c 	bl	8007e90 <__mcmp>
 8007678:	2800      	cmp	r0, #0
 800767a:	dcb0      	bgt.n	80075de <_dtoa_r+0xa5e>
 800767c:	d102      	bne.n	8007684 <_dtoa_r+0xb04>
 800767e:	f018 0f01 	tst.w	r8, #1
 8007682:	d1ac      	bne.n	80075de <_dtoa_r+0xa5e>
 8007684:	4633      	mov	r3, r6
 8007686:	461e      	mov	r6, r3
 8007688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800768c:	2a30      	cmp	r2, #48	@ 0x30
 800768e:	d0fa      	beq.n	8007686 <_dtoa_r+0xb06>
 8007690:	e5c2      	b.n	8007218 <_dtoa_r+0x698>
 8007692:	459a      	cmp	sl, r3
 8007694:	d1a4      	bne.n	80075e0 <_dtoa_r+0xa60>
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	3301      	adds	r3, #1
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	2331      	movs	r3, #49	@ 0x31
 800769e:	f88a 3000 	strb.w	r3, [sl]
 80076a2:	e5b9      	b.n	8007218 <_dtoa_r+0x698>
 80076a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007704 <_dtoa_r+0xb84>
 80076aa:	b11b      	cbz	r3, 80076b4 <_dtoa_r+0xb34>
 80076ac:	f10a 0308 	add.w	r3, sl, #8
 80076b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	4650      	mov	r0, sl
 80076b6:	b019      	add	sp, #100	@ 0x64
 80076b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076be:	2b01      	cmp	r3, #1
 80076c0:	f77f ae37 	ble.w	8007332 <_dtoa_r+0x7b2>
 80076c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80076c8:	2001      	movs	r0, #1
 80076ca:	e655      	b.n	8007378 <_dtoa_r+0x7f8>
 80076cc:	9b00      	ldr	r3, [sp, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f77f aed6 	ble.w	8007480 <_dtoa_r+0x900>
 80076d4:	4656      	mov	r6, sl
 80076d6:	4621      	mov	r1, r4
 80076d8:	4648      	mov	r0, r9
 80076da:	f7ff f9c9 	bl	8006a70 <quorem>
 80076de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076e2:	f806 8b01 	strb.w	r8, [r6], #1
 80076e6:	9b00      	ldr	r3, [sp, #0]
 80076e8:	eba6 020a 	sub.w	r2, r6, sl
 80076ec:	4293      	cmp	r3, r2
 80076ee:	ddb3      	ble.n	8007658 <_dtoa_r+0xad8>
 80076f0:	4649      	mov	r1, r9
 80076f2:	2300      	movs	r3, #0
 80076f4:	220a      	movs	r2, #10
 80076f6:	4658      	mov	r0, fp
 80076f8:	f000 f968 	bl	80079cc <__multadd>
 80076fc:	4681      	mov	r9, r0
 80076fe:	e7ea      	b.n	80076d6 <_dtoa_r+0xb56>
 8007700:	0800a2bd 	.word	0x0800a2bd
 8007704:	0800a241 	.word	0x0800a241

08007708 <_free_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4605      	mov	r5, r0
 800770c:	2900      	cmp	r1, #0
 800770e:	d041      	beq.n	8007794 <_free_r+0x8c>
 8007710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007714:	1f0c      	subs	r4, r1, #4
 8007716:	2b00      	cmp	r3, #0
 8007718:	bfb8      	it	lt
 800771a:	18e4      	addlt	r4, r4, r3
 800771c:	f000 f8e8 	bl	80078f0 <__malloc_lock>
 8007720:	4a1d      	ldr	r2, [pc, #116]	@ (8007798 <_free_r+0x90>)
 8007722:	6813      	ldr	r3, [r2, #0]
 8007724:	b933      	cbnz	r3, 8007734 <_free_r+0x2c>
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	6014      	str	r4, [r2, #0]
 800772a:	4628      	mov	r0, r5
 800772c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007730:	f000 b8e4 	b.w	80078fc <__malloc_unlock>
 8007734:	42a3      	cmp	r3, r4
 8007736:	d908      	bls.n	800774a <_free_r+0x42>
 8007738:	6820      	ldr	r0, [r4, #0]
 800773a:	1821      	adds	r1, r4, r0
 800773c:	428b      	cmp	r3, r1
 800773e:	bf01      	itttt	eq
 8007740:	6819      	ldreq	r1, [r3, #0]
 8007742:	685b      	ldreq	r3, [r3, #4]
 8007744:	1809      	addeq	r1, r1, r0
 8007746:	6021      	streq	r1, [r4, #0]
 8007748:	e7ed      	b.n	8007726 <_free_r+0x1e>
 800774a:	461a      	mov	r2, r3
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b10b      	cbz	r3, 8007754 <_free_r+0x4c>
 8007750:	42a3      	cmp	r3, r4
 8007752:	d9fa      	bls.n	800774a <_free_r+0x42>
 8007754:	6811      	ldr	r1, [r2, #0]
 8007756:	1850      	adds	r0, r2, r1
 8007758:	42a0      	cmp	r0, r4
 800775a:	d10b      	bne.n	8007774 <_free_r+0x6c>
 800775c:	6820      	ldr	r0, [r4, #0]
 800775e:	4401      	add	r1, r0
 8007760:	1850      	adds	r0, r2, r1
 8007762:	4283      	cmp	r3, r0
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	d1e0      	bne.n	800772a <_free_r+0x22>
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	6053      	str	r3, [r2, #4]
 800776e:	4408      	add	r0, r1
 8007770:	6010      	str	r0, [r2, #0]
 8007772:	e7da      	b.n	800772a <_free_r+0x22>
 8007774:	d902      	bls.n	800777c <_free_r+0x74>
 8007776:	230c      	movs	r3, #12
 8007778:	602b      	str	r3, [r5, #0]
 800777a:	e7d6      	b.n	800772a <_free_r+0x22>
 800777c:	6820      	ldr	r0, [r4, #0]
 800777e:	1821      	adds	r1, r4, r0
 8007780:	428b      	cmp	r3, r1
 8007782:	bf04      	itt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	6063      	str	r3, [r4, #4]
 800778a:	bf04      	itt	eq
 800778c:	1809      	addeq	r1, r1, r0
 800778e:	6021      	streq	r1, [r4, #0]
 8007790:	6054      	str	r4, [r2, #4]
 8007792:	e7ca      	b.n	800772a <_free_r+0x22>
 8007794:	bd38      	pop	{r3, r4, r5, pc}
 8007796:	bf00      	nop
 8007798:	20000f4c 	.word	0x20000f4c

0800779c <malloc>:
 800779c:	4b02      	ldr	r3, [pc, #8]	@ (80077a8 <malloc+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f000 b825 	b.w	80077f0 <_malloc_r>
 80077a6:	bf00      	nop
 80077a8:	20000554 	.word	0x20000554

080077ac <sbrk_aligned>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4e0f      	ldr	r6, [pc, #60]	@ (80077ec <sbrk_aligned+0x40>)
 80077b0:	460c      	mov	r4, r1
 80077b2:	6831      	ldr	r1, [r6, #0]
 80077b4:	4605      	mov	r5, r0
 80077b6:	b911      	cbnz	r1, 80077be <sbrk_aligned+0x12>
 80077b8:	f001 ffe2 	bl	8009780 <_sbrk_r>
 80077bc:	6030      	str	r0, [r6, #0]
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f001 ffdd 	bl	8009780 <_sbrk_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d103      	bne.n	80077d2 <sbrk_aligned+0x26>
 80077ca:	f04f 34ff 	mov.w	r4, #4294967295
 80077ce:	4620      	mov	r0, r4
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
 80077d2:	1cc4      	adds	r4, r0, #3
 80077d4:	f024 0403 	bic.w	r4, r4, #3
 80077d8:	42a0      	cmp	r0, r4
 80077da:	d0f8      	beq.n	80077ce <sbrk_aligned+0x22>
 80077dc:	1a21      	subs	r1, r4, r0
 80077de:	4628      	mov	r0, r5
 80077e0:	f001 ffce 	bl	8009780 <_sbrk_r>
 80077e4:	3001      	adds	r0, #1
 80077e6:	d1f2      	bne.n	80077ce <sbrk_aligned+0x22>
 80077e8:	e7ef      	b.n	80077ca <sbrk_aligned+0x1e>
 80077ea:	bf00      	nop
 80077ec:	20000f48 	.word	0x20000f48

080077f0 <_malloc_r>:
 80077f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f4:	1ccd      	adds	r5, r1, #3
 80077f6:	f025 0503 	bic.w	r5, r5, #3
 80077fa:	3508      	adds	r5, #8
 80077fc:	2d0c      	cmp	r5, #12
 80077fe:	bf38      	it	cc
 8007800:	250c      	movcc	r5, #12
 8007802:	2d00      	cmp	r5, #0
 8007804:	4606      	mov	r6, r0
 8007806:	db01      	blt.n	800780c <_malloc_r+0x1c>
 8007808:	42a9      	cmp	r1, r5
 800780a:	d904      	bls.n	8007816 <_malloc_r+0x26>
 800780c:	230c      	movs	r3, #12
 800780e:	6033      	str	r3, [r6, #0]
 8007810:	2000      	movs	r0, #0
 8007812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078ec <_malloc_r+0xfc>
 800781a:	f000 f869 	bl	80078f0 <__malloc_lock>
 800781e:	f8d8 3000 	ldr.w	r3, [r8]
 8007822:	461c      	mov	r4, r3
 8007824:	bb44      	cbnz	r4, 8007878 <_malloc_r+0x88>
 8007826:	4629      	mov	r1, r5
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff ffbf 	bl	80077ac <sbrk_aligned>
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	4604      	mov	r4, r0
 8007832:	d158      	bne.n	80078e6 <_malloc_r+0xf6>
 8007834:	f8d8 4000 	ldr.w	r4, [r8]
 8007838:	4627      	mov	r7, r4
 800783a:	2f00      	cmp	r7, #0
 800783c:	d143      	bne.n	80078c6 <_malloc_r+0xd6>
 800783e:	2c00      	cmp	r4, #0
 8007840:	d04b      	beq.n	80078da <_malloc_r+0xea>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	4639      	mov	r1, r7
 8007846:	4630      	mov	r0, r6
 8007848:	eb04 0903 	add.w	r9, r4, r3
 800784c:	f001 ff98 	bl	8009780 <_sbrk_r>
 8007850:	4581      	cmp	r9, r0
 8007852:	d142      	bne.n	80078da <_malloc_r+0xea>
 8007854:	6821      	ldr	r1, [r4, #0]
 8007856:	1a6d      	subs	r5, r5, r1
 8007858:	4629      	mov	r1, r5
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff ffa6 	bl	80077ac <sbrk_aligned>
 8007860:	3001      	adds	r0, #1
 8007862:	d03a      	beq.n	80078da <_malloc_r+0xea>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	442b      	add	r3, r5
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	f8d8 3000 	ldr.w	r3, [r8]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	bb62      	cbnz	r2, 80078cc <_malloc_r+0xdc>
 8007872:	f8c8 7000 	str.w	r7, [r8]
 8007876:	e00f      	b.n	8007898 <_malloc_r+0xa8>
 8007878:	6822      	ldr	r2, [r4, #0]
 800787a:	1b52      	subs	r2, r2, r5
 800787c:	d420      	bmi.n	80078c0 <_malloc_r+0xd0>
 800787e:	2a0b      	cmp	r2, #11
 8007880:	d917      	bls.n	80078b2 <_malloc_r+0xc2>
 8007882:	1961      	adds	r1, r4, r5
 8007884:	42a3      	cmp	r3, r4
 8007886:	6025      	str	r5, [r4, #0]
 8007888:	bf18      	it	ne
 800788a:	6059      	strne	r1, [r3, #4]
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	bf08      	it	eq
 8007890:	f8c8 1000 	streq.w	r1, [r8]
 8007894:	5162      	str	r2, [r4, r5]
 8007896:	604b      	str	r3, [r1, #4]
 8007898:	4630      	mov	r0, r6
 800789a:	f000 f82f 	bl	80078fc <__malloc_unlock>
 800789e:	f104 000b 	add.w	r0, r4, #11
 80078a2:	1d23      	adds	r3, r4, #4
 80078a4:	f020 0007 	bic.w	r0, r0, #7
 80078a8:	1ac2      	subs	r2, r0, r3
 80078aa:	bf1c      	itt	ne
 80078ac:	1a1b      	subne	r3, r3, r0
 80078ae:	50a3      	strne	r3, [r4, r2]
 80078b0:	e7af      	b.n	8007812 <_malloc_r+0x22>
 80078b2:	6862      	ldr	r2, [r4, #4]
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	bf0c      	ite	eq
 80078b8:	f8c8 2000 	streq.w	r2, [r8]
 80078bc:	605a      	strne	r2, [r3, #4]
 80078be:	e7eb      	b.n	8007898 <_malloc_r+0xa8>
 80078c0:	4623      	mov	r3, r4
 80078c2:	6864      	ldr	r4, [r4, #4]
 80078c4:	e7ae      	b.n	8007824 <_malloc_r+0x34>
 80078c6:	463c      	mov	r4, r7
 80078c8:	687f      	ldr	r7, [r7, #4]
 80078ca:	e7b6      	b.n	800783a <_malloc_r+0x4a>
 80078cc:	461a      	mov	r2, r3
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	d1fb      	bne.n	80078cc <_malloc_r+0xdc>
 80078d4:	2300      	movs	r3, #0
 80078d6:	6053      	str	r3, [r2, #4]
 80078d8:	e7de      	b.n	8007898 <_malloc_r+0xa8>
 80078da:	230c      	movs	r3, #12
 80078dc:	6033      	str	r3, [r6, #0]
 80078de:	4630      	mov	r0, r6
 80078e0:	f000 f80c 	bl	80078fc <__malloc_unlock>
 80078e4:	e794      	b.n	8007810 <_malloc_r+0x20>
 80078e6:	6005      	str	r5, [r0, #0]
 80078e8:	e7d6      	b.n	8007898 <_malloc_r+0xa8>
 80078ea:	bf00      	nop
 80078ec:	20000f4c 	.word	0x20000f4c

080078f0 <__malloc_lock>:
 80078f0:	4801      	ldr	r0, [pc, #4]	@ (80078f8 <__malloc_lock+0x8>)
 80078f2:	f7ff b8b4 	b.w	8006a5e <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	20000f44 	.word	0x20000f44

080078fc <__malloc_unlock>:
 80078fc:	4801      	ldr	r0, [pc, #4]	@ (8007904 <__malloc_unlock+0x8>)
 80078fe:	f7ff b8af 	b.w	8006a60 <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	20000f44 	.word	0x20000f44

08007908 <_Balloc>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	69c6      	ldr	r6, [r0, #28]
 800790c:	4604      	mov	r4, r0
 800790e:	460d      	mov	r5, r1
 8007910:	b976      	cbnz	r6, 8007930 <_Balloc+0x28>
 8007912:	2010      	movs	r0, #16
 8007914:	f7ff ff42 	bl	800779c <malloc>
 8007918:	4602      	mov	r2, r0
 800791a:	61e0      	str	r0, [r4, #28]
 800791c:	b920      	cbnz	r0, 8007928 <_Balloc+0x20>
 800791e:	4b18      	ldr	r3, [pc, #96]	@ (8007980 <_Balloc+0x78>)
 8007920:	4818      	ldr	r0, [pc, #96]	@ (8007984 <_Balloc+0x7c>)
 8007922:	216b      	movs	r1, #107	@ 0x6b
 8007924:	f001 ff54 	bl	80097d0 <__assert_func>
 8007928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800792c:	6006      	str	r6, [r0, #0]
 800792e:	60c6      	str	r6, [r0, #12]
 8007930:	69e6      	ldr	r6, [r4, #28]
 8007932:	68f3      	ldr	r3, [r6, #12]
 8007934:	b183      	cbz	r3, 8007958 <_Balloc+0x50>
 8007936:	69e3      	ldr	r3, [r4, #28]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800793e:	b9b8      	cbnz	r0, 8007970 <_Balloc+0x68>
 8007940:	2101      	movs	r1, #1
 8007942:	fa01 f605 	lsl.w	r6, r1, r5
 8007946:	1d72      	adds	r2, r6, #5
 8007948:	0092      	lsls	r2, r2, #2
 800794a:	4620      	mov	r0, r4
 800794c:	f001 ff5e 	bl	800980c <_calloc_r>
 8007950:	b160      	cbz	r0, 800796c <_Balloc+0x64>
 8007952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007956:	e00e      	b.n	8007976 <_Balloc+0x6e>
 8007958:	2221      	movs	r2, #33	@ 0x21
 800795a:	2104      	movs	r1, #4
 800795c:	4620      	mov	r0, r4
 800795e:	f001 ff55 	bl	800980c <_calloc_r>
 8007962:	69e3      	ldr	r3, [r4, #28]
 8007964:	60f0      	str	r0, [r6, #12]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e4      	bne.n	8007936 <_Balloc+0x2e>
 800796c:	2000      	movs	r0, #0
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	6802      	ldr	r2, [r0, #0]
 8007972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007976:	2300      	movs	r3, #0
 8007978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800797c:	e7f7      	b.n	800796e <_Balloc+0x66>
 800797e:	bf00      	nop
 8007980:	0800a24e 	.word	0x0800a24e
 8007984:	0800a2ce 	.word	0x0800a2ce

08007988 <_Bfree>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	69c6      	ldr	r6, [r0, #28]
 800798c:	4605      	mov	r5, r0
 800798e:	460c      	mov	r4, r1
 8007990:	b976      	cbnz	r6, 80079b0 <_Bfree+0x28>
 8007992:	2010      	movs	r0, #16
 8007994:	f7ff ff02 	bl	800779c <malloc>
 8007998:	4602      	mov	r2, r0
 800799a:	61e8      	str	r0, [r5, #28]
 800799c:	b920      	cbnz	r0, 80079a8 <_Bfree+0x20>
 800799e:	4b09      	ldr	r3, [pc, #36]	@ (80079c4 <_Bfree+0x3c>)
 80079a0:	4809      	ldr	r0, [pc, #36]	@ (80079c8 <_Bfree+0x40>)
 80079a2:	218f      	movs	r1, #143	@ 0x8f
 80079a4:	f001 ff14 	bl	80097d0 <__assert_func>
 80079a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079ac:	6006      	str	r6, [r0, #0]
 80079ae:	60c6      	str	r6, [r0, #12]
 80079b0:	b13c      	cbz	r4, 80079c2 <_Bfree+0x3a>
 80079b2:	69eb      	ldr	r3, [r5, #28]
 80079b4:	6862      	ldr	r2, [r4, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079bc:	6021      	str	r1, [r4, #0]
 80079be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	0800a24e 	.word	0x0800a24e
 80079c8:	0800a2ce 	.word	0x0800a2ce

080079cc <__multadd>:
 80079cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d0:	690d      	ldr	r5, [r1, #16]
 80079d2:	4607      	mov	r7, r0
 80079d4:	460c      	mov	r4, r1
 80079d6:	461e      	mov	r6, r3
 80079d8:	f101 0c14 	add.w	ip, r1, #20
 80079dc:	2000      	movs	r0, #0
 80079de:	f8dc 3000 	ldr.w	r3, [ip]
 80079e2:	b299      	uxth	r1, r3
 80079e4:	fb02 6101 	mla	r1, r2, r1, r6
 80079e8:	0c1e      	lsrs	r6, r3, #16
 80079ea:	0c0b      	lsrs	r3, r1, #16
 80079ec:	fb02 3306 	mla	r3, r2, r6, r3
 80079f0:	b289      	uxth	r1, r1
 80079f2:	3001      	adds	r0, #1
 80079f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079f8:	4285      	cmp	r5, r0
 80079fa:	f84c 1b04 	str.w	r1, [ip], #4
 80079fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a02:	dcec      	bgt.n	80079de <__multadd+0x12>
 8007a04:	b30e      	cbz	r6, 8007a4a <__multadd+0x7e>
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	42ab      	cmp	r3, r5
 8007a0a:	dc19      	bgt.n	8007a40 <__multadd+0x74>
 8007a0c:	6861      	ldr	r1, [r4, #4]
 8007a0e:	4638      	mov	r0, r7
 8007a10:	3101      	adds	r1, #1
 8007a12:	f7ff ff79 	bl	8007908 <_Balloc>
 8007a16:	4680      	mov	r8, r0
 8007a18:	b928      	cbnz	r0, 8007a26 <__multadd+0x5a>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a50 <__multadd+0x84>)
 8007a1e:	480d      	ldr	r0, [pc, #52]	@ (8007a54 <__multadd+0x88>)
 8007a20:	21ba      	movs	r1, #186	@ 0xba
 8007a22:	f001 fed5 	bl	80097d0 <__assert_func>
 8007a26:	6922      	ldr	r2, [r4, #16]
 8007a28:	3202      	adds	r2, #2
 8007a2a:	f104 010c 	add.w	r1, r4, #12
 8007a2e:	0092      	lsls	r2, r2, #2
 8007a30:	300c      	adds	r0, #12
 8007a32:	f001 feb5 	bl	80097a0 <memcpy>
 8007a36:	4621      	mov	r1, r4
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff ffa5 	bl	8007988 <_Bfree>
 8007a3e:	4644      	mov	r4, r8
 8007a40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a44:	3501      	adds	r5, #1
 8007a46:	615e      	str	r6, [r3, #20]
 8007a48:	6125      	str	r5, [r4, #16]
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a50:	0800a2bd 	.word	0x0800a2bd
 8007a54:	0800a2ce 	.word	0x0800a2ce

08007a58 <__s2b>:
 8007a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	4615      	mov	r5, r2
 8007a60:	461f      	mov	r7, r3
 8007a62:	2209      	movs	r2, #9
 8007a64:	3308      	adds	r3, #8
 8007a66:	4606      	mov	r6, r0
 8007a68:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	2201      	movs	r2, #1
 8007a70:	429a      	cmp	r2, r3
 8007a72:	db09      	blt.n	8007a88 <__s2b+0x30>
 8007a74:	4630      	mov	r0, r6
 8007a76:	f7ff ff47 	bl	8007908 <_Balloc>
 8007a7a:	b940      	cbnz	r0, 8007a8e <__s2b+0x36>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	4b19      	ldr	r3, [pc, #100]	@ (8007ae4 <__s2b+0x8c>)
 8007a80:	4819      	ldr	r0, [pc, #100]	@ (8007ae8 <__s2b+0x90>)
 8007a82:	21d3      	movs	r1, #211	@ 0xd3
 8007a84:	f001 fea4 	bl	80097d0 <__assert_func>
 8007a88:	0052      	lsls	r2, r2, #1
 8007a8a:	3101      	adds	r1, #1
 8007a8c:	e7f0      	b.n	8007a70 <__s2b+0x18>
 8007a8e:	9b08      	ldr	r3, [sp, #32]
 8007a90:	6143      	str	r3, [r0, #20]
 8007a92:	2d09      	cmp	r5, #9
 8007a94:	f04f 0301 	mov.w	r3, #1
 8007a98:	6103      	str	r3, [r0, #16]
 8007a9a:	dd16      	ble.n	8007aca <__s2b+0x72>
 8007a9c:	f104 0909 	add.w	r9, r4, #9
 8007aa0:	46c8      	mov	r8, r9
 8007aa2:	442c      	add	r4, r5
 8007aa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	3b30      	subs	r3, #48	@ 0x30
 8007aac:	220a      	movs	r2, #10
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff ff8c 	bl	80079cc <__multadd>
 8007ab4:	45a0      	cmp	r8, r4
 8007ab6:	d1f5      	bne.n	8007aa4 <__s2b+0x4c>
 8007ab8:	f1a5 0408 	sub.w	r4, r5, #8
 8007abc:	444c      	add	r4, r9
 8007abe:	1b2d      	subs	r5, r5, r4
 8007ac0:	1963      	adds	r3, r4, r5
 8007ac2:	42bb      	cmp	r3, r7
 8007ac4:	db04      	blt.n	8007ad0 <__s2b+0x78>
 8007ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aca:	340a      	adds	r4, #10
 8007acc:	2509      	movs	r5, #9
 8007ace:	e7f6      	b.n	8007abe <__s2b+0x66>
 8007ad0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ad4:	4601      	mov	r1, r0
 8007ad6:	3b30      	subs	r3, #48	@ 0x30
 8007ad8:	220a      	movs	r2, #10
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ff76 	bl	80079cc <__multadd>
 8007ae0:	e7ee      	b.n	8007ac0 <__s2b+0x68>
 8007ae2:	bf00      	nop
 8007ae4:	0800a2bd 	.word	0x0800a2bd
 8007ae8:	0800a2ce 	.word	0x0800a2ce

08007aec <__hi0bits>:
 8007aec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007af0:	4603      	mov	r3, r0
 8007af2:	bf36      	itet	cc
 8007af4:	0403      	lslcc	r3, r0, #16
 8007af6:	2000      	movcs	r0, #0
 8007af8:	2010      	movcc	r0, #16
 8007afa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007afe:	bf3c      	itt	cc
 8007b00:	021b      	lslcc	r3, r3, #8
 8007b02:	3008      	addcc	r0, #8
 8007b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b08:	bf3c      	itt	cc
 8007b0a:	011b      	lslcc	r3, r3, #4
 8007b0c:	3004      	addcc	r0, #4
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b12:	bf3c      	itt	cc
 8007b14:	009b      	lslcc	r3, r3, #2
 8007b16:	3002      	addcc	r0, #2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	db05      	blt.n	8007b28 <__hi0bits+0x3c>
 8007b1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b20:	f100 0001 	add.w	r0, r0, #1
 8007b24:	bf08      	it	eq
 8007b26:	2020      	moveq	r0, #32
 8007b28:	4770      	bx	lr

08007b2a <__lo0bits>:
 8007b2a:	6803      	ldr	r3, [r0, #0]
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	f013 0007 	ands.w	r0, r3, #7
 8007b32:	d00b      	beq.n	8007b4c <__lo0bits+0x22>
 8007b34:	07d9      	lsls	r1, r3, #31
 8007b36:	d421      	bmi.n	8007b7c <__lo0bits+0x52>
 8007b38:	0798      	lsls	r0, r3, #30
 8007b3a:	bf49      	itett	mi
 8007b3c:	085b      	lsrmi	r3, r3, #1
 8007b3e:	089b      	lsrpl	r3, r3, #2
 8007b40:	2001      	movmi	r0, #1
 8007b42:	6013      	strmi	r3, [r2, #0]
 8007b44:	bf5c      	itt	pl
 8007b46:	6013      	strpl	r3, [r2, #0]
 8007b48:	2002      	movpl	r0, #2
 8007b4a:	4770      	bx	lr
 8007b4c:	b299      	uxth	r1, r3
 8007b4e:	b909      	cbnz	r1, 8007b54 <__lo0bits+0x2a>
 8007b50:	0c1b      	lsrs	r3, r3, #16
 8007b52:	2010      	movs	r0, #16
 8007b54:	b2d9      	uxtb	r1, r3
 8007b56:	b909      	cbnz	r1, 8007b5c <__lo0bits+0x32>
 8007b58:	3008      	adds	r0, #8
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	0719      	lsls	r1, r3, #28
 8007b5e:	bf04      	itt	eq
 8007b60:	091b      	lsreq	r3, r3, #4
 8007b62:	3004      	addeq	r0, #4
 8007b64:	0799      	lsls	r1, r3, #30
 8007b66:	bf04      	itt	eq
 8007b68:	089b      	lsreq	r3, r3, #2
 8007b6a:	3002      	addeq	r0, #2
 8007b6c:	07d9      	lsls	r1, r3, #31
 8007b6e:	d403      	bmi.n	8007b78 <__lo0bits+0x4e>
 8007b70:	085b      	lsrs	r3, r3, #1
 8007b72:	f100 0001 	add.w	r0, r0, #1
 8007b76:	d003      	beq.n	8007b80 <__lo0bits+0x56>
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	4770      	bx	lr
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	4770      	bx	lr
 8007b80:	2020      	movs	r0, #32
 8007b82:	4770      	bx	lr

08007b84 <__i2b>:
 8007b84:	b510      	push	{r4, lr}
 8007b86:	460c      	mov	r4, r1
 8007b88:	2101      	movs	r1, #1
 8007b8a:	f7ff febd 	bl	8007908 <_Balloc>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	b928      	cbnz	r0, 8007b9e <__i2b+0x1a>
 8007b92:	4b05      	ldr	r3, [pc, #20]	@ (8007ba8 <__i2b+0x24>)
 8007b94:	4805      	ldr	r0, [pc, #20]	@ (8007bac <__i2b+0x28>)
 8007b96:	f240 1145 	movw	r1, #325	@ 0x145
 8007b9a:	f001 fe19 	bl	80097d0 <__assert_func>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	6144      	str	r4, [r0, #20]
 8007ba2:	6103      	str	r3, [r0, #16]
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	bf00      	nop
 8007ba8:	0800a2bd 	.word	0x0800a2bd
 8007bac:	0800a2ce 	.word	0x0800a2ce

08007bb0 <__multiply>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	690a      	ldr	r2, [r1, #16]
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	bfa8      	it	ge
 8007bbe:	4623      	movge	r3, r4
 8007bc0:	460f      	mov	r7, r1
 8007bc2:	bfa4      	itt	ge
 8007bc4:	460c      	movge	r4, r1
 8007bc6:	461f      	movge	r7, r3
 8007bc8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007bcc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007bd0:	68a3      	ldr	r3, [r4, #8]
 8007bd2:	6861      	ldr	r1, [r4, #4]
 8007bd4:	eb0a 0609 	add.w	r6, sl, r9
 8007bd8:	42b3      	cmp	r3, r6
 8007bda:	b085      	sub	sp, #20
 8007bdc:	bfb8      	it	lt
 8007bde:	3101      	addlt	r1, #1
 8007be0:	f7ff fe92 	bl	8007908 <_Balloc>
 8007be4:	b930      	cbnz	r0, 8007bf4 <__multiply+0x44>
 8007be6:	4602      	mov	r2, r0
 8007be8:	4b44      	ldr	r3, [pc, #272]	@ (8007cfc <__multiply+0x14c>)
 8007bea:	4845      	ldr	r0, [pc, #276]	@ (8007d00 <__multiply+0x150>)
 8007bec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007bf0:	f001 fdee 	bl	80097d0 <__assert_func>
 8007bf4:	f100 0514 	add.w	r5, r0, #20
 8007bf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4543      	cmp	r3, r8
 8007c02:	d321      	bcc.n	8007c48 <__multiply+0x98>
 8007c04:	f107 0114 	add.w	r1, r7, #20
 8007c08:	f104 0214 	add.w	r2, r4, #20
 8007c0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	1b13      	subs	r3, r2, r4
 8007c18:	3b15      	subs	r3, #21
 8007c1a:	f023 0303 	bic.w	r3, r3, #3
 8007c1e:	3304      	adds	r3, #4
 8007c20:	f104 0715 	add.w	r7, r4, #21
 8007c24:	42ba      	cmp	r2, r7
 8007c26:	bf38      	it	cc
 8007c28:	2304      	movcc	r3, #4
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	9b02      	ldr	r3, [sp, #8]
 8007c2e:	9103      	str	r1, [sp, #12]
 8007c30:	428b      	cmp	r3, r1
 8007c32:	d80c      	bhi.n	8007c4e <__multiply+0x9e>
 8007c34:	2e00      	cmp	r6, #0
 8007c36:	dd03      	ble.n	8007c40 <__multiply+0x90>
 8007c38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d05b      	beq.n	8007cf8 <__multiply+0x148>
 8007c40:	6106      	str	r6, [r0, #16]
 8007c42:	b005      	add	sp, #20
 8007c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c48:	f843 2b04 	str.w	r2, [r3], #4
 8007c4c:	e7d8      	b.n	8007c00 <__multiply+0x50>
 8007c4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c52:	f1ba 0f00 	cmp.w	sl, #0
 8007c56:	d024      	beq.n	8007ca2 <__multiply+0xf2>
 8007c58:	f104 0e14 	add.w	lr, r4, #20
 8007c5c:	46a9      	mov	r9, r5
 8007c5e:	f04f 0c00 	mov.w	ip, #0
 8007c62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c66:	f8d9 3000 	ldr.w	r3, [r9]
 8007c6a:	fa1f fb87 	uxth.w	fp, r7
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007c78:	f8d9 7000 	ldr.w	r7, [r9]
 8007c7c:	4463      	add	r3, ip
 8007c7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c82:	fb0a c70b 	mla	r7, sl, fp, ip
 8007c86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c90:	4572      	cmp	r2, lr
 8007c92:	f849 3b04 	str.w	r3, [r9], #4
 8007c96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c9a:	d8e2      	bhi.n	8007c62 <__multiply+0xb2>
 8007c9c:	9b01      	ldr	r3, [sp, #4]
 8007c9e:	f845 c003 	str.w	ip, [r5, r3]
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ca8:	3104      	adds	r1, #4
 8007caa:	f1b9 0f00 	cmp.w	r9, #0
 8007cae:	d021      	beq.n	8007cf4 <__multiply+0x144>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	f104 0c14 	add.w	ip, r4, #20
 8007cb6:	46ae      	mov	lr, r5
 8007cb8:	f04f 0a00 	mov.w	sl, #0
 8007cbc:	f8bc b000 	ldrh.w	fp, [ip]
 8007cc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007cc4:	fb09 770b 	mla	r7, r9, fp, r7
 8007cc8:	4457      	add	r7, sl
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cd0:	f84e 3b04 	str.w	r3, [lr], #4
 8007cd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cdc:	f8be 3000 	ldrh.w	r3, [lr]
 8007ce0:	fb09 330a 	mla	r3, r9, sl, r3
 8007ce4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ce8:	4562      	cmp	r2, ip
 8007cea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cee:	d8e5      	bhi.n	8007cbc <__multiply+0x10c>
 8007cf0:	9f01      	ldr	r7, [sp, #4]
 8007cf2:	51eb      	str	r3, [r5, r7]
 8007cf4:	3504      	adds	r5, #4
 8007cf6:	e799      	b.n	8007c2c <__multiply+0x7c>
 8007cf8:	3e01      	subs	r6, #1
 8007cfa:	e79b      	b.n	8007c34 <__multiply+0x84>
 8007cfc:	0800a2bd 	.word	0x0800a2bd
 8007d00:	0800a2ce 	.word	0x0800a2ce

08007d04 <__pow5mult>:
 8007d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d08:	4615      	mov	r5, r2
 8007d0a:	f012 0203 	ands.w	r2, r2, #3
 8007d0e:	4607      	mov	r7, r0
 8007d10:	460e      	mov	r6, r1
 8007d12:	d007      	beq.n	8007d24 <__pow5mult+0x20>
 8007d14:	4c25      	ldr	r4, [pc, #148]	@ (8007dac <__pow5mult+0xa8>)
 8007d16:	3a01      	subs	r2, #1
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d1e:	f7ff fe55 	bl	80079cc <__multadd>
 8007d22:	4606      	mov	r6, r0
 8007d24:	10ad      	asrs	r5, r5, #2
 8007d26:	d03d      	beq.n	8007da4 <__pow5mult+0xa0>
 8007d28:	69fc      	ldr	r4, [r7, #28]
 8007d2a:	b97c      	cbnz	r4, 8007d4c <__pow5mult+0x48>
 8007d2c:	2010      	movs	r0, #16
 8007d2e:	f7ff fd35 	bl	800779c <malloc>
 8007d32:	4602      	mov	r2, r0
 8007d34:	61f8      	str	r0, [r7, #28]
 8007d36:	b928      	cbnz	r0, 8007d44 <__pow5mult+0x40>
 8007d38:	4b1d      	ldr	r3, [pc, #116]	@ (8007db0 <__pow5mult+0xac>)
 8007d3a:	481e      	ldr	r0, [pc, #120]	@ (8007db4 <__pow5mult+0xb0>)
 8007d3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d40:	f001 fd46 	bl	80097d0 <__assert_func>
 8007d44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d48:	6004      	str	r4, [r0, #0]
 8007d4a:	60c4      	str	r4, [r0, #12]
 8007d4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d54:	b94c      	cbnz	r4, 8007d6a <__pow5mult+0x66>
 8007d56:	f240 2171 	movw	r1, #625	@ 0x271
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f7ff ff12 	bl	8007b84 <__i2b>
 8007d60:	2300      	movs	r3, #0
 8007d62:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d66:	4604      	mov	r4, r0
 8007d68:	6003      	str	r3, [r0, #0]
 8007d6a:	f04f 0900 	mov.w	r9, #0
 8007d6e:	07eb      	lsls	r3, r5, #31
 8007d70:	d50a      	bpl.n	8007d88 <__pow5mult+0x84>
 8007d72:	4631      	mov	r1, r6
 8007d74:	4622      	mov	r2, r4
 8007d76:	4638      	mov	r0, r7
 8007d78:	f7ff ff1a 	bl	8007bb0 <__multiply>
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4680      	mov	r8, r0
 8007d80:	4638      	mov	r0, r7
 8007d82:	f7ff fe01 	bl	8007988 <_Bfree>
 8007d86:	4646      	mov	r6, r8
 8007d88:	106d      	asrs	r5, r5, #1
 8007d8a:	d00b      	beq.n	8007da4 <__pow5mult+0xa0>
 8007d8c:	6820      	ldr	r0, [r4, #0]
 8007d8e:	b938      	cbnz	r0, 8007da0 <__pow5mult+0x9c>
 8007d90:	4622      	mov	r2, r4
 8007d92:	4621      	mov	r1, r4
 8007d94:	4638      	mov	r0, r7
 8007d96:	f7ff ff0b 	bl	8007bb0 <__multiply>
 8007d9a:	6020      	str	r0, [r4, #0]
 8007d9c:	f8c0 9000 	str.w	r9, [r0]
 8007da0:	4604      	mov	r4, r0
 8007da2:	e7e4      	b.n	8007d6e <__pow5mult+0x6a>
 8007da4:	4630      	mov	r0, r6
 8007da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007daa:	bf00      	nop
 8007dac:	0800a328 	.word	0x0800a328
 8007db0:	0800a24e 	.word	0x0800a24e
 8007db4:	0800a2ce 	.word	0x0800a2ce

08007db8 <__lshift>:
 8007db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	6849      	ldr	r1, [r1, #4]
 8007dc0:	6923      	ldr	r3, [r4, #16]
 8007dc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dc6:	68a3      	ldr	r3, [r4, #8]
 8007dc8:	4607      	mov	r7, r0
 8007dca:	4691      	mov	r9, r2
 8007dcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007dd0:	f108 0601 	add.w	r6, r8, #1
 8007dd4:	42b3      	cmp	r3, r6
 8007dd6:	db0b      	blt.n	8007df0 <__lshift+0x38>
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff fd95 	bl	8007908 <_Balloc>
 8007dde:	4605      	mov	r5, r0
 8007de0:	b948      	cbnz	r0, 8007df6 <__lshift+0x3e>
 8007de2:	4602      	mov	r2, r0
 8007de4:	4b28      	ldr	r3, [pc, #160]	@ (8007e88 <__lshift+0xd0>)
 8007de6:	4829      	ldr	r0, [pc, #164]	@ (8007e8c <__lshift+0xd4>)
 8007de8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007dec:	f001 fcf0 	bl	80097d0 <__assert_func>
 8007df0:	3101      	adds	r1, #1
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	e7ee      	b.n	8007dd4 <__lshift+0x1c>
 8007df6:	2300      	movs	r3, #0
 8007df8:	f100 0114 	add.w	r1, r0, #20
 8007dfc:	f100 0210 	add.w	r2, r0, #16
 8007e00:	4618      	mov	r0, r3
 8007e02:	4553      	cmp	r3, sl
 8007e04:	db33      	blt.n	8007e6e <__lshift+0xb6>
 8007e06:	6920      	ldr	r0, [r4, #16]
 8007e08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e0c:	f104 0314 	add.w	r3, r4, #20
 8007e10:	f019 091f 	ands.w	r9, r9, #31
 8007e14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e1c:	d02b      	beq.n	8007e76 <__lshift+0xbe>
 8007e1e:	f1c9 0e20 	rsb	lr, r9, #32
 8007e22:	468a      	mov	sl, r1
 8007e24:	2200      	movs	r2, #0
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	fa00 f009 	lsl.w	r0, r0, r9
 8007e2c:	4310      	orrs	r0, r2
 8007e2e:	f84a 0b04 	str.w	r0, [sl], #4
 8007e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e36:	459c      	cmp	ip, r3
 8007e38:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e3c:	d8f3      	bhi.n	8007e26 <__lshift+0x6e>
 8007e3e:	ebac 0304 	sub.w	r3, ip, r4
 8007e42:	3b15      	subs	r3, #21
 8007e44:	f023 0303 	bic.w	r3, r3, #3
 8007e48:	3304      	adds	r3, #4
 8007e4a:	f104 0015 	add.w	r0, r4, #21
 8007e4e:	4584      	cmp	ip, r0
 8007e50:	bf38      	it	cc
 8007e52:	2304      	movcc	r3, #4
 8007e54:	50ca      	str	r2, [r1, r3]
 8007e56:	b10a      	cbz	r2, 8007e5c <__lshift+0xa4>
 8007e58:	f108 0602 	add.w	r6, r8, #2
 8007e5c:	3e01      	subs	r6, #1
 8007e5e:	4638      	mov	r0, r7
 8007e60:	612e      	str	r6, [r5, #16]
 8007e62:	4621      	mov	r1, r4
 8007e64:	f7ff fd90 	bl	8007988 <_Bfree>
 8007e68:	4628      	mov	r0, r5
 8007e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e72:	3301      	adds	r3, #1
 8007e74:	e7c5      	b.n	8007e02 <__lshift+0x4a>
 8007e76:	3904      	subs	r1, #4
 8007e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e80:	459c      	cmp	ip, r3
 8007e82:	d8f9      	bhi.n	8007e78 <__lshift+0xc0>
 8007e84:	e7ea      	b.n	8007e5c <__lshift+0xa4>
 8007e86:	bf00      	nop
 8007e88:	0800a2bd 	.word	0x0800a2bd
 8007e8c:	0800a2ce 	.word	0x0800a2ce

08007e90 <__mcmp>:
 8007e90:	690a      	ldr	r2, [r1, #16]
 8007e92:	4603      	mov	r3, r0
 8007e94:	6900      	ldr	r0, [r0, #16]
 8007e96:	1a80      	subs	r0, r0, r2
 8007e98:	b530      	push	{r4, r5, lr}
 8007e9a:	d10e      	bne.n	8007eba <__mcmp+0x2a>
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	3114      	adds	r1, #20
 8007ea0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ea4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ea8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007eac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007eb0:	4295      	cmp	r5, r2
 8007eb2:	d003      	beq.n	8007ebc <__mcmp+0x2c>
 8007eb4:	d205      	bcs.n	8007ec2 <__mcmp+0x32>
 8007eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eba:	bd30      	pop	{r4, r5, pc}
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d3f3      	bcc.n	8007ea8 <__mcmp+0x18>
 8007ec0:	e7fb      	b.n	8007eba <__mcmp+0x2a>
 8007ec2:	2001      	movs	r0, #1
 8007ec4:	e7f9      	b.n	8007eba <__mcmp+0x2a>
	...

08007ec8 <__mdiff>:
 8007ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	4689      	mov	r9, r1
 8007ece:	4606      	mov	r6, r0
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	4648      	mov	r0, r9
 8007ed4:	4614      	mov	r4, r2
 8007ed6:	f7ff ffdb 	bl	8007e90 <__mcmp>
 8007eda:	1e05      	subs	r5, r0, #0
 8007edc:	d112      	bne.n	8007f04 <__mdiff+0x3c>
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7ff fd11 	bl	8007908 <_Balloc>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	b928      	cbnz	r0, 8007ef6 <__mdiff+0x2e>
 8007eea:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe8 <__mdiff+0x120>)
 8007eec:	f240 2137 	movw	r1, #567	@ 0x237
 8007ef0:	483e      	ldr	r0, [pc, #248]	@ (8007fec <__mdiff+0x124>)
 8007ef2:	f001 fc6d 	bl	80097d0 <__assert_func>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007efc:	4610      	mov	r0, r2
 8007efe:	b003      	add	sp, #12
 8007f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f04:	bfbc      	itt	lt
 8007f06:	464b      	movlt	r3, r9
 8007f08:	46a1      	movlt	r9, r4
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f10:	bfba      	itte	lt
 8007f12:	461c      	movlt	r4, r3
 8007f14:	2501      	movlt	r5, #1
 8007f16:	2500      	movge	r5, #0
 8007f18:	f7ff fcf6 	bl	8007908 <_Balloc>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	b918      	cbnz	r0, 8007f28 <__mdiff+0x60>
 8007f20:	4b31      	ldr	r3, [pc, #196]	@ (8007fe8 <__mdiff+0x120>)
 8007f22:	f240 2145 	movw	r1, #581	@ 0x245
 8007f26:	e7e3      	b.n	8007ef0 <__mdiff+0x28>
 8007f28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f2c:	6926      	ldr	r6, [r4, #16]
 8007f2e:	60c5      	str	r5, [r0, #12]
 8007f30:	f109 0310 	add.w	r3, r9, #16
 8007f34:	f109 0514 	add.w	r5, r9, #20
 8007f38:	f104 0e14 	add.w	lr, r4, #20
 8007f3c:	f100 0b14 	add.w	fp, r0, #20
 8007f40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	46d9      	mov	r9, fp
 8007f4c:	f04f 0c00 	mov.w	ip, #0
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	fa1f f38a 	uxth.w	r3, sl
 8007f60:	4619      	mov	r1, r3
 8007f62:	b283      	uxth	r3, r0
 8007f64:	1acb      	subs	r3, r1, r3
 8007f66:	0c00      	lsrs	r0, r0, #16
 8007f68:	4463      	add	r3, ip
 8007f6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f78:	4576      	cmp	r6, lr
 8007f7a:	f849 3b04 	str.w	r3, [r9], #4
 8007f7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f82:	d8e5      	bhi.n	8007f50 <__mdiff+0x88>
 8007f84:	1b33      	subs	r3, r6, r4
 8007f86:	3b15      	subs	r3, #21
 8007f88:	f023 0303 	bic.w	r3, r3, #3
 8007f8c:	3415      	adds	r4, #21
 8007f8e:	3304      	adds	r3, #4
 8007f90:	42a6      	cmp	r6, r4
 8007f92:	bf38      	it	cc
 8007f94:	2304      	movcc	r3, #4
 8007f96:	441d      	add	r5, r3
 8007f98:	445b      	add	r3, fp
 8007f9a:	461e      	mov	r6, r3
 8007f9c:	462c      	mov	r4, r5
 8007f9e:	4544      	cmp	r4, r8
 8007fa0:	d30e      	bcc.n	8007fc0 <__mdiff+0xf8>
 8007fa2:	f108 0103 	add.w	r1, r8, #3
 8007fa6:	1b49      	subs	r1, r1, r5
 8007fa8:	f021 0103 	bic.w	r1, r1, #3
 8007fac:	3d03      	subs	r5, #3
 8007fae:	45a8      	cmp	r8, r5
 8007fb0:	bf38      	it	cc
 8007fb2:	2100      	movcc	r1, #0
 8007fb4:	440b      	add	r3, r1
 8007fb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fba:	b191      	cbz	r1, 8007fe2 <__mdiff+0x11a>
 8007fbc:	6117      	str	r7, [r2, #16]
 8007fbe:	e79d      	b.n	8007efc <__mdiff+0x34>
 8007fc0:	f854 1b04 	ldr.w	r1, [r4], #4
 8007fc4:	46e6      	mov	lr, ip
 8007fc6:	0c08      	lsrs	r0, r1, #16
 8007fc8:	fa1c fc81 	uxtah	ip, ip, r1
 8007fcc:	4471      	add	r1, lr
 8007fce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007fd2:	b289      	uxth	r1, r1
 8007fd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007fd8:	f846 1b04 	str.w	r1, [r6], #4
 8007fdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fe0:	e7dd      	b.n	8007f9e <__mdiff+0xd6>
 8007fe2:	3f01      	subs	r7, #1
 8007fe4:	e7e7      	b.n	8007fb6 <__mdiff+0xee>
 8007fe6:	bf00      	nop
 8007fe8:	0800a2bd 	.word	0x0800a2bd
 8007fec:	0800a2ce 	.word	0x0800a2ce

08007ff0 <__ulp>:
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	ed8d 0b00 	vstr	d0, [sp]
 8007ff6:	9a01      	ldr	r2, [sp, #4]
 8007ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8008038 <__ulp+0x48>)
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008000:	2b00      	cmp	r3, #0
 8008002:	dc08      	bgt.n	8008016 <__ulp+0x26>
 8008004:	425b      	negs	r3, r3
 8008006:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800800a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800800e:	da04      	bge.n	800801a <__ulp+0x2a>
 8008010:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008014:	4113      	asrs	r3, r2
 8008016:	2200      	movs	r2, #0
 8008018:	e008      	b.n	800802c <__ulp+0x3c>
 800801a:	f1a2 0314 	sub.w	r3, r2, #20
 800801e:	2b1e      	cmp	r3, #30
 8008020:	bfda      	itte	le
 8008022:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008026:	40da      	lsrle	r2, r3
 8008028:	2201      	movgt	r2, #1
 800802a:	2300      	movs	r3, #0
 800802c:	4619      	mov	r1, r3
 800802e:	4610      	mov	r0, r2
 8008030:	ec41 0b10 	vmov	d0, r0, r1
 8008034:	b002      	add	sp, #8
 8008036:	4770      	bx	lr
 8008038:	7ff00000 	.word	0x7ff00000

0800803c <__b2d>:
 800803c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008040:	6906      	ldr	r6, [r0, #16]
 8008042:	f100 0814 	add.w	r8, r0, #20
 8008046:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800804a:	1f37      	subs	r7, r6, #4
 800804c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008050:	4610      	mov	r0, r2
 8008052:	f7ff fd4b 	bl	8007aec <__hi0bits>
 8008056:	f1c0 0320 	rsb	r3, r0, #32
 800805a:	280a      	cmp	r0, #10
 800805c:	600b      	str	r3, [r1, #0]
 800805e:	491b      	ldr	r1, [pc, #108]	@ (80080cc <__b2d+0x90>)
 8008060:	dc15      	bgt.n	800808e <__b2d+0x52>
 8008062:	f1c0 0c0b 	rsb	ip, r0, #11
 8008066:	fa22 f30c 	lsr.w	r3, r2, ip
 800806a:	45b8      	cmp	r8, r7
 800806c:	ea43 0501 	orr.w	r5, r3, r1
 8008070:	bf34      	ite	cc
 8008072:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008076:	2300      	movcs	r3, #0
 8008078:	3015      	adds	r0, #21
 800807a:	fa02 f000 	lsl.w	r0, r2, r0
 800807e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008082:	4303      	orrs	r3, r0
 8008084:	461c      	mov	r4, r3
 8008086:	ec45 4b10 	vmov	d0, r4, r5
 800808a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800808e:	45b8      	cmp	r8, r7
 8008090:	bf3a      	itte	cc
 8008092:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008096:	f1a6 0708 	subcc.w	r7, r6, #8
 800809a:	2300      	movcs	r3, #0
 800809c:	380b      	subs	r0, #11
 800809e:	d012      	beq.n	80080c6 <__b2d+0x8a>
 80080a0:	f1c0 0120 	rsb	r1, r0, #32
 80080a4:	fa23 f401 	lsr.w	r4, r3, r1
 80080a8:	4082      	lsls	r2, r0
 80080aa:	4322      	orrs	r2, r4
 80080ac:	4547      	cmp	r7, r8
 80080ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80080b2:	bf8c      	ite	hi
 80080b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80080b8:	2200      	movls	r2, #0
 80080ba:	4083      	lsls	r3, r0
 80080bc:	40ca      	lsrs	r2, r1
 80080be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80080c2:	4313      	orrs	r3, r2
 80080c4:	e7de      	b.n	8008084 <__b2d+0x48>
 80080c6:	ea42 0501 	orr.w	r5, r2, r1
 80080ca:	e7db      	b.n	8008084 <__b2d+0x48>
 80080cc:	3ff00000 	.word	0x3ff00000

080080d0 <__d2b>:
 80080d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080d4:	460f      	mov	r7, r1
 80080d6:	2101      	movs	r1, #1
 80080d8:	ec59 8b10 	vmov	r8, r9, d0
 80080dc:	4616      	mov	r6, r2
 80080de:	f7ff fc13 	bl	8007908 <_Balloc>
 80080e2:	4604      	mov	r4, r0
 80080e4:	b930      	cbnz	r0, 80080f4 <__d2b+0x24>
 80080e6:	4602      	mov	r2, r0
 80080e8:	4b23      	ldr	r3, [pc, #140]	@ (8008178 <__d2b+0xa8>)
 80080ea:	4824      	ldr	r0, [pc, #144]	@ (800817c <__d2b+0xac>)
 80080ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80080f0:	f001 fb6e 	bl	80097d0 <__assert_func>
 80080f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080fc:	b10d      	cbz	r5, 8008102 <__d2b+0x32>
 80080fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	f1b8 0300 	subs.w	r3, r8, #0
 8008108:	d023      	beq.n	8008152 <__d2b+0x82>
 800810a:	4668      	mov	r0, sp
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	f7ff fd0c 	bl	8007b2a <__lo0bits>
 8008112:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008116:	b1d0      	cbz	r0, 800814e <__d2b+0x7e>
 8008118:	f1c0 0320 	rsb	r3, r0, #32
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	430b      	orrs	r3, r1
 8008122:	40c2      	lsrs	r2, r0
 8008124:	6163      	str	r3, [r4, #20]
 8008126:	9201      	str	r2, [sp, #4]
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	61a3      	str	r3, [r4, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	bf0c      	ite	eq
 8008130:	2201      	moveq	r2, #1
 8008132:	2202      	movne	r2, #2
 8008134:	6122      	str	r2, [r4, #16]
 8008136:	b1a5      	cbz	r5, 8008162 <__d2b+0x92>
 8008138:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800813c:	4405      	add	r5, r0
 800813e:	603d      	str	r5, [r7, #0]
 8008140:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008144:	6030      	str	r0, [r6, #0]
 8008146:	4620      	mov	r0, r4
 8008148:	b003      	add	sp, #12
 800814a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800814e:	6161      	str	r1, [r4, #20]
 8008150:	e7ea      	b.n	8008128 <__d2b+0x58>
 8008152:	a801      	add	r0, sp, #4
 8008154:	f7ff fce9 	bl	8007b2a <__lo0bits>
 8008158:	9b01      	ldr	r3, [sp, #4]
 800815a:	6163      	str	r3, [r4, #20]
 800815c:	3020      	adds	r0, #32
 800815e:	2201      	movs	r2, #1
 8008160:	e7e8      	b.n	8008134 <__d2b+0x64>
 8008162:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008166:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800816a:	6038      	str	r0, [r7, #0]
 800816c:	6918      	ldr	r0, [r3, #16]
 800816e:	f7ff fcbd 	bl	8007aec <__hi0bits>
 8008172:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008176:	e7e5      	b.n	8008144 <__d2b+0x74>
 8008178:	0800a2bd 	.word	0x0800a2bd
 800817c:	0800a2ce 	.word	0x0800a2ce

08008180 <__ratio>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	b085      	sub	sp, #20
 8008186:	e9cd 1000 	strd	r1, r0, [sp]
 800818a:	a902      	add	r1, sp, #8
 800818c:	f7ff ff56 	bl	800803c <__b2d>
 8008190:	9800      	ldr	r0, [sp, #0]
 8008192:	a903      	add	r1, sp, #12
 8008194:	ec55 4b10 	vmov	r4, r5, d0
 8008198:	f7ff ff50 	bl	800803c <__b2d>
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	6919      	ldr	r1, [r3, #16]
 80081a0:	9b00      	ldr	r3, [sp, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	1ac9      	subs	r1, r1, r3
 80081a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80081aa:	1a9b      	subs	r3, r3, r2
 80081ac:	ec5b ab10 	vmov	sl, fp, d0
 80081b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	bfce      	itee	gt
 80081b8:	462a      	movgt	r2, r5
 80081ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80081be:	465a      	movle	r2, fp
 80081c0:	462f      	mov	r7, r5
 80081c2:	46d9      	mov	r9, fp
 80081c4:	bfcc      	ite	gt
 80081c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80081ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80081ce:	464b      	mov	r3, r9
 80081d0:	4652      	mov	r2, sl
 80081d2:	4620      	mov	r0, r4
 80081d4:	4639      	mov	r1, r7
 80081d6:	f7f8 fb39 	bl	800084c <__aeabi_ddiv>
 80081da:	ec41 0b10 	vmov	d0, r0, r1
 80081de:	b005      	add	sp, #20
 80081e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081e4 <__copybits>:
 80081e4:	3901      	subs	r1, #1
 80081e6:	b570      	push	{r4, r5, r6, lr}
 80081e8:	1149      	asrs	r1, r1, #5
 80081ea:	6914      	ldr	r4, [r2, #16]
 80081ec:	3101      	adds	r1, #1
 80081ee:	f102 0314 	add.w	r3, r2, #20
 80081f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081fa:	1f05      	subs	r5, r0, #4
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	d30c      	bcc.n	800821a <__copybits+0x36>
 8008200:	1aa3      	subs	r3, r4, r2
 8008202:	3b11      	subs	r3, #17
 8008204:	f023 0303 	bic.w	r3, r3, #3
 8008208:	3211      	adds	r2, #17
 800820a:	42a2      	cmp	r2, r4
 800820c:	bf88      	it	hi
 800820e:	2300      	movhi	r3, #0
 8008210:	4418      	add	r0, r3
 8008212:	2300      	movs	r3, #0
 8008214:	4288      	cmp	r0, r1
 8008216:	d305      	bcc.n	8008224 <__copybits+0x40>
 8008218:	bd70      	pop	{r4, r5, r6, pc}
 800821a:	f853 6b04 	ldr.w	r6, [r3], #4
 800821e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008222:	e7eb      	b.n	80081fc <__copybits+0x18>
 8008224:	f840 3b04 	str.w	r3, [r0], #4
 8008228:	e7f4      	b.n	8008214 <__copybits+0x30>

0800822a <__any_on>:
 800822a:	f100 0214 	add.w	r2, r0, #20
 800822e:	6900      	ldr	r0, [r0, #16]
 8008230:	114b      	asrs	r3, r1, #5
 8008232:	4298      	cmp	r0, r3
 8008234:	b510      	push	{r4, lr}
 8008236:	db11      	blt.n	800825c <__any_on+0x32>
 8008238:	dd0a      	ble.n	8008250 <__any_on+0x26>
 800823a:	f011 011f 	ands.w	r1, r1, #31
 800823e:	d007      	beq.n	8008250 <__any_on+0x26>
 8008240:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008244:	fa24 f001 	lsr.w	r0, r4, r1
 8008248:	fa00 f101 	lsl.w	r1, r0, r1
 800824c:	428c      	cmp	r4, r1
 800824e:	d10b      	bne.n	8008268 <__any_on+0x3e>
 8008250:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008254:	4293      	cmp	r3, r2
 8008256:	d803      	bhi.n	8008260 <__any_on+0x36>
 8008258:	2000      	movs	r0, #0
 800825a:	bd10      	pop	{r4, pc}
 800825c:	4603      	mov	r3, r0
 800825e:	e7f7      	b.n	8008250 <__any_on+0x26>
 8008260:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008264:	2900      	cmp	r1, #0
 8008266:	d0f5      	beq.n	8008254 <__any_on+0x2a>
 8008268:	2001      	movs	r0, #1
 800826a:	e7f6      	b.n	800825a <__any_on+0x30>

0800826c <sulp>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	4604      	mov	r4, r0
 8008270:	460d      	mov	r5, r1
 8008272:	ec45 4b10 	vmov	d0, r4, r5
 8008276:	4616      	mov	r6, r2
 8008278:	f7ff feba 	bl	8007ff0 <__ulp>
 800827c:	ec51 0b10 	vmov	r0, r1, d0
 8008280:	b17e      	cbz	r6, 80082a2 <sulp+0x36>
 8008282:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008286:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800828a:	2b00      	cmp	r3, #0
 800828c:	dd09      	ble.n	80082a2 <sulp+0x36>
 800828e:	051b      	lsls	r3, r3, #20
 8008290:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008294:	2400      	movs	r4, #0
 8008296:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800829a:	4622      	mov	r2, r4
 800829c:	462b      	mov	r3, r5
 800829e:	f7f8 f9ab 	bl	80005f8 <__aeabi_dmul>
 80082a2:	ec41 0b10 	vmov	d0, r0, r1
 80082a6:	bd70      	pop	{r4, r5, r6, pc}

080082a8 <_strtod_l>:
 80082a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	b09f      	sub	sp, #124	@ 0x7c
 80082ae:	460c      	mov	r4, r1
 80082b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80082b2:	2200      	movs	r2, #0
 80082b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80082b6:	9005      	str	r0, [sp, #20]
 80082b8:	f04f 0a00 	mov.w	sl, #0
 80082bc:	f04f 0b00 	mov.w	fp, #0
 80082c0:	460a      	mov	r2, r1
 80082c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80082c4:	7811      	ldrb	r1, [r2, #0]
 80082c6:	292b      	cmp	r1, #43	@ 0x2b
 80082c8:	d04a      	beq.n	8008360 <_strtod_l+0xb8>
 80082ca:	d838      	bhi.n	800833e <_strtod_l+0x96>
 80082cc:	290d      	cmp	r1, #13
 80082ce:	d832      	bhi.n	8008336 <_strtod_l+0x8e>
 80082d0:	2908      	cmp	r1, #8
 80082d2:	d832      	bhi.n	800833a <_strtod_l+0x92>
 80082d4:	2900      	cmp	r1, #0
 80082d6:	d03b      	beq.n	8008350 <_strtod_l+0xa8>
 80082d8:	2200      	movs	r2, #0
 80082da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80082dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80082de:	782a      	ldrb	r2, [r5, #0]
 80082e0:	2a30      	cmp	r2, #48	@ 0x30
 80082e2:	f040 80b3 	bne.w	800844c <_strtod_l+0x1a4>
 80082e6:	786a      	ldrb	r2, [r5, #1]
 80082e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80082ec:	2a58      	cmp	r2, #88	@ 0x58
 80082ee:	d16e      	bne.n	80083ce <_strtod_l+0x126>
 80082f0:	9302      	str	r3, [sp, #8]
 80082f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	4a8e      	ldr	r2, [pc, #568]	@ (8008534 <_strtod_l+0x28c>)
 80082fc:	9805      	ldr	r0, [sp, #20]
 80082fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008300:	a919      	add	r1, sp, #100	@ 0x64
 8008302:	f001 faff 	bl	8009904 <__gethex>
 8008306:	f010 060f 	ands.w	r6, r0, #15
 800830a:	4604      	mov	r4, r0
 800830c:	d005      	beq.n	800831a <_strtod_l+0x72>
 800830e:	2e06      	cmp	r6, #6
 8008310:	d128      	bne.n	8008364 <_strtod_l+0xbc>
 8008312:	3501      	adds	r5, #1
 8008314:	2300      	movs	r3, #0
 8008316:	9519      	str	r5, [sp, #100]	@ 0x64
 8008318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800831a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800831c:	2b00      	cmp	r3, #0
 800831e:	f040 858e 	bne.w	8008e3e <_strtod_l+0xb96>
 8008322:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008324:	b1cb      	cbz	r3, 800835a <_strtod_l+0xb2>
 8008326:	4652      	mov	r2, sl
 8008328:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800832c:	ec43 2b10 	vmov	d0, r2, r3
 8008330:	b01f      	add	sp, #124	@ 0x7c
 8008332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008336:	2920      	cmp	r1, #32
 8008338:	d1ce      	bne.n	80082d8 <_strtod_l+0x30>
 800833a:	3201      	adds	r2, #1
 800833c:	e7c1      	b.n	80082c2 <_strtod_l+0x1a>
 800833e:	292d      	cmp	r1, #45	@ 0x2d
 8008340:	d1ca      	bne.n	80082d8 <_strtod_l+0x30>
 8008342:	2101      	movs	r1, #1
 8008344:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008346:	1c51      	adds	r1, r2, #1
 8008348:	9119      	str	r1, [sp, #100]	@ 0x64
 800834a:	7852      	ldrb	r2, [r2, #1]
 800834c:	2a00      	cmp	r2, #0
 800834e:	d1c5      	bne.n	80082dc <_strtod_l+0x34>
 8008350:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008352:	9419      	str	r4, [sp, #100]	@ 0x64
 8008354:	2b00      	cmp	r3, #0
 8008356:	f040 8570 	bne.w	8008e3a <_strtod_l+0xb92>
 800835a:	4652      	mov	r2, sl
 800835c:	465b      	mov	r3, fp
 800835e:	e7e5      	b.n	800832c <_strtod_l+0x84>
 8008360:	2100      	movs	r1, #0
 8008362:	e7ef      	b.n	8008344 <_strtod_l+0x9c>
 8008364:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008366:	b13a      	cbz	r2, 8008378 <_strtod_l+0xd0>
 8008368:	2135      	movs	r1, #53	@ 0x35
 800836a:	a81c      	add	r0, sp, #112	@ 0x70
 800836c:	f7ff ff3a 	bl	80081e4 <__copybits>
 8008370:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008372:	9805      	ldr	r0, [sp, #20]
 8008374:	f7ff fb08 	bl	8007988 <_Bfree>
 8008378:	3e01      	subs	r6, #1
 800837a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800837c:	2e04      	cmp	r6, #4
 800837e:	d806      	bhi.n	800838e <_strtod_l+0xe6>
 8008380:	e8df f006 	tbb	[pc, r6]
 8008384:	201d0314 	.word	0x201d0314
 8008388:	14          	.byte	0x14
 8008389:	00          	.byte	0x00
 800838a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800838e:	05e1      	lsls	r1, r4, #23
 8008390:	bf48      	it	mi
 8008392:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008396:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800839a:	0d1b      	lsrs	r3, r3, #20
 800839c:	051b      	lsls	r3, r3, #20
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1bb      	bne.n	800831a <_strtod_l+0x72>
 80083a2:	f7fe fb31 	bl	8006a08 <__errno>
 80083a6:	2322      	movs	r3, #34	@ 0x22
 80083a8:	6003      	str	r3, [r0, #0]
 80083aa:	e7b6      	b.n	800831a <_strtod_l+0x72>
 80083ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80083b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80083b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80083b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80083bc:	e7e7      	b.n	800838e <_strtod_l+0xe6>
 80083be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800853c <_strtod_l+0x294>
 80083c2:	e7e4      	b.n	800838e <_strtod_l+0xe6>
 80083c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80083c8:	f04f 3aff 	mov.w	sl, #4294967295
 80083cc:	e7df      	b.n	800838e <_strtod_l+0xe6>
 80083ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80083d4:	785b      	ldrb	r3, [r3, #1]
 80083d6:	2b30      	cmp	r3, #48	@ 0x30
 80083d8:	d0f9      	beq.n	80083ce <_strtod_l+0x126>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d09d      	beq.n	800831a <_strtod_l+0x72>
 80083de:	2301      	movs	r3, #1
 80083e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80083e6:	2300      	movs	r3, #0
 80083e8:	9308      	str	r3, [sp, #32]
 80083ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80083ec:	461f      	mov	r7, r3
 80083ee:	220a      	movs	r2, #10
 80083f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80083f2:	7805      	ldrb	r5, [r0, #0]
 80083f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80083f8:	b2d9      	uxtb	r1, r3
 80083fa:	2909      	cmp	r1, #9
 80083fc:	d928      	bls.n	8008450 <_strtod_l+0x1a8>
 80083fe:	494e      	ldr	r1, [pc, #312]	@ (8008538 <_strtod_l+0x290>)
 8008400:	2201      	movs	r2, #1
 8008402:	f001 f9ab 	bl	800975c <strncmp>
 8008406:	2800      	cmp	r0, #0
 8008408:	d032      	beq.n	8008470 <_strtod_l+0x1c8>
 800840a:	2000      	movs	r0, #0
 800840c:	462a      	mov	r2, r5
 800840e:	4681      	mov	r9, r0
 8008410:	463d      	mov	r5, r7
 8008412:	4603      	mov	r3, r0
 8008414:	2a65      	cmp	r2, #101	@ 0x65
 8008416:	d001      	beq.n	800841c <_strtod_l+0x174>
 8008418:	2a45      	cmp	r2, #69	@ 0x45
 800841a:	d114      	bne.n	8008446 <_strtod_l+0x19e>
 800841c:	b91d      	cbnz	r5, 8008426 <_strtod_l+0x17e>
 800841e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008420:	4302      	orrs	r2, r0
 8008422:	d095      	beq.n	8008350 <_strtod_l+0xa8>
 8008424:	2500      	movs	r5, #0
 8008426:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008428:	1c62      	adds	r2, r4, #1
 800842a:	9219      	str	r2, [sp, #100]	@ 0x64
 800842c:	7862      	ldrb	r2, [r4, #1]
 800842e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008430:	d077      	beq.n	8008522 <_strtod_l+0x27a>
 8008432:	2a2d      	cmp	r2, #45	@ 0x2d
 8008434:	d07b      	beq.n	800852e <_strtod_l+0x286>
 8008436:	f04f 0c00 	mov.w	ip, #0
 800843a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800843e:	2909      	cmp	r1, #9
 8008440:	f240 8082 	bls.w	8008548 <_strtod_l+0x2a0>
 8008444:	9419      	str	r4, [sp, #100]	@ 0x64
 8008446:	f04f 0800 	mov.w	r8, #0
 800844a:	e0a2      	b.n	8008592 <_strtod_l+0x2ea>
 800844c:	2300      	movs	r3, #0
 800844e:	e7c7      	b.n	80083e0 <_strtod_l+0x138>
 8008450:	2f08      	cmp	r7, #8
 8008452:	bfd5      	itete	le
 8008454:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008456:	9908      	ldrgt	r1, [sp, #32]
 8008458:	fb02 3301 	mlale	r3, r2, r1, r3
 800845c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008460:	f100 0001 	add.w	r0, r0, #1
 8008464:	bfd4      	ite	le
 8008466:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008468:	9308      	strgt	r3, [sp, #32]
 800846a:	3701      	adds	r7, #1
 800846c:	9019      	str	r0, [sp, #100]	@ 0x64
 800846e:	e7bf      	b.n	80083f0 <_strtod_l+0x148>
 8008470:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	9219      	str	r2, [sp, #100]	@ 0x64
 8008476:	785a      	ldrb	r2, [r3, #1]
 8008478:	b37f      	cbz	r7, 80084da <_strtod_l+0x232>
 800847a:	4681      	mov	r9, r0
 800847c:	463d      	mov	r5, r7
 800847e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008482:	2b09      	cmp	r3, #9
 8008484:	d912      	bls.n	80084ac <_strtod_l+0x204>
 8008486:	2301      	movs	r3, #1
 8008488:	e7c4      	b.n	8008414 <_strtod_l+0x16c>
 800848a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008490:	785a      	ldrb	r2, [r3, #1]
 8008492:	3001      	adds	r0, #1
 8008494:	2a30      	cmp	r2, #48	@ 0x30
 8008496:	d0f8      	beq.n	800848a <_strtod_l+0x1e2>
 8008498:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800849c:	2b08      	cmp	r3, #8
 800849e:	f200 84d3 	bhi.w	8008e48 <_strtod_l+0xba0>
 80084a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80084a6:	4681      	mov	r9, r0
 80084a8:	2000      	movs	r0, #0
 80084aa:	4605      	mov	r5, r0
 80084ac:	3a30      	subs	r2, #48	@ 0x30
 80084ae:	f100 0301 	add.w	r3, r0, #1
 80084b2:	d02a      	beq.n	800850a <_strtod_l+0x262>
 80084b4:	4499      	add	r9, r3
 80084b6:	eb00 0c05 	add.w	ip, r0, r5
 80084ba:	462b      	mov	r3, r5
 80084bc:	210a      	movs	r1, #10
 80084be:	4563      	cmp	r3, ip
 80084c0:	d10d      	bne.n	80084de <_strtod_l+0x236>
 80084c2:	1c69      	adds	r1, r5, #1
 80084c4:	4401      	add	r1, r0
 80084c6:	4428      	add	r0, r5
 80084c8:	2808      	cmp	r0, #8
 80084ca:	dc16      	bgt.n	80084fa <_strtod_l+0x252>
 80084cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084ce:	230a      	movs	r3, #10
 80084d0:	fb03 2300 	mla	r3, r3, r0, r2
 80084d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d6:	2300      	movs	r3, #0
 80084d8:	e018      	b.n	800850c <_strtod_l+0x264>
 80084da:	4638      	mov	r0, r7
 80084dc:	e7da      	b.n	8008494 <_strtod_l+0x1ec>
 80084de:	2b08      	cmp	r3, #8
 80084e0:	f103 0301 	add.w	r3, r3, #1
 80084e4:	dc03      	bgt.n	80084ee <_strtod_l+0x246>
 80084e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80084e8:	434e      	muls	r6, r1
 80084ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80084ec:	e7e7      	b.n	80084be <_strtod_l+0x216>
 80084ee:	2b10      	cmp	r3, #16
 80084f0:	bfde      	ittt	le
 80084f2:	9e08      	ldrle	r6, [sp, #32]
 80084f4:	434e      	mulle	r6, r1
 80084f6:	9608      	strle	r6, [sp, #32]
 80084f8:	e7e1      	b.n	80084be <_strtod_l+0x216>
 80084fa:	280f      	cmp	r0, #15
 80084fc:	dceb      	bgt.n	80084d6 <_strtod_l+0x22e>
 80084fe:	9808      	ldr	r0, [sp, #32]
 8008500:	230a      	movs	r3, #10
 8008502:	fb03 2300 	mla	r3, r3, r0, r2
 8008506:	9308      	str	r3, [sp, #32]
 8008508:	e7e5      	b.n	80084d6 <_strtod_l+0x22e>
 800850a:	4629      	mov	r1, r5
 800850c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800850e:	1c50      	adds	r0, r2, #1
 8008510:	9019      	str	r0, [sp, #100]	@ 0x64
 8008512:	7852      	ldrb	r2, [r2, #1]
 8008514:	4618      	mov	r0, r3
 8008516:	460d      	mov	r5, r1
 8008518:	e7b1      	b.n	800847e <_strtod_l+0x1d6>
 800851a:	f04f 0900 	mov.w	r9, #0
 800851e:	2301      	movs	r3, #1
 8008520:	e77d      	b.n	800841e <_strtod_l+0x176>
 8008522:	f04f 0c00 	mov.w	ip, #0
 8008526:	1ca2      	adds	r2, r4, #2
 8008528:	9219      	str	r2, [sp, #100]	@ 0x64
 800852a:	78a2      	ldrb	r2, [r4, #2]
 800852c:	e785      	b.n	800843a <_strtod_l+0x192>
 800852e:	f04f 0c01 	mov.w	ip, #1
 8008532:	e7f8      	b.n	8008526 <_strtod_l+0x27e>
 8008534:	0800a440 	.word	0x0800a440
 8008538:	0800a428 	.word	0x0800a428
 800853c:	7ff00000 	.word	0x7ff00000
 8008540:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008542:	1c51      	adds	r1, r2, #1
 8008544:	9119      	str	r1, [sp, #100]	@ 0x64
 8008546:	7852      	ldrb	r2, [r2, #1]
 8008548:	2a30      	cmp	r2, #48	@ 0x30
 800854a:	d0f9      	beq.n	8008540 <_strtod_l+0x298>
 800854c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008550:	2908      	cmp	r1, #8
 8008552:	f63f af78 	bhi.w	8008446 <_strtod_l+0x19e>
 8008556:	3a30      	subs	r2, #48	@ 0x30
 8008558:	920e      	str	r2, [sp, #56]	@ 0x38
 800855a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800855c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800855e:	f04f 080a 	mov.w	r8, #10
 8008562:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008564:	1c56      	adds	r6, r2, #1
 8008566:	9619      	str	r6, [sp, #100]	@ 0x64
 8008568:	7852      	ldrb	r2, [r2, #1]
 800856a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800856e:	f1be 0f09 	cmp.w	lr, #9
 8008572:	d939      	bls.n	80085e8 <_strtod_l+0x340>
 8008574:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008576:	1a76      	subs	r6, r6, r1
 8008578:	2e08      	cmp	r6, #8
 800857a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800857e:	dc03      	bgt.n	8008588 <_strtod_l+0x2e0>
 8008580:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008582:	4588      	cmp	r8, r1
 8008584:	bfa8      	it	ge
 8008586:	4688      	movge	r8, r1
 8008588:	f1bc 0f00 	cmp.w	ip, #0
 800858c:	d001      	beq.n	8008592 <_strtod_l+0x2ea>
 800858e:	f1c8 0800 	rsb	r8, r8, #0
 8008592:	2d00      	cmp	r5, #0
 8008594:	d14e      	bne.n	8008634 <_strtod_l+0x38c>
 8008596:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008598:	4308      	orrs	r0, r1
 800859a:	f47f aebe 	bne.w	800831a <_strtod_l+0x72>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f47f aed6 	bne.w	8008350 <_strtod_l+0xa8>
 80085a4:	2a69      	cmp	r2, #105	@ 0x69
 80085a6:	d028      	beq.n	80085fa <_strtod_l+0x352>
 80085a8:	dc25      	bgt.n	80085f6 <_strtod_l+0x34e>
 80085aa:	2a49      	cmp	r2, #73	@ 0x49
 80085ac:	d025      	beq.n	80085fa <_strtod_l+0x352>
 80085ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80085b0:	f47f aece 	bne.w	8008350 <_strtod_l+0xa8>
 80085b4:	499b      	ldr	r1, [pc, #620]	@ (8008824 <_strtod_l+0x57c>)
 80085b6:	a819      	add	r0, sp, #100	@ 0x64
 80085b8:	f001 fbc6 	bl	8009d48 <__match>
 80085bc:	2800      	cmp	r0, #0
 80085be:	f43f aec7 	beq.w	8008350 <_strtod_l+0xa8>
 80085c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b28      	cmp	r3, #40	@ 0x28
 80085c8:	d12e      	bne.n	8008628 <_strtod_l+0x380>
 80085ca:	4997      	ldr	r1, [pc, #604]	@ (8008828 <_strtod_l+0x580>)
 80085cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80085ce:	a819      	add	r0, sp, #100	@ 0x64
 80085d0:	f001 fbce 	bl	8009d70 <__hexnan>
 80085d4:	2805      	cmp	r0, #5
 80085d6:	d127      	bne.n	8008628 <_strtod_l+0x380>
 80085d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80085da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80085de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80085e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80085e6:	e698      	b.n	800831a <_strtod_l+0x72>
 80085e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80085ea:	fb08 2101 	mla	r1, r8, r1, r2
 80085ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80085f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80085f4:	e7b5      	b.n	8008562 <_strtod_l+0x2ba>
 80085f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80085f8:	e7da      	b.n	80085b0 <_strtod_l+0x308>
 80085fa:	498c      	ldr	r1, [pc, #560]	@ (800882c <_strtod_l+0x584>)
 80085fc:	a819      	add	r0, sp, #100	@ 0x64
 80085fe:	f001 fba3 	bl	8009d48 <__match>
 8008602:	2800      	cmp	r0, #0
 8008604:	f43f aea4 	beq.w	8008350 <_strtod_l+0xa8>
 8008608:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800860a:	4989      	ldr	r1, [pc, #548]	@ (8008830 <_strtod_l+0x588>)
 800860c:	3b01      	subs	r3, #1
 800860e:	a819      	add	r0, sp, #100	@ 0x64
 8008610:	9319      	str	r3, [sp, #100]	@ 0x64
 8008612:	f001 fb99 	bl	8009d48 <__match>
 8008616:	b910      	cbnz	r0, 800861e <_strtod_l+0x376>
 8008618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800861a:	3301      	adds	r3, #1
 800861c:	9319      	str	r3, [sp, #100]	@ 0x64
 800861e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008840 <_strtod_l+0x598>
 8008622:	f04f 0a00 	mov.w	sl, #0
 8008626:	e678      	b.n	800831a <_strtod_l+0x72>
 8008628:	4882      	ldr	r0, [pc, #520]	@ (8008834 <_strtod_l+0x58c>)
 800862a:	f001 f8c9 	bl	80097c0 <nan>
 800862e:	ec5b ab10 	vmov	sl, fp, d0
 8008632:	e672      	b.n	800831a <_strtod_l+0x72>
 8008634:	eba8 0309 	sub.w	r3, r8, r9
 8008638:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800863a:	9309      	str	r3, [sp, #36]	@ 0x24
 800863c:	2f00      	cmp	r7, #0
 800863e:	bf08      	it	eq
 8008640:	462f      	moveq	r7, r5
 8008642:	2d10      	cmp	r5, #16
 8008644:	462c      	mov	r4, r5
 8008646:	bfa8      	it	ge
 8008648:	2410      	movge	r4, #16
 800864a:	f7f7 ff5b 	bl	8000504 <__aeabi_ui2d>
 800864e:	2d09      	cmp	r5, #9
 8008650:	4682      	mov	sl, r0
 8008652:	468b      	mov	fp, r1
 8008654:	dc13      	bgt.n	800867e <_strtod_l+0x3d6>
 8008656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008658:	2b00      	cmp	r3, #0
 800865a:	f43f ae5e 	beq.w	800831a <_strtod_l+0x72>
 800865e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008660:	dd78      	ble.n	8008754 <_strtod_l+0x4ac>
 8008662:	2b16      	cmp	r3, #22
 8008664:	dc5f      	bgt.n	8008726 <_strtod_l+0x47e>
 8008666:	4974      	ldr	r1, [pc, #464]	@ (8008838 <_strtod_l+0x590>)
 8008668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800866c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008670:	4652      	mov	r2, sl
 8008672:	465b      	mov	r3, fp
 8008674:	f7f7 ffc0 	bl	80005f8 <__aeabi_dmul>
 8008678:	4682      	mov	sl, r0
 800867a:	468b      	mov	fp, r1
 800867c:	e64d      	b.n	800831a <_strtod_l+0x72>
 800867e:	4b6e      	ldr	r3, [pc, #440]	@ (8008838 <_strtod_l+0x590>)
 8008680:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008684:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008688:	f7f7 ffb6 	bl	80005f8 <__aeabi_dmul>
 800868c:	4682      	mov	sl, r0
 800868e:	9808      	ldr	r0, [sp, #32]
 8008690:	468b      	mov	fp, r1
 8008692:	f7f7 ff37 	bl	8000504 <__aeabi_ui2d>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4650      	mov	r0, sl
 800869c:	4659      	mov	r1, fp
 800869e:	f7f7 fdf5 	bl	800028c <__adddf3>
 80086a2:	2d0f      	cmp	r5, #15
 80086a4:	4682      	mov	sl, r0
 80086a6:	468b      	mov	fp, r1
 80086a8:	ddd5      	ble.n	8008656 <_strtod_l+0x3ae>
 80086aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ac:	1b2c      	subs	r4, r5, r4
 80086ae:	441c      	add	r4, r3
 80086b0:	2c00      	cmp	r4, #0
 80086b2:	f340 8096 	ble.w	80087e2 <_strtod_l+0x53a>
 80086b6:	f014 030f 	ands.w	r3, r4, #15
 80086ba:	d00a      	beq.n	80086d2 <_strtod_l+0x42a>
 80086bc:	495e      	ldr	r1, [pc, #376]	@ (8008838 <_strtod_l+0x590>)
 80086be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086c2:	4652      	mov	r2, sl
 80086c4:	465b      	mov	r3, fp
 80086c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086ca:	f7f7 ff95 	bl	80005f8 <__aeabi_dmul>
 80086ce:	4682      	mov	sl, r0
 80086d0:	468b      	mov	fp, r1
 80086d2:	f034 040f 	bics.w	r4, r4, #15
 80086d6:	d073      	beq.n	80087c0 <_strtod_l+0x518>
 80086d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80086dc:	dd48      	ble.n	8008770 <_strtod_l+0x4c8>
 80086de:	2400      	movs	r4, #0
 80086e0:	46a0      	mov	r8, r4
 80086e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80086e4:	46a1      	mov	r9, r4
 80086e6:	9a05      	ldr	r2, [sp, #20]
 80086e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008840 <_strtod_l+0x598>
 80086ec:	2322      	movs	r3, #34	@ 0x22
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	f04f 0a00 	mov.w	sl, #0
 80086f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f43f ae0f 	beq.w	800831a <_strtod_l+0x72>
 80086fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086fe:	9805      	ldr	r0, [sp, #20]
 8008700:	f7ff f942 	bl	8007988 <_Bfree>
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	4649      	mov	r1, r9
 8008708:	f7ff f93e 	bl	8007988 <_Bfree>
 800870c:	9805      	ldr	r0, [sp, #20]
 800870e:	4641      	mov	r1, r8
 8008710:	f7ff f93a 	bl	8007988 <_Bfree>
 8008714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008716:	9805      	ldr	r0, [sp, #20]
 8008718:	f7ff f936 	bl	8007988 <_Bfree>
 800871c:	9805      	ldr	r0, [sp, #20]
 800871e:	4621      	mov	r1, r4
 8008720:	f7ff f932 	bl	8007988 <_Bfree>
 8008724:	e5f9      	b.n	800831a <_strtod_l+0x72>
 8008726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008728:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800872c:	4293      	cmp	r3, r2
 800872e:	dbbc      	blt.n	80086aa <_strtod_l+0x402>
 8008730:	4c41      	ldr	r4, [pc, #260]	@ (8008838 <_strtod_l+0x590>)
 8008732:	f1c5 050f 	rsb	r5, r5, #15
 8008736:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800873a:	4652      	mov	r2, sl
 800873c:	465b      	mov	r3, fp
 800873e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008742:	f7f7 ff59 	bl	80005f8 <__aeabi_dmul>
 8008746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008748:	1b5d      	subs	r5, r3, r5
 800874a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800874e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008752:	e78f      	b.n	8008674 <_strtod_l+0x3cc>
 8008754:	3316      	adds	r3, #22
 8008756:	dba8      	blt.n	80086aa <_strtod_l+0x402>
 8008758:	4b37      	ldr	r3, [pc, #220]	@ (8008838 <_strtod_l+0x590>)
 800875a:	eba9 0808 	sub.w	r8, r9, r8
 800875e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008762:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008766:	4650      	mov	r0, sl
 8008768:	4659      	mov	r1, fp
 800876a:	f7f8 f86f 	bl	800084c <__aeabi_ddiv>
 800876e:	e783      	b.n	8008678 <_strtod_l+0x3d0>
 8008770:	4b32      	ldr	r3, [pc, #200]	@ (800883c <_strtod_l+0x594>)
 8008772:	9308      	str	r3, [sp, #32]
 8008774:	2300      	movs	r3, #0
 8008776:	1124      	asrs	r4, r4, #4
 8008778:	4650      	mov	r0, sl
 800877a:	4659      	mov	r1, fp
 800877c:	461e      	mov	r6, r3
 800877e:	2c01      	cmp	r4, #1
 8008780:	dc21      	bgt.n	80087c6 <_strtod_l+0x51e>
 8008782:	b10b      	cbz	r3, 8008788 <_strtod_l+0x4e0>
 8008784:	4682      	mov	sl, r0
 8008786:	468b      	mov	fp, r1
 8008788:	492c      	ldr	r1, [pc, #176]	@ (800883c <_strtod_l+0x594>)
 800878a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800878e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008792:	4652      	mov	r2, sl
 8008794:	465b      	mov	r3, fp
 8008796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800879a:	f7f7 ff2d 	bl	80005f8 <__aeabi_dmul>
 800879e:	4b28      	ldr	r3, [pc, #160]	@ (8008840 <_strtod_l+0x598>)
 80087a0:	460a      	mov	r2, r1
 80087a2:	400b      	ands	r3, r1
 80087a4:	4927      	ldr	r1, [pc, #156]	@ (8008844 <_strtod_l+0x59c>)
 80087a6:	428b      	cmp	r3, r1
 80087a8:	4682      	mov	sl, r0
 80087aa:	d898      	bhi.n	80086de <_strtod_l+0x436>
 80087ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80087b0:	428b      	cmp	r3, r1
 80087b2:	bf86      	itte	hi
 80087b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008848 <_strtod_l+0x5a0>
 80087b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80087bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80087c0:	2300      	movs	r3, #0
 80087c2:	9308      	str	r3, [sp, #32]
 80087c4:	e07a      	b.n	80088bc <_strtod_l+0x614>
 80087c6:	07e2      	lsls	r2, r4, #31
 80087c8:	d505      	bpl.n	80087d6 <_strtod_l+0x52e>
 80087ca:	9b08      	ldr	r3, [sp, #32]
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	f7f7 ff12 	bl	80005f8 <__aeabi_dmul>
 80087d4:	2301      	movs	r3, #1
 80087d6:	9a08      	ldr	r2, [sp, #32]
 80087d8:	3208      	adds	r2, #8
 80087da:	3601      	adds	r6, #1
 80087dc:	1064      	asrs	r4, r4, #1
 80087de:	9208      	str	r2, [sp, #32]
 80087e0:	e7cd      	b.n	800877e <_strtod_l+0x4d6>
 80087e2:	d0ed      	beq.n	80087c0 <_strtod_l+0x518>
 80087e4:	4264      	negs	r4, r4
 80087e6:	f014 020f 	ands.w	r2, r4, #15
 80087ea:	d00a      	beq.n	8008802 <_strtod_l+0x55a>
 80087ec:	4b12      	ldr	r3, [pc, #72]	@ (8008838 <_strtod_l+0x590>)
 80087ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087f2:	4650      	mov	r0, sl
 80087f4:	4659      	mov	r1, fp
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f8 f827 	bl	800084c <__aeabi_ddiv>
 80087fe:	4682      	mov	sl, r0
 8008800:	468b      	mov	fp, r1
 8008802:	1124      	asrs	r4, r4, #4
 8008804:	d0dc      	beq.n	80087c0 <_strtod_l+0x518>
 8008806:	2c1f      	cmp	r4, #31
 8008808:	dd20      	ble.n	800884c <_strtod_l+0x5a4>
 800880a:	2400      	movs	r4, #0
 800880c:	46a0      	mov	r8, r4
 800880e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008810:	46a1      	mov	r9, r4
 8008812:	9a05      	ldr	r2, [sp, #20]
 8008814:	2322      	movs	r3, #34	@ 0x22
 8008816:	f04f 0a00 	mov.w	sl, #0
 800881a:	f04f 0b00 	mov.w	fp, #0
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	e768      	b.n	80086f4 <_strtod_l+0x44c>
 8008822:	bf00      	nop
 8008824:	0800a215 	.word	0x0800a215
 8008828:	0800a42c 	.word	0x0800a42c
 800882c:	0800a20d 	.word	0x0800a20d
 8008830:	0800a244 	.word	0x0800a244
 8008834:	0800a5d5 	.word	0x0800a5d5
 8008838:	0800a360 	.word	0x0800a360
 800883c:	0800a338 	.word	0x0800a338
 8008840:	7ff00000 	.word	0x7ff00000
 8008844:	7ca00000 	.word	0x7ca00000
 8008848:	7fefffff 	.word	0x7fefffff
 800884c:	f014 0310 	ands.w	r3, r4, #16
 8008850:	bf18      	it	ne
 8008852:	236a      	movne	r3, #106	@ 0x6a
 8008854:	4ea9      	ldr	r6, [pc, #676]	@ (8008afc <_strtod_l+0x854>)
 8008856:	9308      	str	r3, [sp, #32]
 8008858:	4650      	mov	r0, sl
 800885a:	4659      	mov	r1, fp
 800885c:	2300      	movs	r3, #0
 800885e:	07e2      	lsls	r2, r4, #31
 8008860:	d504      	bpl.n	800886c <_strtod_l+0x5c4>
 8008862:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008866:	f7f7 fec7 	bl	80005f8 <__aeabi_dmul>
 800886a:	2301      	movs	r3, #1
 800886c:	1064      	asrs	r4, r4, #1
 800886e:	f106 0608 	add.w	r6, r6, #8
 8008872:	d1f4      	bne.n	800885e <_strtod_l+0x5b6>
 8008874:	b10b      	cbz	r3, 800887a <_strtod_l+0x5d2>
 8008876:	4682      	mov	sl, r0
 8008878:	468b      	mov	fp, r1
 800887a:	9b08      	ldr	r3, [sp, #32]
 800887c:	b1b3      	cbz	r3, 80088ac <_strtod_l+0x604>
 800887e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008882:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008886:	2b00      	cmp	r3, #0
 8008888:	4659      	mov	r1, fp
 800888a:	dd0f      	ble.n	80088ac <_strtod_l+0x604>
 800888c:	2b1f      	cmp	r3, #31
 800888e:	dd55      	ble.n	800893c <_strtod_l+0x694>
 8008890:	2b34      	cmp	r3, #52	@ 0x34
 8008892:	bfde      	ittt	le
 8008894:	f04f 33ff 	movle.w	r3, #4294967295
 8008898:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800889c:	4093      	lslle	r3, r2
 800889e:	f04f 0a00 	mov.w	sl, #0
 80088a2:	bfcc      	ite	gt
 80088a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80088a8:	ea03 0b01 	andle.w	fp, r3, r1
 80088ac:	2200      	movs	r2, #0
 80088ae:	2300      	movs	r3, #0
 80088b0:	4650      	mov	r0, sl
 80088b2:	4659      	mov	r1, fp
 80088b4:	f7f8 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1a6      	bne.n	800880a <_strtod_l+0x562>
 80088bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80088c2:	9805      	ldr	r0, [sp, #20]
 80088c4:	462b      	mov	r3, r5
 80088c6:	463a      	mov	r2, r7
 80088c8:	f7ff f8c6 	bl	8007a58 <__s2b>
 80088cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f43f af05 	beq.w	80086de <_strtod_l+0x436>
 80088d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088d6:	2a00      	cmp	r2, #0
 80088d8:	eba9 0308 	sub.w	r3, r9, r8
 80088dc:	bfa8      	it	ge
 80088de:	2300      	movge	r3, #0
 80088e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80088e2:	2400      	movs	r4, #0
 80088e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80088ea:	46a0      	mov	r8, r4
 80088ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ee:	9805      	ldr	r0, [sp, #20]
 80088f0:	6859      	ldr	r1, [r3, #4]
 80088f2:	f7ff f809 	bl	8007908 <_Balloc>
 80088f6:	4681      	mov	r9, r0
 80088f8:	2800      	cmp	r0, #0
 80088fa:	f43f aef4 	beq.w	80086e6 <_strtod_l+0x43e>
 80088fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008900:	691a      	ldr	r2, [r3, #16]
 8008902:	3202      	adds	r2, #2
 8008904:	f103 010c 	add.w	r1, r3, #12
 8008908:	0092      	lsls	r2, r2, #2
 800890a:	300c      	adds	r0, #12
 800890c:	f000 ff48 	bl	80097a0 <memcpy>
 8008910:	ec4b ab10 	vmov	d0, sl, fp
 8008914:	9805      	ldr	r0, [sp, #20]
 8008916:	aa1c      	add	r2, sp, #112	@ 0x70
 8008918:	a91b      	add	r1, sp, #108	@ 0x6c
 800891a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800891e:	f7ff fbd7 	bl	80080d0 <__d2b>
 8008922:	901a      	str	r0, [sp, #104]	@ 0x68
 8008924:	2800      	cmp	r0, #0
 8008926:	f43f aede 	beq.w	80086e6 <_strtod_l+0x43e>
 800892a:	9805      	ldr	r0, [sp, #20]
 800892c:	2101      	movs	r1, #1
 800892e:	f7ff f929 	bl	8007b84 <__i2b>
 8008932:	4680      	mov	r8, r0
 8008934:	b948      	cbnz	r0, 800894a <_strtod_l+0x6a2>
 8008936:	f04f 0800 	mov.w	r8, #0
 800893a:	e6d4      	b.n	80086e6 <_strtod_l+0x43e>
 800893c:	f04f 32ff 	mov.w	r2, #4294967295
 8008940:	fa02 f303 	lsl.w	r3, r2, r3
 8008944:	ea03 0a0a 	and.w	sl, r3, sl
 8008948:	e7b0      	b.n	80088ac <_strtod_l+0x604>
 800894a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800894c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800894e:	2d00      	cmp	r5, #0
 8008950:	bfab      	itete	ge
 8008952:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008954:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008956:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008958:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800895a:	bfac      	ite	ge
 800895c:	18ef      	addge	r7, r5, r3
 800895e:	1b5e      	sublt	r6, r3, r5
 8008960:	9b08      	ldr	r3, [sp, #32]
 8008962:	1aed      	subs	r5, r5, r3
 8008964:	4415      	add	r5, r2
 8008966:	4b66      	ldr	r3, [pc, #408]	@ (8008b00 <_strtod_l+0x858>)
 8008968:	3d01      	subs	r5, #1
 800896a:	429d      	cmp	r5, r3
 800896c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008970:	da50      	bge.n	8008a14 <_strtod_l+0x76c>
 8008972:	1b5b      	subs	r3, r3, r5
 8008974:	2b1f      	cmp	r3, #31
 8008976:	eba2 0203 	sub.w	r2, r2, r3
 800897a:	f04f 0101 	mov.w	r1, #1
 800897e:	dc3d      	bgt.n	80089fc <_strtod_l+0x754>
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008986:	2300      	movs	r3, #0
 8008988:	9310      	str	r3, [sp, #64]	@ 0x40
 800898a:	18bd      	adds	r5, r7, r2
 800898c:	9b08      	ldr	r3, [sp, #32]
 800898e:	42af      	cmp	r7, r5
 8008990:	4416      	add	r6, r2
 8008992:	441e      	add	r6, r3
 8008994:	463b      	mov	r3, r7
 8008996:	bfa8      	it	ge
 8008998:	462b      	movge	r3, r5
 800899a:	42b3      	cmp	r3, r6
 800899c:	bfa8      	it	ge
 800899e:	4633      	movge	r3, r6
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bfc2      	ittt	gt
 80089a4:	1aed      	subgt	r5, r5, r3
 80089a6:	1af6      	subgt	r6, r6, r3
 80089a8:	1aff      	subgt	r7, r7, r3
 80089aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dd16      	ble.n	80089de <_strtod_l+0x736>
 80089b0:	4641      	mov	r1, r8
 80089b2:	9805      	ldr	r0, [sp, #20]
 80089b4:	461a      	mov	r2, r3
 80089b6:	f7ff f9a5 	bl	8007d04 <__pow5mult>
 80089ba:	4680      	mov	r8, r0
 80089bc:	2800      	cmp	r0, #0
 80089be:	d0ba      	beq.n	8008936 <_strtod_l+0x68e>
 80089c0:	4601      	mov	r1, r0
 80089c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089c4:	9805      	ldr	r0, [sp, #20]
 80089c6:	f7ff f8f3 	bl	8007bb0 <__multiply>
 80089ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f43f ae8a 	beq.w	80086e6 <_strtod_l+0x43e>
 80089d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089d4:	9805      	ldr	r0, [sp, #20]
 80089d6:	f7fe ffd7 	bl	8007988 <_Bfree>
 80089da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80089de:	2d00      	cmp	r5, #0
 80089e0:	dc1d      	bgt.n	8008a1e <_strtod_l+0x776>
 80089e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	dd23      	ble.n	8008a30 <_strtod_l+0x788>
 80089e8:	4649      	mov	r1, r9
 80089ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80089ec:	9805      	ldr	r0, [sp, #20]
 80089ee:	f7ff f989 	bl	8007d04 <__pow5mult>
 80089f2:	4681      	mov	r9, r0
 80089f4:	b9e0      	cbnz	r0, 8008a30 <_strtod_l+0x788>
 80089f6:	f04f 0900 	mov.w	r9, #0
 80089fa:	e674      	b.n	80086e6 <_strtod_l+0x43e>
 80089fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008a00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008a04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008a08:	35e2      	adds	r5, #226	@ 0xe2
 8008a0a:	fa01 f305 	lsl.w	r3, r1, r5
 8008a0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a10:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008a12:	e7ba      	b.n	800898a <_strtod_l+0x6e2>
 8008a14:	2300      	movs	r3, #0
 8008a16:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a18:	2301      	movs	r3, #1
 8008a1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a1c:	e7b5      	b.n	800898a <_strtod_l+0x6e2>
 8008a1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a20:	9805      	ldr	r0, [sp, #20]
 8008a22:	462a      	mov	r2, r5
 8008a24:	f7ff f9c8 	bl	8007db8 <__lshift>
 8008a28:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d1d9      	bne.n	80089e2 <_strtod_l+0x73a>
 8008a2e:	e65a      	b.n	80086e6 <_strtod_l+0x43e>
 8008a30:	2e00      	cmp	r6, #0
 8008a32:	dd07      	ble.n	8008a44 <_strtod_l+0x79c>
 8008a34:	4649      	mov	r1, r9
 8008a36:	9805      	ldr	r0, [sp, #20]
 8008a38:	4632      	mov	r2, r6
 8008a3a:	f7ff f9bd 	bl	8007db8 <__lshift>
 8008a3e:	4681      	mov	r9, r0
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d0d8      	beq.n	80089f6 <_strtod_l+0x74e>
 8008a44:	2f00      	cmp	r7, #0
 8008a46:	dd08      	ble.n	8008a5a <_strtod_l+0x7b2>
 8008a48:	4641      	mov	r1, r8
 8008a4a:	9805      	ldr	r0, [sp, #20]
 8008a4c:	463a      	mov	r2, r7
 8008a4e:	f7ff f9b3 	bl	8007db8 <__lshift>
 8008a52:	4680      	mov	r8, r0
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f43f ae46 	beq.w	80086e6 <_strtod_l+0x43e>
 8008a5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a5c:	9805      	ldr	r0, [sp, #20]
 8008a5e:	464a      	mov	r2, r9
 8008a60:	f7ff fa32 	bl	8007ec8 <__mdiff>
 8008a64:	4604      	mov	r4, r0
 8008a66:	2800      	cmp	r0, #0
 8008a68:	f43f ae3d 	beq.w	80086e6 <_strtod_l+0x43e>
 8008a6c:	68c3      	ldr	r3, [r0, #12]
 8008a6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a70:	2300      	movs	r3, #0
 8008a72:	60c3      	str	r3, [r0, #12]
 8008a74:	4641      	mov	r1, r8
 8008a76:	f7ff fa0b 	bl	8007e90 <__mcmp>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	da46      	bge.n	8008b0c <_strtod_l+0x864>
 8008a7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a80:	ea53 030a 	orrs.w	r3, r3, sl
 8008a84:	d16c      	bne.n	8008b60 <_strtod_l+0x8b8>
 8008a86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d168      	bne.n	8008b60 <_strtod_l+0x8b8>
 8008a8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a92:	0d1b      	lsrs	r3, r3, #20
 8008a94:	051b      	lsls	r3, r3, #20
 8008a96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a9a:	d961      	bls.n	8008b60 <_strtod_l+0x8b8>
 8008a9c:	6963      	ldr	r3, [r4, #20]
 8008a9e:	b913      	cbnz	r3, 8008aa6 <_strtod_l+0x7fe>
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	dd5c      	ble.n	8008b60 <_strtod_l+0x8b8>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	9805      	ldr	r0, [sp, #20]
 8008aac:	f7ff f984 	bl	8007db8 <__lshift>
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	f7ff f9ec 	bl	8007e90 <__mcmp>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	dd51      	ble.n	8008b60 <_strtod_l+0x8b8>
 8008abc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ac0:	9a08      	ldr	r2, [sp, #32]
 8008ac2:	0d1b      	lsrs	r3, r3, #20
 8008ac4:	051b      	lsls	r3, r3, #20
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	d06b      	beq.n	8008ba2 <_strtod_l+0x8fa>
 8008aca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008ace:	d868      	bhi.n	8008ba2 <_strtod_l+0x8fa>
 8008ad0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008ad4:	f67f ae9d 	bls.w	8008812 <_strtod_l+0x56a>
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b04 <_strtod_l+0x85c>)
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f7f7 fd8a 	bl	80005f8 <__aeabi_dmul>
 8008ae4:	4b08      	ldr	r3, [pc, #32]	@ (8008b08 <_strtod_l+0x860>)
 8008ae6:	400b      	ands	r3, r1
 8008ae8:	4682      	mov	sl, r0
 8008aea:	468b      	mov	fp, r1
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f47f ae05 	bne.w	80086fc <_strtod_l+0x454>
 8008af2:	9a05      	ldr	r2, [sp, #20]
 8008af4:	2322      	movs	r3, #34	@ 0x22
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	e600      	b.n	80086fc <_strtod_l+0x454>
 8008afa:	bf00      	nop
 8008afc:	0800a458 	.word	0x0800a458
 8008b00:	fffffc02 	.word	0xfffffc02
 8008b04:	39500000 	.word	0x39500000
 8008b08:	7ff00000 	.word	0x7ff00000
 8008b0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b10:	d165      	bne.n	8008bde <_strtod_l+0x936>
 8008b12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008b14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b18:	b35a      	cbz	r2, 8008b72 <_strtod_l+0x8ca>
 8008b1a:	4a9f      	ldr	r2, [pc, #636]	@ (8008d98 <_strtod_l+0xaf0>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d12b      	bne.n	8008b78 <_strtod_l+0x8d0>
 8008b20:	9b08      	ldr	r3, [sp, #32]
 8008b22:	4651      	mov	r1, sl
 8008b24:	b303      	cbz	r3, 8008b68 <_strtod_l+0x8c0>
 8008b26:	4b9d      	ldr	r3, [pc, #628]	@ (8008d9c <_strtod_l+0xaf4>)
 8008b28:	465a      	mov	r2, fp
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295
 8008b34:	d81b      	bhi.n	8008b6e <_strtod_l+0x8c6>
 8008b36:	0d1b      	lsrs	r3, r3, #20
 8008b38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b40:	4299      	cmp	r1, r3
 8008b42:	d119      	bne.n	8008b78 <_strtod_l+0x8d0>
 8008b44:	4b96      	ldr	r3, [pc, #600]	@ (8008da0 <_strtod_l+0xaf8>)
 8008b46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d102      	bne.n	8008b52 <_strtod_l+0x8aa>
 8008b4c:	3101      	adds	r1, #1
 8008b4e:	f43f adca 	beq.w	80086e6 <_strtod_l+0x43e>
 8008b52:	4b92      	ldr	r3, [pc, #584]	@ (8008d9c <_strtod_l+0xaf4>)
 8008b54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b56:	401a      	ands	r2, r3
 8008b58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008b5c:	f04f 0a00 	mov.w	sl, #0
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1b8      	bne.n	8008ad8 <_strtod_l+0x830>
 8008b66:	e5c9      	b.n	80086fc <_strtod_l+0x454>
 8008b68:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6c:	e7e8      	b.n	8008b40 <_strtod_l+0x898>
 8008b6e:	4613      	mov	r3, r2
 8008b70:	e7e6      	b.n	8008b40 <_strtod_l+0x898>
 8008b72:	ea53 030a 	orrs.w	r3, r3, sl
 8008b76:	d0a1      	beq.n	8008abc <_strtod_l+0x814>
 8008b78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b7a:	b1db      	cbz	r3, 8008bb4 <_strtod_l+0x90c>
 8008b7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b7e:	4213      	tst	r3, r2
 8008b80:	d0ee      	beq.n	8008b60 <_strtod_l+0x8b8>
 8008b82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b84:	9a08      	ldr	r2, [sp, #32]
 8008b86:	4650      	mov	r0, sl
 8008b88:	4659      	mov	r1, fp
 8008b8a:	b1bb      	cbz	r3, 8008bbc <_strtod_l+0x914>
 8008b8c:	f7ff fb6e 	bl	800826c <sulp>
 8008b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b94:	ec53 2b10 	vmov	r2, r3, d0
 8008b98:	f7f7 fb78 	bl	800028c <__adddf3>
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	468b      	mov	fp, r1
 8008ba0:	e7de      	b.n	8008b60 <_strtod_l+0x8b8>
 8008ba2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008ba6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008baa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008bae:	f04f 3aff 	mov.w	sl, #4294967295
 8008bb2:	e7d5      	b.n	8008b60 <_strtod_l+0x8b8>
 8008bb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bb6:	ea13 0f0a 	tst.w	r3, sl
 8008bba:	e7e1      	b.n	8008b80 <_strtod_l+0x8d8>
 8008bbc:	f7ff fb56 	bl	800826c <sulp>
 8008bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bc4:	ec53 2b10 	vmov	r2, r3, d0
 8008bc8:	f7f7 fb5e 	bl	8000288 <__aeabi_dsub>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4682      	mov	sl, r0
 8008bd2:	468b      	mov	fp, r1
 8008bd4:	f7f7 ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d0c1      	beq.n	8008b60 <_strtod_l+0x8b8>
 8008bdc:	e619      	b.n	8008812 <_strtod_l+0x56a>
 8008bde:	4641      	mov	r1, r8
 8008be0:	4620      	mov	r0, r4
 8008be2:	f7ff facd 	bl	8008180 <__ratio>
 8008be6:	ec57 6b10 	vmov	r6, r7, d0
 8008bea:	2200      	movs	r2, #0
 8008bec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f7 ff7c 	bl	8000af0 <__aeabi_dcmple>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d06f      	beq.n	8008cdc <_strtod_l+0xa34>
 8008bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d17a      	bne.n	8008cf8 <_strtod_l+0xa50>
 8008c02:	f1ba 0f00 	cmp.w	sl, #0
 8008c06:	d158      	bne.n	8008cba <_strtod_l+0xa12>
 8008c08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d15a      	bne.n	8008cc8 <_strtod_l+0xa20>
 8008c12:	4b64      	ldr	r3, [pc, #400]	@ (8008da4 <_strtod_l+0xafc>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	4630      	mov	r0, r6
 8008c18:	4639      	mov	r1, r7
 8008c1a:	f7f7 ff5f 	bl	8000adc <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d159      	bne.n	8008cd6 <_strtod_l+0xa2e>
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	4b60      	ldr	r3, [pc, #384]	@ (8008da8 <_strtod_l+0xb00>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f7f7 fce5 	bl	80005f8 <__aeabi_dmul>
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008c36:	9606      	str	r6, [sp, #24]
 8008c38:	9307      	str	r3, [sp, #28]
 8008c3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c3e:	4d57      	ldr	r5, [pc, #348]	@ (8008d9c <_strtod_l+0xaf4>)
 8008c40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c46:	401d      	ands	r5, r3
 8008c48:	4b58      	ldr	r3, [pc, #352]	@ (8008dac <_strtod_l+0xb04>)
 8008c4a:	429d      	cmp	r5, r3
 8008c4c:	f040 80b2 	bne.w	8008db4 <_strtod_l+0xb0c>
 8008c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008c56:	ec4b ab10 	vmov	d0, sl, fp
 8008c5a:	f7ff f9c9 	bl	8007ff0 <__ulp>
 8008c5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c62:	ec51 0b10 	vmov	r0, r1, d0
 8008c66:	f7f7 fcc7 	bl	80005f8 <__aeabi_dmul>
 8008c6a:	4652      	mov	r2, sl
 8008c6c:	465b      	mov	r3, fp
 8008c6e:	f7f7 fb0d 	bl	800028c <__adddf3>
 8008c72:	460b      	mov	r3, r1
 8008c74:	4949      	ldr	r1, [pc, #292]	@ (8008d9c <_strtod_l+0xaf4>)
 8008c76:	4a4e      	ldr	r2, [pc, #312]	@ (8008db0 <_strtod_l+0xb08>)
 8008c78:	4019      	ands	r1, r3
 8008c7a:	4291      	cmp	r1, r2
 8008c7c:	4682      	mov	sl, r0
 8008c7e:	d942      	bls.n	8008d06 <_strtod_l+0xa5e>
 8008c80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c82:	4b47      	ldr	r3, [pc, #284]	@ (8008da0 <_strtod_l+0xaf8>)
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d103      	bne.n	8008c90 <_strtod_l+0x9e8>
 8008c88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	f43f ad2b 	beq.w	80086e6 <_strtod_l+0x43e>
 8008c90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008da0 <_strtod_l+0xaf8>
 8008c94:	f04f 3aff 	mov.w	sl, #4294967295
 8008c98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c9a:	9805      	ldr	r0, [sp, #20]
 8008c9c:	f7fe fe74 	bl	8007988 <_Bfree>
 8008ca0:	9805      	ldr	r0, [sp, #20]
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7fe fe70 	bl	8007988 <_Bfree>
 8008ca8:	9805      	ldr	r0, [sp, #20]
 8008caa:	4641      	mov	r1, r8
 8008cac:	f7fe fe6c 	bl	8007988 <_Bfree>
 8008cb0:	9805      	ldr	r0, [sp, #20]
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	f7fe fe68 	bl	8007988 <_Bfree>
 8008cb8:	e618      	b.n	80088ec <_strtod_l+0x644>
 8008cba:	f1ba 0f01 	cmp.w	sl, #1
 8008cbe:	d103      	bne.n	8008cc8 <_strtod_l+0xa20>
 8008cc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f43f ada5 	beq.w	8008812 <_strtod_l+0x56a>
 8008cc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008d78 <_strtod_l+0xad0>
 8008ccc:	4f35      	ldr	r7, [pc, #212]	@ (8008da4 <_strtod_l+0xafc>)
 8008cce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cd2:	2600      	movs	r6, #0
 8008cd4:	e7b1      	b.n	8008c3a <_strtod_l+0x992>
 8008cd6:	4f34      	ldr	r7, [pc, #208]	@ (8008da8 <_strtod_l+0xb00>)
 8008cd8:	2600      	movs	r6, #0
 8008cda:	e7aa      	b.n	8008c32 <_strtod_l+0x98a>
 8008cdc:	4b32      	ldr	r3, [pc, #200]	@ (8008da8 <_strtod_l+0xb00>)
 8008cde:	4630      	mov	r0, r6
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f7f7 fc88 	bl	80005f8 <__aeabi_dmul>
 8008ce8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cea:	4606      	mov	r6, r0
 8008cec:	460f      	mov	r7, r1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d09f      	beq.n	8008c32 <_strtod_l+0x98a>
 8008cf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008cf6:	e7a0      	b.n	8008c3a <_strtod_l+0x992>
 8008cf8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008d80 <_strtod_l+0xad8>
 8008cfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d00:	ec57 6b17 	vmov	r6, r7, d7
 8008d04:	e799      	b.n	8008c3a <_strtod_l+0x992>
 8008d06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1c1      	bne.n	8008c98 <_strtod_l+0x9f0>
 8008d14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d18:	0d1b      	lsrs	r3, r3, #20
 8008d1a:	051b      	lsls	r3, r3, #20
 8008d1c:	429d      	cmp	r5, r3
 8008d1e:	d1bb      	bne.n	8008c98 <_strtod_l+0x9f0>
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 ffc8 	bl	8000cb8 <__aeabi_d2lz>
 8008d28:	f7f7 fc38 	bl	800059c <__aeabi_l2d>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	f7f7 faa8 	bl	8000288 <__aeabi_dsub>
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008d40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d46:	ea46 060a 	orr.w	r6, r6, sl
 8008d4a:	431e      	orrs	r6, r3
 8008d4c:	d06f      	beq.n	8008e2e <_strtod_l+0xb86>
 8008d4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d88 <_strtod_l+0xae0>)
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f7f7 fec2 	bl	8000adc <__aeabi_dcmplt>
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	f47f accf 	bne.w	80086fc <_strtod_l+0x454>
 8008d5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008d90 <_strtod_l+0xae8>)
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d68:	f7f7 fed6 	bl	8000b18 <__aeabi_dcmpgt>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d093      	beq.n	8008c98 <_strtod_l+0x9f0>
 8008d70:	e4c4      	b.n	80086fc <_strtod_l+0x454>
 8008d72:	bf00      	nop
 8008d74:	f3af 8000 	nop.w
 8008d78:	00000000 	.word	0x00000000
 8008d7c:	bff00000 	.word	0xbff00000
 8008d80:	00000000 	.word	0x00000000
 8008d84:	3ff00000 	.word	0x3ff00000
 8008d88:	94a03595 	.word	0x94a03595
 8008d8c:	3fdfffff 	.word	0x3fdfffff
 8008d90:	35afe535 	.word	0x35afe535
 8008d94:	3fe00000 	.word	0x3fe00000
 8008d98:	000fffff 	.word	0x000fffff
 8008d9c:	7ff00000 	.word	0x7ff00000
 8008da0:	7fefffff 	.word	0x7fefffff
 8008da4:	3ff00000 	.word	0x3ff00000
 8008da8:	3fe00000 	.word	0x3fe00000
 8008dac:	7fe00000 	.word	0x7fe00000
 8008db0:	7c9fffff 	.word	0x7c9fffff
 8008db4:	9b08      	ldr	r3, [sp, #32]
 8008db6:	b323      	cbz	r3, 8008e02 <_strtod_l+0xb5a>
 8008db8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008dbc:	d821      	bhi.n	8008e02 <_strtod_l+0xb5a>
 8008dbe:	a328      	add	r3, pc, #160	@ (adr r3, 8008e60 <_strtod_l+0xbb8>)
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	f7f7 fe92 	bl	8000af0 <__aeabi_dcmple>
 8008dcc:	b1a0      	cbz	r0, 8008df8 <_strtod_l+0xb50>
 8008dce:	4639      	mov	r1, r7
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7f7 fee9 	bl	8000ba8 <__aeabi_d2uiz>
 8008dd6:	2801      	cmp	r0, #1
 8008dd8:	bf38      	it	cc
 8008dda:	2001      	movcc	r0, #1
 8008ddc:	f7f7 fb92 	bl	8000504 <__aeabi_ui2d>
 8008de0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008de2:	4606      	mov	r6, r0
 8008de4:	460f      	mov	r7, r1
 8008de6:	b9fb      	cbnz	r3, 8008e28 <_strtod_l+0xb80>
 8008de8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008dec:	9014      	str	r0, [sp, #80]	@ 0x50
 8008dee:	9315      	str	r3, [sp, #84]	@ 0x54
 8008df0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008df4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008df8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008dfa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008dfe:	1b5b      	subs	r3, r3, r5
 8008e00:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008e0a:	f7ff f8f1 	bl	8007ff0 <__ulp>
 8008e0e:	4650      	mov	r0, sl
 8008e10:	ec53 2b10 	vmov	r2, r3, d0
 8008e14:	4659      	mov	r1, fp
 8008e16:	f7f7 fbef 	bl	80005f8 <__aeabi_dmul>
 8008e1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e1e:	f7f7 fa35 	bl	800028c <__adddf3>
 8008e22:	4682      	mov	sl, r0
 8008e24:	468b      	mov	fp, r1
 8008e26:	e770      	b.n	8008d0a <_strtod_l+0xa62>
 8008e28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008e2c:	e7e0      	b.n	8008df0 <_strtod_l+0xb48>
 8008e2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e68 <_strtod_l+0xbc0>)
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f7f7 fe52 	bl	8000adc <__aeabi_dcmplt>
 8008e38:	e798      	b.n	8008d6c <_strtod_l+0xac4>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008e40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	f7ff ba6d 	b.w	8008322 <_strtod_l+0x7a>
 8008e48:	2a65      	cmp	r2, #101	@ 0x65
 8008e4a:	f43f ab66 	beq.w	800851a <_strtod_l+0x272>
 8008e4e:	2a45      	cmp	r2, #69	@ 0x45
 8008e50:	f43f ab63 	beq.w	800851a <_strtod_l+0x272>
 8008e54:	2301      	movs	r3, #1
 8008e56:	f7ff bb9e 	b.w	8008596 <_strtod_l+0x2ee>
 8008e5a:	bf00      	nop
 8008e5c:	f3af 8000 	nop.w
 8008e60:	ffc00000 	.word	0xffc00000
 8008e64:	41dfffff 	.word	0x41dfffff
 8008e68:	94a03595 	.word	0x94a03595
 8008e6c:	3fcfffff 	.word	0x3fcfffff

08008e70 <_strtod_r>:
 8008e70:	4b01      	ldr	r3, [pc, #4]	@ (8008e78 <_strtod_r+0x8>)
 8008e72:	f7ff ba19 	b.w	80082a8 <_strtod_l>
 8008e76:	bf00      	nop
 8008e78:	200005a4 	.word	0x200005a4

08008e7c <_strtol_l.constprop.0>:
 8008e7c:	2b24      	cmp	r3, #36	@ 0x24
 8008e7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e82:	4686      	mov	lr, r0
 8008e84:	4690      	mov	r8, r2
 8008e86:	d801      	bhi.n	8008e8c <_strtol_l.constprop.0+0x10>
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d106      	bne.n	8008e9a <_strtol_l.constprop.0+0x1e>
 8008e8c:	f7fd fdbc 	bl	8006a08 <__errno>
 8008e90:	2316      	movs	r3, #22
 8008e92:	6003      	str	r3, [r0, #0]
 8008e94:	2000      	movs	r0, #0
 8008e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9a:	4834      	ldr	r0, [pc, #208]	@ (8008f6c <_strtol_l.constprop.0+0xf0>)
 8008e9c:	460d      	mov	r5, r1
 8008e9e:	462a      	mov	r2, r5
 8008ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ea4:	5d06      	ldrb	r6, [r0, r4]
 8008ea6:	f016 0608 	ands.w	r6, r6, #8
 8008eaa:	d1f8      	bne.n	8008e9e <_strtol_l.constprop.0+0x22>
 8008eac:	2c2d      	cmp	r4, #45	@ 0x2d
 8008eae:	d12d      	bne.n	8008f0c <_strtol_l.constprop.0+0x90>
 8008eb0:	782c      	ldrb	r4, [r5, #0]
 8008eb2:	2601      	movs	r6, #1
 8008eb4:	1c95      	adds	r5, r2, #2
 8008eb6:	f033 0210 	bics.w	r2, r3, #16
 8008eba:	d109      	bne.n	8008ed0 <_strtol_l.constprop.0+0x54>
 8008ebc:	2c30      	cmp	r4, #48	@ 0x30
 8008ebe:	d12a      	bne.n	8008f16 <_strtol_l.constprop.0+0x9a>
 8008ec0:	782a      	ldrb	r2, [r5, #0]
 8008ec2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008ec6:	2a58      	cmp	r2, #88	@ 0x58
 8008ec8:	d125      	bne.n	8008f16 <_strtol_l.constprop.0+0x9a>
 8008eca:	786c      	ldrb	r4, [r5, #1]
 8008ecc:	2310      	movs	r3, #16
 8008ece:	3502      	adds	r5, #2
 8008ed0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ed4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ed8:	2200      	movs	r2, #0
 8008eda:	fbbc f9f3 	udiv	r9, ip, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ee4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ee8:	2f09      	cmp	r7, #9
 8008eea:	d81b      	bhi.n	8008f24 <_strtol_l.constprop.0+0xa8>
 8008eec:	463c      	mov	r4, r7
 8008eee:	42a3      	cmp	r3, r4
 8008ef0:	dd27      	ble.n	8008f42 <_strtol_l.constprop.0+0xc6>
 8008ef2:	1c57      	adds	r7, r2, #1
 8008ef4:	d007      	beq.n	8008f06 <_strtol_l.constprop.0+0x8a>
 8008ef6:	4581      	cmp	r9, r0
 8008ef8:	d320      	bcc.n	8008f3c <_strtol_l.constprop.0+0xc0>
 8008efa:	d101      	bne.n	8008f00 <_strtol_l.constprop.0+0x84>
 8008efc:	45a2      	cmp	sl, r4
 8008efe:	db1d      	blt.n	8008f3c <_strtol_l.constprop.0+0xc0>
 8008f00:	fb00 4003 	mla	r0, r0, r3, r4
 8008f04:	2201      	movs	r2, #1
 8008f06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f0a:	e7eb      	b.n	8008ee4 <_strtol_l.constprop.0+0x68>
 8008f0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f0e:	bf04      	itt	eq
 8008f10:	782c      	ldrbeq	r4, [r5, #0]
 8008f12:	1c95      	addeq	r5, r2, #2
 8008f14:	e7cf      	b.n	8008eb6 <_strtol_l.constprop.0+0x3a>
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1da      	bne.n	8008ed0 <_strtol_l.constprop.0+0x54>
 8008f1a:	2c30      	cmp	r4, #48	@ 0x30
 8008f1c:	bf0c      	ite	eq
 8008f1e:	2308      	moveq	r3, #8
 8008f20:	230a      	movne	r3, #10
 8008f22:	e7d5      	b.n	8008ed0 <_strtol_l.constprop.0+0x54>
 8008f24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008f28:	2f19      	cmp	r7, #25
 8008f2a:	d801      	bhi.n	8008f30 <_strtol_l.constprop.0+0xb4>
 8008f2c:	3c37      	subs	r4, #55	@ 0x37
 8008f2e:	e7de      	b.n	8008eee <_strtol_l.constprop.0+0x72>
 8008f30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008f34:	2f19      	cmp	r7, #25
 8008f36:	d804      	bhi.n	8008f42 <_strtol_l.constprop.0+0xc6>
 8008f38:	3c57      	subs	r4, #87	@ 0x57
 8008f3a:	e7d8      	b.n	8008eee <_strtol_l.constprop.0+0x72>
 8008f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f40:	e7e1      	b.n	8008f06 <_strtol_l.constprop.0+0x8a>
 8008f42:	1c53      	adds	r3, r2, #1
 8008f44:	d108      	bne.n	8008f58 <_strtol_l.constprop.0+0xdc>
 8008f46:	2322      	movs	r3, #34	@ 0x22
 8008f48:	f8ce 3000 	str.w	r3, [lr]
 8008f4c:	4660      	mov	r0, ip
 8008f4e:	f1b8 0f00 	cmp.w	r8, #0
 8008f52:	d0a0      	beq.n	8008e96 <_strtol_l.constprop.0+0x1a>
 8008f54:	1e69      	subs	r1, r5, #1
 8008f56:	e006      	b.n	8008f66 <_strtol_l.constprop.0+0xea>
 8008f58:	b106      	cbz	r6, 8008f5c <_strtol_l.constprop.0+0xe0>
 8008f5a:	4240      	negs	r0, r0
 8008f5c:	f1b8 0f00 	cmp.w	r8, #0
 8008f60:	d099      	beq.n	8008e96 <_strtol_l.constprop.0+0x1a>
 8008f62:	2a00      	cmp	r2, #0
 8008f64:	d1f6      	bne.n	8008f54 <_strtol_l.constprop.0+0xd8>
 8008f66:	f8c8 1000 	str.w	r1, [r8]
 8008f6a:	e794      	b.n	8008e96 <_strtol_l.constprop.0+0x1a>
 8008f6c:	0800a481 	.word	0x0800a481

08008f70 <_strtol_r>:
 8008f70:	f7ff bf84 	b.w	8008e7c <_strtol_l.constprop.0>

08008f74 <__ssputs_r>:
 8008f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f78:	688e      	ldr	r6, [r1, #8]
 8008f7a:	461f      	mov	r7, r3
 8008f7c:	42be      	cmp	r6, r7
 8008f7e:	680b      	ldr	r3, [r1, #0]
 8008f80:	4682      	mov	sl, r0
 8008f82:	460c      	mov	r4, r1
 8008f84:	4690      	mov	r8, r2
 8008f86:	d82d      	bhi.n	8008fe4 <__ssputs_r+0x70>
 8008f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f90:	d026      	beq.n	8008fe0 <__ssputs_r+0x6c>
 8008f92:	6965      	ldr	r5, [r4, #20]
 8008f94:	6909      	ldr	r1, [r1, #16]
 8008f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f9a:	eba3 0901 	sub.w	r9, r3, r1
 8008f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fa2:	1c7b      	adds	r3, r7, #1
 8008fa4:	444b      	add	r3, r9
 8008fa6:	106d      	asrs	r5, r5, #1
 8008fa8:	429d      	cmp	r5, r3
 8008faa:	bf38      	it	cc
 8008fac:	461d      	movcc	r5, r3
 8008fae:	0553      	lsls	r3, r2, #21
 8008fb0:	d527      	bpl.n	8009002 <__ssputs_r+0x8e>
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	f7fe fc1c 	bl	80077f0 <_malloc_r>
 8008fb8:	4606      	mov	r6, r0
 8008fba:	b360      	cbz	r0, 8009016 <__ssputs_r+0xa2>
 8008fbc:	6921      	ldr	r1, [r4, #16]
 8008fbe:	464a      	mov	r2, r9
 8008fc0:	f000 fbee 	bl	80097a0 <memcpy>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	6126      	str	r6, [r4, #16]
 8008fd2:	6165      	str	r5, [r4, #20]
 8008fd4:	444e      	add	r6, r9
 8008fd6:	eba5 0509 	sub.w	r5, r5, r9
 8008fda:	6026      	str	r6, [r4, #0]
 8008fdc:	60a5      	str	r5, [r4, #8]
 8008fde:	463e      	mov	r6, r7
 8008fe0:	42be      	cmp	r6, r7
 8008fe2:	d900      	bls.n	8008fe6 <__ssputs_r+0x72>
 8008fe4:	463e      	mov	r6, r7
 8008fe6:	6820      	ldr	r0, [r4, #0]
 8008fe8:	4632      	mov	r2, r6
 8008fea:	4641      	mov	r1, r8
 8008fec:	f000 fb9c 	bl	8009728 <memmove>
 8008ff0:	68a3      	ldr	r3, [r4, #8]
 8008ff2:	1b9b      	subs	r3, r3, r6
 8008ff4:	60a3      	str	r3, [r4, #8]
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	4433      	add	r3, r6
 8008ffa:	6023      	str	r3, [r4, #0]
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009002:	462a      	mov	r2, r5
 8009004:	f000 ff61 	bl	8009eca <_realloc_r>
 8009008:	4606      	mov	r6, r0
 800900a:	2800      	cmp	r0, #0
 800900c:	d1e0      	bne.n	8008fd0 <__ssputs_r+0x5c>
 800900e:	6921      	ldr	r1, [r4, #16]
 8009010:	4650      	mov	r0, sl
 8009012:	f7fe fb79 	bl	8007708 <_free_r>
 8009016:	230c      	movs	r3, #12
 8009018:	f8ca 3000 	str.w	r3, [sl]
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	e7e9      	b.n	8008ffe <__ssputs_r+0x8a>
	...

0800902c <_svfiprintf_r>:
 800902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009030:	4698      	mov	r8, r3
 8009032:	898b      	ldrh	r3, [r1, #12]
 8009034:	061b      	lsls	r3, r3, #24
 8009036:	b09d      	sub	sp, #116	@ 0x74
 8009038:	4607      	mov	r7, r0
 800903a:	460d      	mov	r5, r1
 800903c:	4614      	mov	r4, r2
 800903e:	d510      	bpl.n	8009062 <_svfiprintf_r+0x36>
 8009040:	690b      	ldr	r3, [r1, #16]
 8009042:	b973      	cbnz	r3, 8009062 <_svfiprintf_r+0x36>
 8009044:	2140      	movs	r1, #64	@ 0x40
 8009046:	f7fe fbd3 	bl	80077f0 <_malloc_r>
 800904a:	6028      	str	r0, [r5, #0]
 800904c:	6128      	str	r0, [r5, #16]
 800904e:	b930      	cbnz	r0, 800905e <_svfiprintf_r+0x32>
 8009050:	230c      	movs	r3, #12
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	b01d      	add	sp, #116	@ 0x74
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	2340      	movs	r3, #64	@ 0x40
 8009060:	616b      	str	r3, [r5, #20]
 8009062:	2300      	movs	r3, #0
 8009064:	9309      	str	r3, [sp, #36]	@ 0x24
 8009066:	2320      	movs	r3, #32
 8009068:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800906c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009070:	2330      	movs	r3, #48	@ 0x30
 8009072:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009210 <_svfiprintf_r+0x1e4>
 8009076:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800907a:	f04f 0901 	mov.w	r9, #1
 800907e:	4623      	mov	r3, r4
 8009080:	469a      	mov	sl, r3
 8009082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009086:	b10a      	cbz	r2, 800908c <_svfiprintf_r+0x60>
 8009088:	2a25      	cmp	r2, #37	@ 0x25
 800908a:	d1f9      	bne.n	8009080 <_svfiprintf_r+0x54>
 800908c:	ebba 0b04 	subs.w	fp, sl, r4
 8009090:	d00b      	beq.n	80090aa <_svfiprintf_r+0x7e>
 8009092:	465b      	mov	r3, fp
 8009094:	4622      	mov	r2, r4
 8009096:	4629      	mov	r1, r5
 8009098:	4638      	mov	r0, r7
 800909a:	f7ff ff6b 	bl	8008f74 <__ssputs_r>
 800909e:	3001      	adds	r0, #1
 80090a0:	f000 80a7 	beq.w	80091f2 <_svfiprintf_r+0x1c6>
 80090a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090a6:	445a      	add	r2, fp
 80090a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80090aa:	f89a 3000 	ldrb.w	r3, [sl]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 809f 	beq.w	80091f2 <_svfiprintf_r+0x1c6>
 80090b4:	2300      	movs	r3, #0
 80090b6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090be:	f10a 0a01 	add.w	sl, sl, #1
 80090c2:	9304      	str	r3, [sp, #16]
 80090c4:	9307      	str	r3, [sp, #28]
 80090c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80090ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80090cc:	4654      	mov	r4, sl
 80090ce:	2205      	movs	r2, #5
 80090d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d4:	484e      	ldr	r0, [pc, #312]	@ (8009210 <_svfiprintf_r+0x1e4>)
 80090d6:	f7f7 f87b 	bl	80001d0 <memchr>
 80090da:	9a04      	ldr	r2, [sp, #16]
 80090dc:	b9d8      	cbnz	r0, 8009116 <_svfiprintf_r+0xea>
 80090de:	06d0      	lsls	r0, r2, #27
 80090e0:	bf44      	itt	mi
 80090e2:	2320      	movmi	r3, #32
 80090e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090e8:	0711      	lsls	r1, r2, #28
 80090ea:	bf44      	itt	mi
 80090ec:	232b      	movmi	r3, #43	@ 0x2b
 80090ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090f2:	f89a 3000 	ldrb.w	r3, [sl]
 80090f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80090f8:	d015      	beq.n	8009126 <_svfiprintf_r+0xfa>
 80090fa:	9a07      	ldr	r2, [sp, #28]
 80090fc:	4654      	mov	r4, sl
 80090fe:	2000      	movs	r0, #0
 8009100:	f04f 0c0a 	mov.w	ip, #10
 8009104:	4621      	mov	r1, r4
 8009106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800910a:	3b30      	subs	r3, #48	@ 0x30
 800910c:	2b09      	cmp	r3, #9
 800910e:	d94b      	bls.n	80091a8 <_svfiprintf_r+0x17c>
 8009110:	b1b0      	cbz	r0, 8009140 <_svfiprintf_r+0x114>
 8009112:	9207      	str	r2, [sp, #28]
 8009114:	e014      	b.n	8009140 <_svfiprintf_r+0x114>
 8009116:	eba0 0308 	sub.w	r3, r0, r8
 800911a:	fa09 f303 	lsl.w	r3, r9, r3
 800911e:	4313      	orrs	r3, r2
 8009120:	9304      	str	r3, [sp, #16]
 8009122:	46a2      	mov	sl, r4
 8009124:	e7d2      	b.n	80090cc <_svfiprintf_r+0xa0>
 8009126:	9b03      	ldr	r3, [sp, #12]
 8009128:	1d19      	adds	r1, r3, #4
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	9103      	str	r1, [sp, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	bfbb      	ittet	lt
 8009132:	425b      	neglt	r3, r3
 8009134:	f042 0202 	orrlt.w	r2, r2, #2
 8009138:	9307      	strge	r3, [sp, #28]
 800913a:	9307      	strlt	r3, [sp, #28]
 800913c:	bfb8      	it	lt
 800913e:	9204      	strlt	r2, [sp, #16]
 8009140:	7823      	ldrb	r3, [r4, #0]
 8009142:	2b2e      	cmp	r3, #46	@ 0x2e
 8009144:	d10a      	bne.n	800915c <_svfiprintf_r+0x130>
 8009146:	7863      	ldrb	r3, [r4, #1]
 8009148:	2b2a      	cmp	r3, #42	@ 0x2a
 800914a:	d132      	bne.n	80091b2 <_svfiprintf_r+0x186>
 800914c:	9b03      	ldr	r3, [sp, #12]
 800914e:	1d1a      	adds	r2, r3, #4
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	9203      	str	r2, [sp, #12]
 8009154:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009158:	3402      	adds	r4, #2
 800915a:	9305      	str	r3, [sp, #20]
 800915c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009220 <_svfiprintf_r+0x1f4>
 8009160:	7821      	ldrb	r1, [r4, #0]
 8009162:	2203      	movs	r2, #3
 8009164:	4650      	mov	r0, sl
 8009166:	f7f7 f833 	bl	80001d0 <memchr>
 800916a:	b138      	cbz	r0, 800917c <_svfiprintf_r+0x150>
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	eba0 000a 	sub.w	r0, r0, sl
 8009172:	2240      	movs	r2, #64	@ 0x40
 8009174:	4082      	lsls	r2, r0
 8009176:	4313      	orrs	r3, r2
 8009178:	3401      	adds	r4, #1
 800917a:	9304      	str	r3, [sp, #16]
 800917c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009180:	4824      	ldr	r0, [pc, #144]	@ (8009214 <_svfiprintf_r+0x1e8>)
 8009182:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009186:	2206      	movs	r2, #6
 8009188:	f7f7 f822 	bl	80001d0 <memchr>
 800918c:	2800      	cmp	r0, #0
 800918e:	d036      	beq.n	80091fe <_svfiprintf_r+0x1d2>
 8009190:	4b21      	ldr	r3, [pc, #132]	@ (8009218 <_svfiprintf_r+0x1ec>)
 8009192:	bb1b      	cbnz	r3, 80091dc <_svfiprintf_r+0x1b0>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	3307      	adds	r3, #7
 8009198:	f023 0307 	bic.w	r3, r3, #7
 800919c:	3308      	adds	r3, #8
 800919e:	9303      	str	r3, [sp, #12]
 80091a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a2:	4433      	add	r3, r6
 80091a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a6:	e76a      	b.n	800907e <_svfiprintf_r+0x52>
 80091a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ac:	460c      	mov	r4, r1
 80091ae:	2001      	movs	r0, #1
 80091b0:	e7a8      	b.n	8009104 <_svfiprintf_r+0xd8>
 80091b2:	2300      	movs	r3, #0
 80091b4:	3401      	adds	r4, #1
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	4619      	mov	r1, r3
 80091ba:	f04f 0c0a 	mov.w	ip, #10
 80091be:	4620      	mov	r0, r4
 80091c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c4:	3a30      	subs	r2, #48	@ 0x30
 80091c6:	2a09      	cmp	r2, #9
 80091c8:	d903      	bls.n	80091d2 <_svfiprintf_r+0x1a6>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0c6      	beq.n	800915c <_svfiprintf_r+0x130>
 80091ce:	9105      	str	r1, [sp, #20]
 80091d0:	e7c4      	b.n	800915c <_svfiprintf_r+0x130>
 80091d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d6:	4604      	mov	r4, r0
 80091d8:	2301      	movs	r3, #1
 80091da:	e7f0      	b.n	80091be <_svfiprintf_r+0x192>
 80091dc:	ab03      	add	r3, sp, #12
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	462a      	mov	r2, r5
 80091e2:	4b0e      	ldr	r3, [pc, #56]	@ (800921c <_svfiprintf_r+0x1f0>)
 80091e4:	a904      	add	r1, sp, #16
 80091e6:	4638      	mov	r0, r7
 80091e8:	f7fc fcb8 	bl	8005b5c <_printf_float>
 80091ec:	1c42      	adds	r2, r0, #1
 80091ee:	4606      	mov	r6, r0
 80091f0:	d1d6      	bne.n	80091a0 <_svfiprintf_r+0x174>
 80091f2:	89ab      	ldrh	r3, [r5, #12]
 80091f4:	065b      	lsls	r3, r3, #25
 80091f6:	f53f af2d 	bmi.w	8009054 <_svfiprintf_r+0x28>
 80091fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091fc:	e72c      	b.n	8009058 <_svfiprintf_r+0x2c>
 80091fe:	ab03      	add	r3, sp, #12
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	462a      	mov	r2, r5
 8009204:	4b05      	ldr	r3, [pc, #20]	@ (800921c <_svfiprintf_r+0x1f0>)
 8009206:	a904      	add	r1, sp, #16
 8009208:	4638      	mov	r0, r7
 800920a:	f7fc ff3f 	bl	800608c <_printf_i>
 800920e:	e7ed      	b.n	80091ec <_svfiprintf_r+0x1c0>
 8009210:	0800a581 	.word	0x0800a581
 8009214:	0800a58b 	.word	0x0800a58b
 8009218:	08005b5d 	.word	0x08005b5d
 800921c:	08008f75 	.word	0x08008f75
 8009220:	0800a587 	.word	0x0800a587

08009224 <__sfputc_r>:
 8009224:	6893      	ldr	r3, [r2, #8]
 8009226:	3b01      	subs	r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	b410      	push	{r4}
 800922c:	6093      	str	r3, [r2, #8]
 800922e:	da08      	bge.n	8009242 <__sfputc_r+0x1e>
 8009230:	6994      	ldr	r4, [r2, #24]
 8009232:	42a3      	cmp	r3, r4
 8009234:	db01      	blt.n	800923a <__sfputc_r+0x16>
 8009236:	290a      	cmp	r1, #10
 8009238:	d103      	bne.n	8009242 <__sfputc_r+0x1e>
 800923a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800923e:	f000 b9df 	b.w	8009600 <__swbuf_r>
 8009242:	6813      	ldr	r3, [r2, #0]
 8009244:	1c58      	adds	r0, r3, #1
 8009246:	6010      	str	r0, [r2, #0]
 8009248:	7019      	strb	r1, [r3, #0]
 800924a:	4608      	mov	r0, r1
 800924c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009250:	4770      	bx	lr

08009252 <__sfputs_r>:
 8009252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009254:	4606      	mov	r6, r0
 8009256:	460f      	mov	r7, r1
 8009258:	4614      	mov	r4, r2
 800925a:	18d5      	adds	r5, r2, r3
 800925c:	42ac      	cmp	r4, r5
 800925e:	d101      	bne.n	8009264 <__sfputs_r+0x12>
 8009260:	2000      	movs	r0, #0
 8009262:	e007      	b.n	8009274 <__sfputs_r+0x22>
 8009264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009268:	463a      	mov	r2, r7
 800926a:	4630      	mov	r0, r6
 800926c:	f7ff ffda 	bl	8009224 <__sfputc_r>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d1f3      	bne.n	800925c <__sfputs_r+0xa>
 8009274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009278 <_vfiprintf_r>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	460d      	mov	r5, r1
 800927e:	b09d      	sub	sp, #116	@ 0x74
 8009280:	4614      	mov	r4, r2
 8009282:	4698      	mov	r8, r3
 8009284:	4606      	mov	r6, r0
 8009286:	b118      	cbz	r0, 8009290 <_vfiprintf_r+0x18>
 8009288:	6a03      	ldr	r3, [r0, #32]
 800928a:	b90b      	cbnz	r3, 8009290 <_vfiprintf_r+0x18>
 800928c:	f7fd fabe 	bl	800680c <__sinit>
 8009290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009292:	07d9      	lsls	r1, r3, #31
 8009294:	d405      	bmi.n	80092a2 <_vfiprintf_r+0x2a>
 8009296:	89ab      	ldrh	r3, [r5, #12]
 8009298:	059a      	lsls	r2, r3, #22
 800929a:	d402      	bmi.n	80092a2 <_vfiprintf_r+0x2a>
 800929c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800929e:	f7fd fbde 	bl	8006a5e <__retarget_lock_acquire_recursive>
 80092a2:	89ab      	ldrh	r3, [r5, #12]
 80092a4:	071b      	lsls	r3, r3, #28
 80092a6:	d501      	bpl.n	80092ac <_vfiprintf_r+0x34>
 80092a8:	692b      	ldr	r3, [r5, #16]
 80092aa:	b99b      	cbnz	r3, 80092d4 <_vfiprintf_r+0x5c>
 80092ac:	4629      	mov	r1, r5
 80092ae:	4630      	mov	r0, r6
 80092b0:	f000 f9e4 	bl	800967c <__swsetup_r>
 80092b4:	b170      	cbz	r0, 80092d4 <_vfiprintf_r+0x5c>
 80092b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092b8:	07dc      	lsls	r4, r3, #31
 80092ba:	d504      	bpl.n	80092c6 <_vfiprintf_r+0x4e>
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295
 80092c0:	b01d      	add	sp, #116	@ 0x74
 80092c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c6:	89ab      	ldrh	r3, [r5, #12]
 80092c8:	0598      	lsls	r0, r3, #22
 80092ca:	d4f7      	bmi.n	80092bc <_vfiprintf_r+0x44>
 80092cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ce:	f7fd fbc7 	bl	8006a60 <__retarget_lock_release_recursive>
 80092d2:	e7f3      	b.n	80092bc <_vfiprintf_r+0x44>
 80092d4:	2300      	movs	r3, #0
 80092d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80092d8:	2320      	movs	r3, #32
 80092da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092de:	f8cd 800c 	str.w	r8, [sp, #12]
 80092e2:	2330      	movs	r3, #48	@ 0x30
 80092e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009494 <_vfiprintf_r+0x21c>
 80092e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092ec:	f04f 0901 	mov.w	r9, #1
 80092f0:	4623      	mov	r3, r4
 80092f2:	469a      	mov	sl, r3
 80092f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092f8:	b10a      	cbz	r2, 80092fe <_vfiprintf_r+0x86>
 80092fa:	2a25      	cmp	r2, #37	@ 0x25
 80092fc:	d1f9      	bne.n	80092f2 <_vfiprintf_r+0x7a>
 80092fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009302:	d00b      	beq.n	800931c <_vfiprintf_r+0xa4>
 8009304:	465b      	mov	r3, fp
 8009306:	4622      	mov	r2, r4
 8009308:	4629      	mov	r1, r5
 800930a:	4630      	mov	r0, r6
 800930c:	f7ff ffa1 	bl	8009252 <__sfputs_r>
 8009310:	3001      	adds	r0, #1
 8009312:	f000 80a7 	beq.w	8009464 <_vfiprintf_r+0x1ec>
 8009316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009318:	445a      	add	r2, fp
 800931a:	9209      	str	r2, [sp, #36]	@ 0x24
 800931c:	f89a 3000 	ldrb.w	r3, [sl]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 809f 	beq.w	8009464 <_vfiprintf_r+0x1ec>
 8009326:	2300      	movs	r3, #0
 8009328:	f04f 32ff 	mov.w	r2, #4294967295
 800932c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009330:	f10a 0a01 	add.w	sl, sl, #1
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	9307      	str	r3, [sp, #28]
 8009338:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800933c:	931a      	str	r3, [sp, #104]	@ 0x68
 800933e:	4654      	mov	r4, sl
 8009340:	2205      	movs	r2, #5
 8009342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009346:	4853      	ldr	r0, [pc, #332]	@ (8009494 <_vfiprintf_r+0x21c>)
 8009348:	f7f6 ff42 	bl	80001d0 <memchr>
 800934c:	9a04      	ldr	r2, [sp, #16]
 800934e:	b9d8      	cbnz	r0, 8009388 <_vfiprintf_r+0x110>
 8009350:	06d1      	lsls	r1, r2, #27
 8009352:	bf44      	itt	mi
 8009354:	2320      	movmi	r3, #32
 8009356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800935a:	0713      	lsls	r3, r2, #28
 800935c:	bf44      	itt	mi
 800935e:	232b      	movmi	r3, #43	@ 0x2b
 8009360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009364:	f89a 3000 	ldrb.w	r3, [sl]
 8009368:	2b2a      	cmp	r3, #42	@ 0x2a
 800936a:	d015      	beq.n	8009398 <_vfiprintf_r+0x120>
 800936c:	9a07      	ldr	r2, [sp, #28]
 800936e:	4654      	mov	r4, sl
 8009370:	2000      	movs	r0, #0
 8009372:	f04f 0c0a 	mov.w	ip, #10
 8009376:	4621      	mov	r1, r4
 8009378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800937c:	3b30      	subs	r3, #48	@ 0x30
 800937e:	2b09      	cmp	r3, #9
 8009380:	d94b      	bls.n	800941a <_vfiprintf_r+0x1a2>
 8009382:	b1b0      	cbz	r0, 80093b2 <_vfiprintf_r+0x13a>
 8009384:	9207      	str	r2, [sp, #28]
 8009386:	e014      	b.n	80093b2 <_vfiprintf_r+0x13a>
 8009388:	eba0 0308 	sub.w	r3, r0, r8
 800938c:	fa09 f303 	lsl.w	r3, r9, r3
 8009390:	4313      	orrs	r3, r2
 8009392:	9304      	str	r3, [sp, #16]
 8009394:	46a2      	mov	sl, r4
 8009396:	e7d2      	b.n	800933e <_vfiprintf_r+0xc6>
 8009398:	9b03      	ldr	r3, [sp, #12]
 800939a:	1d19      	adds	r1, r3, #4
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	9103      	str	r1, [sp, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	bfbb      	ittet	lt
 80093a4:	425b      	neglt	r3, r3
 80093a6:	f042 0202 	orrlt.w	r2, r2, #2
 80093aa:	9307      	strge	r3, [sp, #28]
 80093ac:	9307      	strlt	r3, [sp, #28]
 80093ae:	bfb8      	it	lt
 80093b0:	9204      	strlt	r2, [sp, #16]
 80093b2:	7823      	ldrb	r3, [r4, #0]
 80093b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80093b6:	d10a      	bne.n	80093ce <_vfiprintf_r+0x156>
 80093b8:	7863      	ldrb	r3, [r4, #1]
 80093ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80093bc:	d132      	bne.n	8009424 <_vfiprintf_r+0x1ac>
 80093be:	9b03      	ldr	r3, [sp, #12]
 80093c0:	1d1a      	adds	r2, r3, #4
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	9203      	str	r2, [sp, #12]
 80093c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093ca:	3402      	adds	r4, #2
 80093cc:	9305      	str	r3, [sp, #20]
 80093ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094a4 <_vfiprintf_r+0x22c>
 80093d2:	7821      	ldrb	r1, [r4, #0]
 80093d4:	2203      	movs	r2, #3
 80093d6:	4650      	mov	r0, sl
 80093d8:	f7f6 fefa 	bl	80001d0 <memchr>
 80093dc:	b138      	cbz	r0, 80093ee <_vfiprintf_r+0x176>
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	eba0 000a 	sub.w	r0, r0, sl
 80093e4:	2240      	movs	r2, #64	@ 0x40
 80093e6:	4082      	lsls	r2, r0
 80093e8:	4313      	orrs	r3, r2
 80093ea:	3401      	adds	r4, #1
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f2:	4829      	ldr	r0, [pc, #164]	@ (8009498 <_vfiprintf_r+0x220>)
 80093f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093f8:	2206      	movs	r2, #6
 80093fa:	f7f6 fee9 	bl	80001d0 <memchr>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d03f      	beq.n	8009482 <_vfiprintf_r+0x20a>
 8009402:	4b26      	ldr	r3, [pc, #152]	@ (800949c <_vfiprintf_r+0x224>)
 8009404:	bb1b      	cbnz	r3, 800944e <_vfiprintf_r+0x1d6>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	3307      	adds	r3, #7
 800940a:	f023 0307 	bic.w	r3, r3, #7
 800940e:	3308      	adds	r3, #8
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009414:	443b      	add	r3, r7
 8009416:	9309      	str	r3, [sp, #36]	@ 0x24
 8009418:	e76a      	b.n	80092f0 <_vfiprintf_r+0x78>
 800941a:	fb0c 3202 	mla	r2, ip, r2, r3
 800941e:	460c      	mov	r4, r1
 8009420:	2001      	movs	r0, #1
 8009422:	e7a8      	b.n	8009376 <_vfiprintf_r+0xfe>
 8009424:	2300      	movs	r3, #0
 8009426:	3401      	adds	r4, #1
 8009428:	9305      	str	r3, [sp, #20]
 800942a:	4619      	mov	r1, r3
 800942c:	f04f 0c0a 	mov.w	ip, #10
 8009430:	4620      	mov	r0, r4
 8009432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009436:	3a30      	subs	r2, #48	@ 0x30
 8009438:	2a09      	cmp	r2, #9
 800943a:	d903      	bls.n	8009444 <_vfiprintf_r+0x1cc>
 800943c:	2b00      	cmp	r3, #0
 800943e:	d0c6      	beq.n	80093ce <_vfiprintf_r+0x156>
 8009440:	9105      	str	r1, [sp, #20]
 8009442:	e7c4      	b.n	80093ce <_vfiprintf_r+0x156>
 8009444:	fb0c 2101 	mla	r1, ip, r1, r2
 8009448:	4604      	mov	r4, r0
 800944a:	2301      	movs	r3, #1
 800944c:	e7f0      	b.n	8009430 <_vfiprintf_r+0x1b8>
 800944e:	ab03      	add	r3, sp, #12
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	462a      	mov	r2, r5
 8009454:	4b12      	ldr	r3, [pc, #72]	@ (80094a0 <_vfiprintf_r+0x228>)
 8009456:	a904      	add	r1, sp, #16
 8009458:	4630      	mov	r0, r6
 800945a:	f7fc fb7f 	bl	8005b5c <_printf_float>
 800945e:	4607      	mov	r7, r0
 8009460:	1c78      	adds	r0, r7, #1
 8009462:	d1d6      	bne.n	8009412 <_vfiprintf_r+0x19a>
 8009464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009466:	07d9      	lsls	r1, r3, #31
 8009468:	d405      	bmi.n	8009476 <_vfiprintf_r+0x1fe>
 800946a:	89ab      	ldrh	r3, [r5, #12]
 800946c:	059a      	lsls	r2, r3, #22
 800946e:	d402      	bmi.n	8009476 <_vfiprintf_r+0x1fe>
 8009470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009472:	f7fd faf5 	bl	8006a60 <__retarget_lock_release_recursive>
 8009476:	89ab      	ldrh	r3, [r5, #12]
 8009478:	065b      	lsls	r3, r3, #25
 800947a:	f53f af1f 	bmi.w	80092bc <_vfiprintf_r+0x44>
 800947e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009480:	e71e      	b.n	80092c0 <_vfiprintf_r+0x48>
 8009482:	ab03      	add	r3, sp, #12
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	462a      	mov	r2, r5
 8009488:	4b05      	ldr	r3, [pc, #20]	@ (80094a0 <_vfiprintf_r+0x228>)
 800948a:	a904      	add	r1, sp, #16
 800948c:	4630      	mov	r0, r6
 800948e:	f7fc fdfd 	bl	800608c <_printf_i>
 8009492:	e7e4      	b.n	800945e <_vfiprintf_r+0x1e6>
 8009494:	0800a581 	.word	0x0800a581
 8009498:	0800a58b 	.word	0x0800a58b
 800949c:	08005b5d 	.word	0x08005b5d
 80094a0:	08009253 	.word	0x08009253
 80094a4:	0800a587 	.word	0x0800a587

080094a8 <__sflush_r>:
 80094a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b0:	0716      	lsls	r6, r2, #28
 80094b2:	4605      	mov	r5, r0
 80094b4:	460c      	mov	r4, r1
 80094b6:	d454      	bmi.n	8009562 <__sflush_r+0xba>
 80094b8:	684b      	ldr	r3, [r1, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	dc02      	bgt.n	80094c4 <__sflush_r+0x1c>
 80094be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dd48      	ble.n	8009556 <__sflush_r+0xae>
 80094c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094c6:	2e00      	cmp	r6, #0
 80094c8:	d045      	beq.n	8009556 <__sflush_r+0xae>
 80094ca:	2300      	movs	r3, #0
 80094cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094d0:	682f      	ldr	r7, [r5, #0]
 80094d2:	6a21      	ldr	r1, [r4, #32]
 80094d4:	602b      	str	r3, [r5, #0]
 80094d6:	d030      	beq.n	800953a <__sflush_r+0x92>
 80094d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	0759      	lsls	r1, r3, #29
 80094de:	d505      	bpl.n	80094ec <__sflush_r+0x44>
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	1ad2      	subs	r2, r2, r3
 80094e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094e6:	b10b      	cbz	r3, 80094ec <__sflush_r+0x44>
 80094e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094ea:	1ad2      	subs	r2, r2, r3
 80094ec:	2300      	movs	r3, #0
 80094ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094f0:	6a21      	ldr	r1, [r4, #32]
 80094f2:	4628      	mov	r0, r5
 80094f4:	47b0      	blx	r6
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	d106      	bne.n	800950a <__sflush_r+0x62>
 80094fc:	6829      	ldr	r1, [r5, #0]
 80094fe:	291d      	cmp	r1, #29
 8009500:	d82b      	bhi.n	800955a <__sflush_r+0xb2>
 8009502:	4a2a      	ldr	r2, [pc, #168]	@ (80095ac <__sflush_r+0x104>)
 8009504:	410a      	asrs	r2, r1
 8009506:	07d6      	lsls	r6, r2, #31
 8009508:	d427      	bmi.n	800955a <__sflush_r+0xb2>
 800950a:	2200      	movs	r2, #0
 800950c:	6062      	str	r2, [r4, #4]
 800950e:	04d9      	lsls	r1, r3, #19
 8009510:	6922      	ldr	r2, [r4, #16]
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	d504      	bpl.n	8009520 <__sflush_r+0x78>
 8009516:	1c42      	adds	r2, r0, #1
 8009518:	d101      	bne.n	800951e <__sflush_r+0x76>
 800951a:	682b      	ldr	r3, [r5, #0]
 800951c:	b903      	cbnz	r3, 8009520 <__sflush_r+0x78>
 800951e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009522:	602f      	str	r7, [r5, #0]
 8009524:	b1b9      	cbz	r1, 8009556 <__sflush_r+0xae>
 8009526:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800952a:	4299      	cmp	r1, r3
 800952c:	d002      	beq.n	8009534 <__sflush_r+0x8c>
 800952e:	4628      	mov	r0, r5
 8009530:	f7fe f8ea 	bl	8007708 <_free_r>
 8009534:	2300      	movs	r3, #0
 8009536:	6363      	str	r3, [r4, #52]	@ 0x34
 8009538:	e00d      	b.n	8009556 <__sflush_r+0xae>
 800953a:	2301      	movs	r3, #1
 800953c:	4628      	mov	r0, r5
 800953e:	47b0      	blx	r6
 8009540:	4602      	mov	r2, r0
 8009542:	1c50      	adds	r0, r2, #1
 8009544:	d1c9      	bne.n	80094da <__sflush_r+0x32>
 8009546:	682b      	ldr	r3, [r5, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0c6      	beq.n	80094da <__sflush_r+0x32>
 800954c:	2b1d      	cmp	r3, #29
 800954e:	d001      	beq.n	8009554 <__sflush_r+0xac>
 8009550:	2b16      	cmp	r3, #22
 8009552:	d11e      	bne.n	8009592 <__sflush_r+0xea>
 8009554:	602f      	str	r7, [r5, #0]
 8009556:	2000      	movs	r0, #0
 8009558:	e022      	b.n	80095a0 <__sflush_r+0xf8>
 800955a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800955e:	b21b      	sxth	r3, r3
 8009560:	e01b      	b.n	800959a <__sflush_r+0xf2>
 8009562:	690f      	ldr	r7, [r1, #16]
 8009564:	2f00      	cmp	r7, #0
 8009566:	d0f6      	beq.n	8009556 <__sflush_r+0xae>
 8009568:	0793      	lsls	r3, r2, #30
 800956a:	680e      	ldr	r6, [r1, #0]
 800956c:	bf08      	it	eq
 800956e:	694b      	ldreq	r3, [r1, #20]
 8009570:	600f      	str	r7, [r1, #0]
 8009572:	bf18      	it	ne
 8009574:	2300      	movne	r3, #0
 8009576:	eba6 0807 	sub.w	r8, r6, r7
 800957a:	608b      	str	r3, [r1, #8]
 800957c:	f1b8 0f00 	cmp.w	r8, #0
 8009580:	dde9      	ble.n	8009556 <__sflush_r+0xae>
 8009582:	6a21      	ldr	r1, [r4, #32]
 8009584:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009586:	4643      	mov	r3, r8
 8009588:	463a      	mov	r2, r7
 800958a:	4628      	mov	r0, r5
 800958c:	47b0      	blx	r6
 800958e:	2800      	cmp	r0, #0
 8009590:	dc08      	bgt.n	80095a4 <__sflush_r+0xfc>
 8009592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a4:	4407      	add	r7, r0
 80095a6:	eba8 0800 	sub.w	r8, r8, r0
 80095aa:	e7e7      	b.n	800957c <__sflush_r+0xd4>
 80095ac:	dfbffffe 	.word	0xdfbffffe

080095b0 <_fflush_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	690b      	ldr	r3, [r1, #16]
 80095b4:	4605      	mov	r5, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	b913      	cbnz	r3, 80095c0 <_fflush_r+0x10>
 80095ba:	2500      	movs	r5, #0
 80095bc:	4628      	mov	r0, r5
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	b118      	cbz	r0, 80095ca <_fflush_r+0x1a>
 80095c2:	6a03      	ldr	r3, [r0, #32]
 80095c4:	b90b      	cbnz	r3, 80095ca <_fflush_r+0x1a>
 80095c6:	f7fd f921 	bl	800680c <__sinit>
 80095ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0f3      	beq.n	80095ba <_fflush_r+0xa>
 80095d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095d4:	07d0      	lsls	r0, r2, #31
 80095d6:	d404      	bmi.n	80095e2 <_fflush_r+0x32>
 80095d8:	0599      	lsls	r1, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_fflush_r+0x32>
 80095dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095de:	f7fd fa3e 	bl	8006a5e <__retarget_lock_acquire_recursive>
 80095e2:	4628      	mov	r0, r5
 80095e4:	4621      	mov	r1, r4
 80095e6:	f7ff ff5f 	bl	80094a8 <__sflush_r>
 80095ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095ec:	07da      	lsls	r2, r3, #31
 80095ee:	4605      	mov	r5, r0
 80095f0:	d4e4      	bmi.n	80095bc <_fflush_r+0xc>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	059b      	lsls	r3, r3, #22
 80095f6:	d4e1      	bmi.n	80095bc <_fflush_r+0xc>
 80095f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095fa:	f7fd fa31 	bl	8006a60 <__retarget_lock_release_recursive>
 80095fe:	e7dd      	b.n	80095bc <_fflush_r+0xc>

08009600 <__swbuf_r>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	460e      	mov	r6, r1
 8009604:	4614      	mov	r4, r2
 8009606:	4605      	mov	r5, r0
 8009608:	b118      	cbz	r0, 8009612 <__swbuf_r+0x12>
 800960a:	6a03      	ldr	r3, [r0, #32]
 800960c:	b90b      	cbnz	r3, 8009612 <__swbuf_r+0x12>
 800960e:	f7fd f8fd 	bl	800680c <__sinit>
 8009612:	69a3      	ldr	r3, [r4, #24]
 8009614:	60a3      	str	r3, [r4, #8]
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	071a      	lsls	r2, r3, #28
 800961a:	d501      	bpl.n	8009620 <__swbuf_r+0x20>
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	b943      	cbnz	r3, 8009632 <__swbuf_r+0x32>
 8009620:	4621      	mov	r1, r4
 8009622:	4628      	mov	r0, r5
 8009624:	f000 f82a 	bl	800967c <__swsetup_r>
 8009628:	b118      	cbz	r0, 8009632 <__swbuf_r+0x32>
 800962a:	f04f 37ff 	mov.w	r7, #4294967295
 800962e:	4638      	mov	r0, r7
 8009630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	6922      	ldr	r2, [r4, #16]
 8009636:	1a98      	subs	r0, r3, r2
 8009638:	6963      	ldr	r3, [r4, #20]
 800963a:	b2f6      	uxtb	r6, r6
 800963c:	4283      	cmp	r3, r0
 800963e:	4637      	mov	r7, r6
 8009640:	dc05      	bgt.n	800964e <__swbuf_r+0x4e>
 8009642:	4621      	mov	r1, r4
 8009644:	4628      	mov	r0, r5
 8009646:	f7ff ffb3 	bl	80095b0 <_fflush_r>
 800964a:	2800      	cmp	r0, #0
 800964c:	d1ed      	bne.n	800962a <__swbuf_r+0x2a>
 800964e:	68a3      	ldr	r3, [r4, #8]
 8009650:	3b01      	subs	r3, #1
 8009652:	60a3      	str	r3, [r4, #8]
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	6022      	str	r2, [r4, #0]
 800965a:	701e      	strb	r6, [r3, #0]
 800965c:	6962      	ldr	r2, [r4, #20]
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	429a      	cmp	r2, r3
 8009662:	d004      	beq.n	800966e <__swbuf_r+0x6e>
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	07db      	lsls	r3, r3, #31
 8009668:	d5e1      	bpl.n	800962e <__swbuf_r+0x2e>
 800966a:	2e0a      	cmp	r6, #10
 800966c:	d1df      	bne.n	800962e <__swbuf_r+0x2e>
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f7ff ff9d 	bl	80095b0 <_fflush_r>
 8009676:	2800      	cmp	r0, #0
 8009678:	d0d9      	beq.n	800962e <__swbuf_r+0x2e>
 800967a:	e7d6      	b.n	800962a <__swbuf_r+0x2a>

0800967c <__swsetup_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4b29      	ldr	r3, [pc, #164]	@ (8009724 <__swsetup_r+0xa8>)
 8009680:	4605      	mov	r5, r0
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	460c      	mov	r4, r1
 8009686:	b118      	cbz	r0, 8009690 <__swsetup_r+0x14>
 8009688:	6a03      	ldr	r3, [r0, #32]
 800968a:	b90b      	cbnz	r3, 8009690 <__swsetup_r+0x14>
 800968c:	f7fd f8be 	bl	800680c <__sinit>
 8009690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009694:	0719      	lsls	r1, r3, #28
 8009696:	d422      	bmi.n	80096de <__swsetup_r+0x62>
 8009698:	06da      	lsls	r2, r3, #27
 800969a:	d407      	bmi.n	80096ac <__swsetup_r+0x30>
 800969c:	2209      	movs	r2, #9
 800969e:	602a      	str	r2, [r5, #0]
 80096a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	f04f 30ff 	mov.w	r0, #4294967295
 80096aa:	e033      	b.n	8009714 <__swsetup_r+0x98>
 80096ac:	0758      	lsls	r0, r3, #29
 80096ae:	d512      	bpl.n	80096d6 <__swsetup_r+0x5a>
 80096b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096b2:	b141      	cbz	r1, 80096c6 <__swsetup_r+0x4a>
 80096b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096b8:	4299      	cmp	r1, r3
 80096ba:	d002      	beq.n	80096c2 <__swsetup_r+0x46>
 80096bc:	4628      	mov	r0, r5
 80096be:	f7fe f823 	bl	8007708 <_free_r>
 80096c2:	2300      	movs	r3, #0
 80096c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	2300      	movs	r3, #0
 80096d0:	6063      	str	r3, [r4, #4]
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	f043 0308 	orr.w	r3, r3, #8
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	b94b      	cbnz	r3, 80096f6 <__swsetup_r+0x7a>
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096ec:	d003      	beq.n	80096f6 <__swsetup_r+0x7a>
 80096ee:	4621      	mov	r1, r4
 80096f0:	4628      	mov	r0, r5
 80096f2:	f000 fc5d 	bl	8009fb0 <__smakebuf_r>
 80096f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fa:	f013 0201 	ands.w	r2, r3, #1
 80096fe:	d00a      	beq.n	8009716 <__swsetup_r+0x9a>
 8009700:	2200      	movs	r2, #0
 8009702:	60a2      	str	r2, [r4, #8]
 8009704:	6962      	ldr	r2, [r4, #20]
 8009706:	4252      	negs	r2, r2
 8009708:	61a2      	str	r2, [r4, #24]
 800970a:	6922      	ldr	r2, [r4, #16]
 800970c:	b942      	cbnz	r2, 8009720 <__swsetup_r+0xa4>
 800970e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009712:	d1c5      	bne.n	80096a0 <__swsetup_r+0x24>
 8009714:	bd38      	pop	{r3, r4, r5, pc}
 8009716:	0799      	lsls	r1, r3, #30
 8009718:	bf58      	it	pl
 800971a:	6962      	ldrpl	r2, [r4, #20]
 800971c:	60a2      	str	r2, [r4, #8]
 800971e:	e7f4      	b.n	800970a <__swsetup_r+0x8e>
 8009720:	2000      	movs	r0, #0
 8009722:	e7f7      	b.n	8009714 <__swsetup_r+0x98>
 8009724:	20000554 	.word	0x20000554

08009728 <memmove>:
 8009728:	4288      	cmp	r0, r1
 800972a:	b510      	push	{r4, lr}
 800972c:	eb01 0402 	add.w	r4, r1, r2
 8009730:	d902      	bls.n	8009738 <memmove+0x10>
 8009732:	4284      	cmp	r4, r0
 8009734:	4623      	mov	r3, r4
 8009736:	d807      	bhi.n	8009748 <memmove+0x20>
 8009738:	1e43      	subs	r3, r0, #1
 800973a:	42a1      	cmp	r1, r4
 800973c:	d008      	beq.n	8009750 <memmove+0x28>
 800973e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009746:	e7f8      	b.n	800973a <memmove+0x12>
 8009748:	4402      	add	r2, r0
 800974a:	4601      	mov	r1, r0
 800974c:	428a      	cmp	r2, r1
 800974e:	d100      	bne.n	8009752 <memmove+0x2a>
 8009750:	bd10      	pop	{r4, pc}
 8009752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800975a:	e7f7      	b.n	800974c <memmove+0x24>

0800975c <strncmp>:
 800975c:	b510      	push	{r4, lr}
 800975e:	b16a      	cbz	r2, 800977c <strncmp+0x20>
 8009760:	3901      	subs	r1, #1
 8009762:	1884      	adds	r4, r0, r2
 8009764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009768:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800976c:	429a      	cmp	r2, r3
 800976e:	d103      	bne.n	8009778 <strncmp+0x1c>
 8009770:	42a0      	cmp	r0, r4
 8009772:	d001      	beq.n	8009778 <strncmp+0x1c>
 8009774:	2a00      	cmp	r2, #0
 8009776:	d1f5      	bne.n	8009764 <strncmp+0x8>
 8009778:	1ad0      	subs	r0, r2, r3
 800977a:	bd10      	pop	{r4, pc}
 800977c:	4610      	mov	r0, r2
 800977e:	e7fc      	b.n	800977a <strncmp+0x1e>

08009780 <_sbrk_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4d06      	ldr	r5, [pc, #24]	@ (800979c <_sbrk_r+0x1c>)
 8009784:	2300      	movs	r3, #0
 8009786:	4604      	mov	r4, r0
 8009788:	4608      	mov	r0, r1
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	f7f8 f912 	bl	80019b4 <_sbrk>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_sbrk_r+0x1a>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_sbrk_r+0x1a>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20000f40 	.word	0x20000f40

080097a0 <memcpy>:
 80097a0:	440a      	add	r2, r1
 80097a2:	4291      	cmp	r1, r2
 80097a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097a8:	d100      	bne.n	80097ac <memcpy+0xc>
 80097aa:	4770      	bx	lr
 80097ac:	b510      	push	{r4, lr}
 80097ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097b6:	4291      	cmp	r1, r2
 80097b8:	d1f9      	bne.n	80097ae <memcpy+0xe>
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	0000      	movs	r0, r0
	...

080097c0 <nan>:
 80097c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80097c8 <nan+0x8>
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	00000000 	.word	0x00000000
 80097cc:	7ff80000 	.word	0x7ff80000

080097d0 <__assert_func>:
 80097d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097d2:	4614      	mov	r4, r2
 80097d4:	461a      	mov	r2, r3
 80097d6:	4b09      	ldr	r3, [pc, #36]	@ (80097fc <__assert_func+0x2c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4605      	mov	r5, r0
 80097dc:	68d8      	ldr	r0, [r3, #12]
 80097de:	b954      	cbnz	r4, 80097f6 <__assert_func+0x26>
 80097e0:	4b07      	ldr	r3, [pc, #28]	@ (8009800 <__assert_func+0x30>)
 80097e2:	461c      	mov	r4, r3
 80097e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097e8:	9100      	str	r1, [sp, #0]
 80097ea:	462b      	mov	r3, r5
 80097ec:	4905      	ldr	r1, [pc, #20]	@ (8009804 <__assert_func+0x34>)
 80097ee:	f000 fba7 	bl	8009f40 <fiprintf>
 80097f2:	f000 fc3b 	bl	800a06c <abort>
 80097f6:	4b04      	ldr	r3, [pc, #16]	@ (8009808 <__assert_func+0x38>)
 80097f8:	e7f4      	b.n	80097e4 <__assert_func+0x14>
 80097fa:	bf00      	nop
 80097fc:	20000554 	.word	0x20000554
 8009800:	0800a5d5 	.word	0x0800a5d5
 8009804:	0800a5a7 	.word	0x0800a5a7
 8009808:	0800a59a 	.word	0x0800a59a

0800980c <_calloc_r>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	fba1 5402 	umull	r5, r4, r1, r2
 8009812:	b93c      	cbnz	r4, 8009824 <_calloc_r+0x18>
 8009814:	4629      	mov	r1, r5
 8009816:	f7fd ffeb 	bl	80077f0 <_malloc_r>
 800981a:	4606      	mov	r6, r0
 800981c:	b928      	cbnz	r0, 800982a <_calloc_r+0x1e>
 800981e:	2600      	movs	r6, #0
 8009820:	4630      	mov	r0, r6
 8009822:	bd70      	pop	{r4, r5, r6, pc}
 8009824:	220c      	movs	r2, #12
 8009826:	6002      	str	r2, [r0, #0]
 8009828:	e7f9      	b.n	800981e <_calloc_r+0x12>
 800982a:	462a      	mov	r2, r5
 800982c:	4621      	mov	r1, r4
 800982e:	f7fd f898 	bl	8006962 <memset>
 8009832:	e7f5      	b.n	8009820 <_calloc_r+0x14>

08009834 <rshift>:
 8009834:	6903      	ldr	r3, [r0, #16]
 8009836:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800983a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800983e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009842:	f100 0414 	add.w	r4, r0, #20
 8009846:	dd45      	ble.n	80098d4 <rshift+0xa0>
 8009848:	f011 011f 	ands.w	r1, r1, #31
 800984c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009850:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009854:	d10c      	bne.n	8009870 <rshift+0x3c>
 8009856:	f100 0710 	add.w	r7, r0, #16
 800985a:	4629      	mov	r1, r5
 800985c:	42b1      	cmp	r1, r6
 800985e:	d334      	bcc.n	80098ca <rshift+0x96>
 8009860:	1a9b      	subs	r3, r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	1eea      	subs	r2, r5, #3
 8009866:	4296      	cmp	r6, r2
 8009868:	bf38      	it	cc
 800986a:	2300      	movcc	r3, #0
 800986c:	4423      	add	r3, r4
 800986e:	e015      	b.n	800989c <rshift+0x68>
 8009870:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009874:	f1c1 0820 	rsb	r8, r1, #32
 8009878:	40cf      	lsrs	r7, r1
 800987a:	f105 0e04 	add.w	lr, r5, #4
 800987e:	46a1      	mov	r9, r4
 8009880:	4576      	cmp	r6, lr
 8009882:	46f4      	mov	ip, lr
 8009884:	d815      	bhi.n	80098b2 <rshift+0x7e>
 8009886:	1a9a      	subs	r2, r3, r2
 8009888:	0092      	lsls	r2, r2, #2
 800988a:	3a04      	subs	r2, #4
 800988c:	3501      	adds	r5, #1
 800988e:	42ae      	cmp	r6, r5
 8009890:	bf38      	it	cc
 8009892:	2200      	movcc	r2, #0
 8009894:	18a3      	adds	r3, r4, r2
 8009896:	50a7      	str	r7, [r4, r2]
 8009898:	b107      	cbz	r7, 800989c <rshift+0x68>
 800989a:	3304      	adds	r3, #4
 800989c:	1b1a      	subs	r2, r3, r4
 800989e:	42a3      	cmp	r3, r4
 80098a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098a4:	bf08      	it	eq
 80098a6:	2300      	moveq	r3, #0
 80098a8:	6102      	str	r2, [r0, #16]
 80098aa:	bf08      	it	eq
 80098ac:	6143      	streq	r3, [r0, #20]
 80098ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098b2:	f8dc c000 	ldr.w	ip, [ip]
 80098b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80098ba:	ea4c 0707 	orr.w	r7, ip, r7
 80098be:	f849 7b04 	str.w	r7, [r9], #4
 80098c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098c6:	40cf      	lsrs	r7, r1
 80098c8:	e7da      	b.n	8009880 <rshift+0x4c>
 80098ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80098ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80098d2:	e7c3      	b.n	800985c <rshift+0x28>
 80098d4:	4623      	mov	r3, r4
 80098d6:	e7e1      	b.n	800989c <rshift+0x68>

080098d8 <__hexdig_fun>:
 80098d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d802      	bhi.n	80098e6 <__hexdig_fun+0xe>
 80098e0:	3820      	subs	r0, #32
 80098e2:	b2c0      	uxtb	r0, r0
 80098e4:	4770      	bx	lr
 80098e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80098ea:	2b05      	cmp	r3, #5
 80098ec:	d801      	bhi.n	80098f2 <__hexdig_fun+0x1a>
 80098ee:	3847      	subs	r0, #71	@ 0x47
 80098f0:	e7f7      	b.n	80098e2 <__hexdig_fun+0xa>
 80098f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80098f6:	2b05      	cmp	r3, #5
 80098f8:	d801      	bhi.n	80098fe <__hexdig_fun+0x26>
 80098fa:	3827      	subs	r0, #39	@ 0x27
 80098fc:	e7f1      	b.n	80098e2 <__hexdig_fun+0xa>
 80098fe:	2000      	movs	r0, #0
 8009900:	4770      	bx	lr
	...

08009904 <__gethex>:
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	b085      	sub	sp, #20
 800990a:	468a      	mov	sl, r1
 800990c:	9302      	str	r3, [sp, #8]
 800990e:	680b      	ldr	r3, [r1, #0]
 8009910:	9001      	str	r0, [sp, #4]
 8009912:	4690      	mov	r8, r2
 8009914:	1c9c      	adds	r4, r3, #2
 8009916:	46a1      	mov	r9, r4
 8009918:	f814 0b01 	ldrb.w	r0, [r4], #1
 800991c:	2830      	cmp	r0, #48	@ 0x30
 800991e:	d0fa      	beq.n	8009916 <__gethex+0x12>
 8009920:	eba9 0303 	sub.w	r3, r9, r3
 8009924:	f1a3 0b02 	sub.w	fp, r3, #2
 8009928:	f7ff ffd6 	bl	80098d8 <__hexdig_fun>
 800992c:	4605      	mov	r5, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	d168      	bne.n	8009a04 <__gethex+0x100>
 8009932:	49a0      	ldr	r1, [pc, #640]	@ (8009bb4 <__gethex+0x2b0>)
 8009934:	2201      	movs	r2, #1
 8009936:	4648      	mov	r0, r9
 8009938:	f7ff ff10 	bl	800975c <strncmp>
 800993c:	4607      	mov	r7, r0
 800993e:	2800      	cmp	r0, #0
 8009940:	d167      	bne.n	8009a12 <__gethex+0x10e>
 8009942:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009946:	4626      	mov	r6, r4
 8009948:	f7ff ffc6 	bl	80098d8 <__hexdig_fun>
 800994c:	2800      	cmp	r0, #0
 800994e:	d062      	beq.n	8009a16 <__gethex+0x112>
 8009950:	4623      	mov	r3, r4
 8009952:	7818      	ldrb	r0, [r3, #0]
 8009954:	2830      	cmp	r0, #48	@ 0x30
 8009956:	4699      	mov	r9, r3
 8009958:	f103 0301 	add.w	r3, r3, #1
 800995c:	d0f9      	beq.n	8009952 <__gethex+0x4e>
 800995e:	f7ff ffbb 	bl	80098d8 <__hexdig_fun>
 8009962:	fab0 f580 	clz	r5, r0
 8009966:	096d      	lsrs	r5, r5, #5
 8009968:	f04f 0b01 	mov.w	fp, #1
 800996c:	464a      	mov	r2, r9
 800996e:	4616      	mov	r6, r2
 8009970:	3201      	adds	r2, #1
 8009972:	7830      	ldrb	r0, [r6, #0]
 8009974:	f7ff ffb0 	bl	80098d8 <__hexdig_fun>
 8009978:	2800      	cmp	r0, #0
 800997a:	d1f8      	bne.n	800996e <__gethex+0x6a>
 800997c:	498d      	ldr	r1, [pc, #564]	@ (8009bb4 <__gethex+0x2b0>)
 800997e:	2201      	movs	r2, #1
 8009980:	4630      	mov	r0, r6
 8009982:	f7ff feeb 	bl	800975c <strncmp>
 8009986:	2800      	cmp	r0, #0
 8009988:	d13f      	bne.n	8009a0a <__gethex+0x106>
 800998a:	b944      	cbnz	r4, 800999e <__gethex+0x9a>
 800998c:	1c74      	adds	r4, r6, #1
 800998e:	4622      	mov	r2, r4
 8009990:	4616      	mov	r6, r2
 8009992:	3201      	adds	r2, #1
 8009994:	7830      	ldrb	r0, [r6, #0]
 8009996:	f7ff ff9f 	bl	80098d8 <__hexdig_fun>
 800999a:	2800      	cmp	r0, #0
 800999c:	d1f8      	bne.n	8009990 <__gethex+0x8c>
 800999e:	1ba4      	subs	r4, r4, r6
 80099a0:	00a7      	lsls	r7, r4, #2
 80099a2:	7833      	ldrb	r3, [r6, #0]
 80099a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80099a8:	2b50      	cmp	r3, #80	@ 0x50
 80099aa:	d13e      	bne.n	8009a2a <__gethex+0x126>
 80099ac:	7873      	ldrb	r3, [r6, #1]
 80099ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80099b0:	d033      	beq.n	8009a1a <__gethex+0x116>
 80099b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80099b4:	d034      	beq.n	8009a20 <__gethex+0x11c>
 80099b6:	1c71      	adds	r1, r6, #1
 80099b8:	2400      	movs	r4, #0
 80099ba:	7808      	ldrb	r0, [r1, #0]
 80099bc:	f7ff ff8c 	bl	80098d8 <__hexdig_fun>
 80099c0:	1e43      	subs	r3, r0, #1
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b18      	cmp	r3, #24
 80099c6:	d830      	bhi.n	8009a2a <__gethex+0x126>
 80099c8:	f1a0 0210 	sub.w	r2, r0, #16
 80099cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099d0:	f7ff ff82 	bl	80098d8 <__hexdig_fun>
 80099d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80099d8:	fa5f fc8c 	uxtb.w	ip, ip
 80099dc:	f1bc 0f18 	cmp.w	ip, #24
 80099e0:	f04f 030a 	mov.w	r3, #10
 80099e4:	d91e      	bls.n	8009a24 <__gethex+0x120>
 80099e6:	b104      	cbz	r4, 80099ea <__gethex+0xe6>
 80099e8:	4252      	negs	r2, r2
 80099ea:	4417      	add	r7, r2
 80099ec:	f8ca 1000 	str.w	r1, [sl]
 80099f0:	b1ed      	cbz	r5, 8009a2e <__gethex+0x12a>
 80099f2:	f1bb 0f00 	cmp.w	fp, #0
 80099f6:	bf0c      	ite	eq
 80099f8:	2506      	moveq	r5, #6
 80099fa:	2500      	movne	r5, #0
 80099fc:	4628      	mov	r0, r5
 80099fe:	b005      	add	sp, #20
 8009a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a04:	2500      	movs	r5, #0
 8009a06:	462c      	mov	r4, r5
 8009a08:	e7b0      	b.n	800996c <__gethex+0x68>
 8009a0a:	2c00      	cmp	r4, #0
 8009a0c:	d1c7      	bne.n	800999e <__gethex+0x9a>
 8009a0e:	4627      	mov	r7, r4
 8009a10:	e7c7      	b.n	80099a2 <__gethex+0x9e>
 8009a12:	464e      	mov	r6, r9
 8009a14:	462f      	mov	r7, r5
 8009a16:	2501      	movs	r5, #1
 8009a18:	e7c3      	b.n	80099a2 <__gethex+0x9e>
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	1cb1      	adds	r1, r6, #2
 8009a1e:	e7cc      	b.n	80099ba <__gethex+0xb6>
 8009a20:	2401      	movs	r4, #1
 8009a22:	e7fb      	b.n	8009a1c <__gethex+0x118>
 8009a24:	fb03 0002 	mla	r0, r3, r2, r0
 8009a28:	e7ce      	b.n	80099c8 <__gethex+0xc4>
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	e7de      	b.n	80099ec <__gethex+0xe8>
 8009a2e:	eba6 0309 	sub.w	r3, r6, r9
 8009a32:	3b01      	subs	r3, #1
 8009a34:	4629      	mov	r1, r5
 8009a36:	2b07      	cmp	r3, #7
 8009a38:	dc0a      	bgt.n	8009a50 <__gethex+0x14c>
 8009a3a:	9801      	ldr	r0, [sp, #4]
 8009a3c:	f7fd ff64 	bl	8007908 <_Balloc>
 8009a40:	4604      	mov	r4, r0
 8009a42:	b940      	cbnz	r0, 8009a56 <__gethex+0x152>
 8009a44:	4b5c      	ldr	r3, [pc, #368]	@ (8009bb8 <__gethex+0x2b4>)
 8009a46:	4602      	mov	r2, r0
 8009a48:	21e4      	movs	r1, #228	@ 0xe4
 8009a4a:	485c      	ldr	r0, [pc, #368]	@ (8009bbc <__gethex+0x2b8>)
 8009a4c:	f7ff fec0 	bl	80097d0 <__assert_func>
 8009a50:	3101      	adds	r1, #1
 8009a52:	105b      	asrs	r3, r3, #1
 8009a54:	e7ef      	b.n	8009a36 <__gethex+0x132>
 8009a56:	f100 0a14 	add.w	sl, r0, #20
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4655      	mov	r5, sl
 8009a5e:	469b      	mov	fp, r3
 8009a60:	45b1      	cmp	r9, r6
 8009a62:	d337      	bcc.n	8009ad4 <__gethex+0x1d0>
 8009a64:	f845 bb04 	str.w	fp, [r5], #4
 8009a68:	eba5 050a 	sub.w	r5, r5, sl
 8009a6c:	10ad      	asrs	r5, r5, #2
 8009a6e:	6125      	str	r5, [r4, #16]
 8009a70:	4658      	mov	r0, fp
 8009a72:	f7fe f83b 	bl	8007aec <__hi0bits>
 8009a76:	016d      	lsls	r5, r5, #5
 8009a78:	f8d8 6000 	ldr.w	r6, [r8]
 8009a7c:	1a2d      	subs	r5, r5, r0
 8009a7e:	42b5      	cmp	r5, r6
 8009a80:	dd54      	ble.n	8009b2c <__gethex+0x228>
 8009a82:	1bad      	subs	r5, r5, r6
 8009a84:	4629      	mov	r1, r5
 8009a86:	4620      	mov	r0, r4
 8009a88:	f7fe fbcf 	bl	800822a <__any_on>
 8009a8c:	4681      	mov	r9, r0
 8009a8e:	b178      	cbz	r0, 8009ab0 <__gethex+0x1ac>
 8009a90:	1e6b      	subs	r3, r5, #1
 8009a92:	1159      	asrs	r1, r3, #5
 8009a94:	f003 021f 	and.w	r2, r3, #31
 8009a98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a9c:	f04f 0901 	mov.w	r9, #1
 8009aa0:	fa09 f202 	lsl.w	r2, r9, r2
 8009aa4:	420a      	tst	r2, r1
 8009aa6:	d003      	beq.n	8009ab0 <__gethex+0x1ac>
 8009aa8:	454b      	cmp	r3, r9
 8009aaa:	dc36      	bgt.n	8009b1a <__gethex+0x216>
 8009aac:	f04f 0902 	mov.w	r9, #2
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7ff febe 	bl	8009834 <rshift>
 8009ab8:	442f      	add	r7, r5
 8009aba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009abe:	42bb      	cmp	r3, r7
 8009ac0:	da42      	bge.n	8009b48 <__gethex+0x244>
 8009ac2:	9801      	ldr	r0, [sp, #4]
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f7fd ff5f 	bl	8007988 <_Bfree>
 8009aca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009acc:	2300      	movs	r3, #0
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	25a3      	movs	r5, #163	@ 0xa3
 8009ad2:	e793      	b.n	80099fc <__gethex+0xf8>
 8009ad4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009ad8:	2a2e      	cmp	r2, #46	@ 0x2e
 8009ada:	d012      	beq.n	8009b02 <__gethex+0x1fe>
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d104      	bne.n	8009aea <__gethex+0x1e6>
 8009ae0:	f845 bb04 	str.w	fp, [r5], #4
 8009ae4:	f04f 0b00 	mov.w	fp, #0
 8009ae8:	465b      	mov	r3, fp
 8009aea:	7830      	ldrb	r0, [r6, #0]
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	f7ff fef3 	bl	80098d8 <__hexdig_fun>
 8009af2:	9b03      	ldr	r3, [sp, #12]
 8009af4:	f000 000f 	and.w	r0, r0, #15
 8009af8:	4098      	lsls	r0, r3
 8009afa:	ea4b 0b00 	orr.w	fp, fp, r0
 8009afe:	3304      	adds	r3, #4
 8009b00:	e7ae      	b.n	8009a60 <__gethex+0x15c>
 8009b02:	45b1      	cmp	r9, r6
 8009b04:	d8ea      	bhi.n	8009adc <__gethex+0x1d8>
 8009b06:	492b      	ldr	r1, [pc, #172]	@ (8009bb4 <__gethex+0x2b0>)
 8009b08:	9303      	str	r3, [sp, #12]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	4630      	mov	r0, r6
 8009b0e:	f7ff fe25 	bl	800975c <strncmp>
 8009b12:	9b03      	ldr	r3, [sp, #12]
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d1e1      	bne.n	8009adc <__gethex+0x1d8>
 8009b18:	e7a2      	b.n	8009a60 <__gethex+0x15c>
 8009b1a:	1ea9      	subs	r1, r5, #2
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f7fe fb84 	bl	800822a <__any_on>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d0c2      	beq.n	8009aac <__gethex+0x1a8>
 8009b26:	f04f 0903 	mov.w	r9, #3
 8009b2a:	e7c1      	b.n	8009ab0 <__gethex+0x1ac>
 8009b2c:	da09      	bge.n	8009b42 <__gethex+0x23e>
 8009b2e:	1b75      	subs	r5, r6, r5
 8009b30:	4621      	mov	r1, r4
 8009b32:	9801      	ldr	r0, [sp, #4]
 8009b34:	462a      	mov	r2, r5
 8009b36:	f7fe f93f 	bl	8007db8 <__lshift>
 8009b3a:	1b7f      	subs	r7, r7, r5
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	f100 0a14 	add.w	sl, r0, #20
 8009b42:	f04f 0900 	mov.w	r9, #0
 8009b46:	e7b8      	b.n	8009aba <__gethex+0x1b6>
 8009b48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b4c:	42bd      	cmp	r5, r7
 8009b4e:	dd6f      	ble.n	8009c30 <__gethex+0x32c>
 8009b50:	1bed      	subs	r5, r5, r7
 8009b52:	42ae      	cmp	r6, r5
 8009b54:	dc34      	bgt.n	8009bc0 <__gethex+0x2bc>
 8009b56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d022      	beq.n	8009ba4 <__gethex+0x2a0>
 8009b5e:	2b03      	cmp	r3, #3
 8009b60:	d024      	beq.n	8009bac <__gethex+0x2a8>
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d115      	bne.n	8009b92 <__gethex+0x28e>
 8009b66:	42ae      	cmp	r6, r5
 8009b68:	d113      	bne.n	8009b92 <__gethex+0x28e>
 8009b6a:	2e01      	cmp	r6, #1
 8009b6c:	d10b      	bne.n	8009b86 <__gethex+0x282>
 8009b6e:	9a02      	ldr	r2, [sp, #8]
 8009b70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	2301      	movs	r3, #1
 8009b78:	6123      	str	r3, [r4, #16]
 8009b7a:	f8ca 3000 	str.w	r3, [sl]
 8009b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b80:	2562      	movs	r5, #98	@ 0x62
 8009b82:	601c      	str	r4, [r3, #0]
 8009b84:	e73a      	b.n	80099fc <__gethex+0xf8>
 8009b86:	1e71      	subs	r1, r6, #1
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f7fe fb4e 	bl	800822a <__any_on>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d1ed      	bne.n	8009b6e <__gethex+0x26a>
 8009b92:	9801      	ldr	r0, [sp, #4]
 8009b94:	4621      	mov	r1, r4
 8009b96:	f7fd fef7 	bl	8007988 <_Bfree>
 8009b9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	2550      	movs	r5, #80	@ 0x50
 8009ba2:	e72b      	b.n	80099fc <__gethex+0xf8>
 8009ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f3      	bne.n	8009b92 <__gethex+0x28e>
 8009baa:	e7e0      	b.n	8009b6e <__gethex+0x26a>
 8009bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1dd      	bne.n	8009b6e <__gethex+0x26a>
 8009bb2:	e7ee      	b.n	8009b92 <__gethex+0x28e>
 8009bb4:	0800a428 	.word	0x0800a428
 8009bb8:	0800a2bd 	.word	0x0800a2bd
 8009bbc:	0800a5d6 	.word	0x0800a5d6
 8009bc0:	1e6f      	subs	r7, r5, #1
 8009bc2:	f1b9 0f00 	cmp.w	r9, #0
 8009bc6:	d130      	bne.n	8009c2a <__gethex+0x326>
 8009bc8:	b127      	cbz	r7, 8009bd4 <__gethex+0x2d0>
 8009bca:	4639      	mov	r1, r7
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f7fe fb2c 	bl	800822a <__any_on>
 8009bd2:	4681      	mov	r9, r0
 8009bd4:	117a      	asrs	r2, r7, #5
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009bdc:	f007 071f 	and.w	r7, r7, #31
 8009be0:	40bb      	lsls	r3, r7
 8009be2:	4213      	tst	r3, r2
 8009be4:	4629      	mov	r1, r5
 8009be6:	4620      	mov	r0, r4
 8009be8:	bf18      	it	ne
 8009bea:	f049 0902 	orrne.w	r9, r9, #2
 8009bee:	f7ff fe21 	bl	8009834 <rshift>
 8009bf2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009bf6:	1b76      	subs	r6, r6, r5
 8009bf8:	2502      	movs	r5, #2
 8009bfa:	f1b9 0f00 	cmp.w	r9, #0
 8009bfe:	d047      	beq.n	8009c90 <__gethex+0x38c>
 8009c00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d015      	beq.n	8009c34 <__gethex+0x330>
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d017      	beq.n	8009c3c <__gethex+0x338>
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d109      	bne.n	8009c24 <__gethex+0x320>
 8009c10:	f019 0f02 	tst.w	r9, #2
 8009c14:	d006      	beq.n	8009c24 <__gethex+0x320>
 8009c16:	f8da 3000 	ldr.w	r3, [sl]
 8009c1a:	ea49 0903 	orr.w	r9, r9, r3
 8009c1e:	f019 0f01 	tst.w	r9, #1
 8009c22:	d10e      	bne.n	8009c42 <__gethex+0x33e>
 8009c24:	f045 0510 	orr.w	r5, r5, #16
 8009c28:	e032      	b.n	8009c90 <__gethex+0x38c>
 8009c2a:	f04f 0901 	mov.w	r9, #1
 8009c2e:	e7d1      	b.n	8009bd4 <__gethex+0x2d0>
 8009c30:	2501      	movs	r5, #1
 8009c32:	e7e2      	b.n	8009bfa <__gethex+0x2f6>
 8009c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c36:	f1c3 0301 	rsb	r3, r3, #1
 8009c3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d0f0      	beq.n	8009c24 <__gethex+0x320>
 8009c42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c46:	f104 0314 	add.w	r3, r4, #20
 8009c4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c52:	f04f 0c00 	mov.w	ip, #0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c60:	d01b      	beq.n	8009c9a <__gethex+0x396>
 8009c62:	3201      	adds	r2, #1
 8009c64:	6002      	str	r2, [r0, #0]
 8009c66:	2d02      	cmp	r5, #2
 8009c68:	f104 0314 	add.w	r3, r4, #20
 8009c6c:	d13c      	bne.n	8009ce8 <__gethex+0x3e4>
 8009c6e:	f8d8 2000 	ldr.w	r2, [r8]
 8009c72:	3a01      	subs	r2, #1
 8009c74:	42b2      	cmp	r2, r6
 8009c76:	d109      	bne.n	8009c8c <__gethex+0x388>
 8009c78:	1171      	asrs	r1, r6, #5
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c80:	f006 061f 	and.w	r6, r6, #31
 8009c84:	fa02 f606 	lsl.w	r6, r2, r6
 8009c88:	421e      	tst	r6, r3
 8009c8a:	d13a      	bne.n	8009d02 <__gethex+0x3fe>
 8009c8c:	f045 0520 	orr.w	r5, r5, #32
 8009c90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c92:	601c      	str	r4, [r3, #0]
 8009c94:	9b02      	ldr	r3, [sp, #8]
 8009c96:	601f      	str	r7, [r3, #0]
 8009c98:	e6b0      	b.n	80099fc <__gethex+0xf8>
 8009c9a:	4299      	cmp	r1, r3
 8009c9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ca0:	d8d9      	bhi.n	8009c56 <__gethex+0x352>
 8009ca2:	68a3      	ldr	r3, [r4, #8]
 8009ca4:	459b      	cmp	fp, r3
 8009ca6:	db17      	blt.n	8009cd8 <__gethex+0x3d4>
 8009ca8:	6861      	ldr	r1, [r4, #4]
 8009caa:	9801      	ldr	r0, [sp, #4]
 8009cac:	3101      	adds	r1, #1
 8009cae:	f7fd fe2b 	bl	8007908 <_Balloc>
 8009cb2:	4681      	mov	r9, r0
 8009cb4:	b918      	cbnz	r0, 8009cbe <__gethex+0x3ba>
 8009cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8009d20 <__gethex+0x41c>)
 8009cb8:	4602      	mov	r2, r0
 8009cba:	2184      	movs	r1, #132	@ 0x84
 8009cbc:	e6c5      	b.n	8009a4a <__gethex+0x146>
 8009cbe:	6922      	ldr	r2, [r4, #16]
 8009cc0:	3202      	adds	r2, #2
 8009cc2:	f104 010c 	add.w	r1, r4, #12
 8009cc6:	0092      	lsls	r2, r2, #2
 8009cc8:	300c      	adds	r0, #12
 8009cca:	f7ff fd69 	bl	80097a0 <memcpy>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	9801      	ldr	r0, [sp, #4]
 8009cd2:	f7fd fe59 	bl	8007988 <_Bfree>
 8009cd6:	464c      	mov	r4, r9
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ce0:	6122      	str	r2, [r4, #16]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	615a      	str	r2, [r3, #20]
 8009ce6:	e7be      	b.n	8009c66 <__gethex+0x362>
 8009ce8:	6922      	ldr	r2, [r4, #16]
 8009cea:	455a      	cmp	r2, fp
 8009cec:	dd0b      	ble.n	8009d06 <__gethex+0x402>
 8009cee:	2101      	movs	r1, #1
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f7ff fd9f 	bl	8009834 <rshift>
 8009cf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cfa:	3701      	adds	r7, #1
 8009cfc:	42bb      	cmp	r3, r7
 8009cfe:	f6ff aee0 	blt.w	8009ac2 <__gethex+0x1be>
 8009d02:	2501      	movs	r5, #1
 8009d04:	e7c2      	b.n	8009c8c <__gethex+0x388>
 8009d06:	f016 061f 	ands.w	r6, r6, #31
 8009d0a:	d0fa      	beq.n	8009d02 <__gethex+0x3fe>
 8009d0c:	4453      	add	r3, sl
 8009d0e:	f1c6 0620 	rsb	r6, r6, #32
 8009d12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d16:	f7fd fee9 	bl	8007aec <__hi0bits>
 8009d1a:	42b0      	cmp	r0, r6
 8009d1c:	dbe7      	blt.n	8009cee <__gethex+0x3ea>
 8009d1e:	e7f0      	b.n	8009d02 <__gethex+0x3fe>
 8009d20:	0800a2bd 	.word	0x0800a2bd

08009d24 <L_shift>:
 8009d24:	f1c2 0208 	rsb	r2, r2, #8
 8009d28:	0092      	lsls	r2, r2, #2
 8009d2a:	b570      	push	{r4, r5, r6, lr}
 8009d2c:	f1c2 0620 	rsb	r6, r2, #32
 8009d30:	6843      	ldr	r3, [r0, #4]
 8009d32:	6804      	ldr	r4, [r0, #0]
 8009d34:	fa03 f506 	lsl.w	r5, r3, r6
 8009d38:	432c      	orrs	r4, r5
 8009d3a:	40d3      	lsrs	r3, r2
 8009d3c:	6004      	str	r4, [r0, #0]
 8009d3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d42:	4288      	cmp	r0, r1
 8009d44:	d3f4      	bcc.n	8009d30 <L_shift+0xc>
 8009d46:	bd70      	pop	{r4, r5, r6, pc}

08009d48 <__match>:
 8009d48:	b530      	push	{r4, r5, lr}
 8009d4a:	6803      	ldr	r3, [r0, #0]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d52:	b914      	cbnz	r4, 8009d5a <__match+0x12>
 8009d54:	6003      	str	r3, [r0, #0]
 8009d56:	2001      	movs	r0, #1
 8009d58:	bd30      	pop	{r4, r5, pc}
 8009d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009d62:	2d19      	cmp	r5, #25
 8009d64:	bf98      	it	ls
 8009d66:	3220      	addls	r2, #32
 8009d68:	42a2      	cmp	r2, r4
 8009d6a:	d0f0      	beq.n	8009d4e <__match+0x6>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	e7f3      	b.n	8009d58 <__match+0x10>

08009d70 <__hexnan>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	680b      	ldr	r3, [r1, #0]
 8009d76:	6801      	ldr	r1, [r0, #0]
 8009d78:	115e      	asrs	r6, r3, #5
 8009d7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d7e:	f013 031f 	ands.w	r3, r3, #31
 8009d82:	b087      	sub	sp, #28
 8009d84:	bf18      	it	ne
 8009d86:	3604      	addne	r6, #4
 8009d88:	2500      	movs	r5, #0
 8009d8a:	1f37      	subs	r7, r6, #4
 8009d8c:	4682      	mov	sl, r0
 8009d8e:	4690      	mov	r8, r2
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d96:	46b9      	mov	r9, r7
 8009d98:	463c      	mov	r4, r7
 8009d9a:	9502      	str	r5, [sp, #8]
 8009d9c:	46ab      	mov	fp, r5
 8009d9e:	784a      	ldrb	r2, [r1, #1]
 8009da0:	1c4b      	adds	r3, r1, #1
 8009da2:	9303      	str	r3, [sp, #12]
 8009da4:	b342      	cbz	r2, 8009df8 <__hexnan+0x88>
 8009da6:	4610      	mov	r0, r2
 8009da8:	9105      	str	r1, [sp, #20]
 8009daa:	9204      	str	r2, [sp, #16]
 8009dac:	f7ff fd94 	bl	80098d8 <__hexdig_fun>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	d151      	bne.n	8009e58 <__hexnan+0xe8>
 8009db4:	9a04      	ldr	r2, [sp, #16]
 8009db6:	9905      	ldr	r1, [sp, #20]
 8009db8:	2a20      	cmp	r2, #32
 8009dba:	d818      	bhi.n	8009dee <__hexnan+0x7e>
 8009dbc:	9b02      	ldr	r3, [sp, #8]
 8009dbe:	459b      	cmp	fp, r3
 8009dc0:	dd13      	ble.n	8009dea <__hexnan+0x7a>
 8009dc2:	454c      	cmp	r4, r9
 8009dc4:	d206      	bcs.n	8009dd4 <__hexnan+0x64>
 8009dc6:	2d07      	cmp	r5, #7
 8009dc8:	dc04      	bgt.n	8009dd4 <__hexnan+0x64>
 8009dca:	462a      	mov	r2, r5
 8009dcc:	4649      	mov	r1, r9
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f7ff ffa8 	bl	8009d24 <L_shift>
 8009dd4:	4544      	cmp	r4, r8
 8009dd6:	d952      	bls.n	8009e7e <__hexnan+0x10e>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f1a4 0904 	sub.w	r9, r4, #4
 8009dde:	f844 3c04 	str.w	r3, [r4, #-4]
 8009de2:	f8cd b008 	str.w	fp, [sp, #8]
 8009de6:	464c      	mov	r4, r9
 8009de8:	461d      	mov	r5, r3
 8009dea:	9903      	ldr	r1, [sp, #12]
 8009dec:	e7d7      	b.n	8009d9e <__hexnan+0x2e>
 8009dee:	2a29      	cmp	r2, #41	@ 0x29
 8009df0:	d157      	bne.n	8009ea2 <__hexnan+0x132>
 8009df2:	3102      	adds	r1, #2
 8009df4:	f8ca 1000 	str.w	r1, [sl]
 8009df8:	f1bb 0f00 	cmp.w	fp, #0
 8009dfc:	d051      	beq.n	8009ea2 <__hexnan+0x132>
 8009dfe:	454c      	cmp	r4, r9
 8009e00:	d206      	bcs.n	8009e10 <__hexnan+0xa0>
 8009e02:	2d07      	cmp	r5, #7
 8009e04:	dc04      	bgt.n	8009e10 <__hexnan+0xa0>
 8009e06:	462a      	mov	r2, r5
 8009e08:	4649      	mov	r1, r9
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff ff8a 	bl	8009d24 <L_shift>
 8009e10:	4544      	cmp	r4, r8
 8009e12:	d936      	bls.n	8009e82 <__hexnan+0x112>
 8009e14:	f1a8 0204 	sub.w	r2, r8, #4
 8009e18:	4623      	mov	r3, r4
 8009e1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e22:	429f      	cmp	r7, r3
 8009e24:	d2f9      	bcs.n	8009e1a <__hexnan+0xaa>
 8009e26:	1b3b      	subs	r3, r7, r4
 8009e28:	f023 0303 	bic.w	r3, r3, #3
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	3401      	adds	r4, #1
 8009e30:	3e03      	subs	r6, #3
 8009e32:	42b4      	cmp	r4, r6
 8009e34:	bf88      	it	hi
 8009e36:	2304      	movhi	r3, #4
 8009e38:	4443      	add	r3, r8
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f843 2b04 	str.w	r2, [r3], #4
 8009e40:	429f      	cmp	r7, r3
 8009e42:	d2fb      	bcs.n	8009e3c <__hexnan+0xcc>
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	b91b      	cbnz	r3, 8009e50 <__hexnan+0xe0>
 8009e48:	4547      	cmp	r7, r8
 8009e4a:	d128      	bne.n	8009e9e <__hexnan+0x12e>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	2005      	movs	r0, #5
 8009e52:	b007      	add	sp, #28
 8009e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e58:	3501      	adds	r5, #1
 8009e5a:	2d08      	cmp	r5, #8
 8009e5c:	f10b 0b01 	add.w	fp, fp, #1
 8009e60:	dd06      	ble.n	8009e70 <__hexnan+0x100>
 8009e62:	4544      	cmp	r4, r8
 8009e64:	d9c1      	bls.n	8009dea <__hexnan+0x7a>
 8009e66:	2300      	movs	r3, #0
 8009e68:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e6c:	2501      	movs	r5, #1
 8009e6e:	3c04      	subs	r4, #4
 8009e70:	6822      	ldr	r2, [r4, #0]
 8009e72:	f000 000f 	and.w	r0, r0, #15
 8009e76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e7a:	6020      	str	r0, [r4, #0]
 8009e7c:	e7b5      	b.n	8009dea <__hexnan+0x7a>
 8009e7e:	2508      	movs	r5, #8
 8009e80:	e7b3      	b.n	8009dea <__hexnan+0x7a>
 8009e82:	9b01      	ldr	r3, [sp, #4]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0dd      	beq.n	8009e44 <__hexnan+0xd4>
 8009e88:	f1c3 0320 	rsb	r3, r3, #32
 8009e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e90:	40da      	lsrs	r2, r3
 8009e92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e96:	4013      	ands	r3, r2
 8009e98:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e9c:	e7d2      	b.n	8009e44 <__hexnan+0xd4>
 8009e9e:	3f04      	subs	r7, #4
 8009ea0:	e7d0      	b.n	8009e44 <__hexnan+0xd4>
 8009ea2:	2004      	movs	r0, #4
 8009ea4:	e7d5      	b.n	8009e52 <__hexnan+0xe2>

08009ea6 <__ascii_mbtowc>:
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	b901      	cbnz	r1, 8009eac <__ascii_mbtowc+0x6>
 8009eaa:	a901      	add	r1, sp, #4
 8009eac:	b142      	cbz	r2, 8009ec0 <__ascii_mbtowc+0x1a>
 8009eae:	b14b      	cbz	r3, 8009ec4 <__ascii_mbtowc+0x1e>
 8009eb0:	7813      	ldrb	r3, [r2, #0]
 8009eb2:	600b      	str	r3, [r1, #0]
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	1e10      	subs	r0, r2, #0
 8009eb8:	bf18      	it	ne
 8009eba:	2001      	movne	r0, #1
 8009ebc:	b002      	add	sp, #8
 8009ebe:	4770      	bx	lr
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	e7fb      	b.n	8009ebc <__ascii_mbtowc+0x16>
 8009ec4:	f06f 0001 	mvn.w	r0, #1
 8009ec8:	e7f8      	b.n	8009ebc <__ascii_mbtowc+0x16>

08009eca <_realloc_r>:
 8009eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ece:	4680      	mov	r8, r0
 8009ed0:	4615      	mov	r5, r2
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	b921      	cbnz	r1, 8009ee0 <_realloc_r+0x16>
 8009ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eda:	4611      	mov	r1, r2
 8009edc:	f7fd bc88 	b.w	80077f0 <_malloc_r>
 8009ee0:	b92a      	cbnz	r2, 8009eee <_realloc_r+0x24>
 8009ee2:	f7fd fc11 	bl	8007708 <_free_r>
 8009ee6:	2400      	movs	r4, #0
 8009ee8:	4620      	mov	r0, r4
 8009eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eee:	f000 f8c4 	bl	800a07a <_malloc_usable_size_r>
 8009ef2:	4285      	cmp	r5, r0
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	d802      	bhi.n	8009efe <_realloc_r+0x34>
 8009ef8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009efc:	d8f4      	bhi.n	8009ee8 <_realloc_r+0x1e>
 8009efe:	4629      	mov	r1, r5
 8009f00:	4640      	mov	r0, r8
 8009f02:	f7fd fc75 	bl	80077f0 <_malloc_r>
 8009f06:	4607      	mov	r7, r0
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d0ec      	beq.n	8009ee6 <_realloc_r+0x1c>
 8009f0c:	42b5      	cmp	r5, r6
 8009f0e:	462a      	mov	r2, r5
 8009f10:	4621      	mov	r1, r4
 8009f12:	bf28      	it	cs
 8009f14:	4632      	movcs	r2, r6
 8009f16:	f7ff fc43 	bl	80097a0 <memcpy>
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	f7fd fbf3 	bl	8007708 <_free_r>
 8009f22:	463c      	mov	r4, r7
 8009f24:	e7e0      	b.n	8009ee8 <_realloc_r+0x1e>

08009f26 <__ascii_wctomb>:
 8009f26:	4603      	mov	r3, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	b141      	cbz	r1, 8009f3e <__ascii_wctomb+0x18>
 8009f2c:	2aff      	cmp	r2, #255	@ 0xff
 8009f2e:	d904      	bls.n	8009f3a <__ascii_wctomb+0x14>
 8009f30:	228a      	movs	r2, #138	@ 0x8a
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	4770      	bx	lr
 8009f3a:	700a      	strb	r2, [r1, #0]
 8009f3c:	2001      	movs	r0, #1
 8009f3e:	4770      	bx	lr

08009f40 <fiprintf>:
 8009f40:	b40e      	push	{r1, r2, r3}
 8009f42:	b503      	push	{r0, r1, lr}
 8009f44:	4601      	mov	r1, r0
 8009f46:	ab03      	add	r3, sp, #12
 8009f48:	4805      	ldr	r0, [pc, #20]	@ (8009f60 <fiprintf+0x20>)
 8009f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f4e:	6800      	ldr	r0, [r0, #0]
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	f7ff f991 	bl	8009278 <_vfiprintf_r>
 8009f56:	b002      	add	sp, #8
 8009f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f5c:	b003      	add	sp, #12
 8009f5e:	4770      	bx	lr
 8009f60:	20000554 	.word	0x20000554

08009f64 <__swhatbuf_r>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	460c      	mov	r4, r1
 8009f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	b096      	sub	sp, #88	@ 0x58
 8009f70:	4615      	mov	r5, r2
 8009f72:	461e      	mov	r6, r3
 8009f74:	da0d      	bge.n	8009f92 <__swhatbuf_r+0x2e>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f7c:	f04f 0100 	mov.w	r1, #0
 8009f80:	bf14      	ite	ne
 8009f82:	2340      	movne	r3, #64	@ 0x40
 8009f84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f88:	2000      	movs	r0, #0
 8009f8a:	6031      	str	r1, [r6, #0]
 8009f8c:	602b      	str	r3, [r5, #0]
 8009f8e:	b016      	add	sp, #88	@ 0x58
 8009f90:	bd70      	pop	{r4, r5, r6, pc}
 8009f92:	466a      	mov	r2, sp
 8009f94:	f000 f848 	bl	800a028 <_fstat_r>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	dbec      	blt.n	8009f76 <__swhatbuf_r+0x12>
 8009f9c:	9901      	ldr	r1, [sp, #4]
 8009f9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009fa6:	4259      	negs	r1, r3
 8009fa8:	4159      	adcs	r1, r3
 8009faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fae:	e7eb      	b.n	8009f88 <__swhatbuf_r+0x24>

08009fb0 <__smakebuf_r>:
 8009fb0:	898b      	ldrh	r3, [r1, #12]
 8009fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb4:	079d      	lsls	r5, r3, #30
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460c      	mov	r4, r1
 8009fba:	d507      	bpl.n	8009fcc <__smakebuf_r+0x1c>
 8009fbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	6123      	str	r3, [r4, #16]
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	6163      	str	r3, [r4, #20]
 8009fc8:	b003      	add	sp, #12
 8009fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fcc:	ab01      	add	r3, sp, #4
 8009fce:	466a      	mov	r2, sp
 8009fd0:	f7ff ffc8 	bl	8009f64 <__swhatbuf_r>
 8009fd4:	9f00      	ldr	r7, [sp, #0]
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	4639      	mov	r1, r7
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f7fd fc08 	bl	80077f0 <_malloc_r>
 8009fe0:	b948      	cbnz	r0, 8009ff6 <__smakebuf_r+0x46>
 8009fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe6:	059a      	lsls	r2, r3, #22
 8009fe8:	d4ee      	bmi.n	8009fc8 <__smakebuf_r+0x18>
 8009fea:	f023 0303 	bic.w	r3, r3, #3
 8009fee:	f043 0302 	orr.w	r3, r3, #2
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	e7e2      	b.n	8009fbc <__smakebuf_r+0xc>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	6020      	str	r0, [r4, #0]
 8009ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ffe:	81a3      	strh	r3, [r4, #12]
 800a000:	9b01      	ldr	r3, [sp, #4]
 800a002:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a006:	b15b      	cbz	r3, 800a020 <__smakebuf_r+0x70>
 800a008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a00c:	4630      	mov	r0, r6
 800a00e:	f000 f81d 	bl	800a04c <_isatty_r>
 800a012:	b128      	cbz	r0, 800a020 <__smakebuf_r+0x70>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	431d      	orrs	r5, r3
 800a024:	81a5      	strh	r5, [r4, #12]
 800a026:	e7cf      	b.n	8009fc8 <__smakebuf_r+0x18>

0800a028 <_fstat_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d07      	ldr	r5, [pc, #28]	@ (800a048 <_fstat_r+0x20>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	4611      	mov	r1, r2
 800a034:	602b      	str	r3, [r5, #0]
 800a036:	f7f7 fc95 	bl	8001964 <_fstat>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	d102      	bne.n	800a044 <_fstat_r+0x1c>
 800a03e:	682b      	ldr	r3, [r5, #0]
 800a040:	b103      	cbz	r3, 800a044 <_fstat_r+0x1c>
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	bd38      	pop	{r3, r4, r5, pc}
 800a046:	bf00      	nop
 800a048:	20000f40 	.word	0x20000f40

0800a04c <_isatty_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4d06      	ldr	r5, [pc, #24]	@ (800a068 <_isatty_r+0x1c>)
 800a050:	2300      	movs	r3, #0
 800a052:	4604      	mov	r4, r0
 800a054:	4608      	mov	r0, r1
 800a056:	602b      	str	r3, [r5, #0]
 800a058:	f7f7 fc94 	bl	8001984 <_isatty>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	d102      	bne.n	800a066 <_isatty_r+0x1a>
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	b103      	cbz	r3, 800a066 <_isatty_r+0x1a>
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	bd38      	pop	{r3, r4, r5, pc}
 800a068:	20000f40 	.word	0x20000f40

0800a06c <abort>:
 800a06c:	b508      	push	{r3, lr}
 800a06e:	2006      	movs	r0, #6
 800a070:	f000 f834 	bl	800a0dc <raise>
 800a074:	2001      	movs	r0, #1
 800a076:	f7f7 fc25 	bl	80018c4 <_exit>

0800a07a <_malloc_usable_size_r>:
 800a07a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a07e:	1f18      	subs	r0, r3, #4
 800a080:	2b00      	cmp	r3, #0
 800a082:	bfbc      	itt	lt
 800a084:	580b      	ldrlt	r3, [r1, r0]
 800a086:	18c0      	addlt	r0, r0, r3
 800a088:	4770      	bx	lr

0800a08a <_raise_r>:
 800a08a:	291f      	cmp	r1, #31
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4605      	mov	r5, r0
 800a090:	460c      	mov	r4, r1
 800a092:	d904      	bls.n	800a09e <_raise_r+0x14>
 800a094:	2316      	movs	r3, #22
 800a096:	6003      	str	r3, [r0, #0]
 800a098:	f04f 30ff 	mov.w	r0, #4294967295
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a0a0:	b112      	cbz	r2, 800a0a8 <_raise_r+0x1e>
 800a0a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0a6:	b94b      	cbnz	r3, 800a0bc <_raise_r+0x32>
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f000 f831 	bl	800a110 <_getpid_r>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4601      	mov	r1, r0
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0b8:	f000 b818 	b.w	800a0ec <_kill_r>
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d00a      	beq.n	800a0d6 <_raise_r+0x4c>
 800a0c0:	1c59      	adds	r1, r3, #1
 800a0c2:	d103      	bne.n	800a0cc <_raise_r+0x42>
 800a0c4:	2316      	movs	r3, #22
 800a0c6:	6003      	str	r3, [r0, #0]
 800a0c8:	2001      	movs	r0, #1
 800a0ca:	e7e7      	b.n	800a09c <_raise_r+0x12>
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	4798      	blx	r3
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	e7e0      	b.n	800a09c <_raise_r+0x12>
	...

0800a0dc <raise>:
 800a0dc:	4b02      	ldr	r3, [pc, #8]	@ (800a0e8 <raise+0xc>)
 800a0de:	4601      	mov	r1, r0
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	f7ff bfd2 	b.w	800a08a <_raise_r>
 800a0e6:	bf00      	nop
 800a0e8:	20000554 	.word	0x20000554

0800a0ec <_kill_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	4d07      	ldr	r5, [pc, #28]	@ (800a10c <_kill_r+0x20>)
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	4611      	mov	r1, r2
 800a0f8:	602b      	str	r3, [r5, #0]
 800a0fa:	f7f7 fbd3 	bl	80018a4 <_kill>
 800a0fe:	1c43      	adds	r3, r0, #1
 800a100:	d102      	bne.n	800a108 <_kill_r+0x1c>
 800a102:	682b      	ldr	r3, [r5, #0]
 800a104:	b103      	cbz	r3, 800a108 <_kill_r+0x1c>
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	bd38      	pop	{r3, r4, r5, pc}
 800a10a:	bf00      	nop
 800a10c:	20000f40 	.word	0x20000f40

0800a110 <_getpid_r>:
 800a110:	f7f7 bbc0 	b.w	8001894 <_getpid>

0800a114 <_init>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	bf00      	nop
 800a118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11a:	bc08      	pop	{r3}
 800a11c:	469e      	mov	lr, r3
 800a11e:	4770      	bx	lr

0800a120 <_fini>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	bf00      	nop
 800a124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a126:	bc08      	pop	{r3}
 800a128:	469e      	mov	lr, r3
 800a12a:	4770      	bx	lr
