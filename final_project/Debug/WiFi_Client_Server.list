
WiFi_Client_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c458  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d4c  0800c5e8  0800c5e8  0000d5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d334  0800d334  0000f21c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d334  0800d334  0000e334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d33c  0800d33c  0000f21c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d33c  0800d33c  0000e33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d340  0800d340  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0800d344  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000f21c  2**0
                  CONTENTS
 10 .bss          00000bc4  2000021c  2000021c  0000f21c  2**2
                  ALLOC
 11 ._user_heap_stack 00017000  20000de0  20000de0  0000f21c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00017811  00000000  00000000  0000f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000a8  00000000  00000000  00026a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000142c8  00000000  00000000  00026b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002d54  00000000  00000000  0003adcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001320  00000000  00000000  0003db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f270f  00000000  00000000  0003ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ed1  00000000  00000000  00131557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000288d1  00000000  00000000  00132428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015acf9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006680  00000000  00000000  0015ad3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5d0 	.word	0x0800c5d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800c5d0 	.word	0x0800c5d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe8:	f002 f99c 	bl	8003324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f008 f805 	bl	8009020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001016:	f000 f80f 	bl	8001038 <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800101c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001028:	0800d344 	.word	0x0800d344
  ldr r2, =_sbss
 800102c:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001030:	20000de0 	.word	0x20000de0

08001034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC1_2_IRQHandler>
	...

08001038 <main>:
  */



int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b094      	sub	sp, #80	@ 0x50
 800103c:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6] = {0};
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
 8001042:	2300      	movs	r3, #0
 8001044:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint8_t  IP_Addr[4] = {0};
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  uint8_t TxData[] = "STM32 : Hello!\n";
 800104a:	4b8f      	ldr	r3, [pc, #572]	@ (8001288 <main+0x250>)
 800104c:	f107 0410 	add.w	r4, r7, #16
 8001050:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001052:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int32_t Socket = -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t Datalen;
  uint16_t sample_num = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	873b      	strh	r3, [r7, #56]	@ 0x38
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;
 8001060:	230a      	movs	r3, #10
 8001062:	877b      	strh	r3, [r7, #58]	@ 0x3a
  uint8_t sendbuffer[3] = {0};
 8001064:	4b89      	ldr	r3, [pc, #548]	@ (800128c <main+0x254>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	813b      	strh	r3, [r7, #8]
 800106a:	2300      	movs	r3, #0
 800106c:	72bb      	strb	r3, [r7, #10]
  int16_t accel_data[3] ; // Array to hold X, Y, Z data
  int16_t *pDataXYZ = accel_data;
 800106e:	463b      	mov	r3, r7
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
  int hit = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	@ 0x30


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f002 f98b 	bl	8003390 <HAL_Init>
  BSP_ACCELERO_Init();
 800107a:	f001 ffa5 	bl	8002fc8 <BSP_ACCELERO_Init>




  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 f939 	bl	80012f4 <SystemClock_Config>
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 8001082:	2000      	movs	r0, #0
 8001084:	f001 fd9e 	bl	8002bc4 <BSP_LED_Init>



#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 8001088:	4b81      	ldr	r3, [pc, #516]	@ (8001290 <main+0x258>)
 800108a:	4a82      	ldr	r2, [pc, #520]	@ (8001294 <main+0x25c>)
 800108c:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 800108e:	4b80      	ldr	r3, [pc, #512]	@ (8001290 <main+0x258>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b7e      	ldr	r3, [pc, #504]	@ (8001290 <main+0x258>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b7c      	ldr	r3, [pc, #496]	@ (8001290 <main+0x258>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001290 <main+0x258>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b79      	ldr	r3, [pc, #484]	@ (8001290 <main+0x258>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b78      	ldr	r3, [pc, #480]	@ (8001290 <main+0x258>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b76      	ldr	r3, [pc, #472]	@ (8001290 <main+0x258>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ba:	4b75      	ldr	r3, [pc, #468]	@ (8001290 <main+0x258>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c0:	4b73      	ldr	r3, [pc, #460]	@ (8001290 <main+0x258>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	@ 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 80010c6:	4972      	ldr	r1, [pc, #456]	@ (8001290 <main+0x258>)
 80010c8:	2000      	movs	r0, #0
 80010ca:	f001 fdc1 	bl	8002c50 <BSP_COM_Init>
#endif /* TERMINAL_USE */

  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 80010ce:	4872      	ldr	r0, [pc, #456]	@ (8001298 <main+0x260>)
 80010d0:	f007 fdb6 	bl	8008c40 <puts>
  TERMOUT("TCP Client Instructions :\n");
 80010d4:	4871      	ldr	r0, [pc, #452]	@ (800129c <main+0x264>)
 80010d6:	f007 fdb3 	bl	8008c40 <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 80010da:	4871      	ldr	r0, [pc, #452]	@ (80012a0 <main+0x268>)
 80010dc:	f007 fdb0 	bl	8008c40 <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 80010e0:	4870      	ldr	r0, [pc, #448]	@ (80012a4 <main+0x26c>)
 80010e2:	f007 fdad 	bl	8008c40 <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 80010e6:	4870      	ldr	r0, [pc, #448]	@ (80012a8 <main+0x270>)
 80010e8:	f007 fdaa 	bl	8008c40 <puts>
  TERMOUT("   with port(8002).\n");
 80010ec:	486f      	ldr	r0, [pc, #444]	@ (80012ac <main+0x274>)
 80010ee:	f007 fda7 	bl	8008c40 <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 80010f2:	486f      	ldr	r0, [pc, #444]	@ (80012b0 <main+0x278>)
 80010f4:	f007 fda4 	bl	8008c40 <puts>



  /*Initialize  WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 80010f8:	f001 fc74 	bl	80029e4 <WIFI_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f040 8091 	bne.w	8001226 <main+0x1ee>
  {
    TERMOUT("> WIFI Module Initialized.\n");
 8001104:	486b      	ldr	r0, [pc, #428]	@ (80012b4 <main+0x27c>)
 8001106:	f007 fd9b 	bl	8008c40 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 800110a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110e:	2106      	movs	r1, #6
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fcb5 	bl	8002a80 <WIFI_GetMAC_Address>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d118      	bne.n	800114e <main+0x116>
    {
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800111c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001120:	4618      	mov	r0, r3
 8001122:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001126:	461c      	mov	r4, r3
 8001128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800112c:	461d      	mov	r5, r3
 800112e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001132:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001136:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 800113a:	9102      	str	r1, [sp, #8]
 800113c:	9201      	str	r2, [sp, #4]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	462b      	mov	r3, r5
 8001142:	4622      	mov	r2, r4
 8001144:	4601      	mov	r1, r0
 8001146:	485c      	ldr	r0, [pc, #368]	@ (80012b8 <main+0x280>)
 8001148:	f007 fd12 	bl	8008b70 <iprintf>
 800114c:	e005      	b.n	800115a <main+0x122>
               MAC_Addr[4],
               MAC_Addr[5]);
    }
    else
    {
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 800114e:	485b      	ldr	r0, [pc, #364]	@ (80012bc <main+0x284>)
 8001150:	f007 fd76 	bl	8008c40 <puts>
      BSP_LED_On(LED2);
 8001154:	2000      	movs	r0, #0
 8001156:	f001 fd65 	bl	8002c24 <BSP_LED_On>
    }

    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800115a:	2203      	movs	r2, #3
 800115c:	4958      	ldr	r1, [pc, #352]	@ (80012c0 <main+0x288>)
 800115e:	4859      	ldr	r0, [pc, #356]	@ (80012c4 <main+0x28c>)
 8001160:	f001 fc6c 	bl	8002a3c <WIFI_Connect>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d159      	bne.n	800121e <main+0x1e6>
    {
      TERMOUT("> es-wifi module connected \n");
 800116a:	4857      	ldr	r0, [pc, #348]	@ (80012c8 <main+0x290>)
 800116c:	f007 fd68 	bl	8008c40 <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	2104      	movs	r1, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fca2 	bl	8002ac0 <WIFI_GetIP_Address>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d149      	bne.n	8001216 <main+0x1de>
      {
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8001182:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001186:	4619      	mov	r1, r3
 8001188:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800118c:	461a      	mov	r2, r3
 800118e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001192:	4618      	mov	r0, r3
 8001194:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	4603      	mov	r3, r0
 800119c:	484b      	ldr	r0, [pc, #300]	@ (80012cc <main+0x294>)
 800119e:	f007 fce7 	bl	8008b70 <iprintf>
               IP_Addr[0],
               IP_Addr[1],
               IP_Addr[2],
               IP_Addr[3]);

        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80011a2:	4b4b      	ldr	r3, [pc, #300]	@ (80012d0 <main+0x298>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4b49      	ldr	r3, [pc, #292]	@ (80012d0 <main+0x298>)
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	4618      	mov	r0, r3
 80011ae:	4b48      	ldr	r3, [pc, #288]	@ (80012d0 <main+0x298>)
 80011b0:	789b      	ldrb	r3, [r3, #2]
 80011b2:	461c      	mov	r4, r3
 80011b4:	4b46      	ldr	r3, [pc, #280]	@ (80012d0 <main+0x298>)
 80011b6:	78db      	ldrb	r3, [r3, #3]
 80011b8:	461a      	mov	r2, r3
 80011ba:	f24c 0301 	movw	r3, #49153	@ 0xc001
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	4623      	mov	r3, r4
 80011c4:	4602      	mov	r2, r0
 80011c6:	4843      	ldr	r0, [pc, #268]	@ (80012d4 <main+0x29c>)
 80011c8:	f007 fcd2 	bl	8008b70 <iprintf>
               RemoteIP[1],
               RemoteIP[2],
               RemoteIP[3],
							 RemotePORT);

        while (Trials--)
 80011cc:	e013      	b.n	80011f6 <main+0x1be>
        {
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80011ce:	2300      	movs	r3, #0
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	f24c 0301 	movw	r3, #49153	@ 0xc001
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4b3d      	ldr	r3, [pc, #244]	@ (80012d0 <main+0x298>)
 80011da:	4a3f      	ldr	r2, [pc, #252]	@ (80012d8 <main+0x2a0>)
 80011dc:	2100      	movs	r1, #0
 80011de:	2000      	movs	r0, #0
 80011e0:	f001 fc92 	bl	8002b08 <WIFI_OpenClientConnection>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d105      	bne.n	80011f6 <main+0x1be>
          {
            TERMOUT("> TCP Connection opened successfully.\n");
 80011ea:	483c      	ldr	r0, [pc, #240]	@ (80012dc <main+0x2a4>)
 80011ec:	f007 fd28 	bl	8008c40 <puts>
            Socket = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            break;
 80011f4:	e007      	b.n	8001206 <main+0x1ce>
        while (Trials--)
 80011f6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	3a01      	subs	r2, #1
 80011fe:	b292      	uxth	r2, r2
 8001200:	877a      	strh	r2, [r7, #58]	@ 0x3a
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1e3      	bne.n	80011ce <main+0x196>
          }
        }
        if(Socket == -1)
 8001206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d10e      	bne.n	800122c <main+0x1f4>
        {
          TERMOUT("> ERROR : Cannot open Connection\n");
 800120e:	4834      	ldr	r0, [pc, #208]	@ (80012e0 <main+0x2a8>)
 8001210:	f007 fd16 	bl	8008c40 <puts>
 8001214:	e00a      	b.n	800122c <main+0x1f4>
          //BSP_LED_On(LED2);
        }
      }
      else
      {
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 8001216:	4833      	ldr	r0, [pc, #204]	@ (80012e4 <main+0x2ac>)
 8001218:	f007 fd12 	bl	8008c40 <puts>
 800121c:	e006      	b.n	800122c <main+0x1f4>
        //BSP_LED_On(LED2);
      }
    }
    else
    {
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 800121e:	4832      	ldr	r0, [pc, #200]	@ (80012e8 <main+0x2b0>)
 8001220:	f007 fd0e 	bl	8008c40 <puts>
 8001224:	e002      	b.n	800122c <main+0x1f4>
      //BSP_LED_On(LED2);
    }
  }
  else
  {
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8001226:	4831      	ldr	r0, [pc, #196]	@ (80012ec <main+0x2b4>)
 8001228:	f007 fd0a 	bl	8008c40 <puts>
    //BSP_LED_On(LED2);
  }
  while(1){
	  	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800122c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800122e:	f001 ff09 	bl	8003044 <BSP_ACCELERO_AccGetXYZ>
	  	  if(accel_data[0]/1000 >= 5){
 8001232:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001236:	f241 3287 	movw	r2, #4999	@ 0x1387
 800123a:	4293      	cmp	r3, r2
 800123c:	ddf6      	ble.n	800122c <main+0x1f4>
	  		sprintf(sendbuffer,"Hit");     /*L:hit,R:Hit*/
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	492b      	ldr	r1, [pc, #172]	@ (80012f0 <main+0x2b8>)
 8001244:	4618      	mov	r0, r3
 8001246:	f007 fd03 	bl	8008c50 <siprintf>
	  		ret = WIFI_SendData(Socket, sendbuffer, sizeof(sendbuffer), &Datalen, WIFI_WRITE_TIMEOUT);
 800124a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800124c:	f107 030e 	add.w	r3, r7, #14
 8001250:	f107 0108 	add.w	r1, r7, #8
 8001254:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	2203      	movs	r2, #3
 800125c:	f001 fc90 	bl	8002b80 <WIFI_SendData>
 8001260:	4603      	mov	r3, r0
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  		if(ret != WIFI_STATUS_OK){
 8001264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <main+0x23a>
	  			BSP_LED_On(LED2);
 800126a:	2000      	movs	r0, #0
 800126c:	f001 fcda 	bl	8002c24 <BSP_LED_On>
	  			break;
 8001270:	e004      	b.n	800127c <main+0x244>
	  		}
	  		HAL_Delay(500);
 8001272:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001276:	f002 f907 	bl	8003488 <HAL_Delay>
	  	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800127a:	e7d7      	b.n	800122c <main+0x1f4>
 800127c:	2300      	movs	r3, #0
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
        break;
      }
    }
  }*/
}
 800127e:	4618      	mov	r0, r3
 8001280:	3740      	adds	r7, #64	@ 0x40
 8001282:	46bd      	mov	sp, r7
 8001284:	bdb0      	pop	{r4, r5, r7, pc}
 8001286:	bf00      	nop
 8001288:	0800c944 	.word	0x0800c944
 800128c:	0800c954 	.word	0x0800c954
 8001290:	20000c04 	.word	0x20000c04
 8001294:	40013800 	.word	0x40013800
 8001298:	0800c5e8 	.word	0x0800c5e8
 800129c:	0800c628 	.word	0x0800c628
 80012a0:	0800c644 	.word	0x0800c644
 80012a4:	0800c684 	.word	0x0800c684
 80012a8:	0800c6bc 	.word	0x0800c6bc
 80012ac:	0800c6fc 	.word	0x0800c6fc
 80012b0:	0800c710 	.word	0x0800c710
 80012b4:	0800c758 	.word	0x0800c758
 80012b8:	0800c774 	.word	0x0800c774
 80012bc:	0800c7a8 	.word	0x0800c7a8
 80012c0:	0800c7cc 	.word	0x0800c7cc
 80012c4:	0800c7d8 	.word	0x0800c7d8
 80012c8:	0800c7e0 	.word	0x0800c7e0
 80012cc:	0800c7fc 	.word	0x0800c7fc
 80012d0:	20000000 	.word	0x20000000
 80012d4:	0800c82c 	.word	0x0800c82c
 80012d8:	0800c860 	.word	0x0800c860
 80012dc:	0800c86c 	.word	0x0800c86c
 80012e0:	0800c894 	.word	0x0800c894
 80012e4:	0800c8b8 	.word	0x0800c8b8
 80012e8:	0800c8e8 	.word	0x0800c8e8
 80012ec:	0800c910 	.word	0x0800c910
 80012f0:	0800c940 	.word	0x0800c940

080012f4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	@ 0x58
 80012f8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012fa:	2310      	movs	r3, #16
 80012fc:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012fe:	2301      	movs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001302:	2360      	movs	r3, #96	@ 0x60
 8001304:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800130e:	2301      	movs	r3, #1
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001312:	2301      	movs	r3, #1
 8001314:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001316:	2328      	movs	r3, #40	@ 0x28
 8001318:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 800131a:	2302      	movs	r3, #2
 800131c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 800131e:	2307      	movs	r3, #7
 8001320:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001322:	2304      	movs	r3, #4
 8001324:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4618      	mov	r0, r3
 800132a:	f003 fa3d 	bl	80047a8 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1);
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001338:	230f      	movs	r3, #15
 800133a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2303      	movs	r3, #3
 800133e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	657b      	str	r3, [r7, #84]	@ 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800134c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001350:	2104      	movs	r1, #4
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fe04 	bl	8004f60 <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x6e>
  {
    /* Initialization Error */
    while(1);
 800135e:	bf00      	nop
 8001360:	e7fd      	b.n	800135e <SystemClock_Config+0x6a>
  }
}
 8001362:	bf00      	nop
 8001364:	3758      	adds	r7, #88	@ 0x58
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8001374:	1d39      	adds	r1, r7, #4
 8001376:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800137a:	2201      	movs	r2, #1
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <__io_putchar+0x20>)
 800137e:	f005 ff6e 	bl	800725e <HAL_UART_Transmit>

  return ch;
 8001382:	687b      	ldr	r3, [r7, #4]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000c04 	.word	0x20000c04

08001390 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d102      	bne.n	80013a6 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 80013a0:	f001 fb10 	bl	80029c4 <SPI_WIFI_ISR>
      break;
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 80013a6:	bf00      	nop
    }
  }
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <SPI3_IRQHandler+0x10>)
 80013b6:	f005 f883 	bl	80064c0 <HAL_SPI_IRQHandler>
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000023c 	.word	0x2000023c

080013c4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80013d6:	bf00      	nop
 80013d8:	e7fd      	b.n	80013d6 <HardFault_Handler+0x4>

080013da <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80013de:	bf00      	nop
 80013e0:	e7fd      	b.n	80013de <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80013e6:	bf00      	nop
 80013e8:	e7fd      	b.n	80013e6 <BusFault_Handler+0x4>

080013ea <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80013ee:	bf00      	nop
 80013f0:	e7fd      	b.n	80013ee <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001420:	f002 f812 	bl	8003448 <HAL_IncTick>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800142c:	2002      	movs	r0, #2
 800142e:	f002 fb7b 	bl	8003b28 <HAL_GPIO_EXTI_IRQHandler>
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}

08001436 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_kill>:

int _kill(int pid, int sig)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001450:	f007 fde0 	bl	8009014 <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	2216      	movs	r2, #22
 8001458:	601a      	str	r2, [r3, #0]
  return -1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_exit>:

void _exit (int status)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800146e:	f04f 31ff 	mov.w	r1, #4294967295
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffe7 	bl	8001446 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <_exit+0x12>

0800147c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	e00a      	b.n	80014a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800148e:	f3af 8000 	nop.w
 8001492:	4601      	mov	r1, r0
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbf0      	blt.n	800148e <_read+0x12>
  }

  return len;
 80014ac:	687b      	ldr	r3, [r7, #4]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	e009      	b.n	80014dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	60ba      	str	r2, [r7, #8]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff4b 	bl	800136c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf1      	blt.n	80014c8 <_write+0x12>
  }
  return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_close>:

int _close(int file)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001516:	605a      	str	r2, [r3, #4]
  return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <_isatty>:

int _isatty(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d207      	bcs.n	8001598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001588:	f007 fd44 	bl	8009014 <__errno>
 800158c:	4603      	mov	r3, r0
 800158e:	220c      	movs	r2, #12
 8001590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	e009      	b.n	80015ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <_sbrk+0x64>)
 80015a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20018000 	.word	0x20018000
 80015b8:	00007000 	.word	0x00007000
 80015bc:	20000238 	.word	0x20000238
 80015c0:	20000de0 	.word	0x20000de0

080015c4 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80015d2:	d906      	bls.n	80015e2 <Hex2Num+0x1e>
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b39      	cmp	r3, #57	@ 0x39
 80015d8:	d803      	bhi.n	80015e2 <Hex2Num+0x1e>
        return a - '0';
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	3b30      	subs	r3, #48	@ 0x30
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	e014      	b.n	800160c <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b60      	cmp	r3, #96	@ 0x60
 80015e6:	d906      	bls.n	80015f6 <Hex2Num+0x32>
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b66      	cmp	r3, #102	@ 0x66
 80015ec:	d803      	bhi.n	80015f6 <Hex2Num+0x32>
        return (a - 'a') + 10;
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	3b57      	subs	r3, #87	@ 0x57
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	e00a      	b.n	800160c <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b40      	cmp	r3, #64	@ 0x40
 80015fa:	d906      	bls.n	800160a <Hex2Num+0x46>
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2b46      	cmp	r3, #70	@ 0x46
 8001600:	d803      	bhi.n	800160a <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	3b37      	subs	r3, #55	@ 0x37
 8001606:	b2db      	uxtb	r3, r3
 8001608:	e000      	b.n	800160c <Hex2Num+0x48>
    }

    return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800162a:	e012      	b.n	8001652 <ParseHexNumber+0x3a>
        sum <<= 4;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ffc4 	bl	80015c4 <Hex2Num>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	4413      	add	r3, r2
 8001644:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3301      	adds	r3, #1
 800164a:	607b      	str	r3, [r7, #4]
        done_count++;
 800164c:	7bbb      	ldrb	r3, [r7, #14]
 800164e:	3301      	adds	r3, #1
 8001650:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b2f      	cmp	r3, #47	@ 0x2f
 8001658:	d903      	bls.n	8001662 <ParseHexNumber+0x4a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b39      	cmp	r3, #57	@ 0x39
 8001660:	d90f      	bls.n	8001682 <ParseHexNumber+0x6a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b60      	cmp	r3, #96	@ 0x60
 8001668:	d903      	bls.n	8001672 <ParseHexNumber+0x5a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b66      	cmp	r3, #102	@ 0x66
 8001670:	d907      	bls.n	8001682 <ParseHexNumber+0x6a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b40      	cmp	r3, #64	@ 0x40
 8001678:	d906      	bls.n	8001688 <ParseHexNumber+0x70>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b46      	cmp	r3, #70	@ 0x46
 8001680:	d802      	bhi.n	8001688 <ParseHexNumber+0x70>
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d9d1      	bls.n	800162c <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d002      	beq.n	8001694 <ParseHexNumber+0x7c>
        *cnt = done_count;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	7bba      	ldrb	r2, [r7, #14]
 8001692:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8001694:	7bfb      	ldrb	r3, [r7, #15]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b2d      	cmp	r3, #45	@ 0x2d
 80016ba:	d119      	bne.n	80016f0 <ParseNumber+0x52>
        minus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3301      	adds	r3, #1
 80016c4:	607b      	str	r3, [r7, #4]
        done_count++;
 80016c6:	7bbb      	ldrb	r3, [r7, #14]
 80016c8:	3301      	adds	r3, #1
 80016ca:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 80016cc:	e010      	b.n	80016f0 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	3b30      	subs	r3, #48	@ 0x30
 80016e0:	4413      	add	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
        ptr++;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3301      	adds	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
        done_count++;
 80016ea:	7bbb      	ldrb	r3, [r7, #14]
 80016ec:	3301      	adds	r3, #1
 80016ee:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80016f6:	d903      	bls.n	8001700 <ParseNumber+0x62>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b39      	cmp	r3, #57	@ 0x39
 80016fe:	d9e6      	bls.n	80016ce <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <ParseNumber+0x6e>
        *cnt = done_count;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	7bba      	ldrb	r2, [r7, #14]
 800170a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d002      	beq.n	8001718 <ParseNumber+0x7a>
        return 0 - sum;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	425b      	negs	r3, r3
 8001716:	e000      	b.n	800171a <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001718:	68bb      	ldr	r3, [r7, #8]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b087      	sub	sp, #28
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d027      	beq.n	800178c <ParseMAC+0x66>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d024      	beq.n	800178c <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001742:	e018      	b.n	8001776 <ParseMAC+0x50>
    uint8_t done_count = 1;
 8001744:	2301      	movs	r3, #1
 8001746:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b3a      	cmp	r3, #58	@ 0x3a
 800174e:	d00d      	beq.n	800176c <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	75fa      	strb	r2, [r7, #23]
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	189c      	adds	r4, r3, r2
 800175c:	f107 0316 	add.w	r3, r7, #22
 8001760:	4619      	mov	r1, r3
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff ff58 	bl	8001618 <ParseHexNumber>
 8001768:	4603      	mov	r3, r0
 800176a:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 800176c:	7dbb      	ldrb	r3, [r7, #22]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	d906      	bls.n	800178c <ParseMAC+0x66>
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	2b05      	cmp	r3, #5
 8001782:	d803      	bhi.n	800178c <ParseMAC+0x66>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1db      	bne.n	8001744 <ParseMAC+0x1e>
   }
  }
}
 800178c:	bf00      	nop
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}

08001794 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d027      	beq.n	80017fa <ParseIP+0x66>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d024      	beq.n	80017fa <ParseIP+0x66>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d921      	bls.n	80017fa <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 80017b6:	e019      	b.n	80017ec <ParseIP+0x58>
    uint8_t done_count = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80017c2:	d00e      	beq.n	80017e2 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 80017c4:	f107 0316 	add.w	r3, r7, #22
 80017c8:	4619      	mov	r1, r3
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff ff67 	bl	800169e <ParseNumber>
 80017d0:	4601      	mov	r1, r0
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	75fa      	strb	r2, [r7, #23]
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	4413      	add	r3, r2
 80017de:	b2ca      	uxtb	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 80017e2:	7dbb      	ldrb	r3, [r7, #22]
 80017e4:	461a      	mov	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d803      	bhi.n	80017fa <ParseIP+0x66>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1de      	bne.n	80017b8 <ParseIP+0x24>
   }
  }
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	3302      	adds	r3, #2
 8001816:	4940      	ldr	r1, [pc, #256]	@ (8001918 <AT_ParseInfo+0x114>)
 8001818:	4618      	mov	r0, r3
 800181a:	f007 fb3f 	bl	8008e9c <strtok>
 800181e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001820:	e071      	b.n	8001906 <AT_ParseInfo+0x102>
    switch (num++) {
 8001822:	7afb      	ldrb	r3, [r7, #11]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	72fa      	strb	r2, [r7, #11]
 8001828:	2b06      	cmp	r3, #6
 800182a:	d866      	bhi.n	80018fa <AT_ParseInfo+0xf6>
 800182c:	a201      	add	r2, pc, #4	@ (adr r2, 8001834 <AT_ParseInfo+0x30>)
 800182e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	08001851 	.word	0x08001851
 8001838:	08001865 	.word	0x08001865
 800183c:	0800187d 	.word	0x0800187d
 8001840:	08001895 	.word	0x08001895
 8001844:	080018ad 	.word	0x080018ad
 8001848:	080018c5 	.word	0x080018c5
 800184c:	080018d9 	.word	0x080018d9
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	221f      	movs	r2, #31
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	4618      	mov	r0, r3
 8001858:	f007 fb0c 	bl	8008e74 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	77da      	strb	r2, [r3, #31]
      break;
 8001862:	e04b      	b.n	80018fc <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3320      	adds	r3, #32
 8001868:	2217      	movs	r2, #23
 800186a:	68f9      	ldr	r1, [r7, #12]
 800186c:	4618      	mov	r0, r3
 800186e:	f007 fb01 	bl	8008e74 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 800187a:	e03f      	b.n	80018fc <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3338      	adds	r3, #56	@ 0x38
 8001880:	220f      	movs	r2, #15
 8001882:	68f9      	ldr	r1, [r7, #12]
 8001884:	4618      	mov	r0, r3
 8001886:	f007 faf5 	bl	8008e74 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8001892:	e033      	b.n	80018fc <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3348      	adds	r3, #72	@ 0x48
 8001898:	220f      	movs	r2, #15
 800189a:	68f9      	ldr	r1, [r7, #12]
 800189c:	4618      	mov	r0, r3
 800189e:	f007 fae9 	bl	8008e74 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 80018aa:	e027      	b.n	80018fc <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3358      	adds	r3, #88	@ 0x58
 80018b0:	220f      	movs	r2, #15
 80018b2:	68f9      	ldr	r1, [r7, #12]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f007 fadd 	bl	8008e74 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 80018c2:	e01b      	b.n	80018fc <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 80018c4:	2100      	movs	r1, #0
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff fee9 	bl	800169e <ParseNumber>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 80018d6:	e011      	b.n	80018fc <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 80018d8:	4910      	ldr	r1, [pc, #64]	@ (800191c <AT_ParseInfo+0x118>)
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f007 fade 	bl	8008e9c <strtok>
 80018e0:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3368      	adds	r3, #104	@ 0x68
 80018e6:	221f      	movs	r2, #31
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f007 fac2 	bl	8008e74 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 80018f8:	e000      	b.n	80018fc <AT_ParseInfo+0xf8>

    default: break;
 80018fa:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80018fc:	4906      	ldr	r1, [pc, #24]	@ (8001918 <AT_ParseInfo+0x114>)
 80018fe:	2000      	movs	r0, #0
 8001900:	f007 facc 	bl	8008e9c <strtok>
 8001904:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d18a      	bne.n	8001822 <AT_ParseInfo+0x1e>
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	0800c988 	.word	0x0800c988
 800191c:	0800c98c 	.word	0x0800c98c

08001920 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3302      	adds	r3, #2
 8001932:	4959      	ldr	r1, [pc, #356]	@ (8001a98 <AT_ParseConnSettings+0x178>)
 8001934:	4618      	mov	r0, r3
 8001936:	f007 fab1 	bl	8008e9c <strtok>
 800193a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800193c:	e0a2      	b.n	8001a84 <AT_ParseConnSettings+0x164>
    switch (num++) {
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	73fa      	strb	r2, [r7, #15]
 8001944:	2b0b      	cmp	r3, #11
 8001946:	f200 808c 	bhi.w	8001a62 <AT_ParseConnSettings+0x142>
 800194a:	a201      	add	r2, pc, #4	@ (adr r2, 8001950 <AT_ParseConnSettings+0x30>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	08001981 	.word	0x08001981
 8001954:	08001997 	.word	0x08001997
 8001958:	080019af 	.word	0x080019af
 800195c:	080019c3 	.word	0x080019c3
 8001960:	080019d7 	.word	0x080019d7
 8001964:	080019eb 	.word	0x080019eb
 8001968:	080019fb 	.word	0x080019fb
 800196c:	08001a0b 	.word	0x08001a0b
 8001970:	08001a1b 	.word	0x08001a1b
 8001974:	08001a2b 	.word	0x08001a2b
 8001978:	08001a3b 	.word	0x08001a3b
 800197c:	08001a4f 	.word	0x08001a4f
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2220      	movs	r2, #32
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	4618      	mov	r0, r3
 8001988:	f007 fa74 	bl	8008e74 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 8001994:	e066      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	3321      	adds	r3, #33	@ 0x21
 800199a:	2220      	movs	r2, #32
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 fa68 	bl	8008e74 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 80019ac:	e05a      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80019ae:	2100      	movs	r1, #0
 80019b0:	68b8      	ldr	r0, [r7, #8]
 80019b2:	f7ff fe74 	bl	800169e <ParseNumber>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 80019c0:	e050      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 80019c2:	2100      	movs	r1, #0
 80019c4:	68b8      	ldr	r0, [r7, #8]
 80019c6:	f7ff fe6a 	bl	800169e <ParseNumber>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 80019d4:	e046      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80019d6:	2100      	movs	r1, #0
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f7ff fe60 	bl	800169e <ParseNumber>
 80019de:	4603      	mov	r3, r0
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 80019e8:	e03c      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	3348      	adds	r3, #72	@ 0x48
 80019ee:	2204      	movs	r2, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7ff fece 	bl	8001794 <ParseIP>
      break;
 80019f8:	e034      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	334c      	adds	r3, #76	@ 0x4c
 80019fe:	2204      	movs	r2, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	68b8      	ldr	r0, [r7, #8]
 8001a04:	f7ff fec6 	bl	8001794 <ParseIP>
      break;
 8001a08:	e02c      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	3350      	adds	r3, #80	@ 0x50
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	68b8      	ldr	r0, [r7, #8]
 8001a14:	f7ff febe 	bl	8001794 <ParseIP>
      break;
 8001a18:	e024      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	3354      	adds	r3, #84	@ 0x54
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	68b8      	ldr	r0, [r7, #8]
 8001a24:	f7ff feb6 	bl	8001794 <ParseIP>
      break;
 8001a28:	e01c      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	3358      	adds	r3, #88	@ 0x58
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f7ff feae 	bl	8001794 <ParseIP>
      break;
 8001a38:	e014      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	68b8      	ldr	r0, [r7, #8]
 8001a3e:	f7ff fe2e 	bl	800169e <ParseNumber>
 8001a42:	4603      	mov	r3, r0
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8001a4c:	e00a      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	68b8      	ldr	r0, [r7, #8]
 8001a52:	f7ff fe24 	bl	800169e <ParseNumber>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8001a60:	e000      	b.n	8001a64 <AT_ParseConnSettings+0x144>

    default:
      break;
 8001a62:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <AT_ParseConnSettings+0x178>)
 8001a66:	2000      	movs	r0, #0
 8001a68:	f007 fa18 	bl	8008e9c <strtok>
 8001a6c:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <AT_ParseConnSettings+0x164>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a7c:	d102      	bne.n	8001a84 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	3301      	adds	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f47f af59 	bne.w	800193e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800c988 	.word	0x0800c988

08001a9c <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d056      	beq.n	8001b68 <AT_ExecuteCommand+0xcc>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d051      	beq.n	8001b68 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8001aca:	68b8      	ldr	r0, [r7, #8]
 8001acc:	f7fe fbd0 	bl	8000270 <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001ada:	461a      	mov	r2, r3
 8001adc:	68b8      	ldr	r0, [r7, #8]
 8001ade:	47a0      	blx	r4
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	dd3e      	ble.n	8001b68 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001af6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
 8001afe:	4603      	mov	r3, r0
 8001b00:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001b02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	dd27      	ble.n	8001b5a <AT_ExecuteCommand+0xbe>
 8001b0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b0e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b12:	dc22      	bgt.n	8001b5a <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001b14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b18:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001b1c:	d105      	bne.n	8001b2a <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001b1e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001b2a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 8001b36:	490f      	ldr	r1, [pc, #60]	@ (8001b74 <AT_ExecuteCommand+0xd8>)
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f007 fa0b 	bl	8008f54 <strstr>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e010      	b.n	8001b6a <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001b48:	490b      	ldr	r1, [pc, #44]	@ (8001b78 <AT_ExecuteCommand+0xdc>)
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f007 fa02 	bl	8008f54 <strstr>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001b56:	2305      	movs	r3, #5
 8001b58:	e007      	b.n	8001b6a <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001b5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b5e:	f113 0f04 	cmn.w	r3, #4
 8001b62:	d101      	bne.n	8001b68 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001b64:	2306      	movs	r3, #6
 8001b66:	e000      	b.n	8001b6a <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001b68:	2304      	movs	r3, #4
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	0800c9a0 	.word	0x0800c9a0
 8001b78:	0800c9ac 	.word	0x0800c9ac

08001b7c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 8001b96:	68b8      	ldr	r0, [r7, #8]
 8001b98:	f7fe fb6a 	bl	8000270 <strlen>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001ba0:	8a7b      	ldrh	r3, [r7, #18]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <AT_RequestSendData+0x32>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e05d      	b.n	8001c6a <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d057      	beq.n	8001c68 <AT_RequestSendData+0xec>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d052      	beq.n	8001c68 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001bce:	8a79      	ldrh	r1, [r7, #18]
 8001bd0:	68b8      	ldr	r0, [r7, #8]
 8001bd2:	4798      	blx	r3
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001bd8:	8a3a      	ldrh	r2, [r7, #16]
 8001bda:	8a7b      	ldrh	r3, [r7, #18]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d143      	bne.n	8001c68 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001bec:	8879      	ldrh	r1, [r7, #2]
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001bf6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d131      	bne.n	8001c64 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	6a38      	ldr	r0, [r7, #32]
 8001c10:	4798      	blx	r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001c16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	dd19      	ble.n	8001c52 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001c1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c22:	6a3a      	ldr	r2, [r7, #32]
 8001c24:	4413      	add	r3, r2
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001c2a:	4912      	ldr	r1, [pc, #72]	@ (8001c74 <AT_RequestSendData+0xf8>)
 8001c2c:	6a38      	ldr	r0, [r7, #32]
 8001c2e:	f007 f991 	bl	8008f54 <strstr>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e016      	b.n	8001c6a <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001c3c:	490e      	ldr	r1, [pc, #56]	@ (8001c78 <AT_RequestSendData+0xfc>)
 8001c3e:	6a38      	ldr	r0, [r7, #32]
 8001c40:	f007 f988 	bl	8008f54 <strstr>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e00d      	b.n	8001c6a <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e00b      	b.n	8001c6a <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001c52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c56:	f113 0f04 	cmn.w	r3, #4
 8001c5a:	d101      	bne.n	8001c60 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001c5c:	2306      	movs	r3, #6
 8001c5e:	e004      	b.n	8001c6a <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001c64:	2302      	movs	r3, #2
 8001c66:	e000      	b.n	8001c6a <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 8001c68:	2304      	movs	r3, #4
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800c9a0 	.word	0x0800c9a0
 8001c78:	0800c9ac 	.word	0x0800c9ac

08001c7c <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001c84:	2302      	movs	r3, #2
 8001c86:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001c8e:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01b      	beq.n	8001cd4 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	4798      	blx	r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d113      	bne.n	8001cd4 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	490a      	ldr	r1, [pc, #40]	@ (8001ce0 <ES_WIFI_Init+0x64>)
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fef0 	bl	8001a9c <AT_ExecuteCommand>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fd98 	bl	8001804 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	0800c9bc 	.word	0x0800c9bc

08001ce4 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00b      	beq.n	8001d10 <ES_WIFI_RegisterBusIO+0x2c>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <ES_WIFI_RegisterBusIO+0x2c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <ES_WIFI_RegisterBusIO+0x2c>
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <ES_WIFI_RegisterBusIO+0x2c>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001d10:	2302      	movs	r3, #2
 8001d12:	e014      	b.n	8001d3e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	4932      	ldr	r1, [pc, #200]	@ (8001e2c <ES_WIFI_Connect+0xe0>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f006 ff73 	bl	8008c50 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d76:	461a      	mov	r2, r3
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff fe8f 	bl	8001a9c <AT_ExecuteCommand>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d14b      	bne.n	8001e20 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4927      	ldr	r1, [pc, #156]	@ (8001e30 <ES_WIFI_Connect+0xe4>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f006 ff5c 	bl	8008c50 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001da4:	461a      	mov	r2, r3
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7ff fe78 	bl	8001a9c <AT_ExecuteCommand>
 8001dac:	4603      	mov	r3, r0
 8001dae:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d134      	bne.n	8001e20 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	491b      	ldr	r1, [pc, #108]	@ (8001e34 <ES_WIFI_Connect+0xe8>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f006 ff41 	bl	8008c50 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff fe5d 	bl	8001a9c <AT_ExecuteCommand>
 8001de2:	4603      	mov	r3, r0
 8001de4:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d119      	bne.n	8001e20 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001df2:	4911      	ldr	r1, [pc, #68]	@ (8001e38 <ES_WIFI_Connect+0xec>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f006 ff2b 	bl	8008c50 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e06:	461a      	mov	r2, r3
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff fe47 	bl	8001a9c <AT_ExecuteCommand>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d103      	bne.n	8001e20 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	0800c9d4 	.word	0x0800c9d4
 8001e30:	0800c9dc 	.word	0x0800c9dc
 8001e34:	0800c9e4 	.word	0x0800c9e4
 8001e38:	0800c9ec 	.word	0x0800c9ec

08001e3c <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e4a:	4913      	ldr	r1, [pc, #76]	@ (8001e98 <ES_WIFI_IsConnected+0x5c>)
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f006 feff 	bl	8008c50 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fe1b 	bl	8001a9c <AT_ExecuteCommand>
 8001e66:	4603      	mov	r3, r0
 8001e68:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10b      	bne.n	8001e88 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8001e76:	2b31      	cmp	r3, #49	@ 0x31
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	0800c9f0 	.word	0x0800c9f0

08001e9c <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001eaa:	4910      	ldr	r1, [pc, #64]	@ (8001eec <ES_WIFI_GetNetworkSettings+0x50>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f006 fecf 	bl	8008c50 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fdeb 	bl	8001a9c <AT_ExecuteCommand>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d108      	bne.n	8001ee2 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	338d      	adds	r3, #141	@ 0x8d
 8001eda:	4619      	mov	r1, r3
 8001edc:	4610      	mov	r0, r2
 8001ede:	f7ff fd1f 	bl	8001920 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	0800c9f8 	.word	0x0800c9f8

08001ef0 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	4613      	mov	r3, r2
 8001efc:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f04:	4913      	ldr	r1, [pc, #76]	@ (8001f54 <ES_WIFI_GetMACAddress+0x64>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f006 fea2 	bl	8008c50 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff fdbe 	bl	8001a9c <AT_ExecuteCommand>
 8001f20:	4603      	mov	r3, r0
 8001f22:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10e      	bne.n	8001f48 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f30:	3302      	adds	r3, #2
 8001f32:	4909      	ldr	r1, [pc, #36]	@ (8001f58 <ES_WIFI_GetMACAddress+0x68>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f006 ffb1 	bl	8008e9c <strtok>
 8001f3a:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6938      	ldr	r0, [r7, #16]
 8001f44:	f7ff fbef 	bl	8001726 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	0800ca48 	.word	0x0800ca48
 8001f58:	0800ca4c 	.word	0x0800ca4c

08001f5c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <ES_WIFI_StartClientConnection+0x1e>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d105      	bne.n	8001f86 <ES_WIFI_StartClientConnection+0x2a>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	885b      	ldrh	r3, [r3, #2]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <ES_WIFI_StartClientConnection+0x2a>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e0c1      	b.n	800210a <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	785b      	ldrb	r3, [r3, #1]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4960      	ldr	r1, [pc, #384]	@ (8002114 <ES_WIFI_StartClientConnection+0x1b8>)
 8001f94:	f006 fe5c 	bl	8008c50 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fd78 	bl	8001a9c <AT_ExecuteCommand>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d114      	bne.n	8001fe0 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4955      	ldr	r1, [pc, #340]	@ (8002118 <ES_WIFI_StartClientConnection+0x1bc>)
 8001fc4:	f006 fe44 	bl	8008c50 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fd60 	bl	8001a9c <AT_ExecuteCommand>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d114      	bne.n	8002010 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	889b      	ldrh	r3, [r3, #4]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	494a      	ldr	r1, [pc, #296]	@ (800211c <ES_WIFI_StartClientConnection+0x1c0>)
 8001ff4:	f006 fe2c 	bl	8008c50 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002004:	461a      	mov	r2, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fd48 	bl	8001a9c <AT_ExecuteCommand>
 800200c:	4603      	mov	r3, r0
 800200e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d11c      	bne.n	8002050 <ES_WIFI_StartClientConnection+0xf4>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <ES_WIFI_StartClientConnection+0xca>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d114      	bne.n	8002050 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	885b      	ldrh	r3, [r3, #2]
 8002030:	461a      	mov	r2, r3
 8002032:	493b      	ldr	r1, [pc, #236]	@ (8002120 <ES_WIFI_StartClientConnection+0x1c4>)
 8002034:	f006 fe0c 	bl	8008c50 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002044:	461a      	mov	r2, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fd28 	bl	8001a9c <AT_ExecuteCommand>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d128      	bne.n	80020a8 <ES_WIFI_StartClientConnection+0x14c>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <ES_WIFI_StartClientConnection+0x10a>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d120      	bne.n	80020a8 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	799b      	ldrb	r3, [r3, #6]
 8002070:	4619      	mov	r1, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	79db      	ldrb	r3, [r3, #7]
 8002076:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800207c:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	9200      	str	r2, [sp, #0]
 8002086:	4623      	mov	r3, r4
 8002088:	460a      	mov	r2, r1
 800208a:	4926      	ldr	r1, [pc, #152]	@ (8002124 <ES_WIFI_StartClientConnection+0x1c8>)
 800208c:	f006 fde0 	bl	8008c50 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800209c:	461a      	mov	r2, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fcfc 	bl	8001a9c <AT_ExecuteCommand>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <ES_WIFI_StartClientConnection+0x180>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d112      	bne.n	80020dc <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020bc:	491a      	ldr	r1, [pc, #104]	@ (8002128 <ES_WIFI_StartClientConnection+0x1cc>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f006 fdc6 	bl	8008c50 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020d0:	461a      	mov	r2, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fce2 	bl	8001a9c <AT_ExecuteCommand>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d112      	bne.n	8002108 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020e8:	4910      	ldr	r1, [pc, #64]	@ (800212c <ES_WIFI_StartClientConnection+0x1d0>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 fdb0 	bl	8008c50 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020fc:	461a      	mov	r2, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fccc 	bl	8001a9c <AT_ExecuteCommand>
 8002104:	4603      	mov	r3, r0
 8002106:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	0800cab0 	.word	0x0800cab0
 8002118:	0800cab8 	.word	0x0800cab8
 800211c:	0800cac0 	.word	0x0800cac0
 8002120:	0800cac8 	.word	0x0800cac8
 8002124:	0800cad0 	.word	0x0800cad0
 8002128:	0800cae0 	.word	0x0800cae0
 800212c:	0800cae8 	.word	0x0800cae8

08002130 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	461a      	mov	r2, r3
 800213c:	460b      	mov	r3, r1
 800213e:	72fb      	strb	r3, [r7, #11]
 8002140:	4613      	mov	r3, r2
 8002142:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002144:	2302      	movs	r3, #2
 8002146:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800214e:	2301      	movs	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e001      	b.n	8002158 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8002158:	893b      	ldrh	r3, [r7, #8]
 800215a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800215e:	d302      	bcc.n	8002166 <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8002160:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8002164:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	893a      	ldrh	r2, [r7, #8]
 800216a:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002172:	7afa      	ldrb	r2, [r7, #11]
 8002174:	4942      	ldr	r1, [pc, #264]	@ (8002280 <ES_WIFI_SendData+0x150>)
 8002176:	4618      	mov	r0, r3
 8002178:	f006 fd6a 	bl	8008c50 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002188:	461a      	mov	r2, r3
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7ff fc86 	bl	8001a9c <AT_ExecuteCommand>
 8002190:	4603      	mov	r3, r0
 8002192:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d15e      	bne.n	8002258 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4938      	ldr	r1, [pc, #224]	@ (8002284 <ES_WIFI_SendData+0x154>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f006 fd53 	bl	8008c50 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021b6:	461a      	mov	r2, r3
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff fc6f 	bl	8001a9c <AT_ExecuteCommand>
 80021be:	4603      	mov	r3, r0
 80021c0:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d13d      	bne.n	8002244 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021ce:	893a      	ldrh	r2, [r7, #8]
 80021d0:	492d      	ldr	r1, [pc, #180]	@ (8002288 <ES_WIFI_SendData+0x158>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f006 fd3c 	bl	8008c50 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021e4:	893a      	ldrh	r2, [r7, #8]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff fcc5 	bl	8001b7c <AT_RequestSendData>
 80021f2:	4603      	mov	r3, r0
 80021f4:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d119      	bne.n	8002230 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002202:	4922      	ldr	r1, [pc, #136]	@ (800228c <ES_WIFI_SendData+0x15c>)
 8002204:	4618      	mov	r0, r3
 8002206:	f006 fea5 	bl	8008f54 <strstr>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d02c      	beq.n	800226a <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002210:	f640 1201 	movw	r2, #2305	@ 0x901
 8002214:	491e      	ldr	r1, [pc, #120]	@ (8002290 <ES_WIFI_SendData+0x160>)
 8002216:	481f      	ldr	r0, [pc, #124]	@ (8002294 <ES_WIFI_SendData+0x164>)
 8002218:	f006 fcaa 	bl	8008b70 <iprintf>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002222:	4619      	mov	r1, r3
 8002224:	481c      	ldr	r0, [pc, #112]	@ (8002298 <ES_WIFI_SendData+0x168>)
 8002226:	f006 fca3 	bl	8008b70 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 800222a:	2302      	movs	r3, #2
 800222c:	74fb      	strb	r3, [r7, #19]
 800222e:	e01c      	b.n	800226a <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8002230:	f640 1207 	movw	r2, #2311	@ 0x907
 8002234:	4916      	ldr	r1, [pc, #88]	@ (8002290 <ES_WIFI_SendData+0x160>)
 8002236:	4817      	ldr	r0, [pc, #92]	@ (8002294 <ES_WIFI_SendData+0x164>)
 8002238:	f006 fc9a 	bl	8008b70 <iprintf>
 800223c:	4817      	ldr	r0, [pc, #92]	@ (800229c <ES_WIFI_SendData+0x16c>)
 800223e:	f006 fcff 	bl	8008c40 <puts>
 8002242:	e012      	b.n	800226a <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8002244:	f640 120c 	movw	r2, #2316	@ 0x90c
 8002248:	4911      	ldr	r1, [pc, #68]	@ (8002290 <ES_WIFI_SendData+0x160>)
 800224a:	4812      	ldr	r0, [pc, #72]	@ (8002294 <ES_WIFI_SendData+0x164>)
 800224c:	f006 fc90 	bl	8008b70 <iprintf>
 8002250:	4813      	ldr	r0, [pc, #76]	@ (80022a0 <ES_WIFI_SendData+0x170>)
 8002252:	f006 fcf5 	bl	8008c40 <puts>
 8002256:	e008      	b.n	800226a <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8002258:	f640 1211 	movw	r2, #2321	@ 0x911
 800225c:	490c      	ldr	r1, [pc, #48]	@ (8002290 <ES_WIFI_SendData+0x160>)
 800225e:	480d      	ldr	r0, [pc, #52]	@ (8002294 <ES_WIFI_SendData+0x164>)
 8002260:	f006 fc86 	bl	8008b70 <iprintf>
 8002264:	480f      	ldr	r0, [pc, #60]	@ (80022a4 <ES_WIFI_SendData+0x174>)
 8002266:	f006 fceb 	bl	8008c40 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d102      	bne.n	8002276 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	2200      	movs	r2, #0
 8002274:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8002276:	7cfb      	ldrb	r3, [r7, #19]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	0800cab0 	.word	0x0800cab0
 8002284:	0800ccb4 	.word	0x0800ccb4
 8002288:	0800ccbc 	.word	0x0800ccbc
 800228c:	0800ccc8 	.word	0x0800ccc8
 8002290:	0800cb40 	.word	0x0800cb40
 8002294:	0800cba8 	.word	0x0800cba8
 8002298:	0800ccd0 	.word	0x0800ccd0
 800229c:	0800ccec 	.word	0x0800ccec
 80022a0:	0800cd08 	.word	0x0800cd08
 80022a4:	0800cd1c 	.word	0x0800cd1c

080022a8 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	@ 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 80022b0:	4b57      	ldr	r3, [pc, #348]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	4a56      	ldr	r2, [pc, #344]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80022bc:	4b54      	ldr	r3, [pc, #336]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c8:	4b51      	ldr	r3, [pc, #324]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	4a50      	ldr	r2, [pc, #320]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022f8:	4b45      	ldr	r3, [pc, #276]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fc:	4a44      	ldr	r2, [pc, #272]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002304:	4b42      	ldr	r3, [pc, #264]	@ (8002410 <SPI_WIFI_MspInit+0x168>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002310:	2200      	movs	r2, #0
 8002312:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002316:	483f      	ldr	r0, [pc, #252]	@ (8002414 <SPI_WIFI_MspInit+0x16c>)
 8002318:	f001 fbee 	bl	8003af8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800231c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002320:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002322:	2301      	movs	r3, #1
 8002324:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	4837      	ldr	r0, [pc, #220]	@ (8002414 <SPI_WIFI_MspInit+0x16c>)
 8002336:	f001 fa1d 	bl	8003774 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800233a:	2302      	movs	r3, #2
 800233c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800233e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002342:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	4831      	ldr	r0, [pc, #196]	@ (8002418 <SPI_WIFI_MspInit+0x170>)
 8002354:	f001 fa0e 	bl	8003774 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8002358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800235c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	4828      	ldr	r0, [pc, #160]	@ (8002418 <SPI_WIFI_MspInit+0x170>)
 8002376:	f001 f9fd 	bl	8003774 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800237a:	2201      	movs	r2, #1
 800237c:	2101      	movs	r1, #1
 800237e:	4826      	ldr	r0, [pc, #152]	@ (8002418 <SPI_WIFI_MspInit+0x170>)
 8002380:	f001 fbba 	bl	8003af8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8002384:	2301      	movs	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002388:	2301      	movs	r3, #1
 800238a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002390:	2301      	movs	r3, #1
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	481f      	ldr	r0, [pc, #124]	@ (8002418 <SPI_WIFI_MspInit+0x170>)
 800239c:	f001 f9ea 	bl	8003774 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80023a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023a4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80023ae:	2301      	movs	r3, #1
 80023b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80023b2:	2306      	movs	r3, #6
 80023b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	4817      	ldr	r0, [pc, #92]	@ (800241c <SPI_WIFI_MspInit+0x174>)
 80023be:	f001 f9d9 	bl	8003774 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80023c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023c6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80023d0:	2301      	movs	r3, #1
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80023d4:	2306      	movs	r3, #6
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	480f      	ldr	r0, [pc, #60]	@ (800241c <SPI_WIFI_MspInit+0x174>)
 80023e0:	f001 f9c8 	bl	8003774 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 80023e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023e8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80023f2:	2301      	movs	r3, #1
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80023f6:	2306      	movs	r3, #6
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	4806      	ldr	r0, [pc, #24]	@ (800241c <SPI_WIFI_MspInit+0x174>)
 8002402:	f001 f9b7 	bl	8003774 <HAL_GPIO_Init>
}
 8002406:	bf00      	nop
 8002408:	3730      	adds	r7, #48	@ 0x30
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	48000400 	.word	0x48000400
 8002418:	48001000 	.word	0x48001000
 800241c:	48000800 	.word	0x48000800

08002420 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d145      	bne.n	80024c0 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002434:	4b27      	ldr	r3, [pc, #156]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 8002436:	4a28      	ldr	r2, [pc, #160]	@ (80024d8 <SPI_WIFI_Init+0xb8>)
 8002438:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800243a:	4826      	ldr	r0, [pc, #152]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 800243c:	f7ff ff34 	bl	80022a8 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 8002440:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 8002442:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002446:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002448:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800244e:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 8002450:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8002454:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8002456:	4b1f      	ldr	r3, [pc, #124]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800245c:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 800245e:	2200      	movs	r2, #0
 8002460:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8002462:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 8002464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002468:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800246a:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 800246c:	2210      	movs	r2, #16
 800246e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002470:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 8002472:	2200      	movs	r2, #0
 8002474:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8002476:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 8002478:	2200      	movs	r2, #0
 800247a:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800247c:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 800247e:	2200      	movs	r2, #0
 8002480:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 8002484:	2200      	movs	r2, #0
 8002486:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002488:	4812      	ldr	r0, [pc, #72]	@ (80024d4 <SPI_WIFI_Init+0xb4>)
 800248a:	f002 ff8d 	bl	80053a8 <HAL_SPI_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	e018      	b.n	80024cc <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2007      	movs	r0, #7
 80024a0:	f001 f8f1 	bl	8003686 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80024a4:	2007      	movs	r0, #7
 80024a6:	f001 f90a 	bl	80036be <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2100      	movs	r1, #0
 80024ae:	2033      	movs	r0, #51	@ 0x33
 80024b0:	f001 f8e9 	bl	8003686 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80024b4:	2033      	movs	r0, #51	@ 0x33
 80024b6:	f001 f902 	bl	80036be <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80024ba:	200a      	movs	r0, #10
 80024bc:	f000 fa08 	bl	80028d0 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 80024c0:	f000 f80c 	bl	80024dc <SPI_WIFI_ResetModule>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]

  return rc;
 80024c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	2000023c 	.word	0x2000023c
 80024d8:	40003c00 	.word	0x40003c00

080024dc <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80024e2:	f000 ffc5 	bl	8003470 <HAL_GetTick>
 80024e6:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 80024ec:	2200      	movs	r2, #0
 80024ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024f2:	4835      	ldr	r0, [pc, #212]	@ (80025c8 <SPI_WIFI_ResetModule+0xec>)
 80024f4:	f001 fb00 	bl	8003af8 <HAL_GPIO_WritePin>
 80024f8:	200a      	movs	r0, #10
 80024fa:	f000 ffc5 	bl	8003488 <HAL_Delay>
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002504:	4830      	ldr	r0, [pc, #192]	@ (80025c8 <SPI_WIFI_ResetModule+0xec>)
 8002506:	f001 faf7 	bl	8003af8 <HAL_GPIO_WritePin>
 800250a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800250e:	f000 ffbb 	bl	8003488 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8002512:	2200      	movs	r2, #0
 8002514:	2101      	movs	r1, #1
 8002516:	482c      	ldr	r0, [pc, #176]	@ (80025c8 <SPI_WIFI_ResetModule+0xec>)
 8002518:	f001 faee 	bl	8003af8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800251c:	200f      	movs	r0, #15
 800251e:	f000 f9d7 	bl	80028d0 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 8002522:	e02b      	b.n	800257c <SPI_WIFI_ResetModule+0xa0>
  {
    if (count > 4)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b04      	cmp	r3, #4
 8002528:	d907      	bls.n	800253a <SPI_WIFI_ResetModule+0x5e>
    {
      WIFI_DISABLE_NSS();
 800252a:	2201      	movs	r2, #1
 800252c:	2101      	movs	r1, #1
 800252e:	4826      	ldr	r0, [pc, #152]	@ (80025c8 <SPI_WIFI_ResetModule+0xec>)
 8002530:	f001 fae2 	bl	8003af8 <HAL_GPIO_WritePin>
      return -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295
 8002538:	e042      	b.n	80025c0 <SPI_WIFI_ResetModule+0xe4>
    }
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	463a      	mov	r2, r7
 800253e:	18d1      	adds	r1, r2, r3
 8002540:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002544:	2201      	movs	r2, #1
 8002546:	4821      	ldr	r0, [pc, #132]	@ (80025cc <SPI_WIFI_ResetModule+0xf0>)
 8002548:	f003 f836 	bl	80055b8 <HAL_SPI_Receive>
 800254c:	4603      	mov	r3, r0
 800254e:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	3302      	adds	r3, #2
 8002554:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8002556:	f000 ff8b 	bl	8003470 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002564:	d202      	bcs.n	800256c <SPI_WIFI_ResetModule+0x90>
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <SPI_WIFI_ResetModule+0xa0>
    {
      WIFI_DISABLE_NSS();
 800256c:	2201      	movs	r2, #1
 800256e:	2101      	movs	r1, #1
 8002570:	4815      	ldr	r0, [pc, #84]	@ (80025c8 <SPI_WIFI_ResetModule+0xec>)
 8002572:	f001 fac1 	bl	8003af8 <HAL_GPIO_WritePin>
      return -1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e021      	b.n	80025c0 <SPI_WIFI_ResetModule+0xe4>
  while (WIFI_IS_CMDDATA_READY())
 800257c:	2102      	movs	r1, #2
 800257e:	4812      	ldr	r0, [pc, #72]	@ (80025c8 <SPI_WIFI_ResetModule+0xec>)
 8002580:	f001 faa2 	bl	8003ac8 <HAL_GPIO_ReadPin>
 8002584:	4603      	mov	r3, r0
 8002586:	2b01      	cmp	r3, #1
 8002588:	d0cc      	beq.n	8002524 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 800258a:	2201      	movs	r2, #1
 800258c:	2101      	movs	r1, #1
 800258e:	480e      	ldr	r0, [pc, #56]	@ (80025c8 <SPI_WIFI_ResetModule+0xec>)
 8002590:	f001 fab2 	bl	8003af8 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8002594:	783b      	ldrb	r3, [r7, #0]
 8002596:	2b15      	cmp	r3, #21
 8002598:	d10e      	bne.n	80025b8 <SPI_WIFI_ResetModule+0xdc>
 800259a:	787b      	ldrb	r3, [r7, #1]
 800259c:	2b15      	cmp	r3, #21
 800259e:	d10b      	bne.n	80025b8 <SPI_WIFI_ResetModule+0xdc>
 80025a0:	78bb      	ldrb	r3, [r7, #2]
 80025a2:	2b0d      	cmp	r3, #13
 80025a4:	d108      	bne.n	80025b8 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80025a6:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80025a8:	2b0a      	cmp	r3, #10
 80025aa:	d105      	bne.n	80025b8 <SPI_WIFI_ResetModule+0xdc>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80025ac:	793b      	ldrb	r3, [r7, #4]
 80025ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80025b0:	d102      	bne.n	80025b8 <SPI_WIFI_ResetModule+0xdc>
 80025b2:	797b      	ldrb	r3, [r7, #5]
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d002      	beq.n	80025be <SPI_WIFI_ResetModule+0xe2>
  {
    return -1;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	e000      	b.n	80025c0 <SPI_WIFI_ResetModule+0xe4>
  }
  return 0;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	48001000 	.word	0x48001000
 80025cc:	2000023c 	.word	0x2000023c

080025d0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80025d4:	4802      	ldr	r0, [pc, #8]	@ (80025e0 <SPI_WIFI_DeInit+0x10>)
 80025d6:	f002 ffb3 	bl	8005540 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	2000023c 	.word	0x2000023c

080025e4 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80025ec:	f000 ff40 	bl	8003470 <HAL_GetTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 80025f4:	e00a      	b.n	800260c <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80025f6:	f000 ff3b 	bl	8003470 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad2      	subs	r2, r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	d902      	bls.n	800260c <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e007      	b.n	800261c <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 800260c:	2102      	movs	r1, #2
 800260e:	4805      	ldr	r0, [pc, #20]	@ (8002624 <wait_cmddata_rdy_high+0x40>)
 8002610:	f001 fa5a 	bl	8003ac8 <HAL_GPIO_ReadPin>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d1ed      	bne.n	80025f6 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	48001000 	.word	0x48001000

08002628 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002630:	f000 ff1e 	bl	8003470 <HAL_GetTick>
 8002634:	4603      	mov	r3, r0
 8002636:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8002638:	e00a      	b.n	8002650 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800263a:	f000 ff19 	bl	8003470 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad2      	subs	r2, r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d902      	bls.n	8002650 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800264a:	f04f 33ff 	mov.w	r3, #4294967295
 800264e:	e004      	b.n	800265a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8002650:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <wait_cmddata_rdy_rising_event+0x3c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d0f0      	beq.n	800263a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8002658:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200002a8 	.word	0x200002a8

08002668 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002670:	f000 fefe 	bl	8003470 <HAL_GetTick>
 8002674:	4603      	mov	r3, r0
 8002676:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 8002678:	e00a      	b.n	8002690 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800267a:	f000 fef9 	bl	8003470 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1ad2      	subs	r2, r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d902      	bls.n	8002690 <wait_spi_rx_event+0x28>
    {
      return -1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e004      	b.n	800269a <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <wait_spi_rx_event+0x3c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d0f0      	beq.n	800267a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002698:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200002a0 	.word	0x200002a0

080026a8 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80026b0:	f000 fede 	bl	8003470 <HAL_GetTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80026b8:	e00a      	b.n	80026d0 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80026ba:	f000 fed9 	bl	8003470 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad2      	subs	r2, r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d902      	bls.n	80026d0 <wait_spi_tx_event+0x28>
    {
      return -1;
 80026ca:	f04f 33ff 	mov.w	r3, #4294967295
 80026ce:	e004      	b.n	80026da <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 80026d0:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <wait_spi_tx_event+0x3c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d0f0      	beq.n	80026ba <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80026d8:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200002a4 	.word	0x200002a4

080026e8 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	460b      	mov	r3, r1
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 80026fa:	2201      	movs	r2, #1
 80026fc:	2101      	movs	r1, #1
 80026fe:	4834      	ldr	r0, [pc, #208]	@ (80027d0 <SPI_WIFI_ReceiveData+0xe8>)
 8002700:	f001 f9fa 	bl	8003af8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002704:	2003      	movs	r0, #3
 8002706:	f000 f8e3 	bl	80028d0 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff8b 	bl	8002628 <wait_cmddata_rdy_rising_event>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	da02      	bge.n	800271e <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002718:	f06f 0302 	mvn.w	r3, #2
 800271c:	e054      	b.n	80027c8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800271e:	2200      	movs	r2, #0
 8002720:	2101      	movs	r1, #1
 8002722:	482b      	ldr	r0, [pc, #172]	@ (80027d0 <SPI_WIFI_ReceiveData+0xe8>)
 8002724:	f001 f9e8 	bl	8003af8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002728:	200f      	movs	r0, #15
 800272a:	f000 f8d1 	bl	80028d0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800272e:	e03d      	b.n	80027ac <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8002730:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002734:	897b      	ldrh	r3, [r7, #10]
 8002736:	429a      	cmp	r2, r3
 8002738:	db02      	blt.n	8002740 <SPI_WIFI_ReceiveData+0x58>
 800273a:	897b      	ldrh	r3, [r7, #10]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d13c      	bne.n	80027ba <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8002740:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <SPI_WIFI_ReceiveData+0xec>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	2201      	movs	r2, #1
 800274c:	4619      	mov	r1, r3
 800274e:	4822      	ldr	r0, [pc, #136]	@ (80027d8 <SPI_WIFI_ReceiveData+0xf0>)
 8002750:	f003 fd12 	bl	8006178 <HAL_SPI_Receive_IT>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800275a:	2201      	movs	r2, #1
 800275c:	2101      	movs	r1, #1
 800275e:	481c      	ldr	r0, [pc, #112]	@ (80027d0 <SPI_WIFI_ReceiveData+0xe8>)
 8002760:	f001 f9ca 	bl	8003af8 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002764:	f04f 33ff 	mov.w	r3, #4294967295
 8002768:	e02e      	b.n	80027c8 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff7b 	bl	8002668 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002772:	7d3a      	ldrb	r2, [r7, #20]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3301      	adds	r3, #1
 800277c:	7d7a      	ldrb	r2, [r7, #21]
 800277e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002780:	8afb      	ldrh	r3, [r7, #22]
 8002782:	3302      	adds	r3, #2
 8002784:	b29b      	uxth	r3, r3
 8002786:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3302      	adds	r3, #2
 800278c:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 800278e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002792:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002796:	db09      	blt.n	80027ac <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002798:	2201      	movs	r2, #1
 800279a:	2101      	movs	r1, #1
 800279c:	480c      	ldr	r0, [pc, #48]	@ (80027d0 <SPI_WIFI_ReceiveData+0xe8>)
 800279e:	f001 f9ab 	bl	8003af8 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80027a2:	f7ff fe9b 	bl	80024dc <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80027a6:	f06f 0303 	mvn.w	r3, #3
 80027aa:	e00d      	b.n	80027c8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80027ac:	2102      	movs	r1, #2
 80027ae:	4808      	ldr	r0, [pc, #32]	@ (80027d0 <SPI_WIFI_ReceiveData+0xe8>)
 80027b0:	f001 f98a 	bl	8003ac8 <HAL_GPIO_ReadPin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d0ba      	beq.n	8002730 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80027ba:	2201      	movs	r2, #1
 80027bc:	2101      	movs	r1, #1
 80027be:	4804      	ldr	r0, [pc, #16]	@ (80027d0 <SPI_WIFI_ReceiveData+0xe8>)
 80027c0:	f001 f99a 	bl	8003af8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80027c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	48001000 	.word	0x48001000
 80027d4:	200002a0 	.word	0x200002a0
 80027d8:	2000023c 	.word	0x2000023c

080027dc <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	460b      	mov	r3, r1
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fef9 	bl	80025e4 <wait_cmddata_rdy_high>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da02      	bge.n	80027fe <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
 80027fc:	e04f      	b.n	800289e <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 80027fe:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <SPI_WIFI_SendData+0xcc>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002804:	2200      	movs	r2, #0
 8002806:	2101      	movs	r1, #1
 8002808:	4828      	ldr	r0, [pc, #160]	@ (80028ac <SPI_WIFI_SendData+0xd0>)
 800280a:	f001 f975 	bl	8003af8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800280e:	200f      	movs	r0, #15
 8002810:	f000 f85e 	bl	80028d0 <SPI_WIFI_DelayUs>
  if (len > 1)
 8002814:	897b      	ldrh	r3, [r7, #10]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d919      	bls.n	800284e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 800281a:	4b25      	ldr	r3, [pc, #148]	@ (80028b0 <SPI_WIFI_SendData+0xd4>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8002820:	897b      	ldrh	r3, [r7, #10]
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	4822      	ldr	r0, [pc, #136]	@ (80028b4 <SPI_WIFI_SendData+0xd8>)
 800282c:	f003 fc08 	bl	8006040 <HAL_SPI_Transmit_IT>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8002836:	2201      	movs	r2, #1
 8002838:	2101      	movs	r1, #1
 800283a:	481c      	ldr	r0, [pc, #112]	@ (80028ac <SPI_WIFI_SendData+0xd0>)
 800283c:	f001 f95c 	bl	8003af8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	e02b      	b.n	800289e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff2d 	bl	80026a8 <wait_spi_tx_event>
  }

  if (len & 1)
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8002858:	897b      	ldrh	r3, [r7, #10]
 800285a:	3b01      	subs	r3, #1
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002864:	230a      	movs	r3, #10
 8002866:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <SPI_WIFI_SendData+0xd4>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	2201      	movs	r2, #1
 8002874:	4619      	mov	r1, r3
 8002876:	480f      	ldr	r0, [pc, #60]	@ (80028b4 <SPI_WIFI_SendData+0xd8>)
 8002878:	f003 fbe2 	bl	8006040 <HAL_SPI_Transmit_IT>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002882:	2201      	movs	r2, #1
 8002884:	2101      	movs	r1, #1
 8002886:	4809      	ldr	r0, [pc, #36]	@ (80028ac <SPI_WIFI_SendData+0xd0>)
 8002888:	f001 f936 	bl	8003af8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800288c:	f04f 33ff 	mov.w	r3, #4294967295
 8002890:	e005      	b.n	800289e <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff07 	bl	80026a8 <wait_spi_tx_event>
  }
  return len;
 800289a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	200002a8 	.word	0x200002a8
 80028ac:	48001000 	.word	0x48001000
 80028b0:	200002a4 	.word	0x200002a4
 80028b4:	2000023c 	.word	0x2000023c

080028b8 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fde1 	bl	8003488 <HAL_Delay>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 80028e0:	4b20      	ldr	r3, [pc, #128]	@ (8002964 <SPI_WIFI_DelayUs+0x94>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d122      	bne.n	800292e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 80028e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002968 <SPI_WIFI_DelayUs+0x98>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <SPI_WIFI_DelayUs+0x9c>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80028fe:	f000 fdb7 	bl	8003470 <HAL_GetTick>
 8002902:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002904:	e002      	b.n	800290c <SPI_WIFI_DelayUs+0x3c>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3b01      	subs	r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f9      	bne.n	8002906 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8002912:	f000 fdad 	bl	8003470 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	4a11      	ldr	r2, [pc, #68]	@ (8002964 <SPI_WIFI_DelayUs+0x94>)
 800291e:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002920:	4b10      	ldr	r3, [pc, #64]	@ (8002964 <SPI_WIFI_DelayUs+0x94>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <SPI_WIFI_DelayUs+0x5e>
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <SPI_WIFI_DelayUs+0x94>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 800292e:	4b0e      	ldr	r3, [pc, #56]	@ (8002968 <SPI_WIFI_DelayUs+0x98>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a0f      	ldr	r2, [pc, #60]	@ (8002970 <SPI_WIFI_DelayUs+0xa0>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	0c9a      	lsrs	r2, r3, #18
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <SPI_WIFI_DelayUs+0x94>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800294e:	e002      	b.n	8002956 <SPI_WIFI_DelayUs+0x86>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	3b01      	subs	r3, #1
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f9      	bne.n	8002950 <SPI_WIFI_DelayUs+0x80>
  return;
 800295c:	bf00      	nop
}
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200002ac 	.word	0x200002ac
 8002968:	20000048 	.word	0x20000048
 800296c:	10624dd3 	.word	0x10624dd3
 8002970:	431bde83 	.word	0x431bde83

08002974 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_SPI_RxCpltCallback+0x24>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002984:	4b04      	ldr	r3, [pc, #16]	@ (8002998 <HAL_SPI_RxCpltCallback+0x24>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
  }
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200002a0 	.word	0x200002a0

0800299c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_SPI_TxCpltCallback+0x24>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <HAL_SPI_TxCpltCallback+0x24>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
  }
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	200002a4 	.word	0x200002a4

080029c4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <SPI_WIFI_ISR+0x1c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d102      	bne.n	80029d6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80029d0:	4b03      	ldr	r3, [pc, #12]	@ (80029e0 <SPI_WIFI_ISR+0x1c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
   }
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	200002a8 	.word	0x200002a8

080029e4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80029ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <WIFI_Init+0x40>)
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <WIFI_Init+0x44>)
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a2c <WIFI_Init+0x48>)
 80029f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a30 <WIFI_Init+0x4c>)
 80029fa:	490e      	ldr	r1, [pc, #56]	@ (8002a34 <WIFI_Init+0x50>)
 80029fc:	480e      	ldr	r0, [pc, #56]	@ (8002a38 <WIFI_Init+0x54>)
 80029fe:	f7ff f971 	bl	8001ce4 <ES_WIFI_RegisterBusIO>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d107      	bne.n	8002a18 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002a08:	480b      	ldr	r0, [pc, #44]	@ (8002a38 <WIFI_Init+0x54>)
 8002a0a:	f7ff f937 	bl	8001c7c <ES_WIFI_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002a18:	79fb      	ldrb	r3, [r7, #7]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	080026e9 	.word	0x080026e9
 8002a28:	080027dd 	.word	0x080027dd
 8002a2c:	080028b9 	.word	0x080028b9
 8002a30:	080025d1 	.word	0x080025d1
 8002a34:	08002421 	.word	0x08002421
 8002a38:	200002b0 	.word	0x200002b0

08002a3c <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	68f9      	ldr	r1, [r7, #12]
 8002a54:	4809      	ldr	r0, [pc, #36]	@ (8002a7c <WIFI_Connect+0x40>)
 8002a56:	f7ff f979 	bl	8001d4c <ES_WIFI_Connect>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002a60:	4806      	ldr	r0, [pc, #24]	@ (8002a7c <WIFI_Connect+0x40>)
 8002a62:	f7ff fa1b 	bl	8001e9c <ES_WIFI_GetNetworkSettings>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200002b0 	.word	0x200002b0

08002a80 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00d      	beq.n	8002ab2 <WIFI_GetMAC_Address+0x32>
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4806      	ldr	r0, [pc, #24]	@ (8002abc <WIFI_GetMAC_Address+0x3c>)
 8002aa4:	f7ff fa24 	bl	8001ef0 <ES_WIFI_GetMACAddress>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200002b0 	.word	0x200002b0

08002ac0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d010      	beq.n	8002af8 <WIFI_GetIP_Address+0x38>
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d90d      	bls.n	8002af8 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002adc:	4809      	ldr	r0, [pc, #36]	@ (8002b04 <WIFI_GetIP_Address+0x44>)
 8002ade:	f7ff f9ad 	bl	8001e3c <ES_WIFI_IsConnected>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <WIFI_GetIP_Address+0x44>)
 8002aea:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 8002aee:	461a      	mov	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200002b0 	.word	0x200002b0

08002b08 <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	@ 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	460b      	mov	r3, r1
 8002b16:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8002b24:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002b26:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 8002b28:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002b2a:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	3303      	adds	r3, #3
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	767b      	strb	r3, [r7, #25]

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4807      	ldr	r0, [pc, #28]	@ (8002b7c <WIFI_OpenClientConnection+0x74>)
 8002b60:	f7ff f9fc 	bl	8001f5c <ES_WIFI_StartClientConnection>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8002b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3728      	adds	r7, #40	@ 0x28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	200002b0 	.word	0x200002b0

08002b80 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	b2d9      	uxtb	r1, r3
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	4806      	ldr	r0, [pc, #24]	@ (8002bc0 <WIFI_SendData+0x40>)
 8002ba8:	f7ff fac2 	bl	8002130 <ES_WIFI_SendData>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	200002b0 	.word	0x200002b0

08002bc4 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <BSP_LED_Init+0x28>
 8002bd4:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <BSP_LED_Init+0x58>)
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd8:	4a10      	ldr	r2, [pc, #64]	@ (8002c1c <BSP_LED_Init+0x58>)
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <BSP_LED_Init+0x58>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002bec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bf0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <BSP_LED_Init+0x5c>)
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	f107 020c 	add.w	r2, r7, #12
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fdb1 	bl	8003774 <HAL_GPIO_Init>
}
 8002c12:	bf00      	nop
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	20000004 	.word	0x20000004

08002c24 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	4a06      	ldr	r2, [pc, #24]	@ (8002c4c <BSP_LED_On+0x28>)
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c3a:	b291      	uxth	r1, r2
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 ff5a 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000004 	.word	0x20000004

08002c50 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	@ 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10b      	bne.n	8002c7a <BSP_COM_Init+0x2a>
 8002c62:	4b2d      	ldr	r3, [pc, #180]	@ (8002d18 <BSP_COM_Init+0xc8>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c66:	4a2c      	ldr	r2, [pc, #176]	@ (8002d18 <BSP_COM_Init+0xc8>)
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d18 <BSP_COM_Init+0xc8>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10b      	bne.n	8002c98 <BSP_COM_Init+0x48>
 8002c80:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <BSP_COM_Init+0xc8>)
 8002c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c84:	4a24      	ldr	r2, [pc, #144]	@ (8002d18 <BSP_COM_Init+0xc8>)
 8002c86:	f043 0302 	orr.w	r3, r3, #2
 8002c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c8c:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <BSP_COM_Init+0xc8>)
 8002c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10b      	bne.n	8002cb6 <BSP_COM_Init+0x66>
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d18 <BSP_COM_Init+0xc8>)
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d18 <BSP_COM_Init+0xc8>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002caa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <BSP_COM_Init+0xc8>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8002cb6:	2340      	movs	r3, #64	@ 0x40
 8002cb8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002cc6:	2307      	movs	r3, #7
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	4a13      	ldr	r2, [pc, #76]	@ (8002d1c <BSP_COM_Init+0xcc>)
 8002cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd2:	f107 0214 	add.w	r2, r7, #20
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fd4b 	bl	8003774 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	4a0c      	ldr	r2, [pc, #48]	@ (8002d20 <BSP_COM_Init+0xd0>)
 8002cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf2:	f107 0214 	add.w	r2, r7, #20
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fd3b 	bl	8003774 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <BSP_COM_Init+0xd4>)
 8002d02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8002d0a:	6838      	ldr	r0, [r7, #0]
 8002d0c:	f004 fa4f 	bl	80071ae <HAL_UART_Init>
}
 8002d10:	bf00      	nop
 8002d12:	3728      	adds	r7, #40	@ 0x28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	2000000c 	.word	0x2000000c
 8002d20:	20000010 	.word	0x20000010
 8002d24:	20000008 	.word	0x20000008

08002d28 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d34:	4a26      	ldr	r2, [pc, #152]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d3c:	4b24      	ldr	r3, [pc, #144]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002d48:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d4c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002d4e:	2312      	movs	r3, #18
 8002d50:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d56:	2303      	movs	r3, #3
 8002d58:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	481b      	ldr	r0, [pc, #108]	@ (8002dd4 <I2Cx_MspInit+0xac>)
 8002d66:	f000 fd05 	bl	8003774 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4818      	ldr	r0, [pc, #96]	@ (8002dd4 <I2Cx_MspInit+0xac>)
 8002d72:	f000 fcff 	bl	8003774 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002d76:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7a:	4a15      	ldr	r2, [pc, #84]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002d7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002d8e:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d92:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002d94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d98:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd0 <I2Cx_MspInit+0xa8>)
 8002da0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002da4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	210f      	movs	r1, #15
 8002daa:	2021      	movs	r0, #33	@ 0x21
 8002dac:	f000 fc6b 	bl	8003686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002db0:	2021      	movs	r0, #33	@ 0x21
 8002db2:	f000 fc84 	bl	80036be <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	210f      	movs	r1, #15
 8002dba:	2022      	movs	r0, #34	@ 0x22
 8002dbc:	f000 fc63 	bl	8003686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002dc0:	2022      	movs	r0, #34	@ 0x22
 8002dc2:	f000 fc7c 	bl	80036be <HAL_NVIC_EnableIRQ>
}
 8002dc6:	bf00      	nop
 8002dc8:	3728      	adds	r7, #40	@ 0x28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	48000400 	.word	0x48000400

08002dd8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a12      	ldr	r2, [pc, #72]	@ (8002e2c <I2Cx_Init+0x54>)
 8002de4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <I2Cx_Init+0x58>)
 8002dea:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff89 	bl	8002d28 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fe9e 	bl	8003b58 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f001 fc68 	bl	80046f4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40005800 	.word	0x40005800
 8002e30:	00702681 	.word	0x00702681

08002e34 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	@ 0x28
 8002e38:	af04      	add	r7, sp, #16
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	72fb      	strb	r3, [r7, #11]
 8002e46:	460b      	mov	r3, r1
 8002e48:	813b      	strh	r3, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	b299      	uxth	r1, r3
 8002e56:	88f8      	ldrh	r0, [r7, #6]
 8002e58:	893a      	ldrh	r2, [r7, #8]
 8002e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e5e:	9302      	str	r3, [sp, #8]
 8002e60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	4603      	mov	r3, r0
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f001 f866 	bl	8003f3c <HAL_I2C_Mem_Read>
 8002e70:	4603      	mov	r3, r0
 8002e72:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002e7a:	7afb      	ldrb	r3, [r7, #11]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f832 	bl	8002ee8 <I2Cx_Error>
  }
  return status;
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b08a      	sub	sp, #40	@ 0x28
 8002e92:	af04      	add	r7, sp, #16
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	4608      	mov	r0, r1
 8002e98:	4611      	mov	r1, r2
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	72fb      	strb	r3, [r7, #11]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	813b      	strh	r3, [r7, #8]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	b299      	uxth	r1, r3
 8002eb0:	88f8      	ldrh	r0, [r7, #6]
 8002eb2:	893a      	ldrh	r2, [r7, #8]
 8002eb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 ff25 	bl	8003d14 <HAL_I2C_Mem_Write>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002ed4:	7afb      	ldrb	r3, [r7, #11]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f805 	bl	8002ee8 <I2Cx_Error>
  }
  return status;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 feca 	bl	8003c8e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ff6c 	bl	8002dd8 <I2Cx_Init>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002f0c:	4802      	ldr	r0, [pc, #8]	@ (8002f18 <SENSOR_IO_Init+0x10>)
 8002f0e:	f7ff ff63 	bl	8002dd8 <I2Cx_Init>
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000bb0 	.word	0x20000bb0

08002f1c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
 8002f26:	460b      	mov	r3, r1
 8002f28:	71bb      	strb	r3, [r7, #6]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002f2e:	79bb      	ldrb	r3, [r7, #6]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	79f9      	ldrb	r1, [r7, #7]
 8002f34:	2301      	movs	r3, #1
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	1d7b      	adds	r3, r7, #5
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	4803      	ldr	r0, [pc, #12]	@ (8002f4c <SENSOR_IO_Write+0x30>)
 8002f40:	f7ff ffa5 	bl	8002e8e <I2Cx_WriteMultiple>
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000bb0 	.word	0x20000bb0

08002f50 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	4603      	mov	r3, r0
 8002f58:	460a      	mov	r2, r1
 8002f5a:	71fb      	strb	r3, [r7, #7]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002f64:	79bb      	ldrb	r3, [r7, #6]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	79f9      	ldrb	r1, [r7, #7]
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	f107 030f 	add.w	r3, r7, #15
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2301      	movs	r3, #1
 8002f76:	4804      	ldr	r0, [pc, #16]	@ (8002f88 <SENSOR_IO_Read+0x38>)
 8002f78:	f7ff ff5c 	bl	8002e34 <I2Cx_ReadMultiple>

  return read_value;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000bb0 	.word	0x20000bb0

08002f8c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	603a      	str	r2, [r7, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	71bb      	strb	r3, [r7, #6]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	79f9      	ldrb	r1, [r7, #7]
 8002fa8:	88bb      	ldrh	r3, [r7, #4]
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	4804      	ldr	r0, [pc, #16]	@ (8002fc4 <SENSOR_IO_ReadMultiple+0x38>)
 8002fb4:	f7ff ff3e 	bl	8002e34 <I2Cx_ReadMultiple>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000bb0 	.word	0x20000bb0

08002fc8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002fd6:	4b19      	ldr	r3, [pc, #100]	@ (800303c <BSP_ACCELERO_Init+0x74>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4798      	blx	r3
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b6a      	cmp	r3, #106	@ 0x6a
 8002fe0:	d002      	beq.n	8002fe8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	e024      	b.n	8003032 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002fe8:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <BSP_ACCELERO_Init+0x78>)
 8002fea:	4a14      	ldr	r2, [pc, #80]	@ (800303c <BSP_ACCELERO_Init+0x74>)
 8002fec:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_6660Hz;
 8002fee:	23a0      	movs	r3, #160	@ 0xa0
 8002ff0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_16G;
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002ffa:	2340      	movs	r3, #64	@ 0x40
 8002ffc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003006:	797a      	ldrb	r2, [r7, #5]
 8003008:	7abb      	ldrb	r3, [r7, #10]
 800300a:	4313      	orrs	r3, r2
 800300c:	b2db      	uxtb	r3, r3
 800300e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003010:	7a3b      	ldrb	r3, [r7, #8]
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	b2db      	uxtb	r3, r3
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	b21a      	sxth	r2, r3
 800301c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	b21b      	sxth	r3, r3
 8003024:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003026:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <BSP_ACCELERO_Init+0x78>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	89ba      	ldrh	r2, [r7, #12]
 800302e:	4610      	mov	r0, r2
 8003030:	4798      	blx	r3
  }  

  return ret;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000014 	.word	0x20000014
 8003040:	20000c8c 	.word	0x20000c8c

08003044 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800304c:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800305e:	4b04      	ldr	r3, [pc, #16]	@ (8003070 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
    }
  }
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000c8c 	.word	0x20000c8c

08003074 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003082:	2110      	movs	r1, #16
 8003084:	20d4      	movs	r0, #212	@ 0xd4
 8003086:	f7ff ff63 	bl	8002f50 <SENSOR_IO_Read>
 800308a:	4603      	mov	r3, r0
 800308c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003092:	7bbb      	ldrb	r3, [r7, #14]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800309a:	7bba      	ldrb	r2, [r7, #14]
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	4313      	orrs	r3, r2
 80030a0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80030a2:	7bbb      	ldrb	r3, [r7, #14]
 80030a4:	461a      	mov	r2, r3
 80030a6:	2110      	movs	r1, #16
 80030a8:	20d4      	movs	r0, #212	@ 0xd4
 80030aa:	f7ff ff37 	bl	8002f1c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80030ae:	2112      	movs	r1, #18
 80030b0:	20d4      	movs	r0, #212	@ 0xd4
 80030b2:	f7ff ff4d 	bl	8002f50 <SENSOR_IO_Read>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	b29b      	uxth	r3, r3
 80030c0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80030c2:	7bbb      	ldrb	r3, [r7, #14]
 80030c4:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80030c8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80030ca:	7bba      	ldrb	r2, [r7, #14]
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80030d2:	7bbb      	ldrb	r3, [r7, #14]
 80030d4:	461a      	mov	r2, r3
 80030d6:	2112      	movs	r1, #18
 80030d8:	20d4      	movs	r0, #212	@ 0xd4
 80030da:	f7ff ff1f 	bl	8002f1c <SENSOR_IO_Write>

  /*write high-pass filter*/
  ctrl = ((uint8_t) (InitStruct >> 16));
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	141b      	asrs	r3, r3, #16
 80030e2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x90);
 80030e4:	7bbb      	ldrb	r3, [r7, #14]
 80030e6:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 80030ea:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80030ec:	7bba      	ldrb	r2, [r7, #14]
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, tmp);
 80030f4:	7bbb      	ldrb	r3, [r7, #14]
 80030f6:	461a      	mov	r2, r3
 80030f8:	2158      	movs	r1, #88	@ 0x58
 80030fa:	20d4      	movs	r0, #212	@ 0xd4
 80030fc:	f7ff ff0e 	bl	8002f1c <SENSOR_IO_Write>

  /*write wake up duration*/
  ctrl = ((uint8_t) (InitStruct >> 24));
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	161b      	asrs	r3, r3, #24
 8003104:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x00);
  tmp |= ctrl;
 8003106:	7bba      	ldrb	r2, [r7, #14]
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	4313      	orrs	r3, r2
 800310c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WAKE_UP_DUR, tmp);
 800310e:	7bbb      	ldrb	r3, [r7, #14]
 8003110:	461a      	mov	r2, r3
 8003112:	215c      	movs	r1, #92	@ 0x5c
 8003114:	20d4      	movs	r0, #212	@ 0xd4
 8003116:	f7ff ff01 	bl	8002f1c <SENSOR_IO_Write>

  /*write wake up threshold*/
  ctrl = ((uint8_t) (InitStruct >> 32));
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	2220      	movs	r2, #32
 800311e:	4113      	asrs	r3, r2
 8003120:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x1C);
 8003122:	7bbb      	ldrb	r3, [r7, #14]
 8003124:	f023 031c 	bic.w	r3, r3, #28
 8003128:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800312a:	7bba      	ldrb	r2, [r7, #14]
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	4313      	orrs	r3, r2
 8003130:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WAKE_UP_THS, tmp);
 8003132:	7bbb      	ldrb	r3, [r7, #14]
 8003134:	461a      	mov	r2, r3
 8003136:	215b      	movs	r1, #91	@ 0x5b
 8003138:	20d4      	movs	r0, #212	@ 0xd4
 800313a:	f7ff feef 	bl	8002f1c <SENSOR_IO_Write>

  /*write to INT1*/
  ctrl = ((uint8_t) (InitStruct >> 40));
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	2228      	movs	r2, #40	@ 0x28
 8003142:	4113      	asrs	r3, r2
 8003144:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x20);
 8003146:	7bbb      	ldrb	r3, [r7, #14]
 8003148:	f023 0320 	bic.w	r3, r3, #32
 800314c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800314e:	7bba      	ldrb	r2, [r7, #14]
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	4313      	orrs	r3, r2
 8003154:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, tmp);
 8003156:	7bbb      	ldrb	r3, [r7, #14]
 8003158:	461a      	mov	r2, r3
 800315a:	215e      	movs	r1, #94	@ 0x5e
 800315c:	20d4      	movs	r0, #212	@ 0xd4
 800315e:	f7ff fedd 	bl	8002f1c <SENSOR_IO_Write>
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003170:	2300      	movs	r3, #0
 8003172:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003174:	2110      	movs	r1, #16
 8003176:	20d4      	movs	r0, #212	@ 0xd4
 8003178:	f7ff feea 	bl	8002f50 <SENSOR_IO_Read>
 800317c:	4603      	mov	r3, r0
 800317e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	461a      	mov	r2, r3
 800318c:	2110      	movs	r1, #16
 800318e:	20d4      	movs	r0, #212	@ 0xd4
 8003190:	f7ff fec4 	bl	8002f1c <SENSOR_IO_Write>
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80031a0:	f7ff feb2 	bl	8002f08 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80031a4:	210f      	movs	r1, #15
 80031a6:	20d4      	movs	r0, #212	@ 0xd4
 80031a8:	f7ff fed2 	bl	8002f50 <SENSOR_IO_Read>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80031c0:	2115      	movs	r1, #21
 80031c2:	20d4      	movs	r0, #212	@ 0xd4
 80031c4:	f7ff fec4 	bl	8002f50 <SENSOR_IO_Read>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	f023 0310 	bic.w	r3, r3, #16
 80031d2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80031d4:	88fb      	ldrh	r3, [r7, #6]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	461a      	mov	r2, r3
 80031e6:	2115      	movs	r1, #21
 80031e8:	20d4      	movs	r0, #212	@ 0xd4
 80031ea:	f7ff fe97 	bl	8002f1c <SENSOR_IO_Write>
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003200:	2300      	movs	r3, #0
 8003202:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800320e:	2110      	movs	r1, #16
 8003210:	20d4      	movs	r0, #212	@ 0xd4
 8003212:	f7ff fe9d 	bl	8002f50 <SENSOR_IO_Read>
 8003216:	4603      	mov	r3, r0
 8003218:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800321a:	f107 0208 	add.w	r2, r7, #8
 800321e:	2306      	movs	r3, #6
 8003220:	2128      	movs	r1, #40	@ 0x28
 8003222:	20d4      	movs	r0, #212	@ 0xd4
 8003224:	f7ff feb2 	bl	8002f8c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003228:	2300      	movs	r3, #0
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e01a      	b.n	8003264 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800322e:	7ffb      	ldrb	r3, [r7, #31]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	3301      	adds	r3, #1
 8003234:	3320      	adds	r3, #32
 8003236:	443b      	add	r3, r7
 8003238:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	b29b      	uxth	r3, r3
 8003240:	7ffa      	ldrb	r2, [r7, #31]
 8003242:	0052      	lsls	r2, r2, #1
 8003244:	3220      	adds	r2, #32
 8003246:	443a      	add	r2, r7
 8003248:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800324c:	4413      	add	r3, r2
 800324e:	b29a      	uxth	r2, r3
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	b212      	sxth	r2, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	3320      	adds	r3, #32
 8003258:	443b      	add	r3, r7
 800325a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800325e:	7ffb      	ldrb	r3, [r7, #31]
 8003260:	3301      	adds	r3, #1
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	7ffb      	ldrb	r3, [r7, #31]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d9e1      	bls.n	800322e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800326a:	7dfb      	ldrb	r3, [r7, #23]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d829      	bhi.n	80032c8 <LSM6DSL_AccReadXYZ+0xd0>
 8003274:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <LSM6DSL_AccReadXYZ+0x84>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	080032b1 	.word	0x080032b1
 8003280:	080032c9 	.word	0x080032c9
 8003284:	080032c9 	.word	0x080032c9
 8003288:	080032c9 	.word	0x080032c9
 800328c:	080032c3 	.word	0x080032c3
 8003290:	080032c9 	.word	0x080032c9
 8003294:	080032c9 	.word	0x080032c9
 8003298:	080032c9 	.word	0x080032c9
 800329c:	080032b7 	.word	0x080032b7
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032c9 	.word	0x080032c9
 80032ac:	080032bd 	.word	0x080032bd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80032b0:	4b18      	ldr	r3, [pc, #96]	@ (8003314 <LSM6DSL_AccReadXYZ+0x11c>)
 80032b2:	61bb      	str	r3, [r7, #24]
    break;
 80032b4:	e008      	b.n	80032c8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80032b6:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <LSM6DSL_AccReadXYZ+0x120>)
 80032b8:	61bb      	str	r3, [r7, #24]
    break;
 80032ba:	e005      	b.n	80032c8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80032bc:	4b17      	ldr	r3, [pc, #92]	@ (800331c <LSM6DSL_AccReadXYZ+0x124>)
 80032be:	61bb      	str	r3, [r7, #24]
    break;
 80032c0:	e002      	b.n	80032c8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80032c2:	4b17      	ldr	r3, [pc, #92]	@ (8003320 <LSM6DSL_AccReadXYZ+0x128>)
 80032c4:	61bb      	str	r3, [r7, #24]
    break;    
 80032c6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e01a      	b.n	8003304 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80032ce:	7ffb      	ldrb	r3, [r7, #31]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	3320      	adds	r3, #32
 80032d4:	443b      	add	r3, r7
 80032d6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80032e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ea:	7ffb      	ldrb	r3, [r7, #31]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032f6:	ee17 2a90 	vmov	r2, s15
 80032fa:	b212      	sxth	r2, r2
 80032fc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80032fe:	7ffb      	ldrb	r3, [r7, #31]
 8003300:	3301      	adds	r3, #1
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	7ffb      	ldrb	r3, [r7, #31]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d9e1      	bls.n	80032ce <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	3720      	adds	r7, #32
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	3d79db23 	.word	0x3d79db23
 8003318:	3df9db23 	.word	0x3df9db23
 800331c:	3e79db23 	.word	0x3e79db23
 8003320:	3ef9db23 	.word	0x3ef9db23

08003324 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003328:	4b17      	ldr	r3, [pc, #92]	@ (8003388 <SystemInit+0x64>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332e:	4a16      	ldr	r2, [pc, #88]	@ (8003388 <SystemInit+0x64>)
 8003330:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003338:	4b14      	ldr	r3, [pc, #80]	@ (800338c <SystemInit+0x68>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a13      	ldr	r2, [pc, #76]	@ (800338c <SystemInit+0x68>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <SystemInit+0x68>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800334a:	4b10      	ldr	r3, [pc, #64]	@ (800338c <SystemInit+0x68>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a0f      	ldr	r2, [pc, #60]	@ (800338c <SystemInit+0x68>)
 8003350:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003354:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8003358:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800335a:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <SystemInit+0x68>)
 800335c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003360:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003362:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <SystemInit+0x68>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a09      	ldr	r2, [pc, #36]	@ (800338c <SystemInit+0x68>)
 8003368:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800336c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800336e:	4b07      	ldr	r3, [pc, #28]	@ (800338c <SystemInit+0x68>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <SystemInit+0x64>)
 8003376:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800337a:	609a      	str	r2, [r3, #8]
#endif
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000ed00 	.word	0xe000ed00
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800339a:	2003      	movs	r0, #3
 800339c:	f000 f968 	bl	8003670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033a0:	200f      	movs	r0, #15
 80033a2:	f000 f815 	bl	80033d0 <HAL_InitTick>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	71fb      	strb	r3, [r7, #7]
 80033b0:	e001      	b.n	80033b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033b2:	f000 f805 	bl	80033c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033b6:	79fb      	ldrb	r3, [r7, #7]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033dc:	4b17      	ldr	r3, [pc, #92]	@ (800343c <HAL_InitTick+0x6c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033e4:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <HAL_InitTick+0x70>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b14      	ldr	r3, [pc, #80]	@ (800343c <HAL_InitTick+0x6c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4619      	mov	r1, r3
 80033ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f96d 	bl	80036da <HAL_SYSTICK_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b0f      	cmp	r3, #15
 800340a:	d809      	bhi.n	8003420 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800340c:	2200      	movs	r2, #0
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	f04f 30ff 	mov.w	r0, #4294967295
 8003414:	f000 f937 	bl	8003686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003418:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <HAL_InitTick+0x74>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e007      	b.n	8003430 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
 8003424:	e004      	b.n	8003430 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
 800342a:	e001      	b.n	8003430 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000050 	.word	0x20000050
 8003440:	20000048 	.word	0x20000048
 8003444:	2000004c 	.word	0x2000004c

08003448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_IncTick+0x20>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_IncTick+0x24>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4413      	add	r3, r2
 8003458:	4a04      	ldr	r2, [pc, #16]	@ (800346c <HAL_IncTick+0x24>)
 800345a:	6013      	str	r3, [r2, #0]
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000050 	.word	0x20000050
 800346c:	20000c90 	.word	0x20000c90

08003470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return uwTick;
 8003474:	4b03      	ldr	r3, [pc, #12]	@ (8003484 <HAL_GetTick+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000c90 	.word	0x20000c90

08003488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003490:	f7ff ffee 	bl	8003470 <HAL_GetTick>
 8003494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d005      	beq.n	80034ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034a2:	4b0a      	ldr	r3, [pc, #40]	@ (80034cc <HAL_Delay+0x44>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034ae:	bf00      	nop
 80034b0:	f7ff ffde 	bl	8003470 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d8f7      	bhi.n	80034b0 <HAL_Delay+0x28>
  {
  }
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000050 	.word	0x20000050

080034d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003502:	4a04      	ldr	r2, [pc, #16]	@ (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	60d3      	str	r3, [r2, #12]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800351c:	4b04      	ldr	r3, [pc, #16]	@ (8003530 <__NVIC_GetPriorityGrouping+0x18>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 0307 	and.w	r3, r3, #7
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	2b00      	cmp	r3, #0
 8003544:	db0b      	blt.n	800355e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4907      	ldr	r1, [pc, #28]	@ (800356c <__NVIC_EnableIRQ+0x38>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2001      	movs	r0, #1
 8003556:	fa00 f202 	lsl.w	r2, r0, r2
 800355a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000e100 	.word	0xe000e100

08003570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	db0a      	blt.n	800359a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	490c      	ldr	r1, [pc, #48]	@ (80035bc <__NVIC_SetPriority+0x4c>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	0112      	lsls	r2, r2, #4
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	440b      	add	r3, r1
 8003594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003598:	e00a      	b.n	80035b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4908      	ldr	r1, [pc, #32]	@ (80035c0 <__NVIC_SetPriority+0x50>)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	3b04      	subs	r3, #4
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	440b      	add	r3, r1
 80035ae:	761a      	strb	r2, [r3, #24]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000e100 	.word	0xe000e100
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	@ 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f1c3 0307 	rsb	r3, r3, #7
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf28      	it	cs
 80035e2:	2304      	movcs	r3, #4
 80035e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d902      	bls.n	80035f4 <NVIC_EncodePriority+0x30>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3b03      	subs	r3, #3
 80035f2:	e000      	b.n	80035f6 <NVIC_EncodePriority+0x32>
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	401a      	ands	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800360c:	f04f 31ff 	mov.w	r1, #4294967295
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	43d9      	mvns	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	4313      	orrs	r3, r2
         );
}
 800361e:	4618      	mov	r0, r3
 8003620:	3724      	adds	r7, #36	@ 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800363c:	d301      	bcc.n	8003642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800363e:	2301      	movs	r3, #1
 8003640:	e00f      	b.n	8003662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <SysTick_Config+0x40>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800364a:	210f      	movs	r1, #15
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	f7ff ff8e 	bl	8003570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <SysTick_Config+0x40>)
 8003656:	2200      	movs	r2, #0
 8003658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800365a:	4b04      	ldr	r3, [pc, #16]	@ (800366c <SysTick_Config+0x40>)
 800365c:	2207      	movs	r2, #7
 800365e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	e000e010 	.word	0xe000e010

08003670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff29 	bl	80034d0 <__NVIC_SetPriorityGrouping>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	4603      	mov	r3, r0
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003698:	f7ff ff3e 	bl	8003518 <__NVIC_GetPriorityGrouping>
 800369c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7ff ff8e 	bl	80035c4 <NVIC_EncodePriority>
 80036a8:	4602      	mov	r2, r0
 80036aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff5d 	bl	8003570 <__NVIC_SetPriority>
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff31 	bl	8003534 <__NVIC_EnableIRQ>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ffa2 	bl	800362c <SysTick_Config>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d005      	beq.n	8003716 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2204      	movs	r2, #4
 800370e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e029      	b.n	800376a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 020e 	bic.w	r2, r2, #14
 8003724:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	f003 021c 	and.w	r2, r3, #28
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	2101      	movs	r1, #1
 8003744:	fa01 f202 	lsl.w	r2, r1, r2
 8003748:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
    }
  }
  return status;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003782:	e17f      	b.n	8003a84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	4013      	ands	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8171 	beq.w	8003a7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d005      	beq.n	80037b4 <HAL_GPIO_Init+0x40>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d130      	bne.n	8003816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ea:	2201      	movs	r2, #1
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 0201 	and.w	r2, r3, #1
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b03      	cmp	r3, #3
 8003820:	d118      	bne.n	8003854 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003828:	2201      	movs	r2, #1
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	08db      	lsrs	r3, r3, #3
 800383e:	f003 0201 	and.w	r2, r3, #1
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b03      	cmp	r3, #3
 800385e:	d017      	beq.n	8003890 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d123      	bne.n	80038e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	08da      	lsrs	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3208      	adds	r2, #8
 80038a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	08da      	lsrs	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3208      	adds	r2, #8
 80038de:	6939      	ldr	r1, [r7, #16]
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	2203      	movs	r2, #3
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80ac 	beq.w	8003a7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003926:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa4 <HAL_GPIO_Init+0x330>)
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	4a5e      	ldr	r2, [pc, #376]	@ (8003aa4 <HAL_GPIO_Init+0x330>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6613      	str	r3, [r2, #96]	@ 0x60
 8003932:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa4 <HAL_GPIO_Init+0x330>)
 8003934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800393e:	4a5a      	ldr	r2, [pc, #360]	@ (8003aa8 <HAL_GPIO_Init+0x334>)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	3302      	adds	r3, #2
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	220f      	movs	r2, #15
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003968:	d025      	beq.n	80039b6 <HAL_GPIO_Init+0x242>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4f      	ldr	r2, [pc, #316]	@ (8003aac <HAL_GPIO_Init+0x338>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01f      	beq.n	80039b2 <HAL_GPIO_Init+0x23e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4e      	ldr	r2, [pc, #312]	@ (8003ab0 <HAL_GPIO_Init+0x33c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d019      	beq.n	80039ae <HAL_GPIO_Init+0x23a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4d      	ldr	r2, [pc, #308]	@ (8003ab4 <HAL_GPIO_Init+0x340>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <HAL_GPIO_Init+0x236>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab8 <HAL_GPIO_Init+0x344>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00d      	beq.n	80039a6 <HAL_GPIO_Init+0x232>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4b      	ldr	r2, [pc, #300]	@ (8003abc <HAL_GPIO_Init+0x348>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <HAL_GPIO_Init+0x22e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4a      	ldr	r2, [pc, #296]	@ (8003ac0 <HAL_GPIO_Init+0x34c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d101      	bne.n	800399e <HAL_GPIO_Init+0x22a>
 800399a:	2306      	movs	r3, #6
 800399c:	e00c      	b.n	80039b8 <HAL_GPIO_Init+0x244>
 800399e:	2307      	movs	r3, #7
 80039a0:	e00a      	b.n	80039b8 <HAL_GPIO_Init+0x244>
 80039a2:	2305      	movs	r3, #5
 80039a4:	e008      	b.n	80039b8 <HAL_GPIO_Init+0x244>
 80039a6:	2304      	movs	r3, #4
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x244>
 80039aa:	2303      	movs	r3, #3
 80039ac:	e004      	b.n	80039b8 <HAL_GPIO_Init+0x244>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e002      	b.n	80039b8 <HAL_GPIO_Init+0x244>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_GPIO_Init+0x244>
 80039b6:	2300      	movs	r3, #0
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	f002 0203 	and.w	r2, r2, #3
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	4093      	lsls	r3, r2
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039c8:	4937      	ldr	r1, [pc, #220]	@ (8003aa8 <HAL_GPIO_Init+0x334>)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039d6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac4 <HAL_GPIO_Init+0x350>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43db      	mvns	r3, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4013      	ands	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039fa:	4a32      	ldr	r2, [pc, #200]	@ (8003ac4 <HAL_GPIO_Init+0x350>)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a00:	4b30      	ldr	r3, [pc, #192]	@ (8003ac4 <HAL_GPIO_Init+0x350>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a24:	4a27      	ldr	r2, [pc, #156]	@ (8003ac4 <HAL_GPIO_Init+0x350>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ac4 <HAL_GPIO_Init+0x350>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac4 <HAL_GPIO_Init+0x350>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac4 <HAL_GPIO_Init+0x350>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a78:	4a12      	ldr	r2, [pc, #72]	@ (8003ac4 <HAL_GPIO_Init+0x350>)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3301      	adds	r3, #1
 8003a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f47f ae78 	bne.w	8003784 <HAL_GPIO_Init+0x10>
  }
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	48000400 	.word	0x48000400
 8003ab0:	48000800 	.word	0x48000800
 8003ab4:	48000c00 	.word	0x48000c00
 8003ab8:	48001000 	.word	0x48001000
 8003abc:	48001400 	.word	0x48001400
 8003ac0:	48001800 	.word	0x48001800
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e001      	b.n	8003aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b14:	e002      	b.n	8003b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b16:	887a      	ldrh	r2, [r7, #2]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b32:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b3e:	4a05      	ldr	r2, [pc, #20]	@ (8003b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd fc22 	bl	8001390 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40010400 	.word	0x40010400

08003b58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e08d      	b.n	8003c86 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8b4 	bl	8003cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2224      	movs	r2, #36	@ 0x24
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ba8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d107      	bne.n	8003bd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	e006      	b.n	8003be0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003bde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d108      	bne.n	8003bfa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bf6:	605a      	str	r2, [r3, #4]
 8003bf8:	e007      	b.n	8003c0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69d9      	ldr	r1, [r3, #28]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1a      	ldr	r2, [r3, #32]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e021      	b.n	8003ce4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2224      	movs	r2, #36	@ 0x24
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f821 	bl	8003d00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b088      	sub	sp, #32
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	817b      	strh	r3, [r7, #10]
 8003d26:	460b      	mov	r3, r1
 8003d28:	813b      	strh	r3, [r7, #8]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	f040 80f9 	bne.w	8003f2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_I2C_Mem_Write+0x34>
 8003d42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0ed      	b.n	8003f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_I2C_Mem_Write+0x4e>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e0e6      	b.n	8003f30 <HAL_I2C_Mem_Write+0x21c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d6a:	f7ff fb81 	bl	8003470 <HAL_GetTick>
 8003d6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2319      	movs	r3, #25
 8003d76:	2201      	movs	r2, #1
 8003d78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fac3 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0d1      	b.n	8003f30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2221      	movs	r2, #33	@ 0x21
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2240      	movs	r2, #64	@ 0x40
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003db4:	88f8      	ldrh	r0, [r7, #6]
 8003db6:	893a      	ldrh	r2, [r7, #8]
 8003db8:	8979      	ldrh	r1, [r7, #10]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f9d3 	bl	8004170 <I2C_RequestMemoryWrite>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0a9      	b.n	8003f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2bff      	cmp	r3, #255	@ 0xff
 8003de4:	d90e      	bls.n	8003e04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	22ff      	movs	r2, #255	@ 0xff
 8003dea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	8979      	ldrh	r1, [r7, #10]
 8003df4:	2300      	movs	r3, #0
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 fc47 	bl	8004690 <I2C_TransferConfig>
 8003e02:	e00f      	b.n	8003e24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	8979      	ldrh	r1, [r7, #10]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fc36 	bl	8004690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 fac6 	bl	80043ba <I2C_WaitOnTXISFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e07b      	b.n	8003f30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d034      	beq.n	8003edc <HAL_I2C_Mem_Write+0x1c8>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d130      	bne.n	8003edc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	@ 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fa3f 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e04d      	b.n	8003f30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2bff      	cmp	r3, #255	@ 0xff
 8003e9c:	d90e      	bls.n	8003ebc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	22ff      	movs	r2, #255	@ 0xff
 8003ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	8979      	ldrh	r1, [r7, #10]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fbeb 	bl	8004690 <I2C_TransferConfig>
 8003eba:	e00f      	b.n	8003edc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	8979      	ldrh	r1, [r7, #10]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fbda 	bl	8004690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d19e      	bne.n	8003e24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 faac 	bl	8004448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e01a      	b.n	8003f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2220      	movs	r2, #32
 8003f00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6859      	ldr	r1, [r3, #4]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <HAL_I2C_Mem_Write+0x224>)
 8003f0e:	400b      	ands	r3, r1
 8003f10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f2e:	2302      	movs	r3, #2
  }
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	fe00e800 	.word	0xfe00e800

08003f3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	817b      	strh	r3, [r7, #10]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	813b      	strh	r3, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	f040 80fd 	bne.w	800415e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x34>
 8003f6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0f1      	b.n	8004160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2C_Mem_Read+0x4e>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e0ea      	b.n	8004160 <HAL_I2C_Mem_Read+0x224>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f92:	f7ff fa6d 	bl	8003470 <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2319      	movs	r3, #25
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f9af 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0d5      	b.n	8004160 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2222      	movs	r2, #34	@ 0x22
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2240      	movs	r2, #64	@ 0x40
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fdc:	88f8      	ldrh	r0, [r7, #6]
 8003fde:	893a      	ldrh	r2, [r7, #8]
 8003fe0:	8979      	ldrh	r1, [r7, #10]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	4603      	mov	r3, r0
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f913 	bl	8004218 <I2C_RequestMemoryRead>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0ad      	b.n	8004160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2bff      	cmp	r3, #255	@ 0xff
 800400c:	d90e      	bls.n	800402c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2201      	movs	r2, #1
 8004012:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004018:	b2da      	uxtb	r2, r3
 800401a:	8979      	ldrh	r1, [r7, #10]
 800401c:	4b52      	ldr	r3, [pc, #328]	@ (8004168 <HAL_I2C_Mem_Read+0x22c>)
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fb33 	bl	8004690 <I2C_TransferConfig>
 800402a:	e00f      	b.n	800404c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403a:	b2da      	uxtb	r2, r3
 800403c:	8979      	ldrh	r1, [r7, #10]
 800403e:	4b4a      	ldr	r3, [pc, #296]	@ (8004168 <HAL_I2C_Mem_Read+0x22c>)
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fb22 	bl	8004690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	2200      	movs	r2, #0
 8004054:	2104      	movs	r1, #4
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f956 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e07c      	b.n	8004160 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d034      	beq.n	800410c <HAL_I2C_Mem_Read+0x1d0>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d130      	bne.n	800410c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	2200      	movs	r2, #0
 80040b2:	2180      	movs	r1, #128	@ 0x80
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f927 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e04d      	b.n	8004160 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2bff      	cmp	r3, #255	@ 0xff
 80040cc:	d90e      	bls.n	80040ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	8979      	ldrh	r1, [r7, #10]
 80040dc:	2300      	movs	r3, #0
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fad3 	bl	8004690 <I2C_TransferConfig>
 80040ea:	e00f      	b.n	800410c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	8979      	ldrh	r1, [r7, #10]
 80040fe:	2300      	movs	r3, #0
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fac2 	bl	8004690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d19a      	bne.n	800404c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f994 	bl	8004448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e01a      	b.n	8004160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2220      	movs	r2, #32
 8004130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <HAL_I2C_Mem_Read+0x230>)
 800413e:	400b      	ands	r3, r1
 8004140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	80002400 	.word	0x80002400
 800416c:	fe00e800 	.word	0xfe00e800

08004170 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4603      	mov	r3, r0
 8004180:	817b      	strh	r3, [r7, #10]
 8004182:	460b      	mov	r3, r1
 8004184:	813b      	strh	r3, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	8979      	ldrh	r1, [r7, #10]
 8004190:	4b20      	ldr	r3, [pc, #128]	@ (8004214 <I2C_RequestMemoryWrite+0xa4>)
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fa79 	bl	8004690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f909 	bl	80043ba <I2C_WaitOnTXISFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e02c      	b.n	800420c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041b8:	893b      	ldrh	r3, [r7, #8]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c2:	e015      	b.n	80041f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f8ef 	bl	80043ba <I2C_WaitOnTXISFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e012      	b.n	800420c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041e6:	893b      	ldrh	r3, [r7, #8]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2200      	movs	r2, #0
 80041f8:	2180      	movs	r1, #128	@ 0x80
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f884 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	80002000 	.word	0x80002000

08004218 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	461a      	mov	r2, r3
 8004226:	4603      	mov	r3, r0
 8004228:	817b      	strh	r3, [r7, #10]
 800422a:	460b      	mov	r3, r1
 800422c:	813b      	strh	r3, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	8979      	ldrh	r1, [r7, #10]
 8004238:	4b20      	ldr	r3, [pc, #128]	@ (80042bc <I2C_RequestMemoryRead+0xa4>)
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2300      	movs	r3, #0
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fa26 	bl	8004690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	69b9      	ldr	r1, [r7, #24]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f8b6 	bl	80043ba <I2C_WaitOnTXISFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e02c      	b.n	80042b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d105      	bne.n	800426a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800425e:	893b      	ldrh	r3, [r7, #8]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	629a      	str	r2, [r3, #40]	@ 0x28
 8004268:	e015      	b.n	8004296 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800426a:	893b      	ldrh	r3, [r7, #8]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	b29b      	uxth	r3, r3
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	69b9      	ldr	r1, [r7, #24]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f89c 	bl	80043ba <I2C_WaitOnTXISFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e012      	b.n	80042b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800428c:	893b      	ldrh	r3, [r7, #8]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2200      	movs	r2, #0
 800429e:	2140      	movs	r1, #64	@ 0x40
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f831 	bl	8004308 <I2C_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	80002000 	.word	0x80002000

080042c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d103      	bne.n	80042de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2200      	movs	r2, #0
 80042dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d007      	beq.n	80042fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	619a      	str	r2, [r3, #24]
  }
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004318:	e03b      	b.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f8d6 	bl	80044d0 <I2C_IsErrorOccurred>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e041      	b.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d02d      	beq.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7ff f89b 	bl	8003470 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d122      	bne.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4013      	ands	r3, r2
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	429a      	cmp	r2, r3
 8004368:	d113      	bne.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436e:	f043 0220 	orr.w	r2, r3, #32
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e00f      	b.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d0b4      	beq.n	800431a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043c6:	e033      	b.n	8004430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f87f 	bl	80044d0 <I2C_IsErrorOccurred>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e031      	b.n	8004440 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d025      	beq.n	8004430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e4:	f7ff f844 	bl	8003470 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11a      	bne.n	8004430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d013      	beq.n	8004430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e007      	b.n	8004440 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d1c4      	bne.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004454:	e02f      	b.n	80044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f838 	bl	80044d0 <I2C_IsErrorOccurred>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e02d      	b.n	80044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7ff f801 	bl	8003470 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d11a      	bne.n	80044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b20      	cmp	r3, #32
 800448c:	d013      	beq.n	80044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e007      	b.n	80044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d1c8      	bne.n	8004456 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	@ 0x28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d068      	beq.n	80045ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2210      	movs	r2, #16
 8004502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004504:	e049      	b.n	800459a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d045      	beq.n	800459a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800450e:	f7fe ffaf 	bl	8003470 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <I2C_IsErrorOccurred+0x54>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d13a      	bne.n	800459a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800452e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004546:	d121      	bne.n	800458c <I2C_IsErrorOccurred+0xbc>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800454e:	d01d      	beq.n	800458c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b20      	cmp	r3, #32
 8004554:	d01a      	beq.n	800458c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004566:	f7fe ff83 	bl	8003470 <HAL_GetTick>
 800456a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800456c:	e00e      	b.n	800458c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800456e:	f7fe ff7f 	bl	8003470 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b19      	cmp	r3, #25
 800457a:	d907      	bls.n	800458c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f043 0320 	orr.w	r3, r3, #32
 8004582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800458a:	e006      	b.n	800459a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b20      	cmp	r3, #32
 8004598:	d1e9      	bne.n	800456e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d003      	beq.n	80045b0 <I2C_IsErrorOccurred+0xe0>
 80045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0aa      	beq.n	8004506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2220      	movs	r2, #32
 80045be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	f043 0308 	orr.w	r3, r3, #8
 8004608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00b      	beq.n	800463c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800463c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01c      	beq.n	800467e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fe3b 	bl	80042c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b0d      	ldr	r3, [pc, #52]	@ (800468c <I2C_IsErrorOccurred+0x1bc>)
 8004656:	400b      	ands	r3, r1
 8004658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	431a      	orrs	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800467e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004682:	4618      	mov	r0, r3
 8004684:	3728      	adds	r7, #40	@ 0x28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	fe00e800 	.word	0xfe00e800

08004690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	817b      	strh	r3, [r7, #10]
 800469e:	4613      	mov	r3, r2
 80046a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046a2:	897b      	ldrh	r3, [r7, #10]
 80046a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046a8:	7a7b      	ldrb	r3, [r7, #9]
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046be:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	0d5b      	lsrs	r3, r3, #21
 80046ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046ce:	4b08      	ldr	r3, [pc, #32]	@ (80046f0 <I2C_TransferConfig+0x60>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	43db      	mvns	r3, r3
 80046d4:	ea02 0103 	and.w	r1, r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	03ff63ff 	.word	0x03ff63ff

080046f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b20      	cmp	r3, #32
 8004708:	d138      	bne.n	800477c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004714:	2302      	movs	r3, #2
 8004716:	e032      	b.n	800477e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2224      	movs	r2, #36	@ 0x24
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6819      	ldr	r1, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e000      	b.n	800477e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800477c:	2302      	movs	r3, #2
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40007000 	.word	0x40007000

080047a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e3ca      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ba:	4b97      	ldr	r3, [pc, #604]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c4:	4b94      	ldr	r3, [pc, #592]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80e4 	beq.w	80049a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_RCC_OscConfig+0x4a>
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b0c      	cmp	r3, #12
 80047e6:	f040 808b 	bne.w	8004900 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	f040 8087 	bne.w	8004900 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047f2:	4b89      	ldr	r3, [pc, #548]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d005      	beq.n	800480a <HAL_RCC_OscConfig+0x62>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e3a2      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1a      	ldr	r2, [r3, #32]
 800480e:	4b82      	ldr	r3, [pc, #520]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <HAL_RCC_OscConfig+0x7c>
 800481a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004822:	e005      	b.n	8004830 <HAL_RCC_OscConfig+0x88>
 8004824:	4b7c      	ldr	r3, [pc, #496]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004830:	4293      	cmp	r3, r2
 8004832:	d223      	bcs.n	800487c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fd55 	bl	80052e8 <RCC_SetFlashLatencyFromMSIRange>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e383      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004848:	4b73      	ldr	r3, [pc, #460]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a72      	ldr	r2, [pc, #456]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800484e:	f043 0308 	orr.w	r3, r3, #8
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b70      	ldr	r3, [pc, #448]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	496d      	ldr	r1, [pc, #436]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004866:	4b6c      	ldr	r3, [pc, #432]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	4968      	ldr	r1, [pc, #416]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
 800487a:	e025      	b.n	80048c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800487c:	4b66      	ldr	r3, [pc, #408]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a65      	ldr	r2, [pc, #404]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004882:	f043 0308 	orr.w	r3, r3, #8
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	4b63      	ldr	r3, [pc, #396]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	4960      	ldr	r1, [pc, #384]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800489a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	021b      	lsls	r3, r3, #8
 80048a8:	495b      	ldr	r1, [pc, #364]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fd15 	bl	80052e8 <RCC_SetFlashLatencyFromMSIRange>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e343      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048c8:	f000 fc4a 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b52      	ldr	r3, [pc, #328]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	4950      	ldr	r1, [pc, #320]	@ (8004a1c <HAL_RCC_OscConfig+0x274>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	fa22 f303 	lsr.w	r3, r2, r3
 80048e4:	4a4e      	ldr	r2, [pc, #312]	@ (8004a20 <HAL_RCC_OscConfig+0x278>)
 80048e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004a24 <HAL_RCC_OscConfig+0x27c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fe fd6f 	bl	80033d0 <HAL_InitTick>
 80048f2:	4603      	mov	r3, r0
 80048f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d052      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	e327      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d032      	beq.n	800496e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004908:	4b43      	ldr	r3, [pc, #268]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a42      	ldr	r2, [pc, #264]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004914:	f7fe fdac 	bl	8003470 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800491c:	f7fe fda8 	bl	8003470 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e310      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800492e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800493a:	4b37      	ldr	r3, [pc, #220]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a36      	ldr	r2, [pc, #216]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	4931      	ldr	r1, [pc, #196]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004954:	4313      	orrs	r3, r2
 8004956:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004958:	4b2f      	ldr	r3, [pc, #188]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	492c      	ldr	r1, [pc, #176]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
 800496c:	e01a      	b.n	80049a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800496e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a29      	ldr	r2, [pc, #164]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800497a:	f7fe fd79 	bl	8003470 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004982:	f7fe fd75 	bl	8003470 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e2dd      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004994:	4b20      	ldr	r3, [pc, #128]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0x1da>
 80049a0:	e000      	b.n	80049a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d074      	beq.n	8004a9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d005      	beq.n	80049c2 <HAL_RCC_OscConfig+0x21a>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	d10e      	bne.n	80049da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d10b      	bne.n	80049da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c2:	4b15      	ldr	r3, [pc, #84]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d064      	beq.n	8004a98 <HAL_RCC_OscConfig+0x2f0>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d160      	bne.n	8004a98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e2ba      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e2:	d106      	bne.n	80049f2 <HAL_RCC_OscConfig+0x24a>
 80049e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 80049ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	e026      	b.n	8004a40 <HAL_RCC_OscConfig+0x298>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049fa:	d115      	bne.n	8004a28 <HAL_RCC_OscConfig+0x280>
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a05      	ldr	r2, [pc, #20]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004a02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	4b03      	ldr	r3, [pc, #12]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a02      	ldr	r2, [pc, #8]	@ (8004a18 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e014      	b.n	8004a40 <HAL_RCC_OscConfig+0x298>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	0800ce60 	.word	0x0800ce60
 8004a20:	20000048 	.word	0x20000048
 8004a24:	2000004c 	.word	0x2000004c
 8004a28:	4ba0      	ldr	r3, [pc, #640]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a9f      	ldr	r2, [pc, #636]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b9d      	ldr	r3, [pc, #628]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a9c      	ldr	r2, [pc, #624]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d013      	beq.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fe fd12 	bl	8003470 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fe fd0e 	bl	8003470 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	@ 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e276      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a62:	4b92      	ldr	r3, [pc, #584]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x2a8>
 8004a6e:	e014      	b.n	8004a9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fe fcfe 	bl	8003470 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fe fcfa 	bl	8003470 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	@ 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e262      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a8a:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x2d0>
 8004a96:	e000      	b.n	8004a9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d060      	beq.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x310>
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d119      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d116      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab8:	4b7c      	ldr	r3, [pc, #496]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x328>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e23f      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad0:	4b76      	ldr	r3, [pc, #472]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	061b      	lsls	r3, r3, #24
 8004ade:	4973      	ldr	r1, [pc, #460]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae4:	e040      	b.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d023      	beq.n	8004b36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aee:	4b6f      	ldr	r3, [pc, #444]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6e      	ldr	r2, [pc, #440]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fe fcb9 	bl	8003470 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b02:	f7fe fcb5 	bl	8003470 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e21d      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b14:	4b65      	ldr	r3, [pc, #404]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b20:	4b62      	ldr	r3, [pc, #392]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	495f      	ldr	r1, [pc, #380]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]
 8004b34:	e018      	b.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b36:	4b5d      	ldr	r3, [pc, #372]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a5c      	ldr	r2, [pc, #368]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b42:	f7fe fc95 	bl	8003470 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4a:	f7fe fc91 	bl	8003470 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e1f9      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b5c:	4b53      	ldr	r3, [pc, #332]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f0      	bne.n	8004b4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d03c      	beq.n	8004bee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01c      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b82:	4a4a      	ldr	r2, [pc, #296]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fe fc70 	bl	8003470 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b94:	f7fe fc6c 	bl	8003470 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e1d4      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ba6:	4b41      	ldr	r3, [pc, #260]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ef      	beq.n	8004b94 <HAL_RCC_OscConfig+0x3ec>
 8004bb4:	e01b      	b.n	8004bee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fe fc53 	bl	8003470 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bce:	f7fe fc4f 	bl	8003470 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1b7      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004be0:	4b32      	ldr	r3, [pc, #200]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1ef      	bne.n	8004bce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80a6 	beq.w	8004d48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c00:	4b2a      	ldr	r3, [pc, #168]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10d      	bne.n	8004c28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c0c:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c10:	4a26      	ldr	r2, [pc, #152]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c16:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c18:	4b24      	ldr	r3, [pc, #144]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c24:	2301      	movs	r3, #1
 8004c26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c28:	4b21      	ldr	r3, [pc, #132]	@ (8004cb0 <HAL_RCC_OscConfig+0x508>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d118      	bne.n	8004c66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c34:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb0 <HAL_RCC_OscConfig+0x508>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <HAL_RCC_OscConfig+0x508>)
 8004c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c40:	f7fe fc16 	bl	8003470 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c48:	f7fe fc12 	bl	8003470 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e17a      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5a:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <HAL_RCC_OscConfig+0x508>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d108      	bne.n	8004c80 <HAL_RCC_OscConfig+0x4d8>
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	4a0d      	ldr	r2, [pc, #52]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c7e:	e029      	b.n	8004cd4 <HAL_RCC_OscConfig+0x52c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b05      	cmp	r3, #5
 8004c86:	d115      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x50c>
 8004c88:	4b08      	ldr	r3, [pc, #32]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	4a07      	ldr	r2, [pc, #28]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c98:	4b04      	ldr	r3, [pc, #16]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9e:	4a03      	ldr	r2, [pc, #12]	@ (8004cac <HAL_RCC_OscConfig+0x504>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ca8:	e014      	b.n	8004cd4 <HAL_RCC_OscConfig+0x52c>
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	4b9c      	ldr	r3, [pc, #624]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	4a9b      	ldr	r2, [pc, #620]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004cbc:	f023 0301 	bic.w	r3, r3, #1
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cc4:	4b98      	ldr	r3, [pc, #608]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cca:	4a97      	ldr	r2, [pc, #604]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d016      	beq.n	8004d0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fe fbc8 	bl	8003470 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce4:	f7fe fbc4 	bl	8003470 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e12a      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ed      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x53c>
 8004d08:	e015      	b.n	8004d36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0a:	f7fe fbb1 	bl	8003470 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d10:	e00a      	b.n	8004d28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d12:	f7fe fbad 	bl	8003470 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e113      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d28:	4b7f      	ldr	r3, [pc, #508]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1ed      	bne.n	8004d12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d40:	4a79      	ldr	r2, [pc, #484]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80fe 	beq.w	8004f4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	f040 80d0 	bne.w	8004efc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d5c:	4b72      	ldr	r3, [pc, #456]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 0203 	and.w	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d130      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d127      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d11f      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d9c:	2a07      	cmp	r2, #7
 8004d9e:	bf14      	ite	ne
 8004da0:	2201      	movne	r2, #1
 8004da2:	2200      	moveq	r2, #0
 8004da4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d113      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	3b01      	subs	r3, #1
 8004db8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d109      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d06e      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b0c      	cmp	r3, #12
 8004dd6:	d069      	beq.n	8004eac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dd8:	4b53      	ldr	r3, [pc, #332]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004de4:	4b50      	ldr	r3, [pc, #320]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0ad      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004df4:	4b4c      	ldr	r3, [pc, #304]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a4b      	ldr	r2, [pc, #300]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e00:	f7fe fb36 	bl	8003470 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e08:	f7fe fb32 	bl	8003470 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e09a      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e1a:	4b43      	ldr	r3, [pc, #268]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e26:	4b40      	ldr	r3, [pc, #256]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	4b40      	ldr	r3, [pc, #256]	@ (8004f2c <HAL_RCC_OscConfig+0x784>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e36:	3a01      	subs	r2, #1
 8004e38:	0112      	lsls	r2, r2, #4
 8004e3a:	4311      	orrs	r1, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e40:	0212      	lsls	r2, r2, #8
 8004e42:	4311      	orrs	r1, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e48:	0852      	lsrs	r2, r2, #1
 8004e4a:	3a01      	subs	r2, #1
 8004e4c:	0552      	lsls	r2, r2, #21
 8004e4e:	4311      	orrs	r1, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e54:	0852      	lsrs	r2, r2, #1
 8004e56:	3a01      	subs	r2, #1
 8004e58:	0652      	lsls	r2, r2, #25
 8004e5a:	4311      	orrs	r1, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e60:	0912      	lsrs	r2, r2, #4
 8004e62:	0452      	lsls	r2, r2, #17
 8004e64:	430a      	orrs	r2, r1
 8004e66:	4930      	ldr	r1, [pc, #192]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e78:	4b2b      	ldr	r3, [pc, #172]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e84:	f7fe faf4 	bl	8003470 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fe faf0 	bl	8003470 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e058      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9e:	4b22      	ldr	r3, [pc, #136]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eaa:	e050      	b.n	8004f4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e04f      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d148      	bne.n	8004f4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ec6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ec8:	4b17      	ldr	r3, [pc, #92]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a16      	ldr	r2, [pc, #88]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ed2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ed4:	f7fe facc 	bl	8003470 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fe fac8 	bl	8003470 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e030      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eee:	4b0e      	ldr	r3, [pc, #56]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x734>
 8004efa:	e028      	b.n	8004f4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d023      	beq.n	8004f4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b09      	ldr	r3, [pc, #36]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a08      	ldr	r2, [pc, #32]	@ (8004f28 <HAL_RCC_OscConfig+0x780>)
 8004f08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fe faaf 	bl	8003470 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f14:	e00c      	b.n	8004f30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fe faab 	bl	8003470 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d905      	bls.n	8004f30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e013      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f30:	4b09      	ldr	r3, [pc, #36]	@ (8004f58 <HAL_RCC_OscConfig+0x7b0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ec      	bne.n	8004f16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f3c:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <HAL_RCC_OscConfig+0x7b0>)
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	4905      	ldr	r1, [pc, #20]	@ (8004f58 <HAL_RCC_OscConfig+0x7b0>)
 8004f42:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <HAL_RCC_OscConfig+0x7b4>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	60cb      	str	r3, [r1, #12]
 8004f48:	e001      	b.n	8004f4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	feeefffc 	.word	0xfeeefffc

08004f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0e7      	b.n	8005144 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f74:	4b75      	ldr	r3, [pc, #468]	@ (800514c <HAL_RCC_ClockConfig+0x1ec>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d910      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b72      	ldr	r3, [pc, #456]	@ (800514c <HAL_RCC_ClockConfig+0x1ec>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 0207 	bic.w	r2, r3, #7
 8004f8a:	4970      	ldr	r1, [pc, #448]	@ (800514c <HAL_RCC_ClockConfig+0x1ec>)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b6e      	ldr	r3, [pc, #440]	@ (800514c <HAL_RCC_ClockConfig+0x1ec>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0cf      	b.n	8005144 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d010      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	4b66      	ldr	r3, [pc, #408]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d908      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fc0:	4b63      	ldr	r3, [pc, #396]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4960      	ldr	r1, [pc, #384]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d04c      	beq.n	8005078 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d107      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d121      	bne.n	8005036 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0a6      	b.n	8005144 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d107      	bne.n	800500e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ffe:	4b54      	ldr	r3, [pc, #336]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d115      	bne.n	8005036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e09a      	b.n	8005144 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005016:	4b4e      	ldr	r3, [pc, #312]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e08e      	b.n	8005144 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005026:	4b4a      	ldr	r3, [pc, #296]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e086      	b.n	8005144 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005036:	4b46      	ldr	r3, [pc, #280]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f023 0203 	bic.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4943      	ldr	r1, [pc, #268]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8005044:	4313      	orrs	r3, r2
 8005046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005048:	f7fe fa12 	bl	8003470 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fe fa0e 	bl	8003470 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e06e      	b.n	8005144 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	4b3a      	ldr	r3, [pc, #232]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 020c 	and.w	r2, r3, #12
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	429a      	cmp	r2, r3
 8005076:	d1eb      	bne.n	8005050 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	4b31      	ldr	r3, [pc, #196]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005090:	429a      	cmp	r2, r3
 8005092:	d208      	bcs.n	80050a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005094:	4b2e      	ldr	r3, [pc, #184]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	492b      	ldr	r1, [pc, #172]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050a6:	4b29      	ldr	r3, [pc, #164]	@ (800514c <HAL_RCC_ClockConfig+0x1ec>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d210      	bcs.n	80050d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b4:	4b25      	ldr	r3, [pc, #148]	@ (800514c <HAL_RCC_ClockConfig+0x1ec>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f023 0207 	bic.w	r2, r3, #7
 80050bc:	4923      	ldr	r1, [pc, #140]	@ (800514c <HAL_RCC_ClockConfig+0x1ec>)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c4:	4b21      	ldr	r3, [pc, #132]	@ (800514c <HAL_RCC_ClockConfig+0x1ec>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d001      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e036      	b.n	8005144 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	4918      	ldr	r1, [pc, #96]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d009      	beq.n	8005114 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005100:	4b13      	ldr	r3, [pc, #76]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4910      	ldr	r1, [pc, #64]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 8005110:	4313      	orrs	r3, r2
 8005112:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005114:	f000 f824 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b0d      	ldr	r3, [pc, #52]	@ (8005150 <HAL_RCC_ClockConfig+0x1f0>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	091b      	lsrs	r3, r3, #4
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	490b      	ldr	r1, [pc, #44]	@ (8005154 <HAL_RCC_ClockConfig+0x1f4>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
 8005130:	4a09      	ldr	r2, [pc, #36]	@ (8005158 <HAL_RCC_ClockConfig+0x1f8>)
 8005132:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005134:	4b09      	ldr	r3, [pc, #36]	@ (800515c <HAL_RCC_ClockConfig+0x1fc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f7fe f949 	bl	80033d0 <HAL_InitTick>
 800513e:	4603      	mov	r3, r0
 8005140:	72fb      	strb	r3, [r7, #11]

  return status;
 8005142:	7afb      	ldrb	r3, [r7, #11]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40022000 	.word	0x40022000
 8005150:	40021000 	.word	0x40021000
 8005154:	0800ce60 	.word	0x0800ce60
 8005158:	20000048 	.word	0x20000048
 800515c:	2000004c 	.word	0x2000004c

08005160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	@ 0x24
 8005164:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800516e:	4b3e      	ldr	r3, [pc, #248]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x108>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 030c 	and.w	r3, r3, #12
 8005176:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005178:	4b3b      	ldr	r3, [pc, #236]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x108>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0303 	and.w	r3, r3, #3
 8005180:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_RCC_GetSysClockFreq+0x34>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b0c      	cmp	r3, #12
 800518c:	d121      	bne.n	80051d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d11e      	bne.n	80051d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005194:	4b34      	ldr	r3, [pc, #208]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x108>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051a0:	4b31      	ldr	r3, [pc, #196]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x108>)
 80051a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	e005      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x108>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051bc:	4a2b      	ldr	r2, [pc, #172]	@ (800526c <HAL_RCC_GetSysClockFreq+0x10c>)
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10d      	bne.n	80051e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d102      	bne.n	80051de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051d8:	4b25      	ldr	r3, [pc, #148]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x110>)
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e004      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051e4:	4b23      	ldr	r3, [pc, #140]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x114>)
 80051e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b0c      	cmp	r3, #12
 80051ec:	d134      	bne.n	8005258 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d003      	beq.n	8005206 <HAL_RCC_GetSysClockFreq+0xa6>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b03      	cmp	r3, #3
 8005202:	d003      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0xac>
 8005204:	e005      	b.n	8005212 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005206:	4b1a      	ldr	r3, [pc, #104]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x110>)
 8005208:	617b      	str	r3, [r7, #20]
      break;
 800520a:	e005      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800520c:	4b19      	ldr	r3, [pc, #100]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x114>)
 800520e:	617b      	str	r3, [r7, #20]
      break;
 8005210:	e002      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	617b      	str	r3, [r7, #20]
      break;
 8005216:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005218:	4b13      	ldr	r3, [pc, #76]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x108>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	3301      	adds	r3, #1
 8005224:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005226:	4b10      	ldr	r3, [pc, #64]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x108>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	fb03 f202 	mul.w	r2, r3, r2
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800523e:	4b0a      	ldr	r3, [pc, #40]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x108>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	0e5b      	lsrs	r3, r3, #25
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	3301      	adds	r3, #1
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	fbb2 f3f3 	udiv	r3, r2, r3
 8005256:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005258:	69bb      	ldr	r3, [r7, #24]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3724      	adds	r7, #36	@ 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40021000 	.word	0x40021000
 800526c:	0800ce78 	.word	0x0800ce78
 8005270:	00f42400 	.word	0x00f42400
 8005274:	007a1200 	.word	0x007a1200

08005278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800527c:	4b03      	ldr	r3, [pc, #12]	@ (800528c <HAL_RCC_GetHCLKFreq+0x14>)
 800527e:	681b      	ldr	r3, [r3, #0]
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000048 	.word	0x20000048

08005290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005294:	f7ff fff0 	bl	8005278 <HAL_RCC_GetHCLKFreq>
 8005298:	4602      	mov	r2, r0
 800529a:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	4904      	ldr	r1, [pc, #16]	@ (80052b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052a6:	5ccb      	ldrb	r3, [r1, r3]
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40021000 	.word	0x40021000
 80052b8:	0800ce70 	.word	0x0800ce70

080052bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052c0:	f7ff ffda 	bl	8005278 <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0adb      	lsrs	r3, r3, #11
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4904      	ldr	r1, [pc, #16]	@ (80052e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40021000 	.word	0x40021000
 80052e4:	0800ce70 	.word	0x0800ce70

080052e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052f4:	4b2a      	ldr	r3, [pc, #168]	@ (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005300:	f7ff fa44 	bl	800478c <HAL_PWREx_GetVoltageRange>
 8005304:	6178      	str	r0, [r7, #20]
 8005306:	e014      	b.n	8005332 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005308:	4b25      	ldr	r3, [pc, #148]	@ (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800530a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530c:	4a24      	ldr	r2, [pc, #144]	@ (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800530e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005312:	6593      	str	r3, [r2, #88]	@ 0x58
 8005314:	4b22      	ldr	r3, [pc, #136]	@ (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005320:	f7ff fa34 	bl	800478c <HAL_PWREx_GetVoltageRange>
 8005324:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005326:	4b1e      	ldr	r3, [pc, #120]	@ (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800532a:	4a1d      	ldr	r2, [pc, #116]	@ (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800532c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005330:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005338:	d10b      	bne.n	8005352 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b80      	cmp	r3, #128	@ 0x80
 800533e:	d919      	bls.n	8005374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2ba0      	cmp	r3, #160	@ 0xa0
 8005344:	d902      	bls.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005346:	2302      	movs	r3, #2
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e013      	b.n	8005374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800534c:	2301      	movs	r3, #1
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	e010      	b.n	8005374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b80      	cmp	r3, #128	@ 0x80
 8005356:	d902      	bls.n	800535e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005358:	2303      	movs	r3, #3
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	e00a      	b.n	8005374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b80      	cmp	r3, #128	@ 0x80
 8005362:	d102      	bne.n	800536a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005364:	2302      	movs	r3, #2
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	e004      	b.n	8005374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b70      	cmp	r3, #112	@ 0x70
 800536e:	d101      	bne.n	8005374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005370:	2301      	movs	r3, #1
 8005372:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005374:	4b0b      	ldr	r3, [pc, #44]	@ (80053a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f023 0207 	bic.w	r2, r3, #7
 800537c:	4909      	ldr	r1, [pc, #36]	@ (80053a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005384:	4b07      	ldr	r3, [pc, #28]	@ (80053a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	429a      	cmp	r2, r3
 8005390:	d001      	beq.n	8005396 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40022000 	.word	0x40022000

080053a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e0be      	b.n	8005538 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d108      	bne.n	80053d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ca:	d009      	beq.n	80053e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	61da      	str	r2, [r3, #28]
 80053d2:	e005      	b.n	80053e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f8cb 	bl	8005590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005410:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800541a:	d902      	bls.n	8005422 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e002      	b.n	8005428 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005422:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005426:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005430:	d007      	beq.n	8005442 <HAL_SPI_Init+0x9a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800543a:	d002      	beq.n	8005442 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005484:	ea42 0103 	orr.w	r1, r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	430a      	orrs	r2, r1
 8005496:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a0:	d11b      	bne.n	80054da <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054b2:	d903      	bls.n	80054bc <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80054ba:	e002      	b.n	80054c2 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d107      	bne.n	80054da <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	f003 0204 	and.w	r2, r3, #4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005500:	ea42 0103 	orr.w	r1, r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551a:	d105      	bne.n	8005528 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	b292      	uxth	r2, r2
 8005526:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e01a      	b.n	8005588 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005568:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f81a 	bl	80055a4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	603b      	str	r3, [r7, #0]
 80055c4:	4613      	mov	r3, r2
 80055c6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d001      	beq.n	80055e0 <HAL_SPI_Receive+0x28>
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
 80055de:	e1e0      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
  }

  if ((pData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_SPI_Receive+0x34>
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_SPI_Receive+0x38>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e1d8      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055f8:	d112      	bne.n	8005620 <HAL_SPI_Receive+0x68>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10e      	bne.n	8005620 <HAL_SPI_Receive+0x68>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2204      	movs	r2, #4
 8005606:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	4613      	mov	r3, r2
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f9c7 	bl	80059aa <HAL_SPI_TransmitReceive>
 800561c:	4603      	mov	r3, r0
 800561e:	e1c0      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005620:	f7fd ff26 	bl	8003470 <HAL_GetTick>
 8005624:	61f8      	str	r0, [r7, #28]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_SPI_Receive+0x7c>
 8005630:	2302      	movs	r3, #2
 8005632:	e1b6      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2204      	movs	r2, #4
 8005640:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	88fa      	ldrh	r2, [r7, #6]
 800565c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005686:	d118      	bne.n	80056ba <HAL_SPI_Receive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056a6:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056c2:	d908      	bls.n	80056d6 <HAL_SPI_Receive+0x11e>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056d2:	605a      	str	r2, [r3, #4]
 80056d4:	e007      	b.n	80056e6 <HAL_SPI_Receive+0x12e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056e4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ee:	d10f      	bne.n	8005710 <HAL_SPI_Receive+0x158>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800570e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571a:	2b40      	cmp	r3, #64	@ 0x40
 800571c:	d007      	beq.n	800572e <HAL_SPI_Receive+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800572c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005736:	d875      	bhi.n	8005824 <HAL_SPI_Receive+0x26c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005738:	e037      	b.n	80057aa <HAL_SPI_Receive+0x1f2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d117      	bne.n	8005778 <HAL_SPI_Receive+0x1c0>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f103 020c 	add.w	r2, r3, #12
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	7812      	ldrb	r2, [r2, #0]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005776:	e018      	b.n	80057aa <HAL_SPI_Receive+0x1f2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005778:	f7fd fe7a 	bl	8003470 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d803      	bhi.n	8005790 <HAL_SPI_Receive+0x1d8>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	d102      	bne.n	8005796 <HAL_SPI_Receive+0x1de>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <HAL_SPI_Receive+0x1f2>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e0fb      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1c1      	bne.n	800573a <HAL_SPI_Receive+0x182>
 80057b6:	e03b      	b.n	8005830 <HAL_SPI_Receive+0x278>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d115      	bne.n	80057f2 <HAL_SPI_Receive+0x23a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	b292      	uxth	r2, r2
 80057d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	1c9a      	adds	r2, r3, #2
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80057f0:	e018      	b.n	8005824 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f2:	f7fd fe3d 	bl	8003470 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d803      	bhi.n	800580a <HAL_SPI_Receive+0x252>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d102      	bne.n	8005810 <HAL_SPI_Receive+0x258>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <HAL_SPI_Receive+0x26c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e0be      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
    while (hspi->RxXferCount > 0U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1c3      	bne.n	80057b8 <HAL_SPI_Receive+0x200>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005838:	f040 8087 	bne.w	800594a <HAL_SPI_Receive+0x392>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800584a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2201      	movs	r2, #1
 8005854:	2101      	movs	r1, #1
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f001 fa0c 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      __HAL_UNLOCK(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e099      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005876:	d907      	bls.n	8005888 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	b292      	uxth	r2, r2
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	e008      	b.n	800589a <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f103 020c 	add.w	r2, r3, #12
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	7812      	ldrb	r2, [r2, #0]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2201      	movs	r2, #1
 80058a2:	2101      	movs	r1, #1
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f001 f9e5 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00f      	beq.n	80058d0 <HAL_SPI_Receive+0x318>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b4:	f043 0202 	orr.w	r2, r3, #2
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e068      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058d8:	d105      	bne.n	80058e6 <HAL_SPI_Receive+0x32e>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	e031      	b.n	800594a <HAL_SPI_Receive+0x392>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058f6:	7cfb      	ldrb	r3, [r7, #19]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005900:	d123      	bne.n	800594a <HAL_SPI_Receive+0x392>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	2b02      	cmp	r3, #2
 8005908:	d11f      	bne.n	800594a <HAL_SPI_Receive+0x392>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2201      	movs	r2, #1
 8005912:	2101      	movs	r1, #1
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f001 f9ad 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00f      	beq.n	8005940 <HAL_SPI_Receive+0x388>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005924:	f043 0202 	orr.w	r2, r3, #2
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e030      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005948:	7cfb      	ldrb	r3, [r7, #19]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f001 faae 	bl	8006eb0 <SPI_EndRxTransaction>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_SPI_Receive+0x3a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b10      	cmp	r3, #16
 800596c:	d10a      	bne.n	8005984 <HAL_SPI_Receive+0x3cc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005972:	f043 0202 	orr.w	r2, r3, #2
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005982:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_SPI_Receive+0x3e8>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <HAL_SPI_Receive+0x3ea>
  }
  else
  {
    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
  }
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b090      	sub	sp, #64	@ 0x40
 80059ae:	af02      	add	r7, sp, #8
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	74fb      	strb	r3, [r7, #19]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059c0:	2301      	movs	r3, #1
 80059c2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059c4:	f7fd fd54 	bl	8003470 <HAL_GetTick>
 80059c8:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  tmp_mode            = hspi->Init.Mode;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  initial_TxXferCount = Size;
 80059da:	887b      	ldrh	r3, [r7, #2]
 80059dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 80059de:	887b      	ldrh	r3, [r7, #2]
 80059e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	623b      	str	r3, [r7, #32]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	61fb      	str	r3, [r7, #28]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d00d      	beq.n	8005a16 <HAL_SPI_TransmitReceive+0x6c>
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a00:	d107      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x68>
 8005a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d001      	beq.n	8005a16 <HAL_SPI_TransmitReceive+0x6c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005a12:	2302      	movs	r3, #2
 8005a14:	e30f      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x7e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x7e>
 8005a22:	887b      	ldrh	r3, [r7, #2]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e304      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x90>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e2fd      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d003      	beq.n	8005a56 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2205      	movs	r2, #5
 8005a52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	887a      	ldrh	r2, [r7, #2]
 8005a66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	887a      	ldrh	r2, [r7, #2]
 8005a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	887a      	ldrh	r2, [r7, #2]
 8005a82:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a98:	d10f      	bne.n	8005aba <HAL_SPI_TransmitReceive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ab8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ac2:	d802      	bhi.n	8005aca <HAL_SPI_TransmitReceive+0x120>
 8005ac4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d908      	bls.n	8005adc <HAL_SPI_TransmitReceive+0x132>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	e007      	b.n	8005aec <HAL_SPI_TransmitReceive+0x142>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005aea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af6:	2b40      	cmp	r3, #64	@ 0x40
 8005af8:	d007      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b12:	f240 80d0 	bls.w	8005cb6 <HAL_SPI_TransmitReceive+0x30c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_SPI_TransmitReceive+0x17c>
 8005b1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f040 80ba 	bne.w	8005c9a <HAL_SPI_TransmitReceive+0x2f0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	881a      	ldrh	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b36:	1c9a      	adds	r2, r3, #2
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 80a2 	bne.w	8005c9a <HAL_SPI_TransmitReceive+0x2f0>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b5e:	f040 809c 	bne.w	8005c9a <HAL_SPI_TransmitReceive+0x2f0>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10c      	bne.n	8005b86 <HAL_SPI_TransmitReceive+0x1dc>
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <HAL_SPI_TransmitReceive+0x1dc>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b84:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b94:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b96:	e080      	b.n	8005c9a <HAL_SPI_TransmitReceive+0x2f0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d13f      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x27c>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d03a      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0x27c>
 8005bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d137      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x27c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bba:	881a      	ldrh	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc6:	1c9a      	adds	r2, r3, #2
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d11e      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x27c>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf0:	d119      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x27c>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10c      	bne.n	8005c16 <HAL_SPI_TransmitReceive+0x26c>
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d007      	beq.n	8005c16 <HAL_SPI_TransmitReceive+0x26c>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c14:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c24:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d11c      	bne.n	8005c6e <HAL_SPI_TransmitReceive+0x2c4>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d016      	beq.n	8005c6e <HAL_SPI_TransmitReceive+0x2c4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	b292      	uxth	r2, r2
 8005c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	1c9a      	adds	r2, r3, #2
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c6e:	f7fd fbff 	bl	8003470 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d80d      	bhi.n	8005c9a <HAL_SPI_TransmitReceive+0x2f0>
 8005c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d009      	beq.n	8005c9a <HAL_SPI_TransmitReceive+0x2f0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e1cd      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f47f af79 	bne.w	8005b98 <HAL_SPI_TransmitReceive+0x1ee>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f47f af72 	bne.w	8005b98 <HAL_SPI_TransmitReceive+0x1ee>
 8005cb4:	e12f      	b.n	8005f16 <HAL_SPI_TransmitReceive+0x56c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_SPI_TransmitReceive+0x31c>
 8005cbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	f040 811b 	bne.w	8005efc <HAL_SPI_TransmitReceive+0x552>
    {
      if (hspi->TxXferCount > 1U)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d912      	bls.n	8005cf6 <HAL_SPI_TransmitReceive+0x34c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	881a      	ldrh	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce0:	1c9a      	adds	r2, r3, #2
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b02      	subs	r3, #2
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cf4:	e102      	b.n	8005efc <HAL_SPI_TransmitReceive+0x552>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	330c      	adds	r3, #12
 8005d00:	7812      	ldrb	r2, [r2, #0]
 8005d02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 80ea 	bne.w	8005efc <HAL_SPI_TransmitReceive+0x552>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d30:	f040 80e4 	bne.w	8005efc <HAL_SPI_TransmitReceive+0x552>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10c      	bne.n	8005d58 <HAL_SPI_TransmitReceive+0x3ae>
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <HAL_SPI_TransmitReceive+0x3ae>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d56:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d66:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d68:	e0c8      	b.n	8005efc <HAL_SPI_TransmitReceive+0x552>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d158      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x480>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d053      	beq.n	8005e2a <HAL_SPI_TransmitReceive+0x480>
 8005d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d150      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x480>
      {
        if (hspi->TxXferCount > 1U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d912      	bls.n	8005db8 <HAL_SPI_TransmitReceive+0x40e>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	881a      	ldrh	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da2:	1c9a      	adds	r2, r3, #2
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b02      	subs	r3, #2
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005db6:	e012      	b.n	8005dde <HAL_SPI_TransmitReceive+0x434>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	7812      	ldrb	r2, [r2, #0]
 8005dc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	637b      	str	r3, [r7, #52]	@ 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d11e      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x480>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df4:	d119      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x480>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10c      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x470>
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d007      	beq.n	8005e1a <HAL_SPI_TransmitReceive+0x470>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e18:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e28:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d148      	bne.n	8005eca <HAL_SPI_TransmitReceive+0x520>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d042      	beq.n	8005eca <HAL_SPI_TransmitReceive+0x520>
      {
        if (hspi->RxXferCount > 1U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d923      	bls.n	8005e98 <HAL_SPI_TransmitReceive+0x4ee>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	b292      	uxth	r2, r2
 8005e5c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b02      	subs	r3, #2
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d81f      	bhi.n	8005ec6 <HAL_SPI_TransmitReceive+0x51c>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e94:	605a      	str	r2, [r3, #4]
 8005e96:	e016      	b.n	8005ec6 <HAL_SPI_TransmitReceive+0x51c>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f103 020c 	add.w	r2, r3, #12
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eca:	f7fd fad1 	bl	8003470 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d803      	bhi.n	8005ee2 <HAL_SPI_TransmitReceive+0x538>
 8005eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d102      	bne.n	8005ee8 <HAL_SPI_TransmitReceive+0x53e>
 8005ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d109      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x552>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e09c      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f47f af31 	bne.w	8005d6a <HAL_SPI_TransmitReceive+0x3c0>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f47f af2a 	bne.w	8005d6a <HAL_SPI_TransmitReceive+0x3c0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f1e:	d152      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0x61c>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f26:	2201      	movs	r2, #1
 8005f28:	2101      	movs	r1, #1
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fea2 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00f      	beq.n	8005f56 <HAL_SPI_TransmitReceive+0x5ac>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f3a:	f043 0202 	orr.w	r2, r3, #2
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	661a      	str	r2, [r3, #96]	@ 0x60
      hspi->State = HAL_SPI_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      __HAL_UNLOCK(hspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e06f      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f5e:	d105      	bne.n	8005f6c <HAL_SPI_TransmitReceive+0x5c2>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	e02c      	b.n	8005fc6 <HAL_SPI_TransmitReceive+0x61c>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	330c      	adds	r3, #12
 8005f72:	61bb      	str	r3, [r7, #24]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	74fb      	strb	r3, [r7, #19]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f7c:	7cfb      	ldrb	r3, [r7, #19]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d11f      	bne.n	8005fc6 <HAL_SPI_TransmitReceive+0x61c>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	2101      	movs	r1, #1
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fe6f 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00f      	beq.n	8005fbc <HAL_SPI_TransmitReceive+0x612>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa0:	f043 0202 	orr.w	r2, r3, #2
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	661a      	str	r2, [r3, #96]	@ 0x60
          hspi->State = HAL_SPI_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e03c      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	74fb      	strb	r3, [r7, #19]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d110      	bne.n	8005ff6 <HAL_SPI_TransmitReceive+0x64c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd8:	f043 0202 	orr.w	r2, r3, #2
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005fe8:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e01f      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 ffb0 	bl	8006f60 <SPI_EndRxTxTransaction>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x66e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e00e      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x68a>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <HAL_SPI_TransmitReceive+0x68c>
  }
  else
  {
    return HAL_OK;
 8006034:	2300      	movs	r3, #0
  }
}
 8006036:	4618      	mov	r0, r3
 8006038:	3738      	adds	r7, #56	@ 0x38
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_SPI_Transmit_IT+0x1a>
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e082      	b.n	8006164 <HAL_SPI_Transmit_IT+0x124>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	d001      	beq.n	800606e <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
 800606c:	e07a      	b.n	8006164 <HAL_SPI_Transmit_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_SPI_Transmit_IT+0x3c>
 8006078:	2302      	movs	r3, #2
 800607a:	e073      	b.n	8006164 <HAL_SPI_Transmit_IT+0x124>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2203      	movs	r2, #3
 8006088:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060c8:	d903      	bls.n	80060d2 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4a28      	ldr	r2, [pc, #160]	@ (8006170 <HAL_SPI_Transmit_IT+0x130>)
 80060ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80060d0:	e002      	b.n	80060d8 <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4a27      	ldr	r2, [pc, #156]	@ (8006174 <HAL_SPI_Transmit_IT+0x134>)
 80060d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060e0:	d10f      	bne.n	8006102 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006100:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800610a:	d10f      	bne.n	800612c <HAL_SPI_Transmit_IT+0xec>
  {
    SPI_RESET_CRC(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800612a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	d007      	beq.n	800614a <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006148:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006160:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	08006c15 	.word	0x08006c15
 8006174:	08006bb5 	.word	0x08006bb5

08006178 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	d001      	beq.n	8006196 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
 8006194:	e0ba      	b.n	800630c <HAL_SPI_Receive_IT+0x194>
  }

  if ((pData == NULL) || (Size == 0U))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_SPI_Receive_IT+0x2a>
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e0b2      	b.n	800630c <HAL_SPI_Receive_IT+0x194>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d110      	bne.n	80061d0 <HAL_SPI_Receive_IT+0x58>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061b6:	d10b      	bne.n	80061d0 <HAL_SPI_Receive_IT+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2204      	movs	r2, #4
 80061bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f8a8 	bl	800631c <HAL_SPI_TransmitReceive_IT>
 80061cc:	4603      	mov	r3, r0
 80061ce:	e09d      	b.n	800630c <HAL_SPI_Receive_IT+0x194>
  }


  /* Process Locked */
  __HAL_LOCK(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_SPI_Receive_IT+0x66>
 80061da:	2302      	movs	r3, #2
 80061dc:	e096      	b.n	800630c <HAL_SPI_Receive_IT+0x194>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2204      	movs	r2, #4
 80061ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	88fa      	ldrh	r2, [r7, #6]
 80061fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	88fa      	ldrh	r2, [r7, #6]
 8006206:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800622a:	d90b      	bls.n	8006244 <HAL_SPI_Receive_IT+0xcc>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800623a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4a35      	ldr	r2, [pc, #212]	@ (8006314 <HAL_SPI_Receive_IT+0x19c>)
 8006240:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006242:	e00a      	b.n	800625a <HAL_SPI_Receive_IT+0xe2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006252:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4a30      	ldr	r2, [pc, #192]	@ (8006318 <HAL_SPI_Receive_IT+0x1a0>)
 8006258:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006262:	d10f      	bne.n	8006284 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006272:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006282:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800628c:	d11f      	bne.n	80062ce <HAL_SPI_Receive_IT+0x156>
  {
    hspi->CRCSize = 1U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800629c:	d806      	bhi.n	80062ac <HAL_SPI_Receive_IT+0x134>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d102      	bne.n	80062ac <HAL_SPI_Receive_IT+0x134>
    {
      hspi->CRCSize = 2U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2202      	movs	r2, #2
 80062aa:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e002      	b.n	80062d4 <HAL_SPI_Receive_IT+0x15c>
  }
  else
  {
    hspi->CRCSize = 0U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062de:	2b40      	cmp	r3, #64	@ 0x40
 80062e0:	d007      	beq.n	80062f2 <HAL_SPI_Receive_IT+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062f0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006308:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	08006b2d 	.word	0x08006b2d
 8006318:	08006a6d 	.word	0x08006a6d

0800631c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006330:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d00c      	beq.n	8006358 <HAL_SPI_TransmitReceive_IT+0x3c>
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006344:	d106      	bne.n	8006354 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d102      	bne.n	8006354 <HAL_SPI_TransmitReceive_IT+0x38>
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	2b04      	cmp	r3, #4
 8006352:	d001      	beq.n	8006358 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006354:	2302      	movs	r3, #2
 8006356:	e0a5      	b.n	80064a4 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <HAL_SPI_TransmitReceive_IT+0x4e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_SPI_TransmitReceive_IT+0x4e>
 8006364:	887b      	ldrh	r3, [r7, #2]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e09a      	b.n	80064a4 <HAL_SPI_TransmitReceive_IT+0x188>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <HAL_SPI_TransmitReceive_IT+0x60>
 8006378:	2302      	movs	r3, #2
 800637a:	e093      	b.n	80064a4 <HAL_SPI_TransmitReceive_IT+0x188>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b04      	cmp	r3, #4
 800638e:	d003      	beq.n	8006398 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2205      	movs	r2, #5
 8006394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	887a      	ldrh	r2, [r7, #2]
 80063a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	887a      	ldrh	r2, [r7, #2]
 80063ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	887a      	ldrh	r2, [r7, #2]
 80063ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	887a      	ldrh	r2, [r7, #2]
 80063c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063ce:	d906      	bls.n	80063de <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4a37      	ldr	r2, [pc, #220]	@ (80064b0 <HAL_SPI_TransmitReceive_IT+0x194>)
 80063d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a36      	ldr	r2, [pc, #216]	@ (80064b4 <HAL_SPI_TransmitReceive_IT+0x198>)
 80063da:	651a      	str	r2, [r3, #80]	@ 0x50
 80063dc:	e005      	b.n	80063ea <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a35      	ldr	r2, [pc, #212]	@ (80064b8 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80063e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4a35      	ldr	r2, [pc, #212]	@ (80064bc <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80063e8:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f2:	d11f      	bne.n	8006434 <HAL_SPI_TransmitReceive_IT+0x118>
  {
    hspi->CRCSize = 1U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006402:	d806      	bhi.n	8006412 <HAL_SPI_TransmitReceive_IT+0xf6>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006408:	2b02      	cmp	r3, #2
 800640a:	d102      	bne.n	8006412 <HAL_SPI_TransmitReceive_IT+0xf6>
    {
      hspi->CRCSize = 2U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2202      	movs	r2, #2
 8006410:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e002      	b.n	800643a <HAL_SPI_TransmitReceive_IT+0x11e>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006442:	d802      	bhi.n	800644a <HAL_SPI_TransmitReceive_IT+0x12e>
 8006444:	887b      	ldrh	r3, [r7, #2]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d908      	bls.n	800645c <HAL_SPI_TransmitReceive_IT+0x140>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	e007      	b.n	800646c <HAL_SPI_TransmitReceive_IT+0x150>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800646a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006476:	2b40      	cmp	r3, #64	@ 0x40
 8006478:	d007      	beq.n	800648a <HAL_SPI_TransmitReceive_IT+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006488:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80064a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	080068f5 	.word	0x080068f5
 80064b4:	080069a5 	.word	0x080069a5
 80064b8:	080066fd 	.word	0x080066fd
 80064bc:	08006839 	.word	0x08006839

080064c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10e      	bne.n	8006500 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d004      	beq.n	8006500 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
    return;
 80064fe:	e0ce      	b.n	800669e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <HAL_SPI_IRQHandler+0x5e>
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
    return;
 800651c:	e0bf      	b.n	800669e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <HAL_SPI_IRQHandler+0x7e>
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	d105      	bne.n	800653e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80b0 	beq.w	800669e <HAL_SPI_IRQHandler+0x1de>
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80aa 	beq.w	800669e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d023      	beq.n	800659c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b03      	cmp	r3, #3
 800655e:	d011      	beq.n	8006584 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006564:	f043 0204 	orr.w	r2, r3, #4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	e00b      	b.n	800659c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006584:	2300      	movs	r3, #0
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	693b      	ldr	r3, [r7, #16]
        return;
 800659a:	e080      	b.n	800669e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d014      	beq.n	80065d0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065aa:	f043 0201 	orr.w	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00c      	beq.n	80065f4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065de:	f043 0208 	orr.w	r2, r3, #8
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d04f      	beq.n	800669c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800660a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d104      	bne.n	8006628 <HAL_SPI_IRQHandler+0x168>
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d034      	beq.n	8006692 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0203 	bic.w	r2, r2, #3
 8006636:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663c:	2b00      	cmp	r3, #0
 800663e:	d011      	beq.n	8006664 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006644:	4a17      	ldr	r2, [pc, #92]	@ (80066a4 <HAL_SPI_IRQHandler+0x1e4>)
 8006646:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664c:	4618      	mov	r0, r3
 800664e:	f7fd f850 	bl	80036f2 <HAL_DMA_Abort_IT>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800665c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006668:	2b00      	cmp	r3, #0
 800666a:	d016      	beq.n	800669a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006670:	4a0c      	ldr	r2, [pc, #48]	@ (80066a4 <HAL_SPI_IRQHandler+0x1e4>)
 8006672:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006678:	4618      	mov	r0, r3
 800667a:	f7fd f83a 	bl	80036f2 <HAL_DMA_Abort_IT>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006688:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006690:	e003      	b.n	800669a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f812 	bl	80066bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006698:	e000      	b.n	800669c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800669a:	bf00      	nop
    return;
 800669c:	bf00      	nop
  }
}
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	080066d1 	.word	0x080066d1

080066a8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff ffe5 	bl	80066bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800670a:	b29b      	uxth	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	d923      	bls.n	8006758 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671a:	b292      	uxth	r2, r2
 800671c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006722:	1c9a      	adds	r2, r3, #2
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b02      	subs	r3, #2
 8006732:	b29a      	uxth	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b01      	cmp	r3, #1
 8006744:	d11f      	bne.n	8006786 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	e016      	b.n	8006786 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f103 020c 	add.w	r2, r3, #12
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006764:	7812      	ldrb	r2, [r2, #0]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d120      	bne.n	80067d4 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800679a:	d10b      	bne.n	80067b4 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80067aa:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a0b      	ldr	r2, [pc, #44]	@ (80067dc <SPI_2linesRxISR_8BIT+0xe0>)
 80067b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 80067b2:	e00f      	b.n	80067d4 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80067c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fc0c 	bl	8006fec <SPI_CloseRxTx_ISR>
    }
  }
}
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	080067e1 	.word	0x080067e1

080067e0 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	330c      	adds	r3, #12
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80067fc:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006802:	1e5a      	subs	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10f      	bne.n	8006830 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800681e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fbde 	bl	8006fec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b01      	cmp	r3, #1
 8006848:	d912      	bls.n	8006870 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684e:	881a      	ldrh	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685a:	1c9a      	adds	r2, r3, #2
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b02      	subs	r3, #2
 8006868:	b29a      	uxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800686e:	e012      	b.n	8006896 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	330c      	adds	r3, #12
 800687a:	7812      	ldrb	r2, [r2, #0]
 800687c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d126      	bne.n	80068ee <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068a8:	d110      	bne.n	80068cc <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068b8:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068c8:	605a      	str	r2, [r3, #4]
      return;
 80068ca:	e010      	b.n	80068ee <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068da:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d102      	bne.n	80068ee <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fb7f 	bl	8006fec <SPI_CloseRxTx_ISR>
    }
  }
}
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006906:	b292      	uxth	r2, r2
 8006908:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	1c9a      	adds	r2, r3, #2
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d118      	bne.n	8006964 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800693a:	d103      	bne.n	8006944 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a0b      	ldr	r2, [pc, #44]	@ (800696c <SPI_2linesRxISR_16BIT+0x78>)
 8006940:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006942:	e00f      	b.n	8006964 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006952:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006958:	b29b      	uxth	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fb44 	bl	8006fec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	08006971 	.word	0x08006971

08006970 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006984:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006994:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fb28 	bl	8006fec <SPI_CloseRxTx_ISR>
}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b0:	881a      	ldrh	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069bc:	1c9a      	adds	r2, r3, #2
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d126      	bne.n	8006a28 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069e2:	d110      	bne.n	8006a06 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069f2:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a02:	605a      	str	r2, [r3, #4]
      return;
 8006a04:	e010      	b.n	8006a28 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a14:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d102      	bne.n	8006a28 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fae2 	bl	8006fec <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006a4a:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a50:	1e5a      	subs	r2, r3, #1
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d102      	bne.n	8006a64 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fb20 	bl	80070a4 <SPI_CloseRx_ISR>
  }
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f103 020c 	add.w	r2, r3, #12
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d10c      	bne.n	8006ac8 <SPI_RxISR_8BIT+0x5c>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab6:	d107      	bne.n	8006ac8 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ac6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006adc:	d103      	bne.n	8006ae6 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a04      	ldr	r2, [pc, #16]	@ (8006af4 <SPI_RxISR_8BIT+0x88>)
 8006ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006ae4:	e002      	b.n	8006aec <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fadc 	bl	80070a4 <SPI_CloseRx_ISR>
  }
}
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	08006a2f 	.word	0x08006a2f

08006af8 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006b0c:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b1c:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fac0 	bl	80070a4 <SPI_CloseRx_ISR>
}
 8006b24:	bf00      	nop
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	b292      	uxth	r2, r2
 8006b40:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b46:	1c9a      	adds	r2, r3, #2
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d10c      	bne.n	8006b84 <SPI_RxISR_16BIT+0x58>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b72:	d107      	bne.n	8006b84 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b82:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10b      	bne.n	8006ba8 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b98:	d103      	bne.n	8006ba2 <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a04      	ldr	r2, [pc, #16]	@ (8006bb0 <SPI_RxISR_16BIT+0x84>)
 8006b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006ba0:	e002      	b.n	8006ba8 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa7e 	bl	80070a4 <SPI_CloseRx_ISR>
  }
}
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	08006af9 	.word	0x08006af9

08006bb4 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	7812      	ldrb	r2, [r2, #0]
 8006bc8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10f      	bne.n	8006c0c <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bf4:	d107      	bne.n	8006c06 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c04:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa92 	bl	8007130 <SPI_CloseTx_ISR>
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c20:	881a      	ldrh	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2c:	1c9a      	adds	r2, r3, #2
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10f      	bne.n	8006c6a <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c52:	d107      	bne.n	8006c64 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c62:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fa63 	bl	8007130 <SPI_CloseTx_ISR>
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	4613      	mov	r3, r2
 8006c82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c84:	f7fc fbf4 	bl	8003470 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	4413      	add	r3, r2
 8006c92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c94:	f7fc fbec 	bl	8003470 <HAL_GetTick>
 8006c98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c9a:	4b39      	ldr	r3, [pc, #228]	@ (8006d80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	015b      	lsls	r3, r3, #5
 8006ca0:	0d1b      	lsrs	r3, r3, #20
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	fb02 f303 	mul.w	r3, r2, r3
 8006ca8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006caa:	e054      	b.n	8006d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb2:	d050      	beq.n	8006d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cb4:	f7fc fbdc 	bl	8003470 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d902      	bls.n	8006cca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d13d      	bne.n	8006d46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ce2:	d111      	bne.n	8006d08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cec:	d004      	beq.n	8006cf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf6:	d107      	bne.n	8006d08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d10:	d10f      	bne.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e017      	b.n	8006d76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	bf0c      	ite	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	2300      	movne	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d19b      	bne.n	8006cac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000048 	.word	0x20000048

08006d84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08a      	sub	sp, #40	@ 0x28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d96:	f7fc fb6b 	bl	8003470 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	4413      	add	r3, r2
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006da6:	f7fc fb63 	bl	8003470 <HAL_GetTick>
 8006daa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006db4:	4b3d      	ldr	r3, [pc, #244]	@ (8006eac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	00da      	lsls	r2, r3, #3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	0d1b      	lsrs	r3, r3, #20
 8006dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc6:	fb02 f303 	mul.w	r3, r2, r3
 8006dca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006dcc:	e060      	b.n	8006e90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006dd4:	d107      	bne.n	8006de6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d050      	beq.n	8006e90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dee:	f7fc fb3f 	bl	8003470 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d902      	bls.n	8006e04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d13d      	bne.n	8006e80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e1c:	d111      	bne.n	8006e42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e26:	d004      	beq.n	8006e32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e30:	d107      	bne.n	8006e42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e4a:	d10f      	bne.n	8006e6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e010      	b.n	8006ea2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d196      	bne.n	8006dce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3728      	adds	r7, #40	@ 0x28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000048 	.word	0x20000048

08006eb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ec4:	d111      	bne.n	8006eea <SPI_EndRxTransaction+0x3a>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ece:	d004      	beq.n	8006eda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed8:	d107      	bne.n	8006eea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ee8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2180      	movs	r1, #128	@ 0x80
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff febd 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f04:	f043 0220 	orr.w	r2, r3, #32
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e023      	b.n	8006f58 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f18:	d11d      	bne.n	8006f56 <SPI_EndRxTransaction+0xa6>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f22:	d004      	beq.n	8006f2e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2c:	d113      	bne.n	8006f56 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7ff ff22 	bl	8006d84 <SPI_WaitFifoStateUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d007      	beq.n	8006f56 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f4a:	f043 0220 	orr.w	r2, r3, #32
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e000      	b.n	8006f58 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff ff03 	bl	8006d84 <SPI_WaitFifoStateUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f88:	f043 0220 	orr.w	r2, r3, #32
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e027      	b.n	8006fe4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2180      	movs	r1, #128	@ 0x80
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff fe68 	bl	8006c74 <SPI_WaitFlagStateUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fae:	f043 0220 	orr.w	r2, r3, #32
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e014      	b.n	8006fe4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f7ff fedc 	bl	8006d84 <SPI_WaitFifoStateUntilTimeout>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fd6:	f043 0220 	orr.w	r2, r3, #32
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e000      	b.n	8006fe4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ff4:	f7fc fa3c 	bl	8003470 <HAL_GetTick>
 8006ff8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0220 	bic.w	r2, r2, #32
 8007008:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	2164      	movs	r1, #100	@ 0x64
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff ffa6 	bl	8006f60 <SPI_EndRxTxTransaction>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800701e:	f043 0220 	orr.w	r2, r3, #32
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 0310 	and.w	r3, r3, #16
 8007030:	2b10      	cmp	r3, #16
 8007032:	d112      	bne.n	800705a <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007040:	f043 0202 	orr.w	r2, r3, #2
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007050:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff fb32 	bl	80066bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007058:	e020      	b.n	800709c <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800705e:	2b00      	cmp	r3, #0
 8007060:	d115      	bne.n	800708e <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b04      	cmp	r3, #4
 800706c:	d107      	bne.n	800707e <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fb fc7c 	bl	8002974 <HAL_SPI_RxCpltCallback>
}
 800707c:	e00e      	b.n	800709c <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fb0e 	bl	80066a8 <HAL_SPI_TxRxCpltCallback>
}
 800708c:	e006      	b.n	800709c <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff fb10 	bl	80066bc <HAL_SPI_ErrorCallback>
}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070ba:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80070bc:	f7fc f9d8 	bl	8003470 <HAL_GetTick>
 80070c0:	4603      	mov	r3, r0
 80070c2:	461a      	mov	r2, r3
 80070c4:	2164      	movs	r1, #100	@ 0x64
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fef2 	bl	8006eb0 <SPI_EndRxTransaction>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d6:	f043 0220 	orr.w	r2, r3, #32
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d10e      	bne.n	8007112 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f8:	f043 0202 	orr.w	r2, r3, #2
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007108:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fad6 	bl	80066bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007110:	e00a      	b.n	8007128 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007116:	2b00      	cmp	r3, #0
 8007118:	d103      	bne.n	8007122 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fb fc2a 	bl	8002974 <HAL_SPI_RxCpltCallback>
}
 8007120:	e002      	b.n	8007128 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff faca 	bl	80066bc <HAL_SPI_ErrorCallback>
}
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007138:	f7fc f99a 	bl	8003470 <HAL_GetTick>
 800713c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800714c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	2164      	movs	r1, #100	@ 0x64
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff ff04 	bl	8006f60 <SPI_EndRxTxTransaction>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007162:	f043 0220 	orr.w	r2, r3, #32
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007172:	2300      	movs	r3, #0
 8007174:	60bb      	str	r3, [r7, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	60bb      	str	r3, [r7, #8]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	60bb      	str	r3, [r7, #8]
 8007186:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff fa8f 	bl	80066bc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800719e:	e002      	b.n	80071a6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7fb fbfb 	bl	800299c <HAL_SPI_TxCpltCallback>
}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e040      	b.n	8007242 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f83a 	bl	800724a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2224      	movs	r2, #36	@ 0x24
 80071da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0201 	bic.w	r2, r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fb73 	bl	80078e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f8b8 	bl	8007370 <UART_SetConfig>
 8007200:	4603      	mov	r3, r0
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e01b      	b.n	8007242 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007218:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007228:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0201 	orr.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fbf2 	bl	8007a24 <UART_CheckIdleState>
 8007240:	4603      	mov	r3, r0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b08a      	sub	sp, #40	@ 0x28
 8007262:	af02      	add	r7, sp, #8
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	603b      	str	r3, [r7, #0]
 800726a:	4613      	mov	r3, r2
 800726c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007272:	2b20      	cmp	r3, #32
 8007274:	d177      	bne.n	8007366 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_UART_Transmit+0x24>
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e070      	b.n	8007368 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2221      	movs	r2, #33	@ 0x21
 8007292:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007294:	f7fc f8ec 	bl	8003470 <HAL_GetTick>
 8007298:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	88fa      	ldrh	r2, [r7, #6]
 800729e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	88fa      	ldrh	r2, [r7, #6]
 80072a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072b2:	d108      	bne.n	80072c6 <HAL_UART_Transmit+0x68>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	61bb      	str	r3, [r7, #24]
 80072c4:	e003      	b.n	80072ce <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072ce:	e02f      	b.n	8007330 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2200      	movs	r2, #0
 80072d8:	2180      	movs	r1, #128	@ 0x80
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fc4a 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e03b      	b.n	8007368 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10b      	bne.n	800730e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	881a      	ldrh	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007302:	b292      	uxth	r2, r2
 8007304:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	3302      	adds	r3, #2
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	e007      	b.n	800731e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	781a      	ldrb	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	3301      	adds	r3, #1
 800731c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1c9      	bne.n	80072d0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2200      	movs	r2, #0
 8007344:	2140      	movs	r1, #64	@ 0x40
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fc14 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e005      	b.n	8007368 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007366:	2302      	movs	r3, #2
  }
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007374:	b08a      	sub	sp, #40	@ 0x28
 8007376:	af00      	add	r7, sp, #0
 8007378:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	431a      	orrs	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	431a      	orrs	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	4313      	orrs	r3, r2
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4ba4      	ldr	r3, [pc, #656]	@ (8007630 <UART_SetConfig+0x2c0>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	6812      	ldr	r2, [r2, #0]
 80073a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073a8:	430b      	orrs	r3, r1
 80073aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a99      	ldr	r2, [pc, #612]	@ (8007634 <UART_SetConfig+0x2c4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d8:	4313      	orrs	r3, r2
 80073da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ec:	430a      	orrs	r2, r1
 80073ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a90      	ldr	r2, [pc, #576]	@ (8007638 <UART_SetConfig+0x2c8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d126      	bne.n	8007448 <UART_SetConfig+0xd8>
 80073fa:	4b90      	ldr	r3, [pc, #576]	@ (800763c <UART_SetConfig+0x2cc>)
 80073fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	2b03      	cmp	r3, #3
 8007406:	d81b      	bhi.n	8007440 <UART_SetConfig+0xd0>
 8007408:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <UART_SetConfig+0xa0>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007421 	.word	0x08007421
 8007414:	08007431 	.word	0x08007431
 8007418:	08007429 	.word	0x08007429
 800741c:	08007439 	.word	0x08007439
 8007420:	2301      	movs	r3, #1
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007426:	e116      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007428:	2302      	movs	r3, #2
 800742a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800742e:	e112      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007430:	2304      	movs	r3, #4
 8007432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007436:	e10e      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007438:	2308      	movs	r3, #8
 800743a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800743e:	e10a      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007440:	2310      	movs	r3, #16
 8007442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007446:	e106      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a7c      	ldr	r2, [pc, #496]	@ (8007640 <UART_SetConfig+0x2d0>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d138      	bne.n	80074c4 <UART_SetConfig+0x154>
 8007452:	4b7a      	ldr	r3, [pc, #488]	@ (800763c <UART_SetConfig+0x2cc>)
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007458:	f003 030c 	and.w	r3, r3, #12
 800745c:	2b0c      	cmp	r3, #12
 800745e:	d82d      	bhi.n	80074bc <UART_SetConfig+0x14c>
 8007460:	a201      	add	r2, pc, #4	@ (adr r2, 8007468 <UART_SetConfig+0xf8>)
 8007462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007466:	bf00      	nop
 8007468:	0800749d 	.word	0x0800749d
 800746c:	080074bd 	.word	0x080074bd
 8007470:	080074bd 	.word	0x080074bd
 8007474:	080074bd 	.word	0x080074bd
 8007478:	080074ad 	.word	0x080074ad
 800747c:	080074bd 	.word	0x080074bd
 8007480:	080074bd 	.word	0x080074bd
 8007484:	080074bd 	.word	0x080074bd
 8007488:	080074a5 	.word	0x080074a5
 800748c:	080074bd 	.word	0x080074bd
 8007490:	080074bd 	.word	0x080074bd
 8007494:	080074bd 	.word	0x080074bd
 8007498:	080074b5 	.word	0x080074b5
 800749c:	2300      	movs	r3, #0
 800749e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a2:	e0d8      	b.n	8007656 <UART_SetConfig+0x2e6>
 80074a4:	2302      	movs	r3, #2
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074aa:	e0d4      	b.n	8007656 <UART_SetConfig+0x2e6>
 80074ac:	2304      	movs	r3, #4
 80074ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074b2:	e0d0      	b.n	8007656 <UART_SetConfig+0x2e6>
 80074b4:	2308      	movs	r3, #8
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074ba:	e0cc      	b.n	8007656 <UART_SetConfig+0x2e6>
 80074bc:	2310      	movs	r3, #16
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074c2:	e0c8      	b.n	8007656 <UART_SetConfig+0x2e6>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a5e      	ldr	r2, [pc, #376]	@ (8007644 <UART_SetConfig+0x2d4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d125      	bne.n	800751a <UART_SetConfig+0x1aa>
 80074ce:	4b5b      	ldr	r3, [pc, #364]	@ (800763c <UART_SetConfig+0x2cc>)
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074d8:	2b30      	cmp	r3, #48	@ 0x30
 80074da:	d016      	beq.n	800750a <UART_SetConfig+0x19a>
 80074dc:	2b30      	cmp	r3, #48	@ 0x30
 80074de:	d818      	bhi.n	8007512 <UART_SetConfig+0x1a2>
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d00a      	beq.n	80074fa <UART_SetConfig+0x18a>
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d814      	bhi.n	8007512 <UART_SetConfig+0x1a2>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <UART_SetConfig+0x182>
 80074ec:	2b10      	cmp	r3, #16
 80074ee:	d008      	beq.n	8007502 <UART_SetConfig+0x192>
 80074f0:	e00f      	b.n	8007512 <UART_SetConfig+0x1a2>
 80074f2:	2300      	movs	r3, #0
 80074f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f8:	e0ad      	b.n	8007656 <UART_SetConfig+0x2e6>
 80074fa:	2302      	movs	r3, #2
 80074fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007500:	e0a9      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007502:	2304      	movs	r3, #4
 8007504:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007508:	e0a5      	b.n	8007656 <UART_SetConfig+0x2e6>
 800750a:	2308      	movs	r3, #8
 800750c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007510:	e0a1      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007512:	2310      	movs	r3, #16
 8007514:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007518:	e09d      	b.n	8007656 <UART_SetConfig+0x2e6>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a4a      	ldr	r2, [pc, #296]	@ (8007648 <UART_SetConfig+0x2d8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d125      	bne.n	8007570 <UART_SetConfig+0x200>
 8007524:	4b45      	ldr	r3, [pc, #276]	@ (800763c <UART_SetConfig+0x2cc>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800752a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800752e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007530:	d016      	beq.n	8007560 <UART_SetConfig+0x1f0>
 8007532:	2bc0      	cmp	r3, #192	@ 0xc0
 8007534:	d818      	bhi.n	8007568 <UART_SetConfig+0x1f8>
 8007536:	2b80      	cmp	r3, #128	@ 0x80
 8007538:	d00a      	beq.n	8007550 <UART_SetConfig+0x1e0>
 800753a:	2b80      	cmp	r3, #128	@ 0x80
 800753c:	d814      	bhi.n	8007568 <UART_SetConfig+0x1f8>
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <UART_SetConfig+0x1d8>
 8007542:	2b40      	cmp	r3, #64	@ 0x40
 8007544:	d008      	beq.n	8007558 <UART_SetConfig+0x1e8>
 8007546:	e00f      	b.n	8007568 <UART_SetConfig+0x1f8>
 8007548:	2300      	movs	r3, #0
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800754e:	e082      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007550:	2302      	movs	r3, #2
 8007552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007556:	e07e      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007558:	2304      	movs	r3, #4
 800755a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800755e:	e07a      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007560:	2308      	movs	r3, #8
 8007562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007566:	e076      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007568:	2310      	movs	r3, #16
 800756a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800756e:	e072      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a35      	ldr	r2, [pc, #212]	@ (800764c <UART_SetConfig+0x2dc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d12a      	bne.n	80075d0 <UART_SetConfig+0x260>
 800757a:	4b30      	ldr	r3, [pc, #192]	@ (800763c <UART_SetConfig+0x2cc>)
 800757c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007580:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007588:	d01a      	beq.n	80075c0 <UART_SetConfig+0x250>
 800758a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800758e:	d81b      	bhi.n	80075c8 <UART_SetConfig+0x258>
 8007590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007594:	d00c      	beq.n	80075b0 <UART_SetConfig+0x240>
 8007596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800759a:	d815      	bhi.n	80075c8 <UART_SetConfig+0x258>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <UART_SetConfig+0x238>
 80075a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075a4:	d008      	beq.n	80075b8 <UART_SetConfig+0x248>
 80075a6:	e00f      	b.n	80075c8 <UART_SetConfig+0x258>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ae:	e052      	b.n	8007656 <UART_SetConfig+0x2e6>
 80075b0:	2302      	movs	r3, #2
 80075b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b6:	e04e      	b.n	8007656 <UART_SetConfig+0x2e6>
 80075b8:	2304      	movs	r3, #4
 80075ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075be:	e04a      	b.n	8007656 <UART_SetConfig+0x2e6>
 80075c0:	2308      	movs	r3, #8
 80075c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c6:	e046      	b.n	8007656 <UART_SetConfig+0x2e6>
 80075c8:	2310      	movs	r3, #16
 80075ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ce:	e042      	b.n	8007656 <UART_SetConfig+0x2e6>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a17      	ldr	r2, [pc, #92]	@ (8007634 <UART_SetConfig+0x2c4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d13a      	bne.n	8007650 <UART_SetConfig+0x2e0>
 80075da:	4b18      	ldr	r3, [pc, #96]	@ (800763c <UART_SetConfig+0x2cc>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075e8:	d01a      	beq.n	8007620 <UART_SetConfig+0x2b0>
 80075ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075ee:	d81b      	bhi.n	8007628 <UART_SetConfig+0x2b8>
 80075f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f4:	d00c      	beq.n	8007610 <UART_SetConfig+0x2a0>
 80075f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075fa:	d815      	bhi.n	8007628 <UART_SetConfig+0x2b8>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d003      	beq.n	8007608 <UART_SetConfig+0x298>
 8007600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007604:	d008      	beq.n	8007618 <UART_SetConfig+0x2a8>
 8007606:	e00f      	b.n	8007628 <UART_SetConfig+0x2b8>
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800760e:	e022      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007610:	2302      	movs	r3, #2
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007616:	e01e      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800761e:	e01a      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007626:	e016      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762e:	e012      	b.n	8007656 <UART_SetConfig+0x2e6>
 8007630:	efff69f3 	.word	0xefff69f3
 8007634:	40008000 	.word	0x40008000
 8007638:	40013800 	.word	0x40013800
 800763c:	40021000 	.word	0x40021000
 8007640:	40004400 	.word	0x40004400
 8007644:	40004800 	.word	0x40004800
 8007648:	40004c00 	.word	0x40004c00
 800764c:	40005000 	.word	0x40005000
 8007650:	2310      	movs	r3, #16
 8007652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a9f      	ldr	r2, [pc, #636]	@ (80078d8 <UART_SetConfig+0x568>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d17a      	bne.n	8007756 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007660:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007664:	2b08      	cmp	r3, #8
 8007666:	d824      	bhi.n	80076b2 <UART_SetConfig+0x342>
 8007668:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <UART_SetConfig+0x300>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	08007695 	.word	0x08007695
 8007674:	080076b3 	.word	0x080076b3
 8007678:	0800769d 	.word	0x0800769d
 800767c:	080076b3 	.word	0x080076b3
 8007680:	080076a3 	.word	0x080076a3
 8007684:	080076b3 	.word	0x080076b3
 8007688:	080076b3 	.word	0x080076b3
 800768c:	080076b3 	.word	0x080076b3
 8007690:	080076ab 	.word	0x080076ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007694:	f7fd fdfc 	bl	8005290 <HAL_RCC_GetPCLK1Freq>
 8007698:	61f8      	str	r0, [r7, #28]
        break;
 800769a:	e010      	b.n	80076be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800769c:	4b8f      	ldr	r3, [pc, #572]	@ (80078dc <UART_SetConfig+0x56c>)
 800769e:	61fb      	str	r3, [r7, #28]
        break;
 80076a0:	e00d      	b.n	80076be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076a2:	f7fd fd5d 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 80076a6:	61f8      	str	r0, [r7, #28]
        break;
 80076a8:	e009      	b.n	80076be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ae:	61fb      	str	r3, [r7, #28]
        break;
 80076b0:	e005      	b.n	80076be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80fb 	beq.w	80078bc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	4613      	mov	r3, r2
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4413      	add	r3, r2
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d305      	bcc.n	80076e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d903      	bls.n	80076ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076e8:	e0e8      	b.n	80078bc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	2200      	movs	r2, #0
 80076ee:	461c      	mov	r4, r3
 80076f0:	4615      	mov	r5, r2
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	f04f 0300 	mov.w	r3, #0
 80076fa:	022b      	lsls	r3, r5, #8
 80076fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007700:	0222      	lsls	r2, r4, #8
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	6849      	ldr	r1, [r1, #4]
 8007706:	0849      	lsrs	r1, r1, #1
 8007708:	2000      	movs	r0, #0
 800770a:	4688      	mov	r8, r1
 800770c:	4681      	mov	r9, r0
 800770e:	eb12 0a08 	adds.w	sl, r2, r8
 8007712:	eb43 0b09 	adc.w	fp, r3, r9
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	603b      	str	r3, [r7, #0]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007724:	4650      	mov	r0, sl
 8007726:	4659      	mov	r1, fp
 8007728:	f7f9 faae 	bl	8000c88 <__aeabi_uldivmod>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4613      	mov	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800773a:	d308      	bcc.n	800774e <UART_SetConfig+0x3de>
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007742:	d204      	bcs.n	800774e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	60da      	str	r2, [r3, #12]
 800774c:	e0b6      	b.n	80078bc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007754:	e0b2      	b.n	80078bc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800775e:	d15e      	bne.n	800781e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007760:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007764:	2b08      	cmp	r3, #8
 8007766:	d828      	bhi.n	80077ba <UART_SetConfig+0x44a>
 8007768:	a201      	add	r2, pc, #4	@ (adr r2, 8007770 <UART_SetConfig+0x400>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	08007795 	.word	0x08007795
 8007774:	0800779d 	.word	0x0800779d
 8007778:	080077a5 	.word	0x080077a5
 800777c:	080077bb 	.word	0x080077bb
 8007780:	080077ab 	.word	0x080077ab
 8007784:	080077bb 	.word	0x080077bb
 8007788:	080077bb 	.word	0x080077bb
 800778c:	080077bb 	.word	0x080077bb
 8007790:	080077b3 	.word	0x080077b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007794:	f7fd fd7c 	bl	8005290 <HAL_RCC_GetPCLK1Freq>
 8007798:	61f8      	str	r0, [r7, #28]
        break;
 800779a:	e014      	b.n	80077c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800779c:	f7fd fd8e 	bl	80052bc <HAL_RCC_GetPCLK2Freq>
 80077a0:	61f8      	str	r0, [r7, #28]
        break;
 80077a2:	e010      	b.n	80077c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077a4:	4b4d      	ldr	r3, [pc, #308]	@ (80078dc <UART_SetConfig+0x56c>)
 80077a6:	61fb      	str	r3, [r7, #28]
        break;
 80077a8:	e00d      	b.n	80077c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077aa:	f7fd fcd9 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 80077ae:	61f8      	str	r0, [r7, #28]
        break;
 80077b0:	e009      	b.n	80077c6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077b6:	61fb      	str	r3, [r7, #28]
        break;
 80077b8:	e005      	b.n	80077c6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d077      	beq.n	80078bc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	005a      	lsls	r2, r3, #1
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	085b      	lsrs	r3, r3, #1
 80077d6:	441a      	add	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b0f      	cmp	r3, #15
 80077e6:	d916      	bls.n	8007816 <UART_SetConfig+0x4a6>
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077ee:	d212      	bcs.n	8007816 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f023 030f 	bic.w	r3, r3, #15
 80077f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	085b      	lsrs	r3, r3, #1
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f003 0307 	and.w	r3, r3, #7
 8007804:	b29a      	uxth	r2, r3
 8007806:	8afb      	ldrh	r3, [r7, #22]
 8007808:	4313      	orrs	r3, r2
 800780a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	8afa      	ldrh	r2, [r7, #22]
 8007812:	60da      	str	r2, [r3, #12]
 8007814:	e052      	b.n	80078bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800781c:	e04e      	b.n	80078bc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800781e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007822:	2b08      	cmp	r3, #8
 8007824:	d827      	bhi.n	8007876 <UART_SetConfig+0x506>
 8007826:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <UART_SetConfig+0x4bc>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	08007851 	.word	0x08007851
 8007830:	08007859 	.word	0x08007859
 8007834:	08007861 	.word	0x08007861
 8007838:	08007877 	.word	0x08007877
 800783c:	08007867 	.word	0x08007867
 8007840:	08007877 	.word	0x08007877
 8007844:	08007877 	.word	0x08007877
 8007848:	08007877 	.word	0x08007877
 800784c:	0800786f 	.word	0x0800786f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007850:	f7fd fd1e 	bl	8005290 <HAL_RCC_GetPCLK1Freq>
 8007854:	61f8      	str	r0, [r7, #28]
        break;
 8007856:	e014      	b.n	8007882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007858:	f7fd fd30 	bl	80052bc <HAL_RCC_GetPCLK2Freq>
 800785c:	61f8      	str	r0, [r7, #28]
        break;
 800785e:	e010      	b.n	8007882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007860:	4b1e      	ldr	r3, [pc, #120]	@ (80078dc <UART_SetConfig+0x56c>)
 8007862:	61fb      	str	r3, [r7, #28]
        break;
 8007864:	e00d      	b.n	8007882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007866:	f7fd fc7b 	bl	8005160 <HAL_RCC_GetSysClockFreq>
 800786a:	61f8      	str	r0, [r7, #28]
        break;
 800786c:	e009      	b.n	8007882 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800786e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007872:	61fb      	str	r3, [r7, #28]
        break;
 8007874:	e005      	b.n	8007882 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007880:	bf00      	nop
    }

    if (pclk != 0U)
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d019      	beq.n	80078bc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	085a      	lsrs	r2, r3, #1
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	fbb2 f3f3 	udiv	r3, r2, r3
 800789a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	2b0f      	cmp	r3, #15
 80078a0:	d909      	bls.n	80078b6 <UART_SetConfig+0x546>
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a8:	d205      	bcs.n	80078b6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60da      	str	r2, [r3, #12]
 80078b4:	e002      	b.n	80078bc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80078c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3728      	adds	r7, #40	@ 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078d6:	bf00      	nop
 80078d8:	40008000 	.word	0x40008000
 80078dc:	00f42400 	.word	0x00f42400

080078e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01a      	beq.n	80079f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079de:	d10a      	bne.n	80079f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00a      	beq.n	8007a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	605a      	str	r2, [r3, #4]
  }
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b098      	sub	sp, #96	@ 0x60
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a34:	f7fb fd1c 	bl	8003470 <HAL_GetTick>
 8007a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d12e      	bne.n	8007aa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a50:	2200      	movs	r2, #0
 8007a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f88c 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d021      	beq.n	8007aa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e6      	bne.n	8007a62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e062      	b.n	8007b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d149      	bne.n	8007b48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ab4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007abc:	2200      	movs	r2, #0
 8007abe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f856 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d03c      	beq.n	8007b48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	623b      	str	r3, [r7, #32]
   return(result);
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8007aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e6      	bne.n	8007ace <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0301 	bic.w	r3, r3, #1
 8007b16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b20:	61fa      	str	r2, [r7, #28]
 8007b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	69b9      	ldr	r1, [r7, #24]
 8007b26:	69fa      	ldr	r2, [r7, #28]
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e5      	bne.n	8007b00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e011      	b.n	8007b6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3758      	adds	r7, #88	@ 0x58
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	4613      	mov	r3, r2
 8007b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b84:	e04f      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8c:	d04b      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8e:	f7fb fc6f 	bl	8003470 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d302      	bcc.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e04e      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d037      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2b80      	cmp	r3, #128	@ 0x80
 8007bba:	d034      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b40      	cmp	r3, #64	@ 0x40
 8007bc0:	d031      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d110      	bne.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f838 	bl	8007c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2208      	movs	r2, #8
 8007be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e029      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c00:	d111      	bne.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f81e 	bl	8007c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e00f      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69da      	ldr	r2, [r3, #28]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	bf0c      	ite	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	2300      	movne	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d0a0      	beq.n	8007b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b095      	sub	sp, #84	@ 0x54
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e6      	bne.n	8007c56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f023 0301 	bic.w	r3, r3, #1
 8007c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d118      	bne.n	8007cf6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f023 0310 	bic.w	r3, r3, #16
 8007cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ce2:	61bb      	str	r3, [r7, #24]
 8007ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6979      	ldr	r1, [r7, #20]
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d0a:	bf00      	nop
 8007d0c:	3754      	adds	r7, #84	@ 0x54
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <__cvt>:
 8007d16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1a:	ec57 6b10 	vmov	r6, r7, d0
 8007d1e:	2f00      	cmp	r7, #0
 8007d20:	460c      	mov	r4, r1
 8007d22:	4619      	mov	r1, r3
 8007d24:	463b      	mov	r3, r7
 8007d26:	bfbb      	ittet	lt
 8007d28:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007d2c:	461f      	movlt	r7, r3
 8007d2e:	2300      	movge	r3, #0
 8007d30:	232d      	movlt	r3, #45	@ 0x2d
 8007d32:	700b      	strb	r3, [r1, #0]
 8007d34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d36:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007d3a:	4691      	mov	r9, r2
 8007d3c:	f023 0820 	bic.w	r8, r3, #32
 8007d40:	bfbc      	itt	lt
 8007d42:	4632      	movlt	r2, r6
 8007d44:	4616      	movlt	r6, r2
 8007d46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d4a:	d005      	beq.n	8007d58 <__cvt+0x42>
 8007d4c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007d50:	d100      	bne.n	8007d54 <__cvt+0x3e>
 8007d52:	3401      	adds	r4, #1
 8007d54:	2102      	movs	r1, #2
 8007d56:	e000      	b.n	8007d5a <__cvt+0x44>
 8007d58:	2103      	movs	r1, #3
 8007d5a:	ab03      	add	r3, sp, #12
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	ab02      	add	r3, sp, #8
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	ec47 6b10 	vmov	d0, r6, r7
 8007d66:	4653      	mov	r3, sl
 8007d68:	4622      	mov	r2, r4
 8007d6a:	f001 fa3d 	bl	80091e8 <_dtoa_r>
 8007d6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007d72:	4605      	mov	r5, r0
 8007d74:	d119      	bne.n	8007daa <__cvt+0x94>
 8007d76:	f019 0f01 	tst.w	r9, #1
 8007d7a:	d00e      	beq.n	8007d9a <__cvt+0x84>
 8007d7c:	eb00 0904 	add.w	r9, r0, r4
 8007d80:	2200      	movs	r2, #0
 8007d82:	2300      	movs	r3, #0
 8007d84:	4630      	mov	r0, r6
 8007d86:	4639      	mov	r1, r7
 8007d88:	f7f8 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d8c:	b108      	cbz	r0, 8007d92 <__cvt+0x7c>
 8007d8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d92:	2230      	movs	r2, #48	@ 0x30
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	454b      	cmp	r3, r9
 8007d98:	d31e      	bcc.n	8007dd8 <__cvt+0xc2>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d9e:	1b5b      	subs	r3, r3, r5
 8007da0:	4628      	mov	r0, r5
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	b004      	add	sp, #16
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007dae:	eb00 0904 	add.w	r9, r0, r4
 8007db2:	d1e5      	bne.n	8007d80 <__cvt+0x6a>
 8007db4:	7803      	ldrb	r3, [r0, #0]
 8007db6:	2b30      	cmp	r3, #48	@ 0x30
 8007db8:	d10a      	bne.n	8007dd0 <__cvt+0xba>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	f7f8 fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dc6:	b918      	cbnz	r0, 8007dd0 <__cvt+0xba>
 8007dc8:	f1c4 0401 	rsb	r4, r4, #1
 8007dcc:	f8ca 4000 	str.w	r4, [sl]
 8007dd0:	f8da 3000 	ldr.w	r3, [sl]
 8007dd4:	4499      	add	r9, r3
 8007dd6:	e7d3      	b.n	8007d80 <__cvt+0x6a>
 8007dd8:	1c59      	adds	r1, r3, #1
 8007dda:	9103      	str	r1, [sp, #12]
 8007ddc:	701a      	strb	r2, [r3, #0]
 8007dde:	e7d9      	b.n	8007d94 <__cvt+0x7e>

08007de0 <__exponent>:
 8007de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007de2:	2900      	cmp	r1, #0
 8007de4:	bfba      	itte	lt
 8007de6:	4249      	neglt	r1, r1
 8007de8:	232d      	movlt	r3, #45	@ 0x2d
 8007dea:	232b      	movge	r3, #43	@ 0x2b
 8007dec:	2909      	cmp	r1, #9
 8007dee:	7002      	strb	r2, [r0, #0]
 8007df0:	7043      	strb	r3, [r0, #1]
 8007df2:	dd29      	ble.n	8007e48 <__exponent+0x68>
 8007df4:	f10d 0307 	add.w	r3, sp, #7
 8007df8:	461d      	mov	r5, r3
 8007dfa:	270a      	movs	r7, #10
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e02:	fb07 1416 	mls	r4, r7, r6, r1
 8007e06:	3430      	adds	r4, #48	@ 0x30
 8007e08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	2c63      	cmp	r4, #99	@ 0x63
 8007e10:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e14:	4631      	mov	r1, r6
 8007e16:	dcf1      	bgt.n	8007dfc <__exponent+0x1c>
 8007e18:	3130      	adds	r1, #48	@ 0x30
 8007e1a:	1e94      	subs	r4, r2, #2
 8007e1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e20:	1c41      	adds	r1, r0, #1
 8007e22:	4623      	mov	r3, r4
 8007e24:	42ab      	cmp	r3, r5
 8007e26:	d30a      	bcc.n	8007e3e <__exponent+0x5e>
 8007e28:	f10d 0309 	add.w	r3, sp, #9
 8007e2c:	1a9b      	subs	r3, r3, r2
 8007e2e:	42ac      	cmp	r4, r5
 8007e30:	bf88      	it	hi
 8007e32:	2300      	movhi	r3, #0
 8007e34:	3302      	adds	r3, #2
 8007e36:	4403      	add	r3, r0
 8007e38:	1a18      	subs	r0, r3, r0
 8007e3a:	b003      	add	sp, #12
 8007e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e46:	e7ed      	b.n	8007e24 <__exponent+0x44>
 8007e48:	2330      	movs	r3, #48	@ 0x30
 8007e4a:	3130      	adds	r1, #48	@ 0x30
 8007e4c:	7083      	strb	r3, [r0, #2]
 8007e4e:	70c1      	strb	r1, [r0, #3]
 8007e50:	1d03      	adds	r3, r0, #4
 8007e52:	e7f1      	b.n	8007e38 <__exponent+0x58>

08007e54 <_printf_float>:
 8007e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e58:	b08d      	sub	sp, #52	@ 0x34
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e60:	4616      	mov	r6, r2
 8007e62:	461f      	mov	r7, r3
 8007e64:	4605      	mov	r5, r0
 8007e66:	f001 f88b 	bl	8008f80 <_localeconv_r>
 8007e6a:	6803      	ldr	r3, [r0, #0]
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7f8 f9fe 	bl	8000270 <strlen>
 8007e74:	2300      	movs	r3, #0
 8007e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e78:	f8d8 3000 	ldr.w	r3, [r8]
 8007e7c:	9005      	str	r0, [sp, #20]
 8007e7e:	3307      	adds	r3, #7
 8007e80:	f023 0307 	bic.w	r3, r3, #7
 8007e84:	f103 0208 	add.w	r2, r3, #8
 8007e88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e8c:	f8d4 b000 	ldr.w	fp, [r4]
 8007e90:	f8c8 2000 	str.w	r2, [r8]
 8007e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007e9c:	9307      	str	r3, [sp, #28]
 8007e9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ea2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007ea6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eaa:	4b9c      	ldr	r3, [pc, #624]	@ (800811c <_printf_float+0x2c8>)
 8007eac:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb0:	f7f8 fe3c 	bl	8000b2c <__aeabi_dcmpun>
 8007eb4:	bb70      	cbnz	r0, 8007f14 <_printf_float+0xc0>
 8007eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eba:	4b98      	ldr	r3, [pc, #608]	@ (800811c <_printf_float+0x2c8>)
 8007ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec0:	f7f8 fe16 	bl	8000af0 <__aeabi_dcmple>
 8007ec4:	bb30      	cbnz	r0, 8007f14 <_printf_float+0xc0>
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	2300      	movs	r3, #0
 8007eca:	4640      	mov	r0, r8
 8007ecc:	4649      	mov	r1, r9
 8007ece:	f7f8 fe05 	bl	8000adc <__aeabi_dcmplt>
 8007ed2:	b110      	cbz	r0, 8007eda <_printf_float+0x86>
 8007ed4:	232d      	movs	r3, #45	@ 0x2d
 8007ed6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eda:	4a91      	ldr	r2, [pc, #580]	@ (8008120 <_printf_float+0x2cc>)
 8007edc:	4b91      	ldr	r3, [pc, #580]	@ (8008124 <_printf_float+0x2d0>)
 8007ede:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ee2:	bf94      	ite	ls
 8007ee4:	4690      	movls	r8, r2
 8007ee6:	4698      	movhi	r8, r3
 8007ee8:	2303      	movs	r3, #3
 8007eea:	6123      	str	r3, [r4, #16]
 8007eec:	f02b 0304 	bic.w	r3, fp, #4
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	f04f 0900 	mov.w	r9, #0
 8007ef6:	9700      	str	r7, [sp, #0]
 8007ef8:	4633      	mov	r3, r6
 8007efa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007efc:	4621      	mov	r1, r4
 8007efe:	4628      	mov	r0, r5
 8007f00:	f000 f9d2 	bl	80082a8 <_printf_common>
 8007f04:	3001      	adds	r0, #1
 8007f06:	f040 808d 	bne.w	8008024 <_printf_float+0x1d0>
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0e:	b00d      	add	sp, #52	@ 0x34
 8007f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	4642      	mov	r2, r8
 8007f16:	464b      	mov	r3, r9
 8007f18:	4640      	mov	r0, r8
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	f7f8 fe06 	bl	8000b2c <__aeabi_dcmpun>
 8007f20:	b140      	cbz	r0, 8007f34 <_printf_float+0xe0>
 8007f22:	464b      	mov	r3, r9
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	bfbc      	itt	lt
 8007f28:	232d      	movlt	r3, #45	@ 0x2d
 8007f2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8008128 <_printf_float+0x2d4>)
 8007f30:	4b7e      	ldr	r3, [pc, #504]	@ (800812c <_printf_float+0x2d8>)
 8007f32:	e7d4      	b.n	8007ede <_printf_float+0x8a>
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007f3a:	9206      	str	r2, [sp, #24]
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	d13b      	bne.n	8007fb8 <_printf_float+0x164>
 8007f40:	2306      	movs	r3, #6
 8007f42:	6063      	str	r3, [r4, #4]
 8007f44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007f48:	2300      	movs	r3, #0
 8007f4a:	6022      	str	r2, [r4, #0]
 8007f4c:	9303      	str	r3, [sp, #12]
 8007f4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007f54:	ab09      	add	r3, sp, #36	@ 0x24
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	6861      	ldr	r1, [r4, #4]
 8007f5a:	ec49 8b10 	vmov	d0, r8, r9
 8007f5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007f62:	4628      	mov	r0, r5
 8007f64:	f7ff fed7 	bl	8007d16 <__cvt>
 8007f68:	9b06      	ldr	r3, [sp, #24]
 8007f6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f6c:	2b47      	cmp	r3, #71	@ 0x47
 8007f6e:	4680      	mov	r8, r0
 8007f70:	d129      	bne.n	8007fc6 <_printf_float+0x172>
 8007f72:	1cc8      	adds	r0, r1, #3
 8007f74:	db02      	blt.n	8007f7c <_printf_float+0x128>
 8007f76:	6863      	ldr	r3, [r4, #4]
 8007f78:	4299      	cmp	r1, r3
 8007f7a:	dd41      	ble.n	8008000 <_printf_float+0x1ac>
 8007f7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007f80:	fa5f fa8a 	uxtb.w	sl, sl
 8007f84:	3901      	subs	r1, #1
 8007f86:	4652      	mov	r2, sl
 8007f88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007f8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f8e:	f7ff ff27 	bl	8007de0 <__exponent>
 8007f92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f94:	1813      	adds	r3, r2, r0
 8007f96:	2a01      	cmp	r2, #1
 8007f98:	4681      	mov	r9, r0
 8007f9a:	6123      	str	r3, [r4, #16]
 8007f9c:	dc02      	bgt.n	8007fa4 <_printf_float+0x150>
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	07d2      	lsls	r2, r2, #31
 8007fa2:	d501      	bpl.n	8007fa8 <_printf_float+0x154>
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	6123      	str	r3, [r4, #16]
 8007fa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0a2      	beq.n	8007ef6 <_printf_float+0xa2>
 8007fb0:	232d      	movs	r3, #45	@ 0x2d
 8007fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fb6:	e79e      	b.n	8007ef6 <_printf_float+0xa2>
 8007fb8:	9a06      	ldr	r2, [sp, #24]
 8007fba:	2a47      	cmp	r2, #71	@ 0x47
 8007fbc:	d1c2      	bne.n	8007f44 <_printf_float+0xf0>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1c0      	bne.n	8007f44 <_printf_float+0xf0>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e7bd      	b.n	8007f42 <_printf_float+0xee>
 8007fc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007fca:	d9db      	bls.n	8007f84 <_printf_float+0x130>
 8007fcc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007fd0:	d118      	bne.n	8008004 <_printf_float+0x1b0>
 8007fd2:	2900      	cmp	r1, #0
 8007fd4:	6863      	ldr	r3, [r4, #4]
 8007fd6:	dd0b      	ble.n	8007ff0 <_printf_float+0x19c>
 8007fd8:	6121      	str	r1, [r4, #16]
 8007fda:	b913      	cbnz	r3, 8007fe2 <_printf_float+0x18e>
 8007fdc:	6822      	ldr	r2, [r4, #0]
 8007fde:	07d0      	lsls	r0, r2, #31
 8007fe0:	d502      	bpl.n	8007fe8 <_printf_float+0x194>
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	440b      	add	r3, r1
 8007fe6:	6123      	str	r3, [r4, #16]
 8007fe8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007fea:	f04f 0900 	mov.w	r9, #0
 8007fee:	e7db      	b.n	8007fa8 <_printf_float+0x154>
 8007ff0:	b913      	cbnz	r3, 8007ff8 <_printf_float+0x1a4>
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	07d2      	lsls	r2, r2, #31
 8007ff6:	d501      	bpl.n	8007ffc <_printf_float+0x1a8>
 8007ff8:	3302      	adds	r3, #2
 8007ffa:	e7f4      	b.n	8007fe6 <_printf_float+0x192>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e7f2      	b.n	8007fe6 <_printf_float+0x192>
 8008000:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008006:	4299      	cmp	r1, r3
 8008008:	db05      	blt.n	8008016 <_printf_float+0x1c2>
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	6121      	str	r1, [r4, #16]
 800800e:	07d8      	lsls	r0, r3, #31
 8008010:	d5ea      	bpl.n	8007fe8 <_printf_float+0x194>
 8008012:	1c4b      	adds	r3, r1, #1
 8008014:	e7e7      	b.n	8007fe6 <_printf_float+0x192>
 8008016:	2900      	cmp	r1, #0
 8008018:	bfd4      	ite	le
 800801a:	f1c1 0202 	rsble	r2, r1, #2
 800801e:	2201      	movgt	r2, #1
 8008020:	4413      	add	r3, r2
 8008022:	e7e0      	b.n	8007fe6 <_printf_float+0x192>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	055a      	lsls	r2, r3, #21
 8008028:	d407      	bmi.n	800803a <_printf_float+0x1e6>
 800802a:	6923      	ldr	r3, [r4, #16]
 800802c:	4642      	mov	r2, r8
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	d12b      	bne.n	8008090 <_printf_float+0x23c>
 8008038:	e767      	b.n	8007f0a <_printf_float+0xb6>
 800803a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800803e:	f240 80dd 	bls.w	80081fc <_printf_float+0x3a8>
 8008042:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008046:	2200      	movs	r2, #0
 8008048:	2300      	movs	r3, #0
 800804a:	f7f8 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800804e:	2800      	cmp	r0, #0
 8008050:	d033      	beq.n	80080ba <_printf_float+0x266>
 8008052:	4a37      	ldr	r2, [pc, #220]	@ (8008130 <_printf_float+0x2dc>)
 8008054:	2301      	movs	r3, #1
 8008056:	4631      	mov	r1, r6
 8008058:	4628      	mov	r0, r5
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	f43f af54 	beq.w	8007f0a <_printf_float+0xb6>
 8008062:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008066:	4543      	cmp	r3, r8
 8008068:	db02      	blt.n	8008070 <_printf_float+0x21c>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	07d8      	lsls	r0, r3, #31
 800806e:	d50f      	bpl.n	8008090 <_printf_float+0x23c>
 8008070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008074:	4631      	mov	r1, r6
 8008076:	4628      	mov	r0, r5
 8008078:	47b8      	blx	r7
 800807a:	3001      	adds	r0, #1
 800807c:	f43f af45 	beq.w	8007f0a <_printf_float+0xb6>
 8008080:	f04f 0900 	mov.w	r9, #0
 8008084:	f108 38ff 	add.w	r8, r8, #4294967295
 8008088:	f104 0a1a 	add.w	sl, r4, #26
 800808c:	45c8      	cmp	r8, r9
 800808e:	dc09      	bgt.n	80080a4 <_printf_float+0x250>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	079b      	lsls	r3, r3, #30
 8008094:	f100 8103 	bmi.w	800829e <_printf_float+0x44a>
 8008098:	68e0      	ldr	r0, [r4, #12]
 800809a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800809c:	4298      	cmp	r0, r3
 800809e:	bfb8      	it	lt
 80080a0:	4618      	movlt	r0, r3
 80080a2:	e734      	b.n	8007f0e <_printf_float+0xba>
 80080a4:	2301      	movs	r3, #1
 80080a6:	4652      	mov	r2, sl
 80080a8:	4631      	mov	r1, r6
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b8      	blx	r7
 80080ae:	3001      	adds	r0, #1
 80080b0:	f43f af2b 	beq.w	8007f0a <_printf_float+0xb6>
 80080b4:	f109 0901 	add.w	r9, r9, #1
 80080b8:	e7e8      	b.n	800808c <_printf_float+0x238>
 80080ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080bc:	2b00      	cmp	r3, #0
 80080be:	dc39      	bgt.n	8008134 <_printf_float+0x2e0>
 80080c0:	4a1b      	ldr	r2, [pc, #108]	@ (8008130 <_printf_float+0x2dc>)
 80080c2:	2301      	movs	r3, #1
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	f43f af1d 	beq.w	8007f0a <_printf_float+0xb6>
 80080d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80080d4:	ea59 0303 	orrs.w	r3, r9, r3
 80080d8:	d102      	bne.n	80080e0 <_printf_float+0x28c>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	07d9      	lsls	r1, r3, #31
 80080de:	d5d7      	bpl.n	8008090 <_printf_float+0x23c>
 80080e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080e4:	4631      	mov	r1, r6
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	f43f af0d 	beq.w	8007f0a <_printf_float+0xb6>
 80080f0:	f04f 0a00 	mov.w	sl, #0
 80080f4:	f104 0b1a 	add.w	fp, r4, #26
 80080f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080fa:	425b      	negs	r3, r3
 80080fc:	4553      	cmp	r3, sl
 80080fe:	dc01      	bgt.n	8008104 <_printf_float+0x2b0>
 8008100:	464b      	mov	r3, r9
 8008102:	e793      	b.n	800802c <_printf_float+0x1d8>
 8008104:	2301      	movs	r3, #1
 8008106:	465a      	mov	r2, fp
 8008108:	4631      	mov	r1, r6
 800810a:	4628      	mov	r0, r5
 800810c:	47b8      	blx	r7
 800810e:	3001      	adds	r0, #1
 8008110:	f43f aefb 	beq.w	8007f0a <_printf_float+0xb6>
 8008114:	f10a 0a01 	add.w	sl, sl, #1
 8008118:	e7ee      	b.n	80080f8 <_printf_float+0x2a4>
 800811a:	bf00      	nop
 800811c:	7fefffff 	.word	0x7fefffff
 8008120:	0800cea8 	.word	0x0800cea8
 8008124:	0800ceac 	.word	0x0800ceac
 8008128:	0800ceb0 	.word	0x0800ceb0
 800812c:	0800ceb4 	.word	0x0800ceb4
 8008130:	0800ceb8 	.word	0x0800ceb8
 8008134:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008136:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800813a:	4553      	cmp	r3, sl
 800813c:	bfa8      	it	ge
 800813e:	4653      	movge	r3, sl
 8008140:	2b00      	cmp	r3, #0
 8008142:	4699      	mov	r9, r3
 8008144:	dc36      	bgt.n	80081b4 <_printf_float+0x360>
 8008146:	f04f 0b00 	mov.w	fp, #0
 800814a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800814e:	f104 021a 	add.w	r2, r4, #26
 8008152:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008154:	9306      	str	r3, [sp, #24]
 8008156:	eba3 0309 	sub.w	r3, r3, r9
 800815a:	455b      	cmp	r3, fp
 800815c:	dc31      	bgt.n	80081c2 <_printf_float+0x36e>
 800815e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008160:	459a      	cmp	sl, r3
 8008162:	dc3a      	bgt.n	80081da <_printf_float+0x386>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	07da      	lsls	r2, r3, #31
 8008168:	d437      	bmi.n	80081da <_printf_float+0x386>
 800816a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800816c:	ebaa 0903 	sub.w	r9, sl, r3
 8008170:	9b06      	ldr	r3, [sp, #24]
 8008172:	ebaa 0303 	sub.w	r3, sl, r3
 8008176:	4599      	cmp	r9, r3
 8008178:	bfa8      	it	ge
 800817a:	4699      	movge	r9, r3
 800817c:	f1b9 0f00 	cmp.w	r9, #0
 8008180:	dc33      	bgt.n	80081ea <_printf_float+0x396>
 8008182:	f04f 0800 	mov.w	r8, #0
 8008186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800818a:	f104 0b1a 	add.w	fp, r4, #26
 800818e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008190:	ebaa 0303 	sub.w	r3, sl, r3
 8008194:	eba3 0309 	sub.w	r3, r3, r9
 8008198:	4543      	cmp	r3, r8
 800819a:	f77f af79 	ble.w	8008090 <_printf_float+0x23c>
 800819e:	2301      	movs	r3, #1
 80081a0:	465a      	mov	r2, fp
 80081a2:	4631      	mov	r1, r6
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b8      	blx	r7
 80081a8:	3001      	adds	r0, #1
 80081aa:	f43f aeae 	beq.w	8007f0a <_printf_float+0xb6>
 80081ae:	f108 0801 	add.w	r8, r8, #1
 80081b2:	e7ec      	b.n	800818e <_printf_float+0x33a>
 80081b4:	4642      	mov	r2, r8
 80081b6:	4631      	mov	r1, r6
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b8      	blx	r7
 80081bc:	3001      	adds	r0, #1
 80081be:	d1c2      	bne.n	8008146 <_printf_float+0x2f2>
 80081c0:	e6a3      	b.n	8007f0a <_printf_float+0xb6>
 80081c2:	2301      	movs	r3, #1
 80081c4:	4631      	mov	r1, r6
 80081c6:	4628      	mov	r0, r5
 80081c8:	9206      	str	r2, [sp, #24]
 80081ca:	47b8      	blx	r7
 80081cc:	3001      	adds	r0, #1
 80081ce:	f43f ae9c 	beq.w	8007f0a <_printf_float+0xb6>
 80081d2:	9a06      	ldr	r2, [sp, #24]
 80081d4:	f10b 0b01 	add.w	fp, fp, #1
 80081d8:	e7bb      	b.n	8008152 <_printf_float+0x2fe>
 80081da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	d1c0      	bne.n	800816a <_printf_float+0x316>
 80081e8:	e68f      	b.n	8007f0a <_printf_float+0xb6>
 80081ea:	9a06      	ldr	r2, [sp, #24]
 80081ec:	464b      	mov	r3, r9
 80081ee:	4442      	add	r2, r8
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	d1c3      	bne.n	8008182 <_printf_float+0x32e>
 80081fa:	e686      	b.n	8007f0a <_printf_float+0xb6>
 80081fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008200:	f1ba 0f01 	cmp.w	sl, #1
 8008204:	dc01      	bgt.n	800820a <_printf_float+0x3b6>
 8008206:	07db      	lsls	r3, r3, #31
 8008208:	d536      	bpl.n	8008278 <_printf_float+0x424>
 800820a:	2301      	movs	r3, #1
 800820c:	4642      	mov	r2, r8
 800820e:	4631      	mov	r1, r6
 8008210:	4628      	mov	r0, r5
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	f43f ae78 	beq.w	8007f0a <_printf_float+0xb6>
 800821a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800821e:	4631      	mov	r1, r6
 8008220:	4628      	mov	r0, r5
 8008222:	47b8      	blx	r7
 8008224:	3001      	adds	r0, #1
 8008226:	f43f ae70 	beq.w	8007f0a <_printf_float+0xb6>
 800822a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800822e:	2200      	movs	r2, #0
 8008230:	2300      	movs	r3, #0
 8008232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008236:	f7f8 fc47 	bl	8000ac8 <__aeabi_dcmpeq>
 800823a:	b9c0      	cbnz	r0, 800826e <_printf_float+0x41a>
 800823c:	4653      	mov	r3, sl
 800823e:	f108 0201 	add.w	r2, r8, #1
 8008242:	4631      	mov	r1, r6
 8008244:	4628      	mov	r0, r5
 8008246:	47b8      	blx	r7
 8008248:	3001      	adds	r0, #1
 800824a:	d10c      	bne.n	8008266 <_printf_float+0x412>
 800824c:	e65d      	b.n	8007f0a <_printf_float+0xb6>
 800824e:	2301      	movs	r3, #1
 8008250:	465a      	mov	r2, fp
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	47b8      	blx	r7
 8008258:	3001      	adds	r0, #1
 800825a:	f43f ae56 	beq.w	8007f0a <_printf_float+0xb6>
 800825e:	f108 0801 	add.w	r8, r8, #1
 8008262:	45d0      	cmp	r8, sl
 8008264:	dbf3      	blt.n	800824e <_printf_float+0x3fa>
 8008266:	464b      	mov	r3, r9
 8008268:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800826c:	e6df      	b.n	800802e <_printf_float+0x1da>
 800826e:	f04f 0800 	mov.w	r8, #0
 8008272:	f104 0b1a 	add.w	fp, r4, #26
 8008276:	e7f4      	b.n	8008262 <_printf_float+0x40e>
 8008278:	2301      	movs	r3, #1
 800827a:	4642      	mov	r2, r8
 800827c:	e7e1      	b.n	8008242 <_printf_float+0x3ee>
 800827e:	2301      	movs	r3, #1
 8008280:	464a      	mov	r2, r9
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f ae3e 	beq.w	8007f0a <_printf_float+0xb6>
 800828e:	f108 0801 	add.w	r8, r8, #1
 8008292:	68e3      	ldr	r3, [r4, #12]
 8008294:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008296:	1a5b      	subs	r3, r3, r1
 8008298:	4543      	cmp	r3, r8
 800829a:	dcf0      	bgt.n	800827e <_printf_float+0x42a>
 800829c:	e6fc      	b.n	8008098 <_printf_float+0x244>
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	f104 0919 	add.w	r9, r4, #25
 80082a6:	e7f4      	b.n	8008292 <_printf_float+0x43e>

080082a8 <_printf_common>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	4616      	mov	r6, r2
 80082ae:	4698      	mov	r8, r3
 80082b0:	688a      	ldr	r2, [r1, #8]
 80082b2:	690b      	ldr	r3, [r1, #16]
 80082b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	bfb8      	it	lt
 80082bc:	4613      	movlt	r3, r2
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082c4:	4607      	mov	r7, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	b10a      	cbz	r2, 80082ce <_printf_common+0x26>
 80082ca:	3301      	adds	r3, #1
 80082cc:	6033      	str	r3, [r6, #0]
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	0699      	lsls	r1, r3, #26
 80082d2:	bf42      	ittt	mi
 80082d4:	6833      	ldrmi	r3, [r6, #0]
 80082d6:	3302      	addmi	r3, #2
 80082d8:	6033      	strmi	r3, [r6, #0]
 80082da:	6825      	ldr	r5, [r4, #0]
 80082dc:	f015 0506 	ands.w	r5, r5, #6
 80082e0:	d106      	bne.n	80082f0 <_printf_common+0x48>
 80082e2:	f104 0a19 	add.w	sl, r4, #25
 80082e6:	68e3      	ldr	r3, [r4, #12]
 80082e8:	6832      	ldr	r2, [r6, #0]
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	42ab      	cmp	r3, r5
 80082ee:	dc26      	bgt.n	800833e <_printf_common+0x96>
 80082f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082f4:	6822      	ldr	r2, [r4, #0]
 80082f6:	3b00      	subs	r3, #0
 80082f8:	bf18      	it	ne
 80082fa:	2301      	movne	r3, #1
 80082fc:	0692      	lsls	r2, r2, #26
 80082fe:	d42b      	bmi.n	8008358 <_printf_common+0xb0>
 8008300:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008304:	4641      	mov	r1, r8
 8008306:	4638      	mov	r0, r7
 8008308:	47c8      	blx	r9
 800830a:	3001      	adds	r0, #1
 800830c:	d01e      	beq.n	800834c <_printf_common+0xa4>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	6922      	ldr	r2, [r4, #16]
 8008312:	f003 0306 	and.w	r3, r3, #6
 8008316:	2b04      	cmp	r3, #4
 8008318:	bf02      	ittt	eq
 800831a:	68e5      	ldreq	r5, [r4, #12]
 800831c:	6833      	ldreq	r3, [r6, #0]
 800831e:	1aed      	subeq	r5, r5, r3
 8008320:	68a3      	ldr	r3, [r4, #8]
 8008322:	bf0c      	ite	eq
 8008324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008328:	2500      	movne	r5, #0
 800832a:	4293      	cmp	r3, r2
 800832c:	bfc4      	itt	gt
 800832e:	1a9b      	subgt	r3, r3, r2
 8008330:	18ed      	addgt	r5, r5, r3
 8008332:	2600      	movs	r6, #0
 8008334:	341a      	adds	r4, #26
 8008336:	42b5      	cmp	r5, r6
 8008338:	d11a      	bne.n	8008370 <_printf_common+0xc8>
 800833a:	2000      	movs	r0, #0
 800833c:	e008      	b.n	8008350 <_printf_common+0xa8>
 800833e:	2301      	movs	r3, #1
 8008340:	4652      	mov	r2, sl
 8008342:	4641      	mov	r1, r8
 8008344:	4638      	mov	r0, r7
 8008346:	47c8      	blx	r9
 8008348:	3001      	adds	r0, #1
 800834a:	d103      	bne.n	8008354 <_printf_common+0xac>
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008354:	3501      	adds	r5, #1
 8008356:	e7c6      	b.n	80082e6 <_printf_common+0x3e>
 8008358:	18e1      	adds	r1, r4, r3
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	2030      	movs	r0, #48	@ 0x30
 800835e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008362:	4422      	add	r2, r4
 8008364:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008368:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800836c:	3302      	adds	r3, #2
 800836e:	e7c7      	b.n	8008300 <_printf_common+0x58>
 8008370:	2301      	movs	r3, #1
 8008372:	4622      	mov	r2, r4
 8008374:	4641      	mov	r1, r8
 8008376:	4638      	mov	r0, r7
 8008378:	47c8      	blx	r9
 800837a:	3001      	adds	r0, #1
 800837c:	d0e6      	beq.n	800834c <_printf_common+0xa4>
 800837e:	3601      	adds	r6, #1
 8008380:	e7d9      	b.n	8008336 <_printf_common+0x8e>
	...

08008384 <_printf_i>:
 8008384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	7e0f      	ldrb	r7, [r1, #24]
 800838a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800838c:	2f78      	cmp	r7, #120	@ 0x78
 800838e:	4691      	mov	r9, r2
 8008390:	4680      	mov	r8, r0
 8008392:	460c      	mov	r4, r1
 8008394:	469a      	mov	sl, r3
 8008396:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800839a:	d807      	bhi.n	80083ac <_printf_i+0x28>
 800839c:	2f62      	cmp	r7, #98	@ 0x62
 800839e:	d80a      	bhi.n	80083b6 <_printf_i+0x32>
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	f000 80d2 	beq.w	800854a <_printf_i+0x1c6>
 80083a6:	2f58      	cmp	r7, #88	@ 0x58
 80083a8:	f000 80b9 	beq.w	800851e <_printf_i+0x19a>
 80083ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083b4:	e03a      	b.n	800842c <_printf_i+0xa8>
 80083b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083ba:	2b15      	cmp	r3, #21
 80083bc:	d8f6      	bhi.n	80083ac <_printf_i+0x28>
 80083be:	a101      	add	r1, pc, #4	@ (adr r1, 80083c4 <_printf_i+0x40>)
 80083c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083c4:	0800841d 	.word	0x0800841d
 80083c8:	08008431 	.word	0x08008431
 80083cc:	080083ad 	.word	0x080083ad
 80083d0:	080083ad 	.word	0x080083ad
 80083d4:	080083ad 	.word	0x080083ad
 80083d8:	080083ad 	.word	0x080083ad
 80083dc:	08008431 	.word	0x08008431
 80083e0:	080083ad 	.word	0x080083ad
 80083e4:	080083ad 	.word	0x080083ad
 80083e8:	080083ad 	.word	0x080083ad
 80083ec:	080083ad 	.word	0x080083ad
 80083f0:	08008531 	.word	0x08008531
 80083f4:	0800845b 	.word	0x0800845b
 80083f8:	080084eb 	.word	0x080084eb
 80083fc:	080083ad 	.word	0x080083ad
 8008400:	080083ad 	.word	0x080083ad
 8008404:	08008553 	.word	0x08008553
 8008408:	080083ad 	.word	0x080083ad
 800840c:	0800845b 	.word	0x0800845b
 8008410:	080083ad 	.word	0x080083ad
 8008414:	080083ad 	.word	0x080083ad
 8008418:	080084f3 	.word	0x080084f3
 800841c:	6833      	ldr	r3, [r6, #0]
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6032      	str	r2, [r6, #0]
 8008424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008428:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800842c:	2301      	movs	r3, #1
 800842e:	e09d      	b.n	800856c <_printf_i+0x1e8>
 8008430:	6833      	ldr	r3, [r6, #0]
 8008432:	6820      	ldr	r0, [r4, #0]
 8008434:	1d19      	adds	r1, r3, #4
 8008436:	6031      	str	r1, [r6, #0]
 8008438:	0606      	lsls	r6, r0, #24
 800843a:	d501      	bpl.n	8008440 <_printf_i+0xbc>
 800843c:	681d      	ldr	r5, [r3, #0]
 800843e:	e003      	b.n	8008448 <_printf_i+0xc4>
 8008440:	0645      	lsls	r5, r0, #25
 8008442:	d5fb      	bpl.n	800843c <_printf_i+0xb8>
 8008444:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008448:	2d00      	cmp	r5, #0
 800844a:	da03      	bge.n	8008454 <_printf_i+0xd0>
 800844c:	232d      	movs	r3, #45	@ 0x2d
 800844e:	426d      	negs	r5, r5
 8008450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008454:	4859      	ldr	r0, [pc, #356]	@ (80085bc <_printf_i+0x238>)
 8008456:	230a      	movs	r3, #10
 8008458:	e011      	b.n	800847e <_printf_i+0xfa>
 800845a:	6821      	ldr	r1, [r4, #0]
 800845c:	6833      	ldr	r3, [r6, #0]
 800845e:	0608      	lsls	r0, r1, #24
 8008460:	f853 5b04 	ldr.w	r5, [r3], #4
 8008464:	d402      	bmi.n	800846c <_printf_i+0xe8>
 8008466:	0649      	lsls	r1, r1, #25
 8008468:	bf48      	it	mi
 800846a:	b2ad      	uxthmi	r5, r5
 800846c:	2f6f      	cmp	r7, #111	@ 0x6f
 800846e:	4853      	ldr	r0, [pc, #332]	@ (80085bc <_printf_i+0x238>)
 8008470:	6033      	str	r3, [r6, #0]
 8008472:	bf14      	ite	ne
 8008474:	230a      	movne	r3, #10
 8008476:	2308      	moveq	r3, #8
 8008478:	2100      	movs	r1, #0
 800847a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800847e:	6866      	ldr	r6, [r4, #4]
 8008480:	60a6      	str	r6, [r4, #8]
 8008482:	2e00      	cmp	r6, #0
 8008484:	bfa2      	ittt	ge
 8008486:	6821      	ldrge	r1, [r4, #0]
 8008488:	f021 0104 	bicge.w	r1, r1, #4
 800848c:	6021      	strge	r1, [r4, #0]
 800848e:	b90d      	cbnz	r5, 8008494 <_printf_i+0x110>
 8008490:	2e00      	cmp	r6, #0
 8008492:	d04b      	beq.n	800852c <_printf_i+0x1a8>
 8008494:	4616      	mov	r6, r2
 8008496:	fbb5 f1f3 	udiv	r1, r5, r3
 800849a:	fb03 5711 	mls	r7, r3, r1, r5
 800849e:	5dc7      	ldrb	r7, [r0, r7]
 80084a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084a4:	462f      	mov	r7, r5
 80084a6:	42bb      	cmp	r3, r7
 80084a8:	460d      	mov	r5, r1
 80084aa:	d9f4      	bls.n	8008496 <_printf_i+0x112>
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d10b      	bne.n	80084c8 <_printf_i+0x144>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	07df      	lsls	r7, r3, #31
 80084b4:	d508      	bpl.n	80084c8 <_printf_i+0x144>
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	6861      	ldr	r1, [r4, #4]
 80084ba:	4299      	cmp	r1, r3
 80084bc:	bfde      	ittt	le
 80084be:	2330      	movle	r3, #48	@ 0x30
 80084c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084c8:	1b92      	subs	r2, r2, r6
 80084ca:	6122      	str	r2, [r4, #16]
 80084cc:	f8cd a000 	str.w	sl, [sp]
 80084d0:	464b      	mov	r3, r9
 80084d2:	aa03      	add	r2, sp, #12
 80084d4:	4621      	mov	r1, r4
 80084d6:	4640      	mov	r0, r8
 80084d8:	f7ff fee6 	bl	80082a8 <_printf_common>
 80084dc:	3001      	adds	r0, #1
 80084de:	d14a      	bne.n	8008576 <_printf_i+0x1f2>
 80084e0:	f04f 30ff 	mov.w	r0, #4294967295
 80084e4:	b004      	add	sp, #16
 80084e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	f043 0320 	orr.w	r3, r3, #32
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	4833      	ldr	r0, [pc, #204]	@ (80085c0 <_printf_i+0x23c>)
 80084f4:	2778      	movs	r7, #120	@ 0x78
 80084f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	6831      	ldr	r1, [r6, #0]
 80084fe:	061f      	lsls	r7, r3, #24
 8008500:	f851 5b04 	ldr.w	r5, [r1], #4
 8008504:	d402      	bmi.n	800850c <_printf_i+0x188>
 8008506:	065f      	lsls	r7, r3, #25
 8008508:	bf48      	it	mi
 800850a:	b2ad      	uxthmi	r5, r5
 800850c:	6031      	str	r1, [r6, #0]
 800850e:	07d9      	lsls	r1, r3, #31
 8008510:	bf44      	itt	mi
 8008512:	f043 0320 	orrmi.w	r3, r3, #32
 8008516:	6023      	strmi	r3, [r4, #0]
 8008518:	b11d      	cbz	r5, 8008522 <_printf_i+0x19e>
 800851a:	2310      	movs	r3, #16
 800851c:	e7ac      	b.n	8008478 <_printf_i+0xf4>
 800851e:	4827      	ldr	r0, [pc, #156]	@ (80085bc <_printf_i+0x238>)
 8008520:	e7e9      	b.n	80084f6 <_printf_i+0x172>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	f023 0320 	bic.w	r3, r3, #32
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	e7f6      	b.n	800851a <_printf_i+0x196>
 800852c:	4616      	mov	r6, r2
 800852e:	e7bd      	b.n	80084ac <_printf_i+0x128>
 8008530:	6833      	ldr	r3, [r6, #0]
 8008532:	6825      	ldr	r5, [r4, #0]
 8008534:	6961      	ldr	r1, [r4, #20]
 8008536:	1d18      	adds	r0, r3, #4
 8008538:	6030      	str	r0, [r6, #0]
 800853a:	062e      	lsls	r6, r5, #24
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	d501      	bpl.n	8008544 <_printf_i+0x1c0>
 8008540:	6019      	str	r1, [r3, #0]
 8008542:	e002      	b.n	800854a <_printf_i+0x1c6>
 8008544:	0668      	lsls	r0, r5, #25
 8008546:	d5fb      	bpl.n	8008540 <_printf_i+0x1bc>
 8008548:	8019      	strh	r1, [r3, #0]
 800854a:	2300      	movs	r3, #0
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	4616      	mov	r6, r2
 8008550:	e7bc      	b.n	80084cc <_printf_i+0x148>
 8008552:	6833      	ldr	r3, [r6, #0]
 8008554:	1d1a      	adds	r2, r3, #4
 8008556:	6032      	str	r2, [r6, #0]
 8008558:	681e      	ldr	r6, [r3, #0]
 800855a:	6862      	ldr	r2, [r4, #4]
 800855c:	2100      	movs	r1, #0
 800855e:	4630      	mov	r0, r6
 8008560:	f7f7 fe36 	bl	80001d0 <memchr>
 8008564:	b108      	cbz	r0, 800856a <_printf_i+0x1e6>
 8008566:	1b80      	subs	r0, r0, r6
 8008568:	6060      	str	r0, [r4, #4]
 800856a:	6863      	ldr	r3, [r4, #4]
 800856c:	6123      	str	r3, [r4, #16]
 800856e:	2300      	movs	r3, #0
 8008570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008574:	e7aa      	b.n	80084cc <_printf_i+0x148>
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	4632      	mov	r2, r6
 800857a:	4649      	mov	r1, r9
 800857c:	4640      	mov	r0, r8
 800857e:	47d0      	blx	sl
 8008580:	3001      	adds	r0, #1
 8008582:	d0ad      	beq.n	80084e0 <_printf_i+0x15c>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	079b      	lsls	r3, r3, #30
 8008588:	d413      	bmi.n	80085b2 <_printf_i+0x22e>
 800858a:	68e0      	ldr	r0, [r4, #12]
 800858c:	9b03      	ldr	r3, [sp, #12]
 800858e:	4298      	cmp	r0, r3
 8008590:	bfb8      	it	lt
 8008592:	4618      	movlt	r0, r3
 8008594:	e7a6      	b.n	80084e4 <_printf_i+0x160>
 8008596:	2301      	movs	r3, #1
 8008598:	4632      	mov	r2, r6
 800859a:	4649      	mov	r1, r9
 800859c:	4640      	mov	r0, r8
 800859e:	47d0      	blx	sl
 80085a0:	3001      	adds	r0, #1
 80085a2:	d09d      	beq.n	80084e0 <_printf_i+0x15c>
 80085a4:	3501      	adds	r5, #1
 80085a6:	68e3      	ldr	r3, [r4, #12]
 80085a8:	9903      	ldr	r1, [sp, #12]
 80085aa:	1a5b      	subs	r3, r3, r1
 80085ac:	42ab      	cmp	r3, r5
 80085ae:	dcf2      	bgt.n	8008596 <_printf_i+0x212>
 80085b0:	e7eb      	b.n	800858a <_printf_i+0x206>
 80085b2:	2500      	movs	r5, #0
 80085b4:	f104 0619 	add.w	r6, r4, #25
 80085b8:	e7f5      	b.n	80085a6 <_printf_i+0x222>
 80085ba:	bf00      	nop
 80085bc:	0800ceba 	.word	0x0800ceba
 80085c0:	0800cecb 	.word	0x0800cecb

080085c4 <_scanf_float>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	b087      	sub	sp, #28
 80085ca:	4617      	mov	r7, r2
 80085cc:	9303      	str	r3, [sp, #12]
 80085ce:	688b      	ldr	r3, [r1, #8]
 80085d0:	1e5a      	subs	r2, r3, #1
 80085d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80085d6:	bf81      	itttt	hi
 80085d8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80085dc:	eb03 0b05 	addhi.w	fp, r3, r5
 80085e0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80085e4:	608b      	strhi	r3, [r1, #8]
 80085e6:	680b      	ldr	r3, [r1, #0]
 80085e8:	460a      	mov	r2, r1
 80085ea:	f04f 0500 	mov.w	r5, #0
 80085ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80085f2:	f842 3b1c 	str.w	r3, [r2], #28
 80085f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80085fa:	4680      	mov	r8, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	bf98      	it	ls
 8008600:	f04f 0b00 	movls.w	fp, #0
 8008604:	9201      	str	r2, [sp, #4]
 8008606:	4616      	mov	r6, r2
 8008608:	46aa      	mov	sl, r5
 800860a:	46a9      	mov	r9, r5
 800860c:	9502      	str	r5, [sp, #8]
 800860e:	68a2      	ldr	r2, [r4, #8]
 8008610:	b152      	cbz	r2, 8008628 <_scanf_float+0x64>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b4e      	cmp	r3, #78	@ 0x4e
 8008618:	d864      	bhi.n	80086e4 <_scanf_float+0x120>
 800861a:	2b40      	cmp	r3, #64	@ 0x40
 800861c:	d83c      	bhi.n	8008698 <_scanf_float+0xd4>
 800861e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008622:	b2c8      	uxtb	r0, r1
 8008624:	280e      	cmp	r0, #14
 8008626:	d93a      	bls.n	800869e <_scanf_float+0xda>
 8008628:	f1b9 0f00 	cmp.w	r9, #0
 800862c:	d003      	beq.n	8008636 <_scanf_float+0x72>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800863a:	f1ba 0f01 	cmp.w	sl, #1
 800863e:	f200 8117 	bhi.w	8008870 <_scanf_float+0x2ac>
 8008642:	9b01      	ldr	r3, [sp, #4]
 8008644:	429e      	cmp	r6, r3
 8008646:	f200 8108 	bhi.w	800885a <_scanf_float+0x296>
 800864a:	2001      	movs	r0, #1
 800864c:	b007      	add	sp, #28
 800864e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008652:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008656:	2a0d      	cmp	r2, #13
 8008658:	d8e6      	bhi.n	8008628 <_scanf_float+0x64>
 800865a:	a101      	add	r1, pc, #4	@ (adr r1, 8008660 <_scanf_float+0x9c>)
 800865c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008660:	080087a7 	.word	0x080087a7
 8008664:	08008629 	.word	0x08008629
 8008668:	08008629 	.word	0x08008629
 800866c:	08008629 	.word	0x08008629
 8008670:	08008807 	.word	0x08008807
 8008674:	080087df 	.word	0x080087df
 8008678:	08008629 	.word	0x08008629
 800867c:	08008629 	.word	0x08008629
 8008680:	080087b5 	.word	0x080087b5
 8008684:	08008629 	.word	0x08008629
 8008688:	08008629 	.word	0x08008629
 800868c:	08008629 	.word	0x08008629
 8008690:	08008629 	.word	0x08008629
 8008694:	0800876d 	.word	0x0800876d
 8008698:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800869c:	e7db      	b.n	8008656 <_scanf_float+0x92>
 800869e:	290e      	cmp	r1, #14
 80086a0:	d8c2      	bhi.n	8008628 <_scanf_float+0x64>
 80086a2:	a001      	add	r0, pc, #4	@ (adr r0, 80086a8 <_scanf_float+0xe4>)
 80086a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086a8:	0800875d 	.word	0x0800875d
 80086ac:	08008629 	.word	0x08008629
 80086b0:	0800875d 	.word	0x0800875d
 80086b4:	080087f3 	.word	0x080087f3
 80086b8:	08008629 	.word	0x08008629
 80086bc:	08008705 	.word	0x08008705
 80086c0:	08008743 	.word	0x08008743
 80086c4:	08008743 	.word	0x08008743
 80086c8:	08008743 	.word	0x08008743
 80086cc:	08008743 	.word	0x08008743
 80086d0:	08008743 	.word	0x08008743
 80086d4:	08008743 	.word	0x08008743
 80086d8:	08008743 	.word	0x08008743
 80086dc:	08008743 	.word	0x08008743
 80086e0:	08008743 	.word	0x08008743
 80086e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80086e6:	d809      	bhi.n	80086fc <_scanf_float+0x138>
 80086e8:	2b60      	cmp	r3, #96	@ 0x60
 80086ea:	d8b2      	bhi.n	8008652 <_scanf_float+0x8e>
 80086ec:	2b54      	cmp	r3, #84	@ 0x54
 80086ee:	d07b      	beq.n	80087e8 <_scanf_float+0x224>
 80086f0:	2b59      	cmp	r3, #89	@ 0x59
 80086f2:	d199      	bne.n	8008628 <_scanf_float+0x64>
 80086f4:	2d07      	cmp	r5, #7
 80086f6:	d197      	bne.n	8008628 <_scanf_float+0x64>
 80086f8:	2508      	movs	r5, #8
 80086fa:	e02c      	b.n	8008756 <_scanf_float+0x192>
 80086fc:	2b74      	cmp	r3, #116	@ 0x74
 80086fe:	d073      	beq.n	80087e8 <_scanf_float+0x224>
 8008700:	2b79      	cmp	r3, #121	@ 0x79
 8008702:	e7f6      	b.n	80086f2 <_scanf_float+0x12e>
 8008704:	6821      	ldr	r1, [r4, #0]
 8008706:	05c8      	lsls	r0, r1, #23
 8008708:	d51b      	bpl.n	8008742 <_scanf_float+0x17e>
 800870a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800870e:	6021      	str	r1, [r4, #0]
 8008710:	f109 0901 	add.w	r9, r9, #1
 8008714:	f1bb 0f00 	cmp.w	fp, #0
 8008718:	d003      	beq.n	8008722 <_scanf_float+0x15e>
 800871a:	3201      	adds	r2, #1
 800871c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008720:	60a2      	str	r2, [r4, #8]
 8008722:	68a3      	ldr	r3, [r4, #8]
 8008724:	3b01      	subs	r3, #1
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	3301      	adds	r3, #1
 800872c:	6123      	str	r3, [r4, #16]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3b01      	subs	r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	607b      	str	r3, [r7, #4]
 8008736:	f340 8087 	ble.w	8008848 <_scanf_float+0x284>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	3301      	adds	r3, #1
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	e765      	b.n	800860e <_scanf_float+0x4a>
 8008742:	eb1a 0105 	adds.w	r1, sl, r5
 8008746:	f47f af6f 	bne.w	8008628 <_scanf_float+0x64>
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008750:	6022      	str	r2, [r4, #0]
 8008752:	460d      	mov	r5, r1
 8008754:	468a      	mov	sl, r1
 8008756:	f806 3b01 	strb.w	r3, [r6], #1
 800875a:	e7e2      	b.n	8008722 <_scanf_float+0x15e>
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	0610      	lsls	r0, r2, #24
 8008760:	f57f af62 	bpl.w	8008628 <_scanf_float+0x64>
 8008764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008768:	6022      	str	r2, [r4, #0]
 800876a:	e7f4      	b.n	8008756 <_scanf_float+0x192>
 800876c:	f1ba 0f00 	cmp.w	sl, #0
 8008770:	d10e      	bne.n	8008790 <_scanf_float+0x1cc>
 8008772:	f1b9 0f00 	cmp.w	r9, #0
 8008776:	d10e      	bne.n	8008796 <_scanf_float+0x1d2>
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800877e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008782:	d108      	bne.n	8008796 <_scanf_float+0x1d2>
 8008784:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008788:	6022      	str	r2, [r4, #0]
 800878a:	f04f 0a01 	mov.w	sl, #1
 800878e:	e7e2      	b.n	8008756 <_scanf_float+0x192>
 8008790:	f1ba 0f02 	cmp.w	sl, #2
 8008794:	d055      	beq.n	8008842 <_scanf_float+0x27e>
 8008796:	2d01      	cmp	r5, #1
 8008798:	d002      	beq.n	80087a0 <_scanf_float+0x1dc>
 800879a:	2d04      	cmp	r5, #4
 800879c:	f47f af44 	bne.w	8008628 <_scanf_float+0x64>
 80087a0:	3501      	adds	r5, #1
 80087a2:	b2ed      	uxtb	r5, r5
 80087a4:	e7d7      	b.n	8008756 <_scanf_float+0x192>
 80087a6:	f1ba 0f01 	cmp.w	sl, #1
 80087aa:	f47f af3d 	bne.w	8008628 <_scanf_float+0x64>
 80087ae:	f04f 0a02 	mov.w	sl, #2
 80087b2:	e7d0      	b.n	8008756 <_scanf_float+0x192>
 80087b4:	b97d      	cbnz	r5, 80087d6 <_scanf_float+0x212>
 80087b6:	f1b9 0f00 	cmp.w	r9, #0
 80087ba:	f47f af38 	bne.w	800862e <_scanf_float+0x6a>
 80087be:	6822      	ldr	r2, [r4, #0]
 80087c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087c8:	f040 8108 	bne.w	80089dc <_scanf_float+0x418>
 80087cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087d0:	6022      	str	r2, [r4, #0]
 80087d2:	2501      	movs	r5, #1
 80087d4:	e7bf      	b.n	8008756 <_scanf_float+0x192>
 80087d6:	2d03      	cmp	r5, #3
 80087d8:	d0e2      	beq.n	80087a0 <_scanf_float+0x1dc>
 80087da:	2d05      	cmp	r5, #5
 80087dc:	e7de      	b.n	800879c <_scanf_float+0x1d8>
 80087de:	2d02      	cmp	r5, #2
 80087e0:	f47f af22 	bne.w	8008628 <_scanf_float+0x64>
 80087e4:	2503      	movs	r5, #3
 80087e6:	e7b6      	b.n	8008756 <_scanf_float+0x192>
 80087e8:	2d06      	cmp	r5, #6
 80087ea:	f47f af1d 	bne.w	8008628 <_scanf_float+0x64>
 80087ee:	2507      	movs	r5, #7
 80087f0:	e7b1      	b.n	8008756 <_scanf_float+0x192>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	0591      	lsls	r1, r2, #22
 80087f6:	f57f af17 	bpl.w	8008628 <_scanf_float+0x64>
 80087fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80087fe:	6022      	str	r2, [r4, #0]
 8008800:	f8cd 9008 	str.w	r9, [sp, #8]
 8008804:	e7a7      	b.n	8008756 <_scanf_float+0x192>
 8008806:	6822      	ldr	r2, [r4, #0]
 8008808:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800880c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008810:	d006      	beq.n	8008820 <_scanf_float+0x25c>
 8008812:	0550      	lsls	r0, r2, #21
 8008814:	f57f af08 	bpl.w	8008628 <_scanf_float+0x64>
 8008818:	f1b9 0f00 	cmp.w	r9, #0
 800881c:	f000 80de 	beq.w	80089dc <_scanf_float+0x418>
 8008820:	0591      	lsls	r1, r2, #22
 8008822:	bf58      	it	pl
 8008824:	9902      	ldrpl	r1, [sp, #8]
 8008826:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800882a:	bf58      	it	pl
 800882c:	eba9 0101 	subpl.w	r1, r9, r1
 8008830:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008834:	bf58      	it	pl
 8008836:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800883a:	6022      	str	r2, [r4, #0]
 800883c:	f04f 0900 	mov.w	r9, #0
 8008840:	e789      	b.n	8008756 <_scanf_float+0x192>
 8008842:	f04f 0a03 	mov.w	sl, #3
 8008846:	e786      	b.n	8008756 <_scanf_float+0x192>
 8008848:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800884c:	4639      	mov	r1, r7
 800884e:	4640      	mov	r0, r8
 8008850:	4798      	blx	r3
 8008852:	2800      	cmp	r0, #0
 8008854:	f43f aedb 	beq.w	800860e <_scanf_float+0x4a>
 8008858:	e6e6      	b.n	8008628 <_scanf_float+0x64>
 800885a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800885e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008862:	463a      	mov	r2, r7
 8008864:	4640      	mov	r0, r8
 8008866:	4798      	blx	r3
 8008868:	6923      	ldr	r3, [r4, #16]
 800886a:	3b01      	subs	r3, #1
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	e6e8      	b.n	8008642 <_scanf_float+0x7e>
 8008870:	1e6b      	subs	r3, r5, #1
 8008872:	2b06      	cmp	r3, #6
 8008874:	d824      	bhi.n	80088c0 <_scanf_float+0x2fc>
 8008876:	2d02      	cmp	r5, #2
 8008878:	d836      	bhi.n	80088e8 <_scanf_float+0x324>
 800887a:	9b01      	ldr	r3, [sp, #4]
 800887c:	429e      	cmp	r6, r3
 800887e:	f67f aee4 	bls.w	800864a <_scanf_float+0x86>
 8008882:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008886:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800888a:	463a      	mov	r2, r7
 800888c:	4640      	mov	r0, r8
 800888e:	4798      	blx	r3
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	3b01      	subs	r3, #1
 8008894:	6123      	str	r3, [r4, #16]
 8008896:	e7f0      	b.n	800887a <_scanf_float+0x2b6>
 8008898:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800889c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80088a0:	463a      	mov	r2, r7
 80088a2:	4640      	mov	r0, r8
 80088a4:	4798      	blx	r3
 80088a6:	6923      	ldr	r3, [r4, #16]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	6123      	str	r3, [r4, #16]
 80088ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088b0:	fa5f fa8a 	uxtb.w	sl, sl
 80088b4:	f1ba 0f02 	cmp.w	sl, #2
 80088b8:	d1ee      	bne.n	8008898 <_scanf_float+0x2d4>
 80088ba:	3d03      	subs	r5, #3
 80088bc:	b2ed      	uxtb	r5, r5
 80088be:	1b76      	subs	r6, r6, r5
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	05da      	lsls	r2, r3, #23
 80088c4:	d530      	bpl.n	8008928 <_scanf_float+0x364>
 80088c6:	055b      	lsls	r3, r3, #21
 80088c8:	d511      	bpl.n	80088ee <_scanf_float+0x32a>
 80088ca:	9b01      	ldr	r3, [sp, #4]
 80088cc:	429e      	cmp	r6, r3
 80088ce:	f67f aebc 	bls.w	800864a <_scanf_float+0x86>
 80088d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088da:	463a      	mov	r2, r7
 80088dc:	4640      	mov	r0, r8
 80088de:	4798      	blx	r3
 80088e0:	6923      	ldr	r3, [r4, #16]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	6123      	str	r3, [r4, #16]
 80088e6:	e7f0      	b.n	80088ca <_scanf_float+0x306>
 80088e8:	46aa      	mov	sl, r5
 80088ea:	46b3      	mov	fp, r6
 80088ec:	e7de      	b.n	80088ac <_scanf_float+0x2e8>
 80088ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80088f2:	6923      	ldr	r3, [r4, #16]
 80088f4:	2965      	cmp	r1, #101	@ 0x65
 80088f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80088fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80088fe:	6123      	str	r3, [r4, #16]
 8008900:	d00c      	beq.n	800891c <_scanf_float+0x358>
 8008902:	2945      	cmp	r1, #69	@ 0x45
 8008904:	d00a      	beq.n	800891c <_scanf_float+0x358>
 8008906:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800890a:	463a      	mov	r2, r7
 800890c:	4640      	mov	r0, r8
 800890e:	4798      	blx	r3
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008916:	3b01      	subs	r3, #1
 8008918:	1eb5      	subs	r5, r6, #2
 800891a:	6123      	str	r3, [r4, #16]
 800891c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008920:	463a      	mov	r2, r7
 8008922:	4640      	mov	r0, r8
 8008924:	4798      	blx	r3
 8008926:	462e      	mov	r6, r5
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	f012 0210 	ands.w	r2, r2, #16
 800892e:	d001      	beq.n	8008934 <_scanf_float+0x370>
 8008930:	2000      	movs	r0, #0
 8008932:	e68b      	b.n	800864c <_scanf_float+0x88>
 8008934:	7032      	strb	r2, [r6, #0]
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800893c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008940:	d11c      	bne.n	800897c <_scanf_float+0x3b8>
 8008942:	9b02      	ldr	r3, [sp, #8]
 8008944:	454b      	cmp	r3, r9
 8008946:	eba3 0209 	sub.w	r2, r3, r9
 800894a:	d123      	bne.n	8008994 <_scanf_float+0x3d0>
 800894c:	9901      	ldr	r1, [sp, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	4640      	mov	r0, r8
 8008952:	f002 fdc1 	bl	800b4d8 <_strtod_r>
 8008956:	9b03      	ldr	r3, [sp, #12]
 8008958:	6821      	ldr	r1, [r4, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f011 0f02 	tst.w	r1, #2
 8008960:	ec57 6b10 	vmov	r6, r7, d0
 8008964:	f103 0204 	add.w	r2, r3, #4
 8008968:	d01f      	beq.n	80089aa <_scanf_float+0x3e6>
 800896a:	9903      	ldr	r1, [sp, #12]
 800896c:	600a      	str	r2, [r1, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	e9c3 6700 	strd	r6, r7, [r3]
 8008974:	68e3      	ldr	r3, [r4, #12]
 8008976:	3301      	adds	r3, #1
 8008978:	60e3      	str	r3, [r4, #12]
 800897a:	e7d9      	b.n	8008930 <_scanf_float+0x36c>
 800897c:	9b04      	ldr	r3, [sp, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0e4      	beq.n	800894c <_scanf_float+0x388>
 8008982:	9905      	ldr	r1, [sp, #20]
 8008984:	230a      	movs	r3, #10
 8008986:	3101      	adds	r1, #1
 8008988:	4640      	mov	r0, r8
 800898a:	f002 fe25 	bl	800b5d8 <_strtol_r>
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	9e05      	ldr	r6, [sp, #20]
 8008992:	1ac2      	subs	r2, r0, r3
 8008994:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008998:	429e      	cmp	r6, r3
 800899a:	bf28      	it	cs
 800899c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80089a0:	4910      	ldr	r1, [pc, #64]	@ (80089e4 <_scanf_float+0x420>)
 80089a2:	4630      	mov	r0, r6
 80089a4:	f000 f954 	bl	8008c50 <siprintf>
 80089a8:	e7d0      	b.n	800894c <_scanf_float+0x388>
 80089aa:	f011 0f04 	tst.w	r1, #4
 80089ae:	9903      	ldr	r1, [sp, #12]
 80089b0:	600a      	str	r2, [r1, #0]
 80089b2:	d1dc      	bne.n	800896e <_scanf_float+0x3aa>
 80089b4:	681d      	ldr	r5, [r3, #0]
 80089b6:	4632      	mov	r2, r6
 80089b8:	463b      	mov	r3, r7
 80089ba:	4630      	mov	r0, r6
 80089bc:	4639      	mov	r1, r7
 80089be:	f7f8 f8b5 	bl	8000b2c <__aeabi_dcmpun>
 80089c2:	b128      	cbz	r0, 80089d0 <_scanf_float+0x40c>
 80089c4:	4808      	ldr	r0, [pc, #32]	@ (80089e8 <_scanf_float+0x424>)
 80089c6:	f000 fb61 	bl	800908c <nanf>
 80089ca:	ed85 0a00 	vstr	s0, [r5]
 80089ce:	e7d1      	b.n	8008974 <_scanf_float+0x3b0>
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f8 f908 	bl	8000be8 <__aeabi_d2f>
 80089d8:	6028      	str	r0, [r5, #0]
 80089da:	e7cb      	b.n	8008974 <_scanf_float+0x3b0>
 80089dc:	f04f 0900 	mov.w	r9, #0
 80089e0:	e629      	b.n	8008636 <_scanf_float+0x72>
 80089e2:	bf00      	nop
 80089e4:	0800cedc 	.word	0x0800cedc
 80089e8:	0800cf8d 	.word	0x0800cf8d

080089ec <std>:
 80089ec:	2300      	movs	r3, #0
 80089ee:	b510      	push	{r4, lr}
 80089f0:	4604      	mov	r4, r0
 80089f2:	e9c0 3300 	strd	r3, r3, [r0]
 80089f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089fa:	6083      	str	r3, [r0, #8]
 80089fc:	8181      	strh	r1, [r0, #12]
 80089fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a00:	81c2      	strh	r2, [r0, #14]
 8008a02:	6183      	str	r3, [r0, #24]
 8008a04:	4619      	mov	r1, r3
 8008a06:	2208      	movs	r2, #8
 8008a08:	305c      	adds	r0, #92	@ 0x5c
 8008a0a:	f000 fa19 	bl	8008e40 <memset>
 8008a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a44 <std+0x58>)
 8008a10:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a12:	4b0d      	ldr	r3, [pc, #52]	@ (8008a48 <std+0x5c>)
 8008a14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a16:	4b0d      	ldr	r3, [pc, #52]	@ (8008a4c <std+0x60>)
 8008a18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a50 <std+0x64>)
 8008a1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a54 <std+0x68>)
 8008a20:	6224      	str	r4, [r4, #32]
 8008a22:	429c      	cmp	r4, r3
 8008a24:	d006      	beq.n	8008a34 <std+0x48>
 8008a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a2a:	4294      	cmp	r4, r2
 8008a2c:	d002      	beq.n	8008a34 <std+0x48>
 8008a2e:	33d0      	adds	r3, #208	@ 0xd0
 8008a30:	429c      	cmp	r4, r3
 8008a32:	d105      	bne.n	8008a40 <std+0x54>
 8008a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a3c:	f000 bb14 	b.w	8009068 <__retarget_lock_init_recursive>
 8008a40:	bd10      	pop	{r4, pc}
 8008a42:	bf00      	nop
 8008a44:	08008c91 	.word	0x08008c91
 8008a48:	08008cb3 	.word	0x08008cb3
 8008a4c:	08008ceb 	.word	0x08008ceb
 8008a50:	08008d0f 	.word	0x08008d0f
 8008a54:	20000c94 	.word	0x20000c94

08008a58 <stdio_exit_handler>:
 8008a58:	4a02      	ldr	r2, [pc, #8]	@ (8008a64 <stdio_exit_handler+0xc>)
 8008a5a:	4903      	ldr	r1, [pc, #12]	@ (8008a68 <stdio_exit_handler+0x10>)
 8008a5c:	4803      	ldr	r0, [pc, #12]	@ (8008a6c <stdio_exit_handler+0x14>)
 8008a5e:	f000 b869 	b.w	8008b34 <_fwalk_sglue>
 8008a62:	bf00      	nop
 8008a64:	20000054 	.word	0x20000054
 8008a68:	0800bc19 	.word	0x0800bc19
 8008a6c:	20000064 	.word	0x20000064

08008a70 <cleanup_stdio>:
 8008a70:	6841      	ldr	r1, [r0, #4]
 8008a72:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa4 <cleanup_stdio+0x34>)
 8008a74:	4299      	cmp	r1, r3
 8008a76:	b510      	push	{r4, lr}
 8008a78:	4604      	mov	r4, r0
 8008a7a:	d001      	beq.n	8008a80 <cleanup_stdio+0x10>
 8008a7c:	f003 f8cc 	bl	800bc18 <_fflush_r>
 8008a80:	68a1      	ldr	r1, [r4, #8]
 8008a82:	4b09      	ldr	r3, [pc, #36]	@ (8008aa8 <cleanup_stdio+0x38>)
 8008a84:	4299      	cmp	r1, r3
 8008a86:	d002      	beq.n	8008a8e <cleanup_stdio+0x1e>
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f003 f8c5 	bl	800bc18 <_fflush_r>
 8008a8e:	68e1      	ldr	r1, [r4, #12]
 8008a90:	4b06      	ldr	r3, [pc, #24]	@ (8008aac <cleanup_stdio+0x3c>)
 8008a92:	4299      	cmp	r1, r3
 8008a94:	d004      	beq.n	8008aa0 <cleanup_stdio+0x30>
 8008a96:	4620      	mov	r0, r4
 8008a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a9c:	f003 b8bc 	b.w	800bc18 <_fflush_r>
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000c94 	.word	0x20000c94
 8008aa8:	20000cfc 	.word	0x20000cfc
 8008aac:	20000d64 	.word	0x20000d64

08008ab0 <global_stdio_init.part.0>:
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae0 <global_stdio_init.part.0+0x30>)
 8008ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8008ae4 <global_stdio_init.part.0+0x34>)
 8008ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ae8 <global_stdio_init.part.0+0x38>)
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	4620      	mov	r0, r4
 8008abc:	2200      	movs	r2, #0
 8008abe:	2104      	movs	r1, #4
 8008ac0:	f7ff ff94 	bl	80089ec <std>
 8008ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ac8:	2201      	movs	r2, #1
 8008aca:	2109      	movs	r1, #9
 8008acc:	f7ff ff8e 	bl	80089ec <std>
 8008ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ada:	2112      	movs	r1, #18
 8008adc:	f7ff bf86 	b.w	80089ec <std>
 8008ae0:	20000dcc 	.word	0x20000dcc
 8008ae4:	20000c94 	.word	0x20000c94
 8008ae8:	08008a59 	.word	0x08008a59

08008aec <__sfp_lock_acquire>:
 8008aec:	4801      	ldr	r0, [pc, #4]	@ (8008af4 <__sfp_lock_acquire+0x8>)
 8008aee:	f000 babc 	b.w	800906a <__retarget_lock_acquire_recursive>
 8008af2:	bf00      	nop
 8008af4:	20000dd5 	.word	0x20000dd5

08008af8 <__sfp_lock_release>:
 8008af8:	4801      	ldr	r0, [pc, #4]	@ (8008b00 <__sfp_lock_release+0x8>)
 8008afa:	f000 bab7 	b.w	800906c <__retarget_lock_release_recursive>
 8008afe:	bf00      	nop
 8008b00:	20000dd5 	.word	0x20000dd5

08008b04 <__sinit>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	4604      	mov	r4, r0
 8008b08:	f7ff fff0 	bl	8008aec <__sfp_lock_acquire>
 8008b0c:	6a23      	ldr	r3, [r4, #32]
 8008b0e:	b11b      	cbz	r3, 8008b18 <__sinit+0x14>
 8008b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b14:	f7ff bff0 	b.w	8008af8 <__sfp_lock_release>
 8008b18:	4b04      	ldr	r3, [pc, #16]	@ (8008b2c <__sinit+0x28>)
 8008b1a:	6223      	str	r3, [r4, #32]
 8008b1c:	4b04      	ldr	r3, [pc, #16]	@ (8008b30 <__sinit+0x2c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f5      	bne.n	8008b10 <__sinit+0xc>
 8008b24:	f7ff ffc4 	bl	8008ab0 <global_stdio_init.part.0>
 8008b28:	e7f2      	b.n	8008b10 <__sinit+0xc>
 8008b2a:	bf00      	nop
 8008b2c:	08008a71 	.word	0x08008a71
 8008b30:	20000dcc 	.word	0x20000dcc

08008b34 <_fwalk_sglue>:
 8008b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b38:	4607      	mov	r7, r0
 8008b3a:	4688      	mov	r8, r1
 8008b3c:	4614      	mov	r4, r2
 8008b3e:	2600      	movs	r6, #0
 8008b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b44:	f1b9 0901 	subs.w	r9, r9, #1
 8008b48:	d505      	bpl.n	8008b56 <_fwalk_sglue+0x22>
 8008b4a:	6824      	ldr	r4, [r4, #0]
 8008b4c:	2c00      	cmp	r4, #0
 8008b4e:	d1f7      	bne.n	8008b40 <_fwalk_sglue+0xc>
 8008b50:	4630      	mov	r0, r6
 8008b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b56:	89ab      	ldrh	r3, [r5, #12]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d907      	bls.n	8008b6c <_fwalk_sglue+0x38>
 8008b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b60:	3301      	adds	r3, #1
 8008b62:	d003      	beq.n	8008b6c <_fwalk_sglue+0x38>
 8008b64:	4629      	mov	r1, r5
 8008b66:	4638      	mov	r0, r7
 8008b68:	47c0      	blx	r8
 8008b6a:	4306      	orrs	r6, r0
 8008b6c:	3568      	adds	r5, #104	@ 0x68
 8008b6e:	e7e9      	b.n	8008b44 <_fwalk_sglue+0x10>

08008b70 <iprintf>:
 8008b70:	b40f      	push	{r0, r1, r2, r3}
 8008b72:	b507      	push	{r0, r1, r2, lr}
 8008b74:	4906      	ldr	r1, [pc, #24]	@ (8008b90 <iprintf+0x20>)
 8008b76:	ab04      	add	r3, sp, #16
 8008b78:	6808      	ldr	r0, [r1, #0]
 8008b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7e:	6881      	ldr	r1, [r0, #8]
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	f002 fead 	bl	800b8e0 <_vfiprintf_r>
 8008b86:	b003      	add	sp, #12
 8008b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b8c:	b004      	add	sp, #16
 8008b8e:	4770      	bx	lr
 8008b90:	20000060 	.word	0x20000060

08008b94 <_puts_r>:
 8008b94:	6a03      	ldr	r3, [r0, #32]
 8008b96:	b570      	push	{r4, r5, r6, lr}
 8008b98:	6884      	ldr	r4, [r0, #8]
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	460e      	mov	r6, r1
 8008b9e:	b90b      	cbnz	r3, 8008ba4 <_puts_r+0x10>
 8008ba0:	f7ff ffb0 	bl	8008b04 <__sinit>
 8008ba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ba6:	07db      	lsls	r3, r3, #31
 8008ba8:	d405      	bmi.n	8008bb6 <_puts_r+0x22>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	0598      	lsls	r0, r3, #22
 8008bae:	d402      	bmi.n	8008bb6 <_puts_r+0x22>
 8008bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bb2:	f000 fa5a 	bl	800906a <__retarget_lock_acquire_recursive>
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	0719      	lsls	r1, r3, #28
 8008bba:	d502      	bpl.n	8008bc2 <_puts_r+0x2e>
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d135      	bne.n	8008c2e <_puts_r+0x9a>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	f000 f8e5 	bl	8008d94 <__swsetup_r>
 8008bca:	b380      	cbz	r0, 8008c2e <_puts_r+0x9a>
 8008bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8008bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bd2:	07da      	lsls	r2, r3, #31
 8008bd4:	d405      	bmi.n	8008be2 <_puts_r+0x4e>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	059b      	lsls	r3, r3, #22
 8008bda:	d402      	bmi.n	8008be2 <_puts_r+0x4e>
 8008bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bde:	f000 fa45 	bl	800906c <__retarget_lock_release_recursive>
 8008be2:	4628      	mov	r0, r5
 8008be4:	bd70      	pop	{r4, r5, r6, pc}
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	da04      	bge.n	8008bf4 <_puts_r+0x60>
 8008bea:	69a2      	ldr	r2, [r4, #24]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	dc17      	bgt.n	8008c20 <_puts_r+0x8c>
 8008bf0:	290a      	cmp	r1, #10
 8008bf2:	d015      	beq.n	8008c20 <_puts_r+0x8c>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	6022      	str	r2, [r4, #0]
 8008bfa:	7019      	strb	r1, [r3, #0]
 8008bfc:	68a3      	ldr	r3, [r4, #8]
 8008bfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c02:	3b01      	subs	r3, #1
 8008c04:	60a3      	str	r3, [r4, #8]
 8008c06:	2900      	cmp	r1, #0
 8008c08:	d1ed      	bne.n	8008be6 <_puts_r+0x52>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da11      	bge.n	8008c32 <_puts_r+0x9e>
 8008c0e:	4622      	mov	r2, r4
 8008c10:	210a      	movs	r1, #10
 8008c12:	4628      	mov	r0, r5
 8008c14:	f000 f87f 	bl	8008d16 <__swbuf_r>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d0d7      	beq.n	8008bcc <_puts_r+0x38>
 8008c1c:	250a      	movs	r5, #10
 8008c1e:	e7d7      	b.n	8008bd0 <_puts_r+0x3c>
 8008c20:	4622      	mov	r2, r4
 8008c22:	4628      	mov	r0, r5
 8008c24:	f000 f877 	bl	8008d16 <__swbuf_r>
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d1e7      	bne.n	8008bfc <_puts_r+0x68>
 8008c2c:	e7ce      	b.n	8008bcc <_puts_r+0x38>
 8008c2e:	3e01      	subs	r6, #1
 8008c30:	e7e4      	b.n	8008bfc <_puts_r+0x68>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	6022      	str	r2, [r4, #0]
 8008c38:	220a      	movs	r2, #10
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	e7ee      	b.n	8008c1c <_puts_r+0x88>
	...

08008c40 <puts>:
 8008c40:	4b02      	ldr	r3, [pc, #8]	@ (8008c4c <puts+0xc>)
 8008c42:	4601      	mov	r1, r0
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	f7ff bfa5 	b.w	8008b94 <_puts_r>
 8008c4a:	bf00      	nop
 8008c4c:	20000060 	.word	0x20000060

08008c50 <siprintf>:
 8008c50:	b40e      	push	{r1, r2, r3}
 8008c52:	b500      	push	{lr}
 8008c54:	b09c      	sub	sp, #112	@ 0x70
 8008c56:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c58:	9002      	str	r0, [sp, #8]
 8008c5a:	9006      	str	r0, [sp, #24]
 8008c5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c60:	4809      	ldr	r0, [pc, #36]	@ (8008c88 <siprintf+0x38>)
 8008c62:	9107      	str	r1, [sp, #28]
 8008c64:	9104      	str	r1, [sp, #16]
 8008c66:	4909      	ldr	r1, [pc, #36]	@ (8008c8c <siprintf+0x3c>)
 8008c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c6c:	9105      	str	r1, [sp, #20]
 8008c6e:	6800      	ldr	r0, [r0, #0]
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	a902      	add	r1, sp, #8
 8008c74:	f002 fd0e 	bl	800b694 <_svfiprintf_r>
 8008c78:	9b02      	ldr	r3, [sp, #8]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	b01c      	add	sp, #112	@ 0x70
 8008c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c84:	b003      	add	sp, #12
 8008c86:	4770      	bx	lr
 8008c88:	20000060 	.word	0x20000060
 8008c8c:	ffff0208 	.word	0xffff0208

08008c90 <__sread>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	460c      	mov	r4, r1
 8008c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c98:	f000 f998 	bl	8008fcc <_read_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	bfab      	itete	ge
 8008ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ca4:	181b      	addge	r3, r3, r0
 8008ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008caa:	bfac      	ite	ge
 8008cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cae:	81a3      	strhlt	r3, [r4, #12]
 8008cb0:	bd10      	pop	{r4, pc}

08008cb2 <__swrite>:
 8008cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb6:	461f      	mov	r7, r3
 8008cb8:	898b      	ldrh	r3, [r1, #12]
 8008cba:	05db      	lsls	r3, r3, #23
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	d505      	bpl.n	8008cd0 <__swrite+0x1e>
 8008cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc8:	2302      	movs	r3, #2
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f000 f96c 	bl	8008fa8 <_lseek_r>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cda:	81a3      	strh	r3, [r4, #12]
 8008cdc:	4632      	mov	r2, r6
 8008cde:	463b      	mov	r3, r7
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce6:	f000 b983 	b.w	8008ff0 <_write_r>

08008cea <__sseek>:
 8008cea:	b510      	push	{r4, lr}
 8008cec:	460c      	mov	r4, r1
 8008cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf2:	f000 f959 	bl	8008fa8 <_lseek_r>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	bf15      	itete	ne
 8008cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d06:	81a3      	strheq	r3, [r4, #12]
 8008d08:	bf18      	it	ne
 8008d0a:	81a3      	strhne	r3, [r4, #12]
 8008d0c:	bd10      	pop	{r4, pc}

08008d0e <__sclose>:
 8008d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d12:	f000 b939 	b.w	8008f88 <_close_r>

08008d16 <__swbuf_r>:
 8008d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d18:	460e      	mov	r6, r1
 8008d1a:	4614      	mov	r4, r2
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	b118      	cbz	r0, 8008d28 <__swbuf_r+0x12>
 8008d20:	6a03      	ldr	r3, [r0, #32]
 8008d22:	b90b      	cbnz	r3, 8008d28 <__swbuf_r+0x12>
 8008d24:	f7ff feee 	bl	8008b04 <__sinit>
 8008d28:	69a3      	ldr	r3, [r4, #24]
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	071a      	lsls	r2, r3, #28
 8008d30:	d501      	bpl.n	8008d36 <__swbuf_r+0x20>
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	b943      	cbnz	r3, 8008d48 <__swbuf_r+0x32>
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 f82b 	bl	8008d94 <__swsetup_r>
 8008d3e:	b118      	cbz	r0, 8008d48 <__swbuf_r+0x32>
 8008d40:	f04f 37ff 	mov.w	r7, #4294967295
 8008d44:	4638      	mov	r0, r7
 8008d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	6922      	ldr	r2, [r4, #16]
 8008d4c:	1a98      	subs	r0, r3, r2
 8008d4e:	6963      	ldr	r3, [r4, #20]
 8008d50:	b2f6      	uxtb	r6, r6
 8008d52:	4283      	cmp	r3, r0
 8008d54:	4637      	mov	r7, r6
 8008d56:	dc05      	bgt.n	8008d64 <__swbuf_r+0x4e>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f002 ff5c 	bl	800bc18 <_fflush_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d1ed      	bne.n	8008d40 <__swbuf_r+0x2a>
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	60a3      	str	r3, [r4, #8]
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	6022      	str	r2, [r4, #0]
 8008d70:	701e      	strb	r6, [r3, #0]
 8008d72:	6962      	ldr	r2, [r4, #20]
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d004      	beq.n	8008d84 <__swbuf_r+0x6e>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	07db      	lsls	r3, r3, #31
 8008d7e:	d5e1      	bpl.n	8008d44 <__swbuf_r+0x2e>
 8008d80:	2e0a      	cmp	r6, #10
 8008d82:	d1df      	bne.n	8008d44 <__swbuf_r+0x2e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f002 ff46 	bl	800bc18 <_fflush_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d0d9      	beq.n	8008d44 <__swbuf_r+0x2e>
 8008d90:	e7d6      	b.n	8008d40 <__swbuf_r+0x2a>
	...

08008d94 <__swsetup_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4b29      	ldr	r3, [pc, #164]	@ (8008e3c <__swsetup_r+0xa8>)
 8008d98:	4605      	mov	r5, r0
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	b118      	cbz	r0, 8008da8 <__swsetup_r+0x14>
 8008da0:	6a03      	ldr	r3, [r0, #32]
 8008da2:	b90b      	cbnz	r3, 8008da8 <__swsetup_r+0x14>
 8008da4:	f7ff feae 	bl	8008b04 <__sinit>
 8008da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dac:	0719      	lsls	r1, r3, #28
 8008dae:	d422      	bmi.n	8008df6 <__swsetup_r+0x62>
 8008db0:	06da      	lsls	r2, r3, #27
 8008db2:	d407      	bmi.n	8008dc4 <__swsetup_r+0x30>
 8008db4:	2209      	movs	r2, #9
 8008db6:	602a      	str	r2, [r5, #0]
 8008db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc2:	e033      	b.n	8008e2c <__swsetup_r+0x98>
 8008dc4:	0758      	lsls	r0, r3, #29
 8008dc6:	d512      	bpl.n	8008dee <__swsetup_r+0x5a>
 8008dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dca:	b141      	cbz	r1, 8008dde <__swsetup_r+0x4a>
 8008dcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	d002      	beq.n	8008dda <__swsetup_r+0x46>
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f000 ffcb 	bl	8009d70 <_free_r>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008de4:	81a3      	strh	r3, [r4, #12]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6063      	str	r3, [r4, #4]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f043 0308 	orr.w	r3, r3, #8
 8008df4:	81a3      	strh	r3, [r4, #12]
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	b94b      	cbnz	r3, 8008e0e <__swsetup_r+0x7a>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e04:	d003      	beq.n	8008e0e <__swsetup_r+0x7a>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f002 ff65 	bl	800bcd8 <__smakebuf_r>
 8008e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e12:	f013 0201 	ands.w	r2, r3, #1
 8008e16:	d00a      	beq.n	8008e2e <__swsetup_r+0x9a>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	60a2      	str	r2, [r4, #8]
 8008e1c:	6962      	ldr	r2, [r4, #20]
 8008e1e:	4252      	negs	r2, r2
 8008e20:	61a2      	str	r2, [r4, #24]
 8008e22:	6922      	ldr	r2, [r4, #16]
 8008e24:	b942      	cbnz	r2, 8008e38 <__swsetup_r+0xa4>
 8008e26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e2a:	d1c5      	bne.n	8008db8 <__swsetup_r+0x24>
 8008e2c:	bd38      	pop	{r3, r4, r5, pc}
 8008e2e:	0799      	lsls	r1, r3, #30
 8008e30:	bf58      	it	pl
 8008e32:	6962      	ldrpl	r2, [r4, #20]
 8008e34:	60a2      	str	r2, [r4, #8]
 8008e36:	e7f4      	b.n	8008e22 <__swsetup_r+0x8e>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7f7      	b.n	8008e2c <__swsetup_r+0x98>
 8008e3c:	20000060 	.word	0x20000060

08008e40 <memset>:
 8008e40:	4402      	add	r2, r0
 8008e42:	4603      	mov	r3, r0
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d100      	bne.n	8008e4a <memset+0xa>
 8008e48:	4770      	bx	lr
 8008e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4e:	e7f9      	b.n	8008e44 <memset+0x4>

08008e50 <strncmp>:
 8008e50:	b510      	push	{r4, lr}
 8008e52:	b16a      	cbz	r2, 8008e70 <strncmp+0x20>
 8008e54:	3901      	subs	r1, #1
 8008e56:	1884      	adds	r4, r0, r2
 8008e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d103      	bne.n	8008e6c <strncmp+0x1c>
 8008e64:	42a0      	cmp	r0, r4
 8008e66:	d001      	beq.n	8008e6c <strncmp+0x1c>
 8008e68:	2a00      	cmp	r2, #0
 8008e6a:	d1f5      	bne.n	8008e58 <strncmp+0x8>
 8008e6c:	1ad0      	subs	r0, r2, r3
 8008e6e:	bd10      	pop	{r4, pc}
 8008e70:	4610      	mov	r0, r2
 8008e72:	e7fc      	b.n	8008e6e <strncmp+0x1e>

08008e74 <strncpy>:
 8008e74:	b510      	push	{r4, lr}
 8008e76:	3901      	subs	r1, #1
 8008e78:	4603      	mov	r3, r0
 8008e7a:	b132      	cbz	r2, 8008e8a <strncpy+0x16>
 8008e7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e80:	f803 4b01 	strb.w	r4, [r3], #1
 8008e84:	3a01      	subs	r2, #1
 8008e86:	2c00      	cmp	r4, #0
 8008e88:	d1f7      	bne.n	8008e7a <strncpy+0x6>
 8008e8a:	441a      	add	r2, r3
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d100      	bne.n	8008e94 <strncpy+0x20>
 8008e92:	bd10      	pop	{r4, pc}
 8008e94:	f803 1b01 	strb.w	r1, [r3], #1
 8008e98:	e7f9      	b.n	8008e8e <strncpy+0x1a>
	...

08008e9c <strtok>:
 8008e9c:	4b16      	ldr	r3, [pc, #88]	@ (8008ef8 <strtok+0x5c>)
 8008e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea2:	681f      	ldr	r7, [r3, #0]
 8008ea4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	460e      	mov	r6, r1
 8008eaa:	b9ec      	cbnz	r4, 8008ee8 <strtok+0x4c>
 8008eac:	2050      	movs	r0, #80	@ 0x50
 8008eae:	f000 ffa9 	bl	8009e04 <malloc>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	6478      	str	r0, [r7, #68]	@ 0x44
 8008eb6:	b920      	cbnz	r0, 8008ec2 <strtok+0x26>
 8008eb8:	4b10      	ldr	r3, [pc, #64]	@ (8008efc <strtok+0x60>)
 8008eba:	4811      	ldr	r0, [pc, #68]	@ (8008f00 <strtok+0x64>)
 8008ebc:	215b      	movs	r1, #91	@ 0x5b
 8008ebe:	f000 f8eb 	bl	8009098 <__assert_func>
 8008ec2:	e9c0 4400 	strd	r4, r4, [r0]
 8008ec6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008eca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008ece:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008ed2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008ed6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008eda:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008ede:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008ee2:	6184      	str	r4, [r0, #24]
 8008ee4:	7704      	strb	r4, [r0, #28]
 8008ee6:	6244      	str	r4, [r0, #36]	@ 0x24
 8008ee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eea:	4631      	mov	r1, r6
 8008eec:	4628      	mov	r0, r5
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	f000 b806 	b.w	8008f04 <__strtok_r>
 8008ef8:	20000060 	.word	0x20000060
 8008efc:	0800cee1 	.word	0x0800cee1
 8008f00:	0800cef8 	.word	0x0800cef8

08008f04 <__strtok_r>:
 8008f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f06:	4604      	mov	r4, r0
 8008f08:	b908      	cbnz	r0, 8008f0e <__strtok_r+0xa>
 8008f0a:	6814      	ldr	r4, [r2, #0]
 8008f0c:	b144      	cbz	r4, 8008f20 <__strtok_r+0x1c>
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008f14:	460f      	mov	r7, r1
 8008f16:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008f1a:	b91e      	cbnz	r6, 8008f24 <__strtok_r+0x20>
 8008f1c:	b965      	cbnz	r5, 8008f38 <__strtok_r+0x34>
 8008f1e:	6015      	str	r5, [r2, #0]
 8008f20:	2000      	movs	r0, #0
 8008f22:	e005      	b.n	8008f30 <__strtok_r+0x2c>
 8008f24:	42b5      	cmp	r5, r6
 8008f26:	d1f6      	bne.n	8008f16 <__strtok_r+0x12>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1f0      	bne.n	8008f0e <__strtok_r+0xa>
 8008f2c:	6014      	str	r4, [r2, #0]
 8008f2e:	7003      	strb	r3, [r0, #0]
 8008f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f32:	461c      	mov	r4, r3
 8008f34:	e00c      	b.n	8008f50 <__strtok_r+0x4c>
 8008f36:	b915      	cbnz	r5, 8008f3e <__strtok_r+0x3a>
 8008f38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f3c:	460e      	mov	r6, r1
 8008f3e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008f42:	42ab      	cmp	r3, r5
 8008f44:	d1f7      	bne.n	8008f36 <__strtok_r+0x32>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0f3      	beq.n	8008f32 <__strtok_r+0x2e>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008f50:	6014      	str	r4, [r2, #0]
 8008f52:	e7ed      	b.n	8008f30 <__strtok_r+0x2c>

08008f54 <strstr>:
 8008f54:	780a      	ldrb	r2, [r1, #0]
 8008f56:	b570      	push	{r4, r5, r6, lr}
 8008f58:	b96a      	cbnz	r2, 8008f76 <strstr+0x22>
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d109      	bne.n	8008f74 <strstr+0x20>
 8008f60:	460c      	mov	r4, r1
 8008f62:	4605      	mov	r5, r0
 8008f64:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0f6      	beq.n	8008f5a <strstr+0x6>
 8008f6c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008f70:	429e      	cmp	r6, r3
 8008f72:	d0f7      	beq.n	8008f64 <strstr+0x10>
 8008f74:	3001      	adds	r0, #1
 8008f76:	7803      	ldrb	r3, [r0, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1ef      	bne.n	8008f5c <strstr+0x8>
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	e7ec      	b.n	8008f5a <strstr+0x6>

08008f80 <_localeconv_r>:
 8008f80:	4800      	ldr	r0, [pc, #0]	@ (8008f84 <_localeconv_r+0x4>)
 8008f82:	4770      	bx	lr
 8008f84:	200001a0 	.word	0x200001a0

08008f88 <_close_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4d06      	ldr	r5, [pc, #24]	@ (8008fa4 <_close_r+0x1c>)
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4604      	mov	r4, r0
 8008f90:	4608      	mov	r0, r1
 8008f92:	602b      	str	r3, [r5, #0]
 8008f94:	f7f8 faab 	bl	80014ee <_close>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_close_r+0x1a>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_close_r+0x1a>
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	20000dd0 	.word	0x20000dd0

08008fa8 <_lseek_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4d07      	ldr	r5, [pc, #28]	@ (8008fc8 <_lseek_r+0x20>)
 8008fac:	4604      	mov	r4, r0
 8008fae:	4608      	mov	r0, r1
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	602a      	str	r2, [r5, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f7f8 fac0 	bl	800153c <_lseek>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d102      	bne.n	8008fc6 <_lseek_r+0x1e>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	b103      	cbz	r3, 8008fc6 <_lseek_r+0x1e>
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	20000dd0 	.word	0x20000dd0

08008fcc <_read_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	4d07      	ldr	r5, [pc, #28]	@ (8008fec <_read_r+0x20>)
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	602a      	str	r2, [r5, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f7f8 fa4e 	bl	800147c <_read>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_read_r+0x1e>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_read_r+0x1e>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	20000dd0 	.word	0x20000dd0

08008ff0 <_write_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4d07      	ldr	r5, [pc, #28]	@ (8009010 <_write_r+0x20>)
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	4608      	mov	r0, r1
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	602a      	str	r2, [r5, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	f7f8 fa59 	bl	80014b6 <_write>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d102      	bne.n	800900e <_write_r+0x1e>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	b103      	cbz	r3, 800900e <_write_r+0x1e>
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	20000dd0 	.word	0x20000dd0

08009014 <__errno>:
 8009014:	4b01      	ldr	r3, [pc, #4]	@ (800901c <__errno+0x8>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	20000060 	.word	0x20000060

08009020 <__libc_init_array>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	4d0d      	ldr	r5, [pc, #52]	@ (8009058 <__libc_init_array+0x38>)
 8009024:	4c0d      	ldr	r4, [pc, #52]	@ (800905c <__libc_init_array+0x3c>)
 8009026:	1b64      	subs	r4, r4, r5
 8009028:	10a4      	asrs	r4, r4, #2
 800902a:	2600      	movs	r6, #0
 800902c:	42a6      	cmp	r6, r4
 800902e:	d109      	bne.n	8009044 <__libc_init_array+0x24>
 8009030:	4d0b      	ldr	r5, [pc, #44]	@ (8009060 <__libc_init_array+0x40>)
 8009032:	4c0c      	ldr	r4, [pc, #48]	@ (8009064 <__libc_init_array+0x44>)
 8009034:	f003 facc 	bl	800c5d0 <_init>
 8009038:	1b64      	subs	r4, r4, r5
 800903a:	10a4      	asrs	r4, r4, #2
 800903c:	2600      	movs	r6, #0
 800903e:	42a6      	cmp	r6, r4
 8009040:	d105      	bne.n	800904e <__libc_init_array+0x2e>
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	f855 3b04 	ldr.w	r3, [r5], #4
 8009048:	4798      	blx	r3
 800904a:	3601      	adds	r6, #1
 800904c:	e7ee      	b.n	800902c <__libc_init_array+0xc>
 800904e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009052:	4798      	blx	r3
 8009054:	3601      	adds	r6, #1
 8009056:	e7f2      	b.n	800903e <__libc_init_array+0x1e>
 8009058:	0800d33c 	.word	0x0800d33c
 800905c:	0800d33c 	.word	0x0800d33c
 8009060:	0800d33c 	.word	0x0800d33c
 8009064:	0800d340 	.word	0x0800d340

08009068 <__retarget_lock_init_recursive>:
 8009068:	4770      	bx	lr

0800906a <__retarget_lock_acquire_recursive>:
 800906a:	4770      	bx	lr

0800906c <__retarget_lock_release_recursive>:
 800906c:	4770      	bx	lr

0800906e <memcpy>:
 800906e:	440a      	add	r2, r1
 8009070:	4291      	cmp	r1, r2
 8009072:	f100 33ff 	add.w	r3, r0, #4294967295
 8009076:	d100      	bne.n	800907a <memcpy+0xc>
 8009078:	4770      	bx	lr
 800907a:	b510      	push	{r4, lr}
 800907c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009084:	4291      	cmp	r1, r2
 8009086:	d1f9      	bne.n	800907c <memcpy+0xe>
 8009088:	bd10      	pop	{r4, pc}
	...

0800908c <nanf>:
 800908c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009094 <nanf+0x8>
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	7fc00000 	.word	0x7fc00000

08009098 <__assert_func>:
 8009098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800909a:	4614      	mov	r4, r2
 800909c:	461a      	mov	r2, r3
 800909e:	4b09      	ldr	r3, [pc, #36]	@ (80090c4 <__assert_func+0x2c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4605      	mov	r5, r0
 80090a4:	68d8      	ldr	r0, [r3, #12]
 80090a6:	b954      	cbnz	r4, 80090be <__assert_func+0x26>
 80090a8:	4b07      	ldr	r3, [pc, #28]	@ (80090c8 <__assert_func+0x30>)
 80090aa:	461c      	mov	r4, r3
 80090ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090b0:	9100      	str	r1, [sp, #0]
 80090b2:	462b      	mov	r3, r5
 80090b4:	4905      	ldr	r1, [pc, #20]	@ (80090cc <__assert_func+0x34>)
 80090b6:	f002 fdd7 	bl	800bc68 <fiprintf>
 80090ba:	f002 fe9d 	bl	800bdf8 <abort>
 80090be:	4b04      	ldr	r3, [pc, #16]	@ (80090d0 <__assert_func+0x38>)
 80090c0:	e7f4      	b.n	80090ac <__assert_func+0x14>
 80090c2:	bf00      	nop
 80090c4:	20000060 	.word	0x20000060
 80090c8:	0800cf8d 	.word	0x0800cf8d
 80090cc:	0800cf5f 	.word	0x0800cf5f
 80090d0:	0800cf52 	.word	0x0800cf52

080090d4 <quorem>:
 80090d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d8:	6903      	ldr	r3, [r0, #16]
 80090da:	690c      	ldr	r4, [r1, #16]
 80090dc:	42a3      	cmp	r3, r4
 80090de:	4607      	mov	r7, r0
 80090e0:	db7e      	blt.n	80091e0 <quorem+0x10c>
 80090e2:	3c01      	subs	r4, #1
 80090e4:	f101 0814 	add.w	r8, r1, #20
 80090e8:	00a3      	lsls	r3, r4, #2
 80090ea:	f100 0514 	add.w	r5, r0, #20
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090fe:	3301      	adds	r3, #1
 8009100:	429a      	cmp	r2, r3
 8009102:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009106:	fbb2 f6f3 	udiv	r6, r2, r3
 800910a:	d32e      	bcc.n	800916a <quorem+0x96>
 800910c:	f04f 0a00 	mov.w	sl, #0
 8009110:	46c4      	mov	ip, r8
 8009112:	46ae      	mov	lr, r5
 8009114:	46d3      	mov	fp, sl
 8009116:	f85c 3b04 	ldr.w	r3, [ip], #4
 800911a:	b298      	uxth	r0, r3
 800911c:	fb06 a000 	mla	r0, r6, r0, sl
 8009120:	0c02      	lsrs	r2, r0, #16
 8009122:	0c1b      	lsrs	r3, r3, #16
 8009124:	fb06 2303 	mla	r3, r6, r3, r2
 8009128:	f8de 2000 	ldr.w	r2, [lr]
 800912c:	b280      	uxth	r0, r0
 800912e:	b292      	uxth	r2, r2
 8009130:	1a12      	subs	r2, r2, r0
 8009132:	445a      	add	r2, fp
 8009134:	f8de 0000 	ldr.w	r0, [lr]
 8009138:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800913c:	b29b      	uxth	r3, r3
 800913e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009142:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009146:	b292      	uxth	r2, r2
 8009148:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800914c:	45e1      	cmp	r9, ip
 800914e:	f84e 2b04 	str.w	r2, [lr], #4
 8009152:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009156:	d2de      	bcs.n	8009116 <quorem+0x42>
 8009158:	9b00      	ldr	r3, [sp, #0]
 800915a:	58eb      	ldr	r3, [r5, r3]
 800915c:	b92b      	cbnz	r3, 800916a <quorem+0x96>
 800915e:	9b01      	ldr	r3, [sp, #4]
 8009160:	3b04      	subs	r3, #4
 8009162:	429d      	cmp	r5, r3
 8009164:	461a      	mov	r2, r3
 8009166:	d32f      	bcc.n	80091c8 <quorem+0xf4>
 8009168:	613c      	str	r4, [r7, #16]
 800916a:	4638      	mov	r0, r7
 800916c:	f001 f9c4 	bl	800a4f8 <__mcmp>
 8009170:	2800      	cmp	r0, #0
 8009172:	db25      	blt.n	80091c0 <quorem+0xec>
 8009174:	4629      	mov	r1, r5
 8009176:	2000      	movs	r0, #0
 8009178:	f858 2b04 	ldr.w	r2, [r8], #4
 800917c:	f8d1 c000 	ldr.w	ip, [r1]
 8009180:	fa1f fe82 	uxth.w	lr, r2
 8009184:	fa1f f38c 	uxth.w	r3, ip
 8009188:	eba3 030e 	sub.w	r3, r3, lr
 800918c:	4403      	add	r3, r0
 800918e:	0c12      	lsrs	r2, r2, #16
 8009190:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009194:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009198:	b29b      	uxth	r3, r3
 800919a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800919e:	45c1      	cmp	r9, r8
 80091a0:	f841 3b04 	str.w	r3, [r1], #4
 80091a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80091a8:	d2e6      	bcs.n	8009178 <quorem+0xa4>
 80091aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091b2:	b922      	cbnz	r2, 80091be <quorem+0xea>
 80091b4:	3b04      	subs	r3, #4
 80091b6:	429d      	cmp	r5, r3
 80091b8:	461a      	mov	r2, r3
 80091ba:	d30b      	bcc.n	80091d4 <quorem+0x100>
 80091bc:	613c      	str	r4, [r7, #16]
 80091be:	3601      	adds	r6, #1
 80091c0:	4630      	mov	r0, r6
 80091c2:	b003      	add	sp, #12
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	6812      	ldr	r2, [r2, #0]
 80091ca:	3b04      	subs	r3, #4
 80091cc:	2a00      	cmp	r2, #0
 80091ce:	d1cb      	bne.n	8009168 <quorem+0x94>
 80091d0:	3c01      	subs	r4, #1
 80091d2:	e7c6      	b.n	8009162 <quorem+0x8e>
 80091d4:	6812      	ldr	r2, [r2, #0]
 80091d6:	3b04      	subs	r3, #4
 80091d8:	2a00      	cmp	r2, #0
 80091da:	d1ef      	bne.n	80091bc <quorem+0xe8>
 80091dc:	3c01      	subs	r4, #1
 80091de:	e7ea      	b.n	80091b6 <quorem+0xe2>
 80091e0:	2000      	movs	r0, #0
 80091e2:	e7ee      	b.n	80091c2 <quorem+0xee>
 80091e4:	0000      	movs	r0, r0
	...

080091e8 <_dtoa_r>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	69c7      	ldr	r7, [r0, #28]
 80091ee:	b099      	sub	sp, #100	@ 0x64
 80091f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80091f4:	ec55 4b10 	vmov	r4, r5, d0
 80091f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80091fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80091fc:	4683      	mov	fp, r0
 80091fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009200:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009202:	b97f      	cbnz	r7, 8009224 <_dtoa_r+0x3c>
 8009204:	2010      	movs	r0, #16
 8009206:	f000 fdfd 	bl	8009e04 <malloc>
 800920a:	4602      	mov	r2, r0
 800920c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009210:	b920      	cbnz	r0, 800921c <_dtoa_r+0x34>
 8009212:	4ba7      	ldr	r3, [pc, #668]	@ (80094b0 <_dtoa_r+0x2c8>)
 8009214:	21ef      	movs	r1, #239	@ 0xef
 8009216:	48a7      	ldr	r0, [pc, #668]	@ (80094b4 <_dtoa_r+0x2cc>)
 8009218:	f7ff ff3e 	bl	8009098 <__assert_func>
 800921c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009220:	6007      	str	r7, [r0, #0]
 8009222:	60c7      	str	r7, [r0, #12]
 8009224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009228:	6819      	ldr	r1, [r3, #0]
 800922a:	b159      	cbz	r1, 8009244 <_dtoa_r+0x5c>
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	604a      	str	r2, [r1, #4]
 8009230:	2301      	movs	r3, #1
 8009232:	4093      	lsls	r3, r2
 8009234:	608b      	str	r3, [r1, #8]
 8009236:	4658      	mov	r0, fp
 8009238:	f000 feda 	bl	8009ff0 <_Bfree>
 800923c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	1e2b      	subs	r3, r5, #0
 8009246:	bfb9      	ittee	lt
 8009248:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800924c:	9303      	strlt	r3, [sp, #12]
 800924e:	2300      	movge	r3, #0
 8009250:	6033      	strge	r3, [r6, #0]
 8009252:	9f03      	ldr	r7, [sp, #12]
 8009254:	4b98      	ldr	r3, [pc, #608]	@ (80094b8 <_dtoa_r+0x2d0>)
 8009256:	bfbc      	itt	lt
 8009258:	2201      	movlt	r2, #1
 800925a:	6032      	strlt	r2, [r6, #0]
 800925c:	43bb      	bics	r3, r7
 800925e:	d112      	bne.n	8009286 <_dtoa_r+0x9e>
 8009260:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009262:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800926c:	4323      	orrs	r3, r4
 800926e:	f000 854d 	beq.w	8009d0c <_dtoa_r+0xb24>
 8009272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009274:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80094cc <_dtoa_r+0x2e4>
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 854f 	beq.w	8009d1c <_dtoa_r+0xb34>
 800927e:	f10a 0303 	add.w	r3, sl, #3
 8009282:	f000 bd49 	b.w	8009d18 <_dtoa_r+0xb30>
 8009286:	ed9d 7b02 	vldr	d7, [sp, #8]
 800928a:	2200      	movs	r2, #0
 800928c:	ec51 0b17 	vmov	r0, r1, d7
 8009290:	2300      	movs	r3, #0
 8009292:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009296:	f7f7 fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800929a:	4680      	mov	r8, r0
 800929c:	b158      	cbz	r0, 80092b6 <_dtoa_r+0xce>
 800929e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092a0:	2301      	movs	r3, #1
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092a6:	b113      	cbz	r3, 80092ae <_dtoa_r+0xc6>
 80092a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80092aa:	4b84      	ldr	r3, [pc, #528]	@ (80094bc <_dtoa_r+0x2d4>)
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80094d0 <_dtoa_r+0x2e8>
 80092b2:	f000 bd33 	b.w	8009d1c <_dtoa_r+0xb34>
 80092b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80092ba:	aa16      	add	r2, sp, #88	@ 0x58
 80092bc:	a917      	add	r1, sp, #92	@ 0x5c
 80092be:	4658      	mov	r0, fp
 80092c0:	f001 fa3a 	bl	800a738 <__d2b>
 80092c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80092c8:	4681      	mov	r9, r0
 80092ca:	2e00      	cmp	r6, #0
 80092cc:	d077      	beq.n	80093be <_dtoa_r+0x1d6>
 80092ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80092d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80092e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80092e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80092e8:	4619      	mov	r1, r3
 80092ea:	2200      	movs	r2, #0
 80092ec:	4b74      	ldr	r3, [pc, #464]	@ (80094c0 <_dtoa_r+0x2d8>)
 80092ee:	f7f6 ffcb 	bl	8000288 <__aeabi_dsub>
 80092f2:	a369      	add	r3, pc, #420	@ (adr r3, 8009498 <_dtoa_r+0x2b0>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f7f7 f97e 	bl	80005f8 <__aeabi_dmul>
 80092fc:	a368      	add	r3, pc, #416	@ (adr r3, 80094a0 <_dtoa_r+0x2b8>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f7f6 ffc3 	bl	800028c <__adddf3>
 8009306:	4604      	mov	r4, r0
 8009308:	4630      	mov	r0, r6
 800930a:	460d      	mov	r5, r1
 800930c:	f7f7 f90a 	bl	8000524 <__aeabi_i2d>
 8009310:	a365      	add	r3, pc, #404	@ (adr r3, 80094a8 <_dtoa_r+0x2c0>)
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	f7f7 f96f 	bl	80005f8 <__aeabi_dmul>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4620      	mov	r0, r4
 8009320:	4629      	mov	r1, r5
 8009322:	f7f6 ffb3 	bl	800028c <__adddf3>
 8009326:	4604      	mov	r4, r0
 8009328:	460d      	mov	r5, r1
 800932a:	f7f7 fc15 	bl	8000b58 <__aeabi_d2iz>
 800932e:	2200      	movs	r2, #0
 8009330:	4607      	mov	r7, r0
 8009332:	2300      	movs	r3, #0
 8009334:	4620      	mov	r0, r4
 8009336:	4629      	mov	r1, r5
 8009338:	f7f7 fbd0 	bl	8000adc <__aeabi_dcmplt>
 800933c:	b140      	cbz	r0, 8009350 <_dtoa_r+0x168>
 800933e:	4638      	mov	r0, r7
 8009340:	f7f7 f8f0 	bl	8000524 <__aeabi_i2d>
 8009344:	4622      	mov	r2, r4
 8009346:	462b      	mov	r3, r5
 8009348:	f7f7 fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800934c:	b900      	cbnz	r0, 8009350 <_dtoa_r+0x168>
 800934e:	3f01      	subs	r7, #1
 8009350:	2f16      	cmp	r7, #22
 8009352:	d851      	bhi.n	80093f8 <_dtoa_r+0x210>
 8009354:	4b5b      	ldr	r3, [pc, #364]	@ (80094c4 <_dtoa_r+0x2dc>)
 8009356:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009362:	f7f7 fbbb 	bl	8000adc <__aeabi_dcmplt>
 8009366:	2800      	cmp	r0, #0
 8009368:	d048      	beq.n	80093fc <_dtoa_r+0x214>
 800936a:	3f01      	subs	r7, #1
 800936c:	2300      	movs	r3, #0
 800936e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009370:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009372:	1b9b      	subs	r3, r3, r6
 8009374:	1e5a      	subs	r2, r3, #1
 8009376:	bf44      	itt	mi
 8009378:	f1c3 0801 	rsbmi	r8, r3, #1
 800937c:	2300      	movmi	r3, #0
 800937e:	9208      	str	r2, [sp, #32]
 8009380:	bf54      	ite	pl
 8009382:	f04f 0800 	movpl.w	r8, #0
 8009386:	9308      	strmi	r3, [sp, #32]
 8009388:	2f00      	cmp	r7, #0
 800938a:	db39      	blt.n	8009400 <_dtoa_r+0x218>
 800938c:	9b08      	ldr	r3, [sp, #32]
 800938e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009390:	443b      	add	r3, r7
 8009392:	9308      	str	r3, [sp, #32]
 8009394:	2300      	movs	r3, #0
 8009396:	930a      	str	r3, [sp, #40]	@ 0x28
 8009398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800939a:	2b09      	cmp	r3, #9
 800939c:	d864      	bhi.n	8009468 <_dtoa_r+0x280>
 800939e:	2b05      	cmp	r3, #5
 80093a0:	bfc4      	itt	gt
 80093a2:	3b04      	subgt	r3, #4
 80093a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80093a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a8:	f1a3 0302 	sub.w	r3, r3, #2
 80093ac:	bfcc      	ite	gt
 80093ae:	2400      	movgt	r4, #0
 80093b0:	2401      	movle	r4, #1
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d863      	bhi.n	800947e <_dtoa_r+0x296>
 80093b6:	e8df f003 	tbb	[pc, r3]
 80093ba:	372a      	.short	0x372a
 80093bc:	5535      	.short	0x5535
 80093be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80093c2:	441e      	add	r6, r3
 80093c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80093c8:	2b20      	cmp	r3, #32
 80093ca:	bfc1      	itttt	gt
 80093cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80093d0:	409f      	lslgt	r7, r3
 80093d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80093d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80093da:	bfd6      	itet	le
 80093dc:	f1c3 0320 	rsble	r3, r3, #32
 80093e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80093e4:	fa04 f003 	lslle.w	r0, r4, r3
 80093e8:	f7f7 f88c 	bl	8000504 <__aeabi_ui2d>
 80093ec:	2201      	movs	r2, #1
 80093ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80093f2:	3e01      	subs	r6, #1
 80093f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80093f6:	e777      	b.n	80092e8 <_dtoa_r+0x100>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e7b8      	b.n	800936e <_dtoa_r+0x186>
 80093fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80093fe:	e7b7      	b.n	8009370 <_dtoa_r+0x188>
 8009400:	427b      	negs	r3, r7
 8009402:	930a      	str	r3, [sp, #40]	@ 0x28
 8009404:	2300      	movs	r3, #0
 8009406:	eba8 0807 	sub.w	r8, r8, r7
 800940a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800940c:	e7c4      	b.n	8009398 <_dtoa_r+0x1b0>
 800940e:	2300      	movs	r3, #0
 8009410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009414:	2b00      	cmp	r3, #0
 8009416:	dc35      	bgt.n	8009484 <_dtoa_r+0x29c>
 8009418:	2301      	movs	r3, #1
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	9307      	str	r3, [sp, #28]
 800941e:	461a      	mov	r2, r3
 8009420:	920e      	str	r2, [sp, #56]	@ 0x38
 8009422:	e00b      	b.n	800943c <_dtoa_r+0x254>
 8009424:	2301      	movs	r3, #1
 8009426:	e7f3      	b.n	8009410 <_dtoa_r+0x228>
 8009428:	2300      	movs	r3, #0
 800942a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800942c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800942e:	18fb      	adds	r3, r7, r3
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	3301      	adds	r3, #1
 8009434:	2b01      	cmp	r3, #1
 8009436:	9307      	str	r3, [sp, #28]
 8009438:	bfb8      	it	lt
 800943a:	2301      	movlt	r3, #1
 800943c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009440:	2100      	movs	r1, #0
 8009442:	2204      	movs	r2, #4
 8009444:	f102 0514 	add.w	r5, r2, #20
 8009448:	429d      	cmp	r5, r3
 800944a:	d91f      	bls.n	800948c <_dtoa_r+0x2a4>
 800944c:	6041      	str	r1, [r0, #4]
 800944e:	4658      	mov	r0, fp
 8009450:	f000 fd8e 	bl	8009f70 <_Balloc>
 8009454:	4682      	mov	sl, r0
 8009456:	2800      	cmp	r0, #0
 8009458:	d13c      	bne.n	80094d4 <_dtoa_r+0x2ec>
 800945a:	4b1b      	ldr	r3, [pc, #108]	@ (80094c8 <_dtoa_r+0x2e0>)
 800945c:	4602      	mov	r2, r0
 800945e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009462:	e6d8      	b.n	8009216 <_dtoa_r+0x2e>
 8009464:	2301      	movs	r3, #1
 8009466:	e7e0      	b.n	800942a <_dtoa_r+0x242>
 8009468:	2401      	movs	r4, #1
 800946a:	2300      	movs	r3, #0
 800946c:	9309      	str	r3, [sp, #36]	@ 0x24
 800946e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009470:	f04f 33ff 	mov.w	r3, #4294967295
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	9307      	str	r3, [sp, #28]
 8009478:	2200      	movs	r2, #0
 800947a:	2312      	movs	r3, #18
 800947c:	e7d0      	b.n	8009420 <_dtoa_r+0x238>
 800947e:	2301      	movs	r3, #1
 8009480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009482:	e7f5      	b.n	8009470 <_dtoa_r+0x288>
 8009484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	9307      	str	r3, [sp, #28]
 800948a:	e7d7      	b.n	800943c <_dtoa_r+0x254>
 800948c:	3101      	adds	r1, #1
 800948e:	0052      	lsls	r2, r2, #1
 8009490:	e7d8      	b.n	8009444 <_dtoa_r+0x25c>
 8009492:	bf00      	nop
 8009494:	f3af 8000 	nop.w
 8009498:	636f4361 	.word	0x636f4361
 800949c:	3fd287a7 	.word	0x3fd287a7
 80094a0:	8b60c8b3 	.word	0x8b60c8b3
 80094a4:	3fc68a28 	.word	0x3fc68a28
 80094a8:	509f79fb 	.word	0x509f79fb
 80094ac:	3fd34413 	.word	0x3fd34413
 80094b0:	0800cee1 	.word	0x0800cee1
 80094b4:	0800cf9b 	.word	0x0800cf9b
 80094b8:	7ff00000 	.word	0x7ff00000
 80094bc:	0800ceb9 	.word	0x0800ceb9
 80094c0:	3ff80000 	.word	0x3ff80000
 80094c4:	0800d098 	.word	0x0800d098
 80094c8:	0800cff3 	.word	0x0800cff3
 80094cc:	0800cf97 	.word	0x0800cf97
 80094d0:	0800ceb8 	.word	0x0800ceb8
 80094d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094d8:	6018      	str	r0, [r3, #0]
 80094da:	9b07      	ldr	r3, [sp, #28]
 80094dc:	2b0e      	cmp	r3, #14
 80094de:	f200 80a4 	bhi.w	800962a <_dtoa_r+0x442>
 80094e2:	2c00      	cmp	r4, #0
 80094e4:	f000 80a1 	beq.w	800962a <_dtoa_r+0x442>
 80094e8:	2f00      	cmp	r7, #0
 80094ea:	dd33      	ble.n	8009554 <_dtoa_r+0x36c>
 80094ec:	4bad      	ldr	r3, [pc, #692]	@ (80097a4 <_dtoa_r+0x5bc>)
 80094ee:	f007 020f 	and.w	r2, r7, #15
 80094f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094f6:	ed93 7b00 	vldr	d7, [r3]
 80094fa:	05f8      	lsls	r0, r7, #23
 80094fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009500:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009504:	d516      	bpl.n	8009534 <_dtoa_r+0x34c>
 8009506:	4ba8      	ldr	r3, [pc, #672]	@ (80097a8 <_dtoa_r+0x5c0>)
 8009508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800950c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009510:	f7f7 f99c 	bl	800084c <__aeabi_ddiv>
 8009514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009518:	f004 040f 	and.w	r4, r4, #15
 800951c:	2603      	movs	r6, #3
 800951e:	4da2      	ldr	r5, [pc, #648]	@ (80097a8 <_dtoa_r+0x5c0>)
 8009520:	b954      	cbnz	r4, 8009538 <_dtoa_r+0x350>
 8009522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800952a:	f7f7 f98f 	bl	800084c <__aeabi_ddiv>
 800952e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009532:	e028      	b.n	8009586 <_dtoa_r+0x39e>
 8009534:	2602      	movs	r6, #2
 8009536:	e7f2      	b.n	800951e <_dtoa_r+0x336>
 8009538:	07e1      	lsls	r1, r4, #31
 800953a:	d508      	bpl.n	800954e <_dtoa_r+0x366>
 800953c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009544:	f7f7 f858 	bl	80005f8 <__aeabi_dmul>
 8009548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800954c:	3601      	adds	r6, #1
 800954e:	1064      	asrs	r4, r4, #1
 8009550:	3508      	adds	r5, #8
 8009552:	e7e5      	b.n	8009520 <_dtoa_r+0x338>
 8009554:	f000 80d2 	beq.w	80096fc <_dtoa_r+0x514>
 8009558:	427c      	negs	r4, r7
 800955a:	4b92      	ldr	r3, [pc, #584]	@ (80097a4 <_dtoa_r+0x5bc>)
 800955c:	4d92      	ldr	r5, [pc, #584]	@ (80097a8 <_dtoa_r+0x5c0>)
 800955e:	f004 020f 	and.w	r2, r4, #15
 8009562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800956e:	f7f7 f843 	bl	80005f8 <__aeabi_dmul>
 8009572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009576:	1124      	asrs	r4, r4, #4
 8009578:	2300      	movs	r3, #0
 800957a:	2602      	movs	r6, #2
 800957c:	2c00      	cmp	r4, #0
 800957e:	f040 80b2 	bne.w	80096e6 <_dtoa_r+0x4fe>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1d3      	bne.n	800952e <_dtoa_r+0x346>
 8009586:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009588:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80b7 	beq.w	8009700 <_dtoa_r+0x518>
 8009592:	4b86      	ldr	r3, [pc, #536]	@ (80097ac <_dtoa_r+0x5c4>)
 8009594:	2200      	movs	r2, #0
 8009596:	4620      	mov	r0, r4
 8009598:	4629      	mov	r1, r5
 800959a:	f7f7 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f000 80ae 	beq.w	8009700 <_dtoa_r+0x518>
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 80aa 	beq.w	8009700 <_dtoa_r+0x518>
 80095ac:	9b00      	ldr	r3, [sp, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	dd37      	ble.n	8009622 <_dtoa_r+0x43a>
 80095b2:	1e7b      	subs	r3, r7, #1
 80095b4:	9304      	str	r3, [sp, #16]
 80095b6:	4620      	mov	r0, r4
 80095b8:	4b7d      	ldr	r3, [pc, #500]	@ (80097b0 <_dtoa_r+0x5c8>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	4629      	mov	r1, r5
 80095be:	f7f7 f81b 	bl	80005f8 <__aeabi_dmul>
 80095c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095c6:	9c00      	ldr	r4, [sp, #0]
 80095c8:	3601      	adds	r6, #1
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7f6 ffaa 	bl	8000524 <__aeabi_i2d>
 80095d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095d4:	f7f7 f810 	bl	80005f8 <__aeabi_dmul>
 80095d8:	4b76      	ldr	r3, [pc, #472]	@ (80097b4 <_dtoa_r+0x5cc>)
 80095da:	2200      	movs	r2, #0
 80095dc:	f7f6 fe56 	bl	800028c <__adddf3>
 80095e0:	4605      	mov	r5, r0
 80095e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	f040 808d 	bne.w	8009706 <_dtoa_r+0x51e>
 80095ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095f0:	4b71      	ldr	r3, [pc, #452]	@ (80097b8 <_dtoa_r+0x5d0>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	f7f6 fe48 	bl	8000288 <__aeabi_dsub>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009600:	462a      	mov	r2, r5
 8009602:	4633      	mov	r3, r6
 8009604:	f7f7 fa88 	bl	8000b18 <__aeabi_dcmpgt>
 8009608:	2800      	cmp	r0, #0
 800960a:	f040 828b 	bne.w	8009b24 <_dtoa_r+0x93c>
 800960e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009612:	462a      	mov	r2, r5
 8009614:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009618:	f7f7 fa60 	bl	8000adc <__aeabi_dcmplt>
 800961c:	2800      	cmp	r0, #0
 800961e:	f040 8128 	bne.w	8009872 <_dtoa_r+0x68a>
 8009622:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009626:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800962a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800962c:	2b00      	cmp	r3, #0
 800962e:	f2c0 815a 	blt.w	80098e6 <_dtoa_r+0x6fe>
 8009632:	2f0e      	cmp	r7, #14
 8009634:	f300 8157 	bgt.w	80098e6 <_dtoa_r+0x6fe>
 8009638:	4b5a      	ldr	r3, [pc, #360]	@ (80097a4 <_dtoa_r+0x5bc>)
 800963a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800963e:	ed93 7b00 	vldr	d7, [r3]
 8009642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009644:	2b00      	cmp	r3, #0
 8009646:	ed8d 7b00 	vstr	d7, [sp]
 800964a:	da03      	bge.n	8009654 <_dtoa_r+0x46c>
 800964c:	9b07      	ldr	r3, [sp, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	f340 8101 	ble.w	8009856 <_dtoa_r+0x66e>
 8009654:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009658:	4656      	mov	r6, sl
 800965a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800965e:	4620      	mov	r0, r4
 8009660:	4629      	mov	r1, r5
 8009662:	f7f7 f8f3 	bl	800084c <__aeabi_ddiv>
 8009666:	f7f7 fa77 	bl	8000b58 <__aeabi_d2iz>
 800966a:	4680      	mov	r8, r0
 800966c:	f7f6 ff5a 	bl	8000524 <__aeabi_i2d>
 8009670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009674:	f7f6 ffc0 	bl	80005f8 <__aeabi_dmul>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009684:	f7f6 fe00 	bl	8000288 <__aeabi_dsub>
 8009688:	f806 4b01 	strb.w	r4, [r6], #1
 800968c:	9d07      	ldr	r5, [sp, #28]
 800968e:	eba6 040a 	sub.w	r4, r6, sl
 8009692:	42a5      	cmp	r5, r4
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	f040 8117 	bne.w	80098ca <_dtoa_r+0x6e2>
 800969c:	f7f6 fdf6 	bl	800028c <__adddf3>
 80096a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096a4:	4604      	mov	r4, r0
 80096a6:	460d      	mov	r5, r1
 80096a8:	f7f7 fa36 	bl	8000b18 <__aeabi_dcmpgt>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	f040 80f9 	bne.w	80098a4 <_dtoa_r+0x6bc>
 80096b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096b6:	4620      	mov	r0, r4
 80096b8:	4629      	mov	r1, r5
 80096ba:	f7f7 fa05 	bl	8000ac8 <__aeabi_dcmpeq>
 80096be:	b118      	cbz	r0, 80096c8 <_dtoa_r+0x4e0>
 80096c0:	f018 0f01 	tst.w	r8, #1
 80096c4:	f040 80ee 	bne.w	80098a4 <_dtoa_r+0x6bc>
 80096c8:	4649      	mov	r1, r9
 80096ca:	4658      	mov	r0, fp
 80096cc:	f000 fc90 	bl	8009ff0 <_Bfree>
 80096d0:	2300      	movs	r3, #0
 80096d2:	7033      	strb	r3, [r6, #0]
 80096d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096d6:	3701      	adds	r7, #1
 80096d8:	601f      	str	r7, [r3, #0]
 80096da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 831d 	beq.w	8009d1c <_dtoa_r+0xb34>
 80096e2:	601e      	str	r6, [r3, #0]
 80096e4:	e31a      	b.n	8009d1c <_dtoa_r+0xb34>
 80096e6:	07e2      	lsls	r2, r4, #31
 80096e8:	d505      	bpl.n	80096f6 <_dtoa_r+0x50e>
 80096ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096ee:	f7f6 ff83 	bl	80005f8 <__aeabi_dmul>
 80096f2:	3601      	adds	r6, #1
 80096f4:	2301      	movs	r3, #1
 80096f6:	1064      	asrs	r4, r4, #1
 80096f8:	3508      	adds	r5, #8
 80096fa:	e73f      	b.n	800957c <_dtoa_r+0x394>
 80096fc:	2602      	movs	r6, #2
 80096fe:	e742      	b.n	8009586 <_dtoa_r+0x39e>
 8009700:	9c07      	ldr	r4, [sp, #28]
 8009702:	9704      	str	r7, [sp, #16]
 8009704:	e761      	b.n	80095ca <_dtoa_r+0x3e2>
 8009706:	4b27      	ldr	r3, [pc, #156]	@ (80097a4 <_dtoa_r+0x5bc>)
 8009708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800970a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800970e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009712:	4454      	add	r4, sl
 8009714:	2900      	cmp	r1, #0
 8009716:	d053      	beq.n	80097c0 <_dtoa_r+0x5d8>
 8009718:	4928      	ldr	r1, [pc, #160]	@ (80097bc <_dtoa_r+0x5d4>)
 800971a:	2000      	movs	r0, #0
 800971c:	f7f7 f896 	bl	800084c <__aeabi_ddiv>
 8009720:	4633      	mov	r3, r6
 8009722:	462a      	mov	r2, r5
 8009724:	f7f6 fdb0 	bl	8000288 <__aeabi_dsub>
 8009728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800972c:	4656      	mov	r6, sl
 800972e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009732:	f7f7 fa11 	bl	8000b58 <__aeabi_d2iz>
 8009736:	4605      	mov	r5, r0
 8009738:	f7f6 fef4 	bl	8000524 <__aeabi_i2d>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009744:	f7f6 fda0 	bl	8000288 <__aeabi_dsub>
 8009748:	3530      	adds	r5, #48	@ 0x30
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009752:	f806 5b01 	strb.w	r5, [r6], #1
 8009756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800975a:	f7f7 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800975e:	2800      	cmp	r0, #0
 8009760:	d171      	bne.n	8009846 <_dtoa_r+0x65e>
 8009762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009766:	4911      	ldr	r1, [pc, #68]	@ (80097ac <_dtoa_r+0x5c4>)
 8009768:	2000      	movs	r0, #0
 800976a:	f7f6 fd8d 	bl	8000288 <__aeabi_dsub>
 800976e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009772:	f7f7 f9b3 	bl	8000adc <__aeabi_dcmplt>
 8009776:	2800      	cmp	r0, #0
 8009778:	f040 8095 	bne.w	80098a6 <_dtoa_r+0x6be>
 800977c:	42a6      	cmp	r6, r4
 800977e:	f43f af50 	beq.w	8009622 <_dtoa_r+0x43a>
 8009782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009786:	4b0a      	ldr	r3, [pc, #40]	@ (80097b0 <_dtoa_r+0x5c8>)
 8009788:	2200      	movs	r2, #0
 800978a:	f7f6 ff35 	bl	80005f8 <__aeabi_dmul>
 800978e:	4b08      	ldr	r3, [pc, #32]	@ (80097b0 <_dtoa_r+0x5c8>)
 8009790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009794:	2200      	movs	r2, #0
 8009796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979a:	f7f6 ff2d 	bl	80005f8 <__aeabi_dmul>
 800979e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097a2:	e7c4      	b.n	800972e <_dtoa_r+0x546>
 80097a4:	0800d098 	.word	0x0800d098
 80097a8:	0800d070 	.word	0x0800d070
 80097ac:	3ff00000 	.word	0x3ff00000
 80097b0:	40240000 	.word	0x40240000
 80097b4:	401c0000 	.word	0x401c0000
 80097b8:	40140000 	.word	0x40140000
 80097bc:	3fe00000 	.word	0x3fe00000
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	f7f6 ff18 	bl	80005f8 <__aeabi_dmul>
 80097c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80097ce:	4656      	mov	r6, sl
 80097d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097d4:	f7f7 f9c0 	bl	8000b58 <__aeabi_d2iz>
 80097d8:	4605      	mov	r5, r0
 80097da:	f7f6 fea3 	bl	8000524 <__aeabi_i2d>
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e6:	f7f6 fd4f 	bl	8000288 <__aeabi_dsub>
 80097ea:	3530      	adds	r5, #48	@ 0x30
 80097ec:	f806 5b01 	strb.w	r5, [r6], #1
 80097f0:	4602      	mov	r2, r0
 80097f2:	460b      	mov	r3, r1
 80097f4:	42a6      	cmp	r6, r4
 80097f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097fa:	f04f 0200 	mov.w	r2, #0
 80097fe:	d124      	bne.n	800984a <_dtoa_r+0x662>
 8009800:	4bac      	ldr	r3, [pc, #688]	@ (8009ab4 <_dtoa_r+0x8cc>)
 8009802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009806:	f7f6 fd41 	bl	800028c <__adddf3>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009812:	f7f7 f981 	bl	8000b18 <__aeabi_dcmpgt>
 8009816:	2800      	cmp	r0, #0
 8009818:	d145      	bne.n	80098a6 <_dtoa_r+0x6be>
 800981a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800981e:	49a5      	ldr	r1, [pc, #660]	@ (8009ab4 <_dtoa_r+0x8cc>)
 8009820:	2000      	movs	r0, #0
 8009822:	f7f6 fd31 	bl	8000288 <__aeabi_dsub>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800982e:	f7f7 f955 	bl	8000adc <__aeabi_dcmplt>
 8009832:	2800      	cmp	r0, #0
 8009834:	f43f aef5 	beq.w	8009622 <_dtoa_r+0x43a>
 8009838:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800983a:	1e73      	subs	r3, r6, #1
 800983c:	9315      	str	r3, [sp, #84]	@ 0x54
 800983e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009842:	2b30      	cmp	r3, #48	@ 0x30
 8009844:	d0f8      	beq.n	8009838 <_dtoa_r+0x650>
 8009846:	9f04      	ldr	r7, [sp, #16]
 8009848:	e73e      	b.n	80096c8 <_dtoa_r+0x4e0>
 800984a:	4b9b      	ldr	r3, [pc, #620]	@ (8009ab8 <_dtoa_r+0x8d0>)
 800984c:	f7f6 fed4 	bl	80005f8 <__aeabi_dmul>
 8009850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009854:	e7bc      	b.n	80097d0 <_dtoa_r+0x5e8>
 8009856:	d10c      	bne.n	8009872 <_dtoa_r+0x68a>
 8009858:	4b98      	ldr	r3, [pc, #608]	@ (8009abc <_dtoa_r+0x8d4>)
 800985a:	2200      	movs	r2, #0
 800985c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009860:	f7f6 feca 	bl	80005f8 <__aeabi_dmul>
 8009864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009868:	f7f7 f94c 	bl	8000b04 <__aeabi_dcmpge>
 800986c:	2800      	cmp	r0, #0
 800986e:	f000 8157 	beq.w	8009b20 <_dtoa_r+0x938>
 8009872:	2400      	movs	r4, #0
 8009874:	4625      	mov	r5, r4
 8009876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009878:	43db      	mvns	r3, r3
 800987a:	9304      	str	r3, [sp, #16]
 800987c:	4656      	mov	r6, sl
 800987e:	2700      	movs	r7, #0
 8009880:	4621      	mov	r1, r4
 8009882:	4658      	mov	r0, fp
 8009884:	f000 fbb4 	bl	8009ff0 <_Bfree>
 8009888:	2d00      	cmp	r5, #0
 800988a:	d0dc      	beq.n	8009846 <_dtoa_r+0x65e>
 800988c:	b12f      	cbz	r7, 800989a <_dtoa_r+0x6b2>
 800988e:	42af      	cmp	r7, r5
 8009890:	d003      	beq.n	800989a <_dtoa_r+0x6b2>
 8009892:	4639      	mov	r1, r7
 8009894:	4658      	mov	r0, fp
 8009896:	f000 fbab 	bl	8009ff0 <_Bfree>
 800989a:	4629      	mov	r1, r5
 800989c:	4658      	mov	r0, fp
 800989e:	f000 fba7 	bl	8009ff0 <_Bfree>
 80098a2:	e7d0      	b.n	8009846 <_dtoa_r+0x65e>
 80098a4:	9704      	str	r7, [sp, #16]
 80098a6:	4633      	mov	r3, r6
 80098a8:	461e      	mov	r6, r3
 80098aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098ae:	2a39      	cmp	r2, #57	@ 0x39
 80098b0:	d107      	bne.n	80098c2 <_dtoa_r+0x6da>
 80098b2:	459a      	cmp	sl, r3
 80098b4:	d1f8      	bne.n	80098a8 <_dtoa_r+0x6c0>
 80098b6:	9a04      	ldr	r2, [sp, #16]
 80098b8:	3201      	adds	r2, #1
 80098ba:	9204      	str	r2, [sp, #16]
 80098bc:	2230      	movs	r2, #48	@ 0x30
 80098be:	f88a 2000 	strb.w	r2, [sl]
 80098c2:	781a      	ldrb	r2, [r3, #0]
 80098c4:	3201      	adds	r2, #1
 80098c6:	701a      	strb	r2, [r3, #0]
 80098c8:	e7bd      	b.n	8009846 <_dtoa_r+0x65e>
 80098ca:	4b7b      	ldr	r3, [pc, #492]	@ (8009ab8 <_dtoa_r+0x8d0>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	f7f6 fe93 	bl	80005f8 <__aeabi_dmul>
 80098d2:	2200      	movs	r2, #0
 80098d4:	2300      	movs	r3, #0
 80098d6:	4604      	mov	r4, r0
 80098d8:	460d      	mov	r5, r1
 80098da:	f7f7 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80098de:	2800      	cmp	r0, #0
 80098e0:	f43f aebb 	beq.w	800965a <_dtoa_r+0x472>
 80098e4:	e6f0      	b.n	80096c8 <_dtoa_r+0x4e0>
 80098e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80098e8:	2a00      	cmp	r2, #0
 80098ea:	f000 80db 	beq.w	8009aa4 <_dtoa_r+0x8bc>
 80098ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098f0:	2a01      	cmp	r2, #1
 80098f2:	f300 80bf 	bgt.w	8009a74 <_dtoa_r+0x88c>
 80098f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80098f8:	2a00      	cmp	r2, #0
 80098fa:	f000 80b7 	beq.w	8009a6c <_dtoa_r+0x884>
 80098fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009902:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009904:	4646      	mov	r6, r8
 8009906:	9a08      	ldr	r2, [sp, #32]
 8009908:	2101      	movs	r1, #1
 800990a:	441a      	add	r2, r3
 800990c:	4658      	mov	r0, fp
 800990e:	4498      	add	r8, r3
 8009910:	9208      	str	r2, [sp, #32]
 8009912:	f000 fc6b 	bl	800a1ec <__i2b>
 8009916:	4605      	mov	r5, r0
 8009918:	b15e      	cbz	r6, 8009932 <_dtoa_r+0x74a>
 800991a:	9b08      	ldr	r3, [sp, #32]
 800991c:	2b00      	cmp	r3, #0
 800991e:	dd08      	ble.n	8009932 <_dtoa_r+0x74a>
 8009920:	42b3      	cmp	r3, r6
 8009922:	9a08      	ldr	r2, [sp, #32]
 8009924:	bfa8      	it	ge
 8009926:	4633      	movge	r3, r6
 8009928:	eba8 0803 	sub.w	r8, r8, r3
 800992c:	1af6      	subs	r6, r6, r3
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	9308      	str	r3, [sp, #32]
 8009932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009934:	b1f3      	cbz	r3, 8009974 <_dtoa_r+0x78c>
 8009936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80b7 	beq.w	8009aac <_dtoa_r+0x8c4>
 800993e:	b18c      	cbz	r4, 8009964 <_dtoa_r+0x77c>
 8009940:	4629      	mov	r1, r5
 8009942:	4622      	mov	r2, r4
 8009944:	4658      	mov	r0, fp
 8009946:	f000 fd11 	bl	800a36c <__pow5mult>
 800994a:	464a      	mov	r2, r9
 800994c:	4601      	mov	r1, r0
 800994e:	4605      	mov	r5, r0
 8009950:	4658      	mov	r0, fp
 8009952:	f000 fc61 	bl	800a218 <__multiply>
 8009956:	4649      	mov	r1, r9
 8009958:	9004      	str	r0, [sp, #16]
 800995a:	4658      	mov	r0, fp
 800995c:	f000 fb48 	bl	8009ff0 <_Bfree>
 8009960:	9b04      	ldr	r3, [sp, #16]
 8009962:	4699      	mov	r9, r3
 8009964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009966:	1b1a      	subs	r2, r3, r4
 8009968:	d004      	beq.n	8009974 <_dtoa_r+0x78c>
 800996a:	4649      	mov	r1, r9
 800996c:	4658      	mov	r0, fp
 800996e:	f000 fcfd 	bl	800a36c <__pow5mult>
 8009972:	4681      	mov	r9, r0
 8009974:	2101      	movs	r1, #1
 8009976:	4658      	mov	r0, fp
 8009978:	f000 fc38 	bl	800a1ec <__i2b>
 800997c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800997e:	4604      	mov	r4, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 81cf 	beq.w	8009d24 <_dtoa_r+0xb3c>
 8009986:	461a      	mov	r2, r3
 8009988:	4601      	mov	r1, r0
 800998a:	4658      	mov	r0, fp
 800998c:	f000 fcee 	bl	800a36c <__pow5mult>
 8009990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009992:	2b01      	cmp	r3, #1
 8009994:	4604      	mov	r4, r0
 8009996:	f300 8095 	bgt.w	8009ac4 <_dtoa_r+0x8dc>
 800999a:	9b02      	ldr	r3, [sp, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f040 8087 	bne.w	8009ab0 <_dtoa_r+0x8c8>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f040 8089 	bne.w	8009ac0 <_dtoa_r+0x8d8>
 80099ae:	9b03      	ldr	r3, [sp, #12]
 80099b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099b4:	0d1b      	lsrs	r3, r3, #20
 80099b6:	051b      	lsls	r3, r3, #20
 80099b8:	b12b      	cbz	r3, 80099c6 <_dtoa_r+0x7de>
 80099ba:	9b08      	ldr	r3, [sp, #32]
 80099bc:	3301      	adds	r3, #1
 80099be:	9308      	str	r3, [sp, #32]
 80099c0:	f108 0801 	add.w	r8, r8, #1
 80099c4:	2301      	movs	r3, #1
 80099c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 81b0 	beq.w	8009d30 <_dtoa_r+0xb48>
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099d6:	6918      	ldr	r0, [r3, #16]
 80099d8:	f000 fbbc 	bl	800a154 <__hi0bits>
 80099dc:	f1c0 0020 	rsb	r0, r0, #32
 80099e0:	9b08      	ldr	r3, [sp, #32]
 80099e2:	4418      	add	r0, r3
 80099e4:	f010 001f 	ands.w	r0, r0, #31
 80099e8:	d077      	beq.n	8009ada <_dtoa_r+0x8f2>
 80099ea:	f1c0 0320 	rsb	r3, r0, #32
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	dd6b      	ble.n	8009aca <_dtoa_r+0x8e2>
 80099f2:	9b08      	ldr	r3, [sp, #32]
 80099f4:	f1c0 001c 	rsb	r0, r0, #28
 80099f8:	4403      	add	r3, r0
 80099fa:	4480      	add	r8, r0
 80099fc:	4406      	add	r6, r0
 80099fe:	9308      	str	r3, [sp, #32]
 8009a00:	f1b8 0f00 	cmp.w	r8, #0
 8009a04:	dd05      	ble.n	8009a12 <_dtoa_r+0x82a>
 8009a06:	4649      	mov	r1, r9
 8009a08:	4642      	mov	r2, r8
 8009a0a:	4658      	mov	r0, fp
 8009a0c:	f000 fd08 	bl	800a420 <__lshift>
 8009a10:	4681      	mov	r9, r0
 8009a12:	9b08      	ldr	r3, [sp, #32]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	dd05      	ble.n	8009a24 <_dtoa_r+0x83c>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	4658      	mov	r0, fp
 8009a1e:	f000 fcff 	bl	800a420 <__lshift>
 8009a22:	4604      	mov	r4, r0
 8009a24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d059      	beq.n	8009ade <_dtoa_r+0x8f6>
 8009a2a:	4621      	mov	r1, r4
 8009a2c:	4648      	mov	r0, r9
 8009a2e:	f000 fd63 	bl	800a4f8 <__mcmp>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	da53      	bge.n	8009ade <_dtoa_r+0x8f6>
 8009a36:	1e7b      	subs	r3, r7, #1
 8009a38:	9304      	str	r3, [sp, #16]
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	220a      	movs	r2, #10
 8009a40:	4658      	mov	r0, fp
 8009a42:	f000 faf7 	bl	800a034 <__multadd>
 8009a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a48:	4681      	mov	r9, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 8172 	beq.w	8009d34 <_dtoa_r+0xb4c>
 8009a50:	2300      	movs	r3, #0
 8009a52:	4629      	mov	r1, r5
 8009a54:	220a      	movs	r2, #10
 8009a56:	4658      	mov	r0, fp
 8009a58:	f000 faec 	bl	800a034 <__multadd>
 8009a5c:	9b00      	ldr	r3, [sp, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	4605      	mov	r5, r0
 8009a62:	dc67      	bgt.n	8009b34 <_dtoa_r+0x94c>
 8009a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	dc41      	bgt.n	8009aee <_dtoa_r+0x906>
 8009a6a:	e063      	b.n	8009b34 <_dtoa_r+0x94c>
 8009a6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009a72:	e746      	b.n	8009902 <_dtoa_r+0x71a>
 8009a74:	9b07      	ldr	r3, [sp, #28]
 8009a76:	1e5c      	subs	r4, r3, #1
 8009a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a7a:	42a3      	cmp	r3, r4
 8009a7c:	bfbf      	itttt	lt
 8009a7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009a80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009a82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009a84:	1ae3      	sublt	r3, r4, r3
 8009a86:	bfb4      	ite	lt
 8009a88:	18d2      	addlt	r2, r2, r3
 8009a8a:	1b1c      	subge	r4, r3, r4
 8009a8c:	9b07      	ldr	r3, [sp, #28]
 8009a8e:	bfbc      	itt	lt
 8009a90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009a92:	2400      	movlt	r4, #0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	bfb5      	itete	lt
 8009a98:	eba8 0603 	sublt.w	r6, r8, r3
 8009a9c:	9b07      	ldrge	r3, [sp, #28]
 8009a9e:	2300      	movlt	r3, #0
 8009aa0:	4646      	movge	r6, r8
 8009aa2:	e730      	b.n	8009906 <_dtoa_r+0x71e>
 8009aa4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009aa6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009aa8:	4646      	mov	r6, r8
 8009aaa:	e735      	b.n	8009918 <_dtoa_r+0x730>
 8009aac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009aae:	e75c      	b.n	800996a <_dtoa_r+0x782>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e788      	b.n	80099c6 <_dtoa_r+0x7de>
 8009ab4:	3fe00000 	.word	0x3fe00000
 8009ab8:	40240000 	.word	0x40240000
 8009abc:	40140000 	.word	0x40140000
 8009ac0:	9b02      	ldr	r3, [sp, #8]
 8009ac2:	e780      	b.n	80099c6 <_dtoa_r+0x7de>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ac8:	e782      	b.n	80099d0 <_dtoa_r+0x7e8>
 8009aca:	d099      	beq.n	8009a00 <_dtoa_r+0x818>
 8009acc:	9a08      	ldr	r2, [sp, #32]
 8009ace:	331c      	adds	r3, #28
 8009ad0:	441a      	add	r2, r3
 8009ad2:	4498      	add	r8, r3
 8009ad4:	441e      	add	r6, r3
 8009ad6:	9208      	str	r2, [sp, #32]
 8009ad8:	e792      	b.n	8009a00 <_dtoa_r+0x818>
 8009ada:	4603      	mov	r3, r0
 8009adc:	e7f6      	b.n	8009acc <_dtoa_r+0x8e4>
 8009ade:	9b07      	ldr	r3, [sp, #28]
 8009ae0:	9704      	str	r7, [sp, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dc20      	bgt.n	8009b28 <_dtoa_r+0x940>
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	dd1e      	ble.n	8009b2c <_dtoa_r+0x944>
 8009aee:	9b00      	ldr	r3, [sp, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f47f aec0 	bne.w	8009876 <_dtoa_r+0x68e>
 8009af6:	4621      	mov	r1, r4
 8009af8:	2205      	movs	r2, #5
 8009afa:	4658      	mov	r0, fp
 8009afc:	f000 fa9a 	bl	800a034 <__multadd>
 8009b00:	4601      	mov	r1, r0
 8009b02:	4604      	mov	r4, r0
 8009b04:	4648      	mov	r0, r9
 8009b06:	f000 fcf7 	bl	800a4f8 <__mcmp>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f77f aeb3 	ble.w	8009876 <_dtoa_r+0x68e>
 8009b10:	4656      	mov	r6, sl
 8009b12:	2331      	movs	r3, #49	@ 0x31
 8009b14:	f806 3b01 	strb.w	r3, [r6], #1
 8009b18:	9b04      	ldr	r3, [sp, #16]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	9304      	str	r3, [sp, #16]
 8009b1e:	e6ae      	b.n	800987e <_dtoa_r+0x696>
 8009b20:	9c07      	ldr	r4, [sp, #28]
 8009b22:	9704      	str	r7, [sp, #16]
 8009b24:	4625      	mov	r5, r4
 8009b26:	e7f3      	b.n	8009b10 <_dtoa_r+0x928>
 8009b28:	9b07      	ldr	r3, [sp, #28]
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 8104 	beq.w	8009d3c <_dtoa_r+0xb54>
 8009b34:	2e00      	cmp	r6, #0
 8009b36:	dd05      	ble.n	8009b44 <_dtoa_r+0x95c>
 8009b38:	4629      	mov	r1, r5
 8009b3a:	4632      	mov	r2, r6
 8009b3c:	4658      	mov	r0, fp
 8009b3e:	f000 fc6f 	bl	800a420 <__lshift>
 8009b42:	4605      	mov	r5, r0
 8009b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d05a      	beq.n	8009c00 <_dtoa_r+0xa18>
 8009b4a:	6869      	ldr	r1, [r5, #4]
 8009b4c:	4658      	mov	r0, fp
 8009b4e:	f000 fa0f 	bl	8009f70 <_Balloc>
 8009b52:	4606      	mov	r6, r0
 8009b54:	b928      	cbnz	r0, 8009b62 <_dtoa_r+0x97a>
 8009b56:	4b84      	ldr	r3, [pc, #528]	@ (8009d68 <_dtoa_r+0xb80>)
 8009b58:	4602      	mov	r2, r0
 8009b5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009b5e:	f7ff bb5a 	b.w	8009216 <_dtoa_r+0x2e>
 8009b62:	692a      	ldr	r2, [r5, #16]
 8009b64:	3202      	adds	r2, #2
 8009b66:	0092      	lsls	r2, r2, #2
 8009b68:	f105 010c 	add.w	r1, r5, #12
 8009b6c:	300c      	adds	r0, #12
 8009b6e:	f7ff fa7e 	bl	800906e <memcpy>
 8009b72:	2201      	movs	r2, #1
 8009b74:	4631      	mov	r1, r6
 8009b76:	4658      	mov	r0, fp
 8009b78:	f000 fc52 	bl	800a420 <__lshift>
 8009b7c:	f10a 0301 	add.w	r3, sl, #1
 8009b80:	9307      	str	r3, [sp, #28]
 8009b82:	9b00      	ldr	r3, [sp, #0]
 8009b84:	4453      	add	r3, sl
 8009b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b88:	9b02      	ldr	r3, [sp, #8]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	462f      	mov	r7, r5
 8009b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b92:	4605      	mov	r5, r0
 8009b94:	9b07      	ldr	r3, [sp, #28]
 8009b96:	4621      	mov	r1, r4
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	4648      	mov	r0, r9
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	f7ff fa99 	bl	80090d4 <quorem>
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	9002      	str	r0, [sp, #8]
 8009ba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009baa:	4648      	mov	r0, r9
 8009bac:	f000 fca4 	bl	800a4f8 <__mcmp>
 8009bb0:	462a      	mov	r2, r5
 8009bb2:	9008      	str	r0, [sp, #32]
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4658      	mov	r0, fp
 8009bb8:	f000 fcba 	bl	800a530 <__mdiff>
 8009bbc:	68c2      	ldr	r2, [r0, #12]
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	bb02      	cbnz	r2, 8009c04 <_dtoa_r+0xa1c>
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	4648      	mov	r0, r9
 8009bc6:	f000 fc97 	bl	800a4f8 <__mcmp>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	4631      	mov	r1, r6
 8009bce:	4658      	mov	r0, fp
 8009bd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bd2:	f000 fa0d 	bl	8009ff0 <_Bfree>
 8009bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bda:	9e07      	ldr	r6, [sp, #28]
 8009bdc:	ea43 0102 	orr.w	r1, r3, r2
 8009be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009be2:	4319      	orrs	r1, r3
 8009be4:	d110      	bne.n	8009c08 <_dtoa_r+0xa20>
 8009be6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bea:	d029      	beq.n	8009c40 <_dtoa_r+0xa58>
 8009bec:	9b08      	ldr	r3, [sp, #32]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dd02      	ble.n	8009bf8 <_dtoa_r+0xa10>
 8009bf2:	9b02      	ldr	r3, [sp, #8]
 8009bf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009bf8:	9b00      	ldr	r3, [sp, #0]
 8009bfa:	f883 8000 	strb.w	r8, [r3]
 8009bfe:	e63f      	b.n	8009880 <_dtoa_r+0x698>
 8009c00:	4628      	mov	r0, r5
 8009c02:	e7bb      	b.n	8009b7c <_dtoa_r+0x994>
 8009c04:	2201      	movs	r2, #1
 8009c06:	e7e1      	b.n	8009bcc <_dtoa_r+0x9e4>
 8009c08:	9b08      	ldr	r3, [sp, #32]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	db04      	blt.n	8009c18 <_dtoa_r+0xa30>
 8009c0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c10:	430b      	orrs	r3, r1
 8009c12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c14:	430b      	orrs	r3, r1
 8009c16:	d120      	bne.n	8009c5a <_dtoa_r+0xa72>
 8009c18:	2a00      	cmp	r2, #0
 8009c1a:	dded      	ble.n	8009bf8 <_dtoa_r+0xa10>
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4658      	mov	r0, fp
 8009c22:	f000 fbfd 	bl	800a420 <__lshift>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4681      	mov	r9, r0
 8009c2a:	f000 fc65 	bl	800a4f8 <__mcmp>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	dc03      	bgt.n	8009c3a <_dtoa_r+0xa52>
 8009c32:	d1e1      	bne.n	8009bf8 <_dtoa_r+0xa10>
 8009c34:	f018 0f01 	tst.w	r8, #1
 8009c38:	d0de      	beq.n	8009bf8 <_dtoa_r+0xa10>
 8009c3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c3e:	d1d8      	bne.n	8009bf2 <_dtoa_r+0xa0a>
 8009c40:	9a00      	ldr	r2, [sp, #0]
 8009c42:	2339      	movs	r3, #57	@ 0x39
 8009c44:	7013      	strb	r3, [r2, #0]
 8009c46:	4633      	mov	r3, r6
 8009c48:	461e      	mov	r6, r3
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c50:	2a39      	cmp	r2, #57	@ 0x39
 8009c52:	d052      	beq.n	8009cfa <_dtoa_r+0xb12>
 8009c54:	3201      	adds	r2, #1
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	e612      	b.n	8009880 <_dtoa_r+0x698>
 8009c5a:	2a00      	cmp	r2, #0
 8009c5c:	dd07      	ble.n	8009c6e <_dtoa_r+0xa86>
 8009c5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c62:	d0ed      	beq.n	8009c40 <_dtoa_r+0xa58>
 8009c64:	9a00      	ldr	r2, [sp, #0]
 8009c66:	f108 0301 	add.w	r3, r8, #1
 8009c6a:	7013      	strb	r3, [r2, #0]
 8009c6c:	e608      	b.n	8009880 <_dtoa_r+0x698>
 8009c6e:	9b07      	ldr	r3, [sp, #28]
 8009c70:	9a07      	ldr	r2, [sp, #28]
 8009c72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d028      	beq.n	8009cce <_dtoa_r+0xae6>
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	2300      	movs	r3, #0
 8009c80:	220a      	movs	r2, #10
 8009c82:	4658      	mov	r0, fp
 8009c84:	f000 f9d6 	bl	800a034 <__multadd>
 8009c88:	42af      	cmp	r7, r5
 8009c8a:	4681      	mov	r9, r0
 8009c8c:	f04f 0300 	mov.w	r3, #0
 8009c90:	f04f 020a 	mov.w	r2, #10
 8009c94:	4639      	mov	r1, r7
 8009c96:	4658      	mov	r0, fp
 8009c98:	d107      	bne.n	8009caa <_dtoa_r+0xac2>
 8009c9a:	f000 f9cb 	bl	800a034 <__multadd>
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	9b07      	ldr	r3, [sp, #28]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	e774      	b.n	8009b94 <_dtoa_r+0x9ac>
 8009caa:	f000 f9c3 	bl	800a034 <__multadd>
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4607      	mov	r7, r0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	220a      	movs	r2, #10
 8009cb6:	4658      	mov	r0, fp
 8009cb8:	f000 f9bc 	bl	800a034 <__multadd>
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	e7f0      	b.n	8009ca2 <_dtoa_r+0xaba>
 8009cc0:	9b00      	ldr	r3, [sp, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bfcc      	ite	gt
 8009cc6:	461e      	movgt	r6, r3
 8009cc8:	2601      	movle	r6, #1
 8009cca:	4456      	add	r6, sl
 8009ccc:	2700      	movs	r7, #0
 8009cce:	4649      	mov	r1, r9
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	4658      	mov	r0, fp
 8009cd4:	f000 fba4 	bl	800a420 <__lshift>
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4681      	mov	r9, r0
 8009cdc:	f000 fc0c 	bl	800a4f8 <__mcmp>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	dcb0      	bgt.n	8009c46 <_dtoa_r+0xa5e>
 8009ce4:	d102      	bne.n	8009cec <_dtoa_r+0xb04>
 8009ce6:	f018 0f01 	tst.w	r8, #1
 8009cea:	d1ac      	bne.n	8009c46 <_dtoa_r+0xa5e>
 8009cec:	4633      	mov	r3, r6
 8009cee:	461e      	mov	r6, r3
 8009cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cf4:	2a30      	cmp	r2, #48	@ 0x30
 8009cf6:	d0fa      	beq.n	8009cee <_dtoa_r+0xb06>
 8009cf8:	e5c2      	b.n	8009880 <_dtoa_r+0x698>
 8009cfa:	459a      	cmp	sl, r3
 8009cfc:	d1a4      	bne.n	8009c48 <_dtoa_r+0xa60>
 8009cfe:	9b04      	ldr	r3, [sp, #16]
 8009d00:	3301      	adds	r3, #1
 8009d02:	9304      	str	r3, [sp, #16]
 8009d04:	2331      	movs	r3, #49	@ 0x31
 8009d06:	f88a 3000 	strb.w	r3, [sl]
 8009d0a:	e5b9      	b.n	8009880 <_dtoa_r+0x698>
 8009d0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009d6c <_dtoa_r+0xb84>
 8009d12:	b11b      	cbz	r3, 8009d1c <_dtoa_r+0xb34>
 8009d14:	f10a 0308 	add.w	r3, sl, #8
 8009d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	4650      	mov	r0, sl
 8009d1e:	b019      	add	sp, #100	@ 0x64
 8009d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	f77f ae37 	ble.w	800999a <_dtoa_r+0x7b2>
 8009d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d30:	2001      	movs	r0, #1
 8009d32:	e655      	b.n	80099e0 <_dtoa_r+0x7f8>
 8009d34:	9b00      	ldr	r3, [sp, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f77f aed6 	ble.w	8009ae8 <_dtoa_r+0x900>
 8009d3c:	4656      	mov	r6, sl
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4648      	mov	r0, r9
 8009d42:	f7ff f9c7 	bl	80090d4 <quorem>
 8009d46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d4a:	f806 8b01 	strb.w	r8, [r6], #1
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	eba6 020a 	sub.w	r2, r6, sl
 8009d54:	4293      	cmp	r3, r2
 8009d56:	ddb3      	ble.n	8009cc0 <_dtoa_r+0xad8>
 8009d58:	4649      	mov	r1, r9
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	220a      	movs	r2, #10
 8009d5e:	4658      	mov	r0, fp
 8009d60:	f000 f968 	bl	800a034 <__multadd>
 8009d64:	4681      	mov	r9, r0
 8009d66:	e7ea      	b.n	8009d3e <_dtoa_r+0xb56>
 8009d68:	0800cff3 	.word	0x0800cff3
 8009d6c:	0800cf8e 	.word	0x0800cf8e

08009d70 <_free_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4605      	mov	r5, r0
 8009d74:	2900      	cmp	r1, #0
 8009d76:	d041      	beq.n	8009dfc <_free_r+0x8c>
 8009d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d7c:	1f0c      	subs	r4, r1, #4
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bfb8      	it	lt
 8009d82:	18e4      	addlt	r4, r4, r3
 8009d84:	f000 f8e8 	bl	8009f58 <__malloc_lock>
 8009d88:	4a1d      	ldr	r2, [pc, #116]	@ (8009e00 <_free_r+0x90>)
 8009d8a:	6813      	ldr	r3, [r2, #0]
 8009d8c:	b933      	cbnz	r3, 8009d9c <_free_r+0x2c>
 8009d8e:	6063      	str	r3, [r4, #4]
 8009d90:	6014      	str	r4, [r2, #0]
 8009d92:	4628      	mov	r0, r5
 8009d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d98:	f000 b8e4 	b.w	8009f64 <__malloc_unlock>
 8009d9c:	42a3      	cmp	r3, r4
 8009d9e:	d908      	bls.n	8009db2 <_free_r+0x42>
 8009da0:	6820      	ldr	r0, [r4, #0]
 8009da2:	1821      	adds	r1, r4, r0
 8009da4:	428b      	cmp	r3, r1
 8009da6:	bf01      	itttt	eq
 8009da8:	6819      	ldreq	r1, [r3, #0]
 8009daa:	685b      	ldreq	r3, [r3, #4]
 8009dac:	1809      	addeq	r1, r1, r0
 8009dae:	6021      	streq	r1, [r4, #0]
 8009db0:	e7ed      	b.n	8009d8e <_free_r+0x1e>
 8009db2:	461a      	mov	r2, r3
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	b10b      	cbz	r3, 8009dbc <_free_r+0x4c>
 8009db8:	42a3      	cmp	r3, r4
 8009dba:	d9fa      	bls.n	8009db2 <_free_r+0x42>
 8009dbc:	6811      	ldr	r1, [r2, #0]
 8009dbe:	1850      	adds	r0, r2, r1
 8009dc0:	42a0      	cmp	r0, r4
 8009dc2:	d10b      	bne.n	8009ddc <_free_r+0x6c>
 8009dc4:	6820      	ldr	r0, [r4, #0]
 8009dc6:	4401      	add	r1, r0
 8009dc8:	1850      	adds	r0, r2, r1
 8009dca:	4283      	cmp	r3, r0
 8009dcc:	6011      	str	r1, [r2, #0]
 8009dce:	d1e0      	bne.n	8009d92 <_free_r+0x22>
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	6053      	str	r3, [r2, #4]
 8009dd6:	4408      	add	r0, r1
 8009dd8:	6010      	str	r0, [r2, #0]
 8009dda:	e7da      	b.n	8009d92 <_free_r+0x22>
 8009ddc:	d902      	bls.n	8009de4 <_free_r+0x74>
 8009dde:	230c      	movs	r3, #12
 8009de0:	602b      	str	r3, [r5, #0]
 8009de2:	e7d6      	b.n	8009d92 <_free_r+0x22>
 8009de4:	6820      	ldr	r0, [r4, #0]
 8009de6:	1821      	adds	r1, r4, r0
 8009de8:	428b      	cmp	r3, r1
 8009dea:	bf04      	itt	eq
 8009dec:	6819      	ldreq	r1, [r3, #0]
 8009dee:	685b      	ldreq	r3, [r3, #4]
 8009df0:	6063      	str	r3, [r4, #4]
 8009df2:	bf04      	itt	eq
 8009df4:	1809      	addeq	r1, r1, r0
 8009df6:	6021      	streq	r1, [r4, #0]
 8009df8:	6054      	str	r4, [r2, #4]
 8009dfa:	e7ca      	b.n	8009d92 <_free_r+0x22>
 8009dfc:	bd38      	pop	{r3, r4, r5, pc}
 8009dfe:	bf00      	nop
 8009e00:	20000ddc 	.word	0x20000ddc

08009e04 <malloc>:
 8009e04:	4b02      	ldr	r3, [pc, #8]	@ (8009e10 <malloc+0xc>)
 8009e06:	4601      	mov	r1, r0
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	f000 b825 	b.w	8009e58 <_malloc_r>
 8009e0e:	bf00      	nop
 8009e10:	20000060 	.word	0x20000060

08009e14 <sbrk_aligned>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4e0f      	ldr	r6, [pc, #60]	@ (8009e54 <sbrk_aligned+0x40>)
 8009e18:	460c      	mov	r4, r1
 8009e1a:	6831      	ldr	r1, [r6, #0]
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	b911      	cbnz	r1, 8009e26 <sbrk_aligned+0x12>
 8009e20:	f001 ffd2 	bl	800bdc8 <_sbrk_r>
 8009e24:	6030      	str	r0, [r6, #0]
 8009e26:	4621      	mov	r1, r4
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f001 ffcd 	bl	800bdc8 <_sbrk_r>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	d103      	bne.n	8009e3a <sbrk_aligned+0x26>
 8009e32:	f04f 34ff 	mov.w	r4, #4294967295
 8009e36:	4620      	mov	r0, r4
 8009e38:	bd70      	pop	{r4, r5, r6, pc}
 8009e3a:	1cc4      	adds	r4, r0, #3
 8009e3c:	f024 0403 	bic.w	r4, r4, #3
 8009e40:	42a0      	cmp	r0, r4
 8009e42:	d0f8      	beq.n	8009e36 <sbrk_aligned+0x22>
 8009e44:	1a21      	subs	r1, r4, r0
 8009e46:	4628      	mov	r0, r5
 8009e48:	f001 ffbe 	bl	800bdc8 <_sbrk_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d1f2      	bne.n	8009e36 <sbrk_aligned+0x22>
 8009e50:	e7ef      	b.n	8009e32 <sbrk_aligned+0x1e>
 8009e52:	bf00      	nop
 8009e54:	20000dd8 	.word	0x20000dd8

08009e58 <_malloc_r>:
 8009e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e5c:	1ccd      	adds	r5, r1, #3
 8009e5e:	f025 0503 	bic.w	r5, r5, #3
 8009e62:	3508      	adds	r5, #8
 8009e64:	2d0c      	cmp	r5, #12
 8009e66:	bf38      	it	cc
 8009e68:	250c      	movcc	r5, #12
 8009e6a:	2d00      	cmp	r5, #0
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	db01      	blt.n	8009e74 <_malloc_r+0x1c>
 8009e70:	42a9      	cmp	r1, r5
 8009e72:	d904      	bls.n	8009e7e <_malloc_r+0x26>
 8009e74:	230c      	movs	r3, #12
 8009e76:	6033      	str	r3, [r6, #0]
 8009e78:	2000      	movs	r0, #0
 8009e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f54 <_malloc_r+0xfc>
 8009e82:	f000 f869 	bl	8009f58 <__malloc_lock>
 8009e86:	f8d8 3000 	ldr.w	r3, [r8]
 8009e8a:	461c      	mov	r4, r3
 8009e8c:	bb44      	cbnz	r4, 8009ee0 <_malloc_r+0x88>
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4630      	mov	r0, r6
 8009e92:	f7ff ffbf 	bl	8009e14 <sbrk_aligned>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	4604      	mov	r4, r0
 8009e9a:	d158      	bne.n	8009f4e <_malloc_r+0xf6>
 8009e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8009ea0:	4627      	mov	r7, r4
 8009ea2:	2f00      	cmp	r7, #0
 8009ea4:	d143      	bne.n	8009f2e <_malloc_r+0xd6>
 8009ea6:	2c00      	cmp	r4, #0
 8009ea8:	d04b      	beq.n	8009f42 <_malloc_r+0xea>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	4639      	mov	r1, r7
 8009eae:	4630      	mov	r0, r6
 8009eb0:	eb04 0903 	add.w	r9, r4, r3
 8009eb4:	f001 ff88 	bl	800bdc8 <_sbrk_r>
 8009eb8:	4581      	cmp	r9, r0
 8009eba:	d142      	bne.n	8009f42 <_malloc_r+0xea>
 8009ebc:	6821      	ldr	r1, [r4, #0]
 8009ebe:	1a6d      	subs	r5, r5, r1
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ffa6 	bl	8009e14 <sbrk_aligned>
 8009ec8:	3001      	adds	r0, #1
 8009eca:	d03a      	beq.n	8009f42 <_malloc_r+0xea>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	442b      	add	r3, r5
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	bb62      	cbnz	r2, 8009f34 <_malloc_r+0xdc>
 8009eda:	f8c8 7000 	str.w	r7, [r8]
 8009ede:	e00f      	b.n	8009f00 <_malloc_r+0xa8>
 8009ee0:	6822      	ldr	r2, [r4, #0]
 8009ee2:	1b52      	subs	r2, r2, r5
 8009ee4:	d420      	bmi.n	8009f28 <_malloc_r+0xd0>
 8009ee6:	2a0b      	cmp	r2, #11
 8009ee8:	d917      	bls.n	8009f1a <_malloc_r+0xc2>
 8009eea:	1961      	adds	r1, r4, r5
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	6025      	str	r5, [r4, #0]
 8009ef0:	bf18      	it	ne
 8009ef2:	6059      	strne	r1, [r3, #4]
 8009ef4:	6863      	ldr	r3, [r4, #4]
 8009ef6:	bf08      	it	eq
 8009ef8:	f8c8 1000 	streq.w	r1, [r8]
 8009efc:	5162      	str	r2, [r4, r5]
 8009efe:	604b      	str	r3, [r1, #4]
 8009f00:	4630      	mov	r0, r6
 8009f02:	f000 f82f 	bl	8009f64 <__malloc_unlock>
 8009f06:	f104 000b 	add.w	r0, r4, #11
 8009f0a:	1d23      	adds	r3, r4, #4
 8009f0c:	f020 0007 	bic.w	r0, r0, #7
 8009f10:	1ac2      	subs	r2, r0, r3
 8009f12:	bf1c      	itt	ne
 8009f14:	1a1b      	subne	r3, r3, r0
 8009f16:	50a3      	strne	r3, [r4, r2]
 8009f18:	e7af      	b.n	8009e7a <_malloc_r+0x22>
 8009f1a:	6862      	ldr	r2, [r4, #4]
 8009f1c:	42a3      	cmp	r3, r4
 8009f1e:	bf0c      	ite	eq
 8009f20:	f8c8 2000 	streq.w	r2, [r8]
 8009f24:	605a      	strne	r2, [r3, #4]
 8009f26:	e7eb      	b.n	8009f00 <_malloc_r+0xa8>
 8009f28:	4623      	mov	r3, r4
 8009f2a:	6864      	ldr	r4, [r4, #4]
 8009f2c:	e7ae      	b.n	8009e8c <_malloc_r+0x34>
 8009f2e:	463c      	mov	r4, r7
 8009f30:	687f      	ldr	r7, [r7, #4]
 8009f32:	e7b6      	b.n	8009ea2 <_malloc_r+0x4a>
 8009f34:	461a      	mov	r2, r3
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d1fb      	bne.n	8009f34 <_malloc_r+0xdc>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	6053      	str	r3, [r2, #4]
 8009f40:	e7de      	b.n	8009f00 <_malloc_r+0xa8>
 8009f42:	230c      	movs	r3, #12
 8009f44:	6033      	str	r3, [r6, #0]
 8009f46:	4630      	mov	r0, r6
 8009f48:	f000 f80c 	bl	8009f64 <__malloc_unlock>
 8009f4c:	e794      	b.n	8009e78 <_malloc_r+0x20>
 8009f4e:	6005      	str	r5, [r0, #0]
 8009f50:	e7d6      	b.n	8009f00 <_malloc_r+0xa8>
 8009f52:	bf00      	nop
 8009f54:	20000ddc 	.word	0x20000ddc

08009f58 <__malloc_lock>:
 8009f58:	4801      	ldr	r0, [pc, #4]	@ (8009f60 <__malloc_lock+0x8>)
 8009f5a:	f7ff b886 	b.w	800906a <__retarget_lock_acquire_recursive>
 8009f5e:	bf00      	nop
 8009f60:	20000dd4 	.word	0x20000dd4

08009f64 <__malloc_unlock>:
 8009f64:	4801      	ldr	r0, [pc, #4]	@ (8009f6c <__malloc_unlock+0x8>)
 8009f66:	f7ff b881 	b.w	800906c <__retarget_lock_release_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	20000dd4 	.word	0x20000dd4

08009f70 <_Balloc>:
 8009f70:	b570      	push	{r4, r5, r6, lr}
 8009f72:	69c6      	ldr	r6, [r0, #28]
 8009f74:	4604      	mov	r4, r0
 8009f76:	460d      	mov	r5, r1
 8009f78:	b976      	cbnz	r6, 8009f98 <_Balloc+0x28>
 8009f7a:	2010      	movs	r0, #16
 8009f7c:	f7ff ff42 	bl	8009e04 <malloc>
 8009f80:	4602      	mov	r2, r0
 8009f82:	61e0      	str	r0, [r4, #28]
 8009f84:	b920      	cbnz	r0, 8009f90 <_Balloc+0x20>
 8009f86:	4b18      	ldr	r3, [pc, #96]	@ (8009fe8 <_Balloc+0x78>)
 8009f88:	4818      	ldr	r0, [pc, #96]	@ (8009fec <_Balloc+0x7c>)
 8009f8a:	216b      	movs	r1, #107	@ 0x6b
 8009f8c:	f7ff f884 	bl	8009098 <__assert_func>
 8009f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f94:	6006      	str	r6, [r0, #0]
 8009f96:	60c6      	str	r6, [r0, #12]
 8009f98:	69e6      	ldr	r6, [r4, #28]
 8009f9a:	68f3      	ldr	r3, [r6, #12]
 8009f9c:	b183      	cbz	r3, 8009fc0 <_Balloc+0x50>
 8009f9e:	69e3      	ldr	r3, [r4, #28]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fa6:	b9b8      	cbnz	r0, 8009fd8 <_Balloc+0x68>
 8009fa8:	2101      	movs	r1, #1
 8009faa:	fa01 f605 	lsl.w	r6, r1, r5
 8009fae:	1d72      	adds	r2, r6, #5
 8009fb0:	0092      	lsls	r2, r2, #2
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f001 ff27 	bl	800be06 <_calloc_r>
 8009fb8:	b160      	cbz	r0, 8009fd4 <_Balloc+0x64>
 8009fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fbe:	e00e      	b.n	8009fde <_Balloc+0x6e>
 8009fc0:	2221      	movs	r2, #33	@ 0x21
 8009fc2:	2104      	movs	r1, #4
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f001 ff1e 	bl	800be06 <_calloc_r>
 8009fca:	69e3      	ldr	r3, [r4, #28]
 8009fcc:	60f0      	str	r0, [r6, #12]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e4      	bne.n	8009f9e <_Balloc+0x2e>
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	6802      	ldr	r2, [r0, #0]
 8009fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fe4:	e7f7      	b.n	8009fd6 <_Balloc+0x66>
 8009fe6:	bf00      	nop
 8009fe8:	0800cee1 	.word	0x0800cee1
 8009fec:	0800d004 	.word	0x0800d004

08009ff0 <_Bfree>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	69c6      	ldr	r6, [r0, #28]
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	b976      	cbnz	r6, 800a018 <_Bfree+0x28>
 8009ffa:	2010      	movs	r0, #16
 8009ffc:	f7ff ff02 	bl	8009e04 <malloc>
 800a000:	4602      	mov	r2, r0
 800a002:	61e8      	str	r0, [r5, #28]
 800a004:	b920      	cbnz	r0, 800a010 <_Bfree+0x20>
 800a006:	4b09      	ldr	r3, [pc, #36]	@ (800a02c <_Bfree+0x3c>)
 800a008:	4809      	ldr	r0, [pc, #36]	@ (800a030 <_Bfree+0x40>)
 800a00a:	218f      	movs	r1, #143	@ 0x8f
 800a00c:	f7ff f844 	bl	8009098 <__assert_func>
 800a010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a014:	6006      	str	r6, [r0, #0]
 800a016:	60c6      	str	r6, [r0, #12]
 800a018:	b13c      	cbz	r4, 800a02a <_Bfree+0x3a>
 800a01a:	69eb      	ldr	r3, [r5, #28]
 800a01c:	6862      	ldr	r2, [r4, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a024:	6021      	str	r1, [r4, #0]
 800a026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	0800cee1 	.word	0x0800cee1
 800a030:	0800d004 	.word	0x0800d004

0800a034 <__multadd>:
 800a034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a038:	690d      	ldr	r5, [r1, #16]
 800a03a:	4607      	mov	r7, r0
 800a03c:	460c      	mov	r4, r1
 800a03e:	461e      	mov	r6, r3
 800a040:	f101 0c14 	add.w	ip, r1, #20
 800a044:	2000      	movs	r0, #0
 800a046:	f8dc 3000 	ldr.w	r3, [ip]
 800a04a:	b299      	uxth	r1, r3
 800a04c:	fb02 6101 	mla	r1, r2, r1, r6
 800a050:	0c1e      	lsrs	r6, r3, #16
 800a052:	0c0b      	lsrs	r3, r1, #16
 800a054:	fb02 3306 	mla	r3, r2, r6, r3
 800a058:	b289      	uxth	r1, r1
 800a05a:	3001      	adds	r0, #1
 800a05c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a060:	4285      	cmp	r5, r0
 800a062:	f84c 1b04 	str.w	r1, [ip], #4
 800a066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a06a:	dcec      	bgt.n	800a046 <__multadd+0x12>
 800a06c:	b30e      	cbz	r6, 800a0b2 <__multadd+0x7e>
 800a06e:	68a3      	ldr	r3, [r4, #8]
 800a070:	42ab      	cmp	r3, r5
 800a072:	dc19      	bgt.n	800a0a8 <__multadd+0x74>
 800a074:	6861      	ldr	r1, [r4, #4]
 800a076:	4638      	mov	r0, r7
 800a078:	3101      	adds	r1, #1
 800a07a:	f7ff ff79 	bl	8009f70 <_Balloc>
 800a07e:	4680      	mov	r8, r0
 800a080:	b928      	cbnz	r0, 800a08e <__multadd+0x5a>
 800a082:	4602      	mov	r2, r0
 800a084:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b8 <__multadd+0x84>)
 800a086:	480d      	ldr	r0, [pc, #52]	@ (800a0bc <__multadd+0x88>)
 800a088:	21ba      	movs	r1, #186	@ 0xba
 800a08a:	f7ff f805 	bl	8009098 <__assert_func>
 800a08e:	6922      	ldr	r2, [r4, #16]
 800a090:	3202      	adds	r2, #2
 800a092:	f104 010c 	add.w	r1, r4, #12
 800a096:	0092      	lsls	r2, r2, #2
 800a098:	300c      	adds	r0, #12
 800a09a:	f7fe ffe8 	bl	800906e <memcpy>
 800a09e:	4621      	mov	r1, r4
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	f7ff ffa5 	bl	8009ff0 <_Bfree>
 800a0a6:	4644      	mov	r4, r8
 800a0a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0ac:	3501      	adds	r5, #1
 800a0ae:	615e      	str	r6, [r3, #20]
 800a0b0:	6125      	str	r5, [r4, #16]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b8:	0800cff3 	.word	0x0800cff3
 800a0bc:	0800d004 	.word	0x0800d004

0800a0c0 <__s2b>:
 800a0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	4615      	mov	r5, r2
 800a0c8:	461f      	mov	r7, r3
 800a0ca:	2209      	movs	r2, #9
 800a0cc:	3308      	adds	r3, #8
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	db09      	blt.n	800a0f0 <__s2b+0x30>
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f7ff ff47 	bl	8009f70 <_Balloc>
 800a0e2:	b940      	cbnz	r0, 800a0f6 <__s2b+0x36>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	4b19      	ldr	r3, [pc, #100]	@ (800a14c <__s2b+0x8c>)
 800a0e8:	4819      	ldr	r0, [pc, #100]	@ (800a150 <__s2b+0x90>)
 800a0ea:	21d3      	movs	r1, #211	@ 0xd3
 800a0ec:	f7fe ffd4 	bl	8009098 <__assert_func>
 800a0f0:	0052      	lsls	r2, r2, #1
 800a0f2:	3101      	adds	r1, #1
 800a0f4:	e7f0      	b.n	800a0d8 <__s2b+0x18>
 800a0f6:	9b08      	ldr	r3, [sp, #32]
 800a0f8:	6143      	str	r3, [r0, #20]
 800a0fa:	2d09      	cmp	r5, #9
 800a0fc:	f04f 0301 	mov.w	r3, #1
 800a100:	6103      	str	r3, [r0, #16]
 800a102:	dd16      	ble.n	800a132 <__s2b+0x72>
 800a104:	f104 0909 	add.w	r9, r4, #9
 800a108:	46c8      	mov	r8, r9
 800a10a:	442c      	add	r4, r5
 800a10c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a110:	4601      	mov	r1, r0
 800a112:	3b30      	subs	r3, #48	@ 0x30
 800a114:	220a      	movs	r2, #10
 800a116:	4630      	mov	r0, r6
 800a118:	f7ff ff8c 	bl	800a034 <__multadd>
 800a11c:	45a0      	cmp	r8, r4
 800a11e:	d1f5      	bne.n	800a10c <__s2b+0x4c>
 800a120:	f1a5 0408 	sub.w	r4, r5, #8
 800a124:	444c      	add	r4, r9
 800a126:	1b2d      	subs	r5, r5, r4
 800a128:	1963      	adds	r3, r4, r5
 800a12a:	42bb      	cmp	r3, r7
 800a12c:	db04      	blt.n	800a138 <__s2b+0x78>
 800a12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a132:	340a      	adds	r4, #10
 800a134:	2509      	movs	r5, #9
 800a136:	e7f6      	b.n	800a126 <__s2b+0x66>
 800a138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a13c:	4601      	mov	r1, r0
 800a13e:	3b30      	subs	r3, #48	@ 0x30
 800a140:	220a      	movs	r2, #10
 800a142:	4630      	mov	r0, r6
 800a144:	f7ff ff76 	bl	800a034 <__multadd>
 800a148:	e7ee      	b.n	800a128 <__s2b+0x68>
 800a14a:	bf00      	nop
 800a14c:	0800cff3 	.word	0x0800cff3
 800a150:	0800d004 	.word	0x0800d004

0800a154 <__hi0bits>:
 800a154:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a158:	4603      	mov	r3, r0
 800a15a:	bf36      	itet	cc
 800a15c:	0403      	lslcc	r3, r0, #16
 800a15e:	2000      	movcs	r0, #0
 800a160:	2010      	movcc	r0, #16
 800a162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a166:	bf3c      	itt	cc
 800a168:	021b      	lslcc	r3, r3, #8
 800a16a:	3008      	addcc	r0, #8
 800a16c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a170:	bf3c      	itt	cc
 800a172:	011b      	lslcc	r3, r3, #4
 800a174:	3004      	addcc	r0, #4
 800a176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a17a:	bf3c      	itt	cc
 800a17c:	009b      	lslcc	r3, r3, #2
 800a17e:	3002      	addcc	r0, #2
 800a180:	2b00      	cmp	r3, #0
 800a182:	db05      	blt.n	800a190 <__hi0bits+0x3c>
 800a184:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a188:	f100 0001 	add.w	r0, r0, #1
 800a18c:	bf08      	it	eq
 800a18e:	2020      	moveq	r0, #32
 800a190:	4770      	bx	lr

0800a192 <__lo0bits>:
 800a192:	6803      	ldr	r3, [r0, #0]
 800a194:	4602      	mov	r2, r0
 800a196:	f013 0007 	ands.w	r0, r3, #7
 800a19a:	d00b      	beq.n	800a1b4 <__lo0bits+0x22>
 800a19c:	07d9      	lsls	r1, r3, #31
 800a19e:	d421      	bmi.n	800a1e4 <__lo0bits+0x52>
 800a1a0:	0798      	lsls	r0, r3, #30
 800a1a2:	bf49      	itett	mi
 800a1a4:	085b      	lsrmi	r3, r3, #1
 800a1a6:	089b      	lsrpl	r3, r3, #2
 800a1a8:	2001      	movmi	r0, #1
 800a1aa:	6013      	strmi	r3, [r2, #0]
 800a1ac:	bf5c      	itt	pl
 800a1ae:	6013      	strpl	r3, [r2, #0]
 800a1b0:	2002      	movpl	r0, #2
 800a1b2:	4770      	bx	lr
 800a1b4:	b299      	uxth	r1, r3
 800a1b6:	b909      	cbnz	r1, 800a1bc <__lo0bits+0x2a>
 800a1b8:	0c1b      	lsrs	r3, r3, #16
 800a1ba:	2010      	movs	r0, #16
 800a1bc:	b2d9      	uxtb	r1, r3
 800a1be:	b909      	cbnz	r1, 800a1c4 <__lo0bits+0x32>
 800a1c0:	3008      	adds	r0, #8
 800a1c2:	0a1b      	lsrs	r3, r3, #8
 800a1c4:	0719      	lsls	r1, r3, #28
 800a1c6:	bf04      	itt	eq
 800a1c8:	091b      	lsreq	r3, r3, #4
 800a1ca:	3004      	addeq	r0, #4
 800a1cc:	0799      	lsls	r1, r3, #30
 800a1ce:	bf04      	itt	eq
 800a1d0:	089b      	lsreq	r3, r3, #2
 800a1d2:	3002      	addeq	r0, #2
 800a1d4:	07d9      	lsls	r1, r3, #31
 800a1d6:	d403      	bmi.n	800a1e0 <__lo0bits+0x4e>
 800a1d8:	085b      	lsrs	r3, r3, #1
 800a1da:	f100 0001 	add.w	r0, r0, #1
 800a1de:	d003      	beq.n	800a1e8 <__lo0bits+0x56>
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	4770      	bx	lr
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	4770      	bx	lr
 800a1e8:	2020      	movs	r0, #32
 800a1ea:	4770      	bx	lr

0800a1ec <__i2b>:
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	f7ff febd 	bl	8009f70 <_Balloc>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <__i2b+0x1a>
 800a1fa:	4b05      	ldr	r3, [pc, #20]	@ (800a210 <__i2b+0x24>)
 800a1fc:	4805      	ldr	r0, [pc, #20]	@ (800a214 <__i2b+0x28>)
 800a1fe:	f240 1145 	movw	r1, #325	@ 0x145
 800a202:	f7fe ff49 	bl	8009098 <__assert_func>
 800a206:	2301      	movs	r3, #1
 800a208:	6144      	str	r4, [r0, #20]
 800a20a:	6103      	str	r3, [r0, #16]
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	bf00      	nop
 800a210:	0800cff3 	.word	0x0800cff3
 800a214:	0800d004 	.word	0x0800d004

0800a218 <__multiply>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	4614      	mov	r4, r2
 800a21e:	690a      	ldr	r2, [r1, #16]
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	429a      	cmp	r2, r3
 800a224:	bfa8      	it	ge
 800a226:	4623      	movge	r3, r4
 800a228:	460f      	mov	r7, r1
 800a22a:	bfa4      	itt	ge
 800a22c:	460c      	movge	r4, r1
 800a22e:	461f      	movge	r7, r3
 800a230:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a234:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a238:	68a3      	ldr	r3, [r4, #8]
 800a23a:	6861      	ldr	r1, [r4, #4]
 800a23c:	eb0a 0609 	add.w	r6, sl, r9
 800a240:	42b3      	cmp	r3, r6
 800a242:	b085      	sub	sp, #20
 800a244:	bfb8      	it	lt
 800a246:	3101      	addlt	r1, #1
 800a248:	f7ff fe92 	bl	8009f70 <_Balloc>
 800a24c:	b930      	cbnz	r0, 800a25c <__multiply+0x44>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b44      	ldr	r3, [pc, #272]	@ (800a364 <__multiply+0x14c>)
 800a252:	4845      	ldr	r0, [pc, #276]	@ (800a368 <__multiply+0x150>)
 800a254:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a258:	f7fe ff1e 	bl	8009098 <__assert_func>
 800a25c:	f100 0514 	add.w	r5, r0, #20
 800a260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a264:	462b      	mov	r3, r5
 800a266:	2200      	movs	r2, #0
 800a268:	4543      	cmp	r3, r8
 800a26a:	d321      	bcc.n	800a2b0 <__multiply+0x98>
 800a26c:	f107 0114 	add.w	r1, r7, #20
 800a270:	f104 0214 	add.w	r2, r4, #20
 800a274:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a278:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a27c:	9302      	str	r3, [sp, #8]
 800a27e:	1b13      	subs	r3, r2, r4
 800a280:	3b15      	subs	r3, #21
 800a282:	f023 0303 	bic.w	r3, r3, #3
 800a286:	3304      	adds	r3, #4
 800a288:	f104 0715 	add.w	r7, r4, #21
 800a28c:	42ba      	cmp	r2, r7
 800a28e:	bf38      	it	cc
 800a290:	2304      	movcc	r3, #4
 800a292:	9301      	str	r3, [sp, #4]
 800a294:	9b02      	ldr	r3, [sp, #8]
 800a296:	9103      	str	r1, [sp, #12]
 800a298:	428b      	cmp	r3, r1
 800a29a:	d80c      	bhi.n	800a2b6 <__multiply+0x9e>
 800a29c:	2e00      	cmp	r6, #0
 800a29e:	dd03      	ble.n	800a2a8 <__multiply+0x90>
 800a2a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d05b      	beq.n	800a360 <__multiply+0x148>
 800a2a8:	6106      	str	r6, [r0, #16]
 800a2aa:	b005      	add	sp, #20
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	f843 2b04 	str.w	r2, [r3], #4
 800a2b4:	e7d8      	b.n	800a268 <__multiply+0x50>
 800a2b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a2ba:	f1ba 0f00 	cmp.w	sl, #0
 800a2be:	d024      	beq.n	800a30a <__multiply+0xf2>
 800a2c0:	f104 0e14 	add.w	lr, r4, #20
 800a2c4:	46a9      	mov	r9, r5
 800a2c6:	f04f 0c00 	mov.w	ip, #0
 800a2ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a2ce:	f8d9 3000 	ldr.w	r3, [r9]
 800a2d2:	fa1f fb87 	uxth.w	fp, r7
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a2dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a2e0:	f8d9 7000 	ldr.w	r7, [r9]
 800a2e4:	4463      	add	r3, ip
 800a2e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a2ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800a2ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2f8:	4572      	cmp	r2, lr
 800a2fa:	f849 3b04 	str.w	r3, [r9], #4
 800a2fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a302:	d8e2      	bhi.n	800a2ca <__multiply+0xb2>
 800a304:	9b01      	ldr	r3, [sp, #4]
 800a306:	f845 c003 	str.w	ip, [r5, r3]
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a310:	3104      	adds	r1, #4
 800a312:	f1b9 0f00 	cmp.w	r9, #0
 800a316:	d021      	beq.n	800a35c <__multiply+0x144>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	f104 0c14 	add.w	ip, r4, #20
 800a31e:	46ae      	mov	lr, r5
 800a320:	f04f 0a00 	mov.w	sl, #0
 800a324:	f8bc b000 	ldrh.w	fp, [ip]
 800a328:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a32c:	fb09 770b 	mla	r7, r9, fp, r7
 800a330:	4457      	add	r7, sl
 800a332:	b29b      	uxth	r3, r3
 800a334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a338:	f84e 3b04 	str.w	r3, [lr], #4
 800a33c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a340:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a344:	f8be 3000 	ldrh.w	r3, [lr]
 800a348:	fb09 330a 	mla	r3, r9, sl, r3
 800a34c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a350:	4562      	cmp	r2, ip
 800a352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a356:	d8e5      	bhi.n	800a324 <__multiply+0x10c>
 800a358:	9f01      	ldr	r7, [sp, #4]
 800a35a:	51eb      	str	r3, [r5, r7]
 800a35c:	3504      	adds	r5, #4
 800a35e:	e799      	b.n	800a294 <__multiply+0x7c>
 800a360:	3e01      	subs	r6, #1
 800a362:	e79b      	b.n	800a29c <__multiply+0x84>
 800a364:	0800cff3 	.word	0x0800cff3
 800a368:	0800d004 	.word	0x0800d004

0800a36c <__pow5mult>:
 800a36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a370:	4615      	mov	r5, r2
 800a372:	f012 0203 	ands.w	r2, r2, #3
 800a376:	4607      	mov	r7, r0
 800a378:	460e      	mov	r6, r1
 800a37a:	d007      	beq.n	800a38c <__pow5mult+0x20>
 800a37c:	4c25      	ldr	r4, [pc, #148]	@ (800a414 <__pow5mult+0xa8>)
 800a37e:	3a01      	subs	r2, #1
 800a380:	2300      	movs	r3, #0
 800a382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a386:	f7ff fe55 	bl	800a034 <__multadd>
 800a38a:	4606      	mov	r6, r0
 800a38c:	10ad      	asrs	r5, r5, #2
 800a38e:	d03d      	beq.n	800a40c <__pow5mult+0xa0>
 800a390:	69fc      	ldr	r4, [r7, #28]
 800a392:	b97c      	cbnz	r4, 800a3b4 <__pow5mult+0x48>
 800a394:	2010      	movs	r0, #16
 800a396:	f7ff fd35 	bl	8009e04 <malloc>
 800a39a:	4602      	mov	r2, r0
 800a39c:	61f8      	str	r0, [r7, #28]
 800a39e:	b928      	cbnz	r0, 800a3ac <__pow5mult+0x40>
 800a3a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a418 <__pow5mult+0xac>)
 800a3a2:	481e      	ldr	r0, [pc, #120]	@ (800a41c <__pow5mult+0xb0>)
 800a3a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a3a8:	f7fe fe76 	bl	8009098 <__assert_func>
 800a3ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3b0:	6004      	str	r4, [r0, #0]
 800a3b2:	60c4      	str	r4, [r0, #12]
 800a3b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a3b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3bc:	b94c      	cbnz	r4, 800a3d2 <__pow5mult+0x66>
 800a3be:	f240 2171 	movw	r1, #625	@ 0x271
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	f7ff ff12 	bl	800a1ec <__i2b>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	6003      	str	r3, [r0, #0]
 800a3d2:	f04f 0900 	mov.w	r9, #0
 800a3d6:	07eb      	lsls	r3, r5, #31
 800a3d8:	d50a      	bpl.n	800a3f0 <__pow5mult+0x84>
 800a3da:	4631      	mov	r1, r6
 800a3dc:	4622      	mov	r2, r4
 800a3de:	4638      	mov	r0, r7
 800a3e0:	f7ff ff1a 	bl	800a218 <__multiply>
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	4680      	mov	r8, r0
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f7ff fe01 	bl	8009ff0 <_Bfree>
 800a3ee:	4646      	mov	r6, r8
 800a3f0:	106d      	asrs	r5, r5, #1
 800a3f2:	d00b      	beq.n	800a40c <__pow5mult+0xa0>
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	b938      	cbnz	r0, 800a408 <__pow5mult+0x9c>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff ff0b 	bl	800a218 <__multiply>
 800a402:	6020      	str	r0, [r4, #0]
 800a404:	f8c0 9000 	str.w	r9, [r0]
 800a408:	4604      	mov	r4, r0
 800a40a:	e7e4      	b.n	800a3d6 <__pow5mult+0x6a>
 800a40c:	4630      	mov	r0, r6
 800a40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a412:	bf00      	nop
 800a414:	0800d060 	.word	0x0800d060
 800a418:	0800cee1 	.word	0x0800cee1
 800a41c:	0800d004 	.word	0x0800d004

0800a420 <__lshift>:
 800a420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	6849      	ldr	r1, [r1, #4]
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a42e:	68a3      	ldr	r3, [r4, #8]
 800a430:	4607      	mov	r7, r0
 800a432:	4691      	mov	r9, r2
 800a434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a438:	f108 0601 	add.w	r6, r8, #1
 800a43c:	42b3      	cmp	r3, r6
 800a43e:	db0b      	blt.n	800a458 <__lshift+0x38>
 800a440:	4638      	mov	r0, r7
 800a442:	f7ff fd95 	bl	8009f70 <_Balloc>
 800a446:	4605      	mov	r5, r0
 800a448:	b948      	cbnz	r0, 800a45e <__lshift+0x3e>
 800a44a:	4602      	mov	r2, r0
 800a44c:	4b28      	ldr	r3, [pc, #160]	@ (800a4f0 <__lshift+0xd0>)
 800a44e:	4829      	ldr	r0, [pc, #164]	@ (800a4f4 <__lshift+0xd4>)
 800a450:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a454:	f7fe fe20 	bl	8009098 <__assert_func>
 800a458:	3101      	adds	r1, #1
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	e7ee      	b.n	800a43c <__lshift+0x1c>
 800a45e:	2300      	movs	r3, #0
 800a460:	f100 0114 	add.w	r1, r0, #20
 800a464:	f100 0210 	add.w	r2, r0, #16
 800a468:	4618      	mov	r0, r3
 800a46a:	4553      	cmp	r3, sl
 800a46c:	db33      	blt.n	800a4d6 <__lshift+0xb6>
 800a46e:	6920      	ldr	r0, [r4, #16]
 800a470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a474:	f104 0314 	add.w	r3, r4, #20
 800a478:	f019 091f 	ands.w	r9, r9, #31
 800a47c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a484:	d02b      	beq.n	800a4de <__lshift+0xbe>
 800a486:	f1c9 0e20 	rsb	lr, r9, #32
 800a48a:	468a      	mov	sl, r1
 800a48c:	2200      	movs	r2, #0
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	fa00 f009 	lsl.w	r0, r0, r9
 800a494:	4310      	orrs	r0, r2
 800a496:	f84a 0b04 	str.w	r0, [sl], #4
 800a49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a49e:	459c      	cmp	ip, r3
 800a4a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4a4:	d8f3      	bhi.n	800a48e <__lshift+0x6e>
 800a4a6:	ebac 0304 	sub.w	r3, ip, r4
 800a4aa:	3b15      	subs	r3, #21
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	f104 0015 	add.w	r0, r4, #21
 800a4b6:	4584      	cmp	ip, r0
 800a4b8:	bf38      	it	cc
 800a4ba:	2304      	movcc	r3, #4
 800a4bc:	50ca      	str	r2, [r1, r3]
 800a4be:	b10a      	cbz	r2, 800a4c4 <__lshift+0xa4>
 800a4c0:	f108 0602 	add.w	r6, r8, #2
 800a4c4:	3e01      	subs	r6, #1
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	612e      	str	r6, [r5, #16]
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	f7ff fd90 	bl	8009ff0 <_Bfree>
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4da:	3301      	adds	r3, #1
 800a4dc:	e7c5      	b.n	800a46a <__lshift+0x4a>
 800a4de:	3904      	subs	r1, #4
 800a4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4e8:	459c      	cmp	ip, r3
 800a4ea:	d8f9      	bhi.n	800a4e0 <__lshift+0xc0>
 800a4ec:	e7ea      	b.n	800a4c4 <__lshift+0xa4>
 800a4ee:	bf00      	nop
 800a4f0:	0800cff3 	.word	0x0800cff3
 800a4f4:	0800d004 	.word	0x0800d004

0800a4f8 <__mcmp>:
 800a4f8:	690a      	ldr	r2, [r1, #16]
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	6900      	ldr	r0, [r0, #16]
 800a4fe:	1a80      	subs	r0, r0, r2
 800a500:	b530      	push	{r4, r5, lr}
 800a502:	d10e      	bne.n	800a522 <__mcmp+0x2a>
 800a504:	3314      	adds	r3, #20
 800a506:	3114      	adds	r1, #20
 800a508:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a50c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a518:	4295      	cmp	r5, r2
 800a51a:	d003      	beq.n	800a524 <__mcmp+0x2c>
 800a51c:	d205      	bcs.n	800a52a <__mcmp+0x32>
 800a51e:	f04f 30ff 	mov.w	r0, #4294967295
 800a522:	bd30      	pop	{r4, r5, pc}
 800a524:	42a3      	cmp	r3, r4
 800a526:	d3f3      	bcc.n	800a510 <__mcmp+0x18>
 800a528:	e7fb      	b.n	800a522 <__mcmp+0x2a>
 800a52a:	2001      	movs	r0, #1
 800a52c:	e7f9      	b.n	800a522 <__mcmp+0x2a>
	...

0800a530 <__mdiff>:
 800a530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	4689      	mov	r9, r1
 800a536:	4606      	mov	r6, r0
 800a538:	4611      	mov	r1, r2
 800a53a:	4648      	mov	r0, r9
 800a53c:	4614      	mov	r4, r2
 800a53e:	f7ff ffdb 	bl	800a4f8 <__mcmp>
 800a542:	1e05      	subs	r5, r0, #0
 800a544:	d112      	bne.n	800a56c <__mdiff+0x3c>
 800a546:	4629      	mov	r1, r5
 800a548:	4630      	mov	r0, r6
 800a54a:	f7ff fd11 	bl	8009f70 <_Balloc>
 800a54e:	4602      	mov	r2, r0
 800a550:	b928      	cbnz	r0, 800a55e <__mdiff+0x2e>
 800a552:	4b3f      	ldr	r3, [pc, #252]	@ (800a650 <__mdiff+0x120>)
 800a554:	f240 2137 	movw	r1, #567	@ 0x237
 800a558:	483e      	ldr	r0, [pc, #248]	@ (800a654 <__mdiff+0x124>)
 800a55a:	f7fe fd9d 	bl	8009098 <__assert_func>
 800a55e:	2301      	movs	r3, #1
 800a560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a564:	4610      	mov	r0, r2
 800a566:	b003      	add	sp, #12
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	bfbc      	itt	lt
 800a56e:	464b      	movlt	r3, r9
 800a570:	46a1      	movlt	r9, r4
 800a572:	4630      	mov	r0, r6
 800a574:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a578:	bfba      	itte	lt
 800a57a:	461c      	movlt	r4, r3
 800a57c:	2501      	movlt	r5, #1
 800a57e:	2500      	movge	r5, #0
 800a580:	f7ff fcf6 	bl	8009f70 <_Balloc>
 800a584:	4602      	mov	r2, r0
 800a586:	b918      	cbnz	r0, 800a590 <__mdiff+0x60>
 800a588:	4b31      	ldr	r3, [pc, #196]	@ (800a650 <__mdiff+0x120>)
 800a58a:	f240 2145 	movw	r1, #581	@ 0x245
 800a58e:	e7e3      	b.n	800a558 <__mdiff+0x28>
 800a590:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a594:	6926      	ldr	r6, [r4, #16]
 800a596:	60c5      	str	r5, [r0, #12]
 800a598:	f109 0310 	add.w	r3, r9, #16
 800a59c:	f109 0514 	add.w	r5, r9, #20
 800a5a0:	f104 0e14 	add.w	lr, r4, #20
 800a5a4:	f100 0b14 	add.w	fp, r0, #20
 800a5a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a5ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	46d9      	mov	r9, fp
 800a5b4:	f04f 0c00 	mov.w	ip, #0
 800a5b8:	9b01      	ldr	r3, [sp, #4]
 800a5ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a5be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a5c2:	9301      	str	r3, [sp, #4]
 800a5c4:	fa1f f38a 	uxth.w	r3, sl
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	b283      	uxth	r3, r0
 800a5cc:	1acb      	subs	r3, r1, r3
 800a5ce:	0c00      	lsrs	r0, r0, #16
 800a5d0:	4463      	add	r3, ip
 800a5d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a5d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a5e0:	4576      	cmp	r6, lr
 800a5e2:	f849 3b04 	str.w	r3, [r9], #4
 800a5e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5ea:	d8e5      	bhi.n	800a5b8 <__mdiff+0x88>
 800a5ec:	1b33      	subs	r3, r6, r4
 800a5ee:	3b15      	subs	r3, #21
 800a5f0:	f023 0303 	bic.w	r3, r3, #3
 800a5f4:	3415      	adds	r4, #21
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	42a6      	cmp	r6, r4
 800a5fa:	bf38      	it	cc
 800a5fc:	2304      	movcc	r3, #4
 800a5fe:	441d      	add	r5, r3
 800a600:	445b      	add	r3, fp
 800a602:	461e      	mov	r6, r3
 800a604:	462c      	mov	r4, r5
 800a606:	4544      	cmp	r4, r8
 800a608:	d30e      	bcc.n	800a628 <__mdiff+0xf8>
 800a60a:	f108 0103 	add.w	r1, r8, #3
 800a60e:	1b49      	subs	r1, r1, r5
 800a610:	f021 0103 	bic.w	r1, r1, #3
 800a614:	3d03      	subs	r5, #3
 800a616:	45a8      	cmp	r8, r5
 800a618:	bf38      	it	cc
 800a61a:	2100      	movcc	r1, #0
 800a61c:	440b      	add	r3, r1
 800a61e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a622:	b191      	cbz	r1, 800a64a <__mdiff+0x11a>
 800a624:	6117      	str	r7, [r2, #16]
 800a626:	e79d      	b.n	800a564 <__mdiff+0x34>
 800a628:	f854 1b04 	ldr.w	r1, [r4], #4
 800a62c:	46e6      	mov	lr, ip
 800a62e:	0c08      	lsrs	r0, r1, #16
 800a630:	fa1c fc81 	uxtah	ip, ip, r1
 800a634:	4471      	add	r1, lr
 800a636:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a63a:	b289      	uxth	r1, r1
 800a63c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a640:	f846 1b04 	str.w	r1, [r6], #4
 800a644:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a648:	e7dd      	b.n	800a606 <__mdiff+0xd6>
 800a64a:	3f01      	subs	r7, #1
 800a64c:	e7e7      	b.n	800a61e <__mdiff+0xee>
 800a64e:	bf00      	nop
 800a650:	0800cff3 	.word	0x0800cff3
 800a654:	0800d004 	.word	0x0800d004

0800a658 <__ulp>:
 800a658:	b082      	sub	sp, #8
 800a65a:	ed8d 0b00 	vstr	d0, [sp]
 800a65e:	9a01      	ldr	r2, [sp, #4]
 800a660:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a0 <__ulp+0x48>)
 800a662:	4013      	ands	r3, r2
 800a664:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	dc08      	bgt.n	800a67e <__ulp+0x26>
 800a66c:	425b      	negs	r3, r3
 800a66e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a672:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a676:	da04      	bge.n	800a682 <__ulp+0x2a>
 800a678:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a67c:	4113      	asrs	r3, r2
 800a67e:	2200      	movs	r2, #0
 800a680:	e008      	b.n	800a694 <__ulp+0x3c>
 800a682:	f1a2 0314 	sub.w	r3, r2, #20
 800a686:	2b1e      	cmp	r3, #30
 800a688:	bfda      	itte	le
 800a68a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a68e:	40da      	lsrle	r2, r3
 800a690:	2201      	movgt	r2, #1
 800a692:	2300      	movs	r3, #0
 800a694:	4619      	mov	r1, r3
 800a696:	4610      	mov	r0, r2
 800a698:	ec41 0b10 	vmov	d0, r0, r1
 800a69c:	b002      	add	sp, #8
 800a69e:	4770      	bx	lr
 800a6a0:	7ff00000 	.word	0x7ff00000

0800a6a4 <__b2d>:
 800a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	6906      	ldr	r6, [r0, #16]
 800a6aa:	f100 0814 	add.w	r8, r0, #20
 800a6ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a6b2:	1f37      	subs	r7, r6, #4
 800a6b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	f7ff fd4b 	bl	800a154 <__hi0bits>
 800a6be:	f1c0 0320 	rsb	r3, r0, #32
 800a6c2:	280a      	cmp	r0, #10
 800a6c4:	600b      	str	r3, [r1, #0]
 800a6c6:	491b      	ldr	r1, [pc, #108]	@ (800a734 <__b2d+0x90>)
 800a6c8:	dc15      	bgt.n	800a6f6 <__b2d+0x52>
 800a6ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800a6ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800a6d2:	45b8      	cmp	r8, r7
 800a6d4:	ea43 0501 	orr.w	r5, r3, r1
 800a6d8:	bf34      	ite	cc
 800a6da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6de:	2300      	movcs	r3, #0
 800a6e0:	3015      	adds	r0, #21
 800a6e2:	fa02 f000 	lsl.w	r0, r2, r0
 800a6e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a6ea:	4303      	orrs	r3, r0
 800a6ec:	461c      	mov	r4, r3
 800a6ee:	ec45 4b10 	vmov	d0, r4, r5
 800a6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f6:	45b8      	cmp	r8, r7
 800a6f8:	bf3a      	itte	cc
 800a6fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a6fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800a702:	2300      	movcs	r3, #0
 800a704:	380b      	subs	r0, #11
 800a706:	d012      	beq.n	800a72e <__b2d+0x8a>
 800a708:	f1c0 0120 	rsb	r1, r0, #32
 800a70c:	fa23 f401 	lsr.w	r4, r3, r1
 800a710:	4082      	lsls	r2, r0
 800a712:	4322      	orrs	r2, r4
 800a714:	4547      	cmp	r7, r8
 800a716:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a71a:	bf8c      	ite	hi
 800a71c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a720:	2200      	movls	r2, #0
 800a722:	4083      	lsls	r3, r0
 800a724:	40ca      	lsrs	r2, r1
 800a726:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a72a:	4313      	orrs	r3, r2
 800a72c:	e7de      	b.n	800a6ec <__b2d+0x48>
 800a72e:	ea42 0501 	orr.w	r5, r2, r1
 800a732:	e7db      	b.n	800a6ec <__b2d+0x48>
 800a734:	3ff00000 	.word	0x3ff00000

0800a738 <__d2b>:
 800a738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a73c:	460f      	mov	r7, r1
 800a73e:	2101      	movs	r1, #1
 800a740:	ec59 8b10 	vmov	r8, r9, d0
 800a744:	4616      	mov	r6, r2
 800a746:	f7ff fc13 	bl	8009f70 <_Balloc>
 800a74a:	4604      	mov	r4, r0
 800a74c:	b930      	cbnz	r0, 800a75c <__d2b+0x24>
 800a74e:	4602      	mov	r2, r0
 800a750:	4b23      	ldr	r3, [pc, #140]	@ (800a7e0 <__d2b+0xa8>)
 800a752:	4824      	ldr	r0, [pc, #144]	@ (800a7e4 <__d2b+0xac>)
 800a754:	f240 310f 	movw	r1, #783	@ 0x30f
 800a758:	f7fe fc9e 	bl	8009098 <__assert_func>
 800a75c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a764:	b10d      	cbz	r5, 800a76a <__d2b+0x32>
 800a766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	f1b8 0300 	subs.w	r3, r8, #0
 800a770:	d023      	beq.n	800a7ba <__d2b+0x82>
 800a772:	4668      	mov	r0, sp
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	f7ff fd0c 	bl	800a192 <__lo0bits>
 800a77a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a77e:	b1d0      	cbz	r0, 800a7b6 <__d2b+0x7e>
 800a780:	f1c0 0320 	rsb	r3, r0, #32
 800a784:	fa02 f303 	lsl.w	r3, r2, r3
 800a788:	430b      	orrs	r3, r1
 800a78a:	40c2      	lsrs	r2, r0
 800a78c:	6163      	str	r3, [r4, #20]
 800a78e:	9201      	str	r2, [sp, #4]
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	61a3      	str	r3, [r4, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	bf0c      	ite	eq
 800a798:	2201      	moveq	r2, #1
 800a79a:	2202      	movne	r2, #2
 800a79c:	6122      	str	r2, [r4, #16]
 800a79e:	b1a5      	cbz	r5, 800a7ca <__d2b+0x92>
 800a7a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7a4:	4405      	add	r5, r0
 800a7a6:	603d      	str	r5, [r7, #0]
 800a7a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7ac:	6030      	str	r0, [r6, #0]
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	b003      	add	sp, #12
 800a7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7b6:	6161      	str	r1, [r4, #20]
 800a7b8:	e7ea      	b.n	800a790 <__d2b+0x58>
 800a7ba:	a801      	add	r0, sp, #4
 800a7bc:	f7ff fce9 	bl	800a192 <__lo0bits>
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	6163      	str	r3, [r4, #20]
 800a7c4:	3020      	adds	r0, #32
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	e7e8      	b.n	800a79c <__d2b+0x64>
 800a7ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a7d2:	6038      	str	r0, [r7, #0]
 800a7d4:	6918      	ldr	r0, [r3, #16]
 800a7d6:	f7ff fcbd 	bl	800a154 <__hi0bits>
 800a7da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7de:	e7e5      	b.n	800a7ac <__d2b+0x74>
 800a7e0:	0800cff3 	.word	0x0800cff3
 800a7e4:	0800d004 	.word	0x0800d004

0800a7e8 <__ratio>:
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	e9cd 1000 	strd	r1, r0, [sp]
 800a7f2:	a902      	add	r1, sp, #8
 800a7f4:	f7ff ff56 	bl	800a6a4 <__b2d>
 800a7f8:	9800      	ldr	r0, [sp, #0]
 800a7fa:	a903      	add	r1, sp, #12
 800a7fc:	ec55 4b10 	vmov	r4, r5, d0
 800a800:	f7ff ff50 	bl	800a6a4 <__b2d>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	6919      	ldr	r1, [r3, #16]
 800a808:	9b00      	ldr	r3, [sp, #0]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	1ac9      	subs	r1, r1, r3
 800a80e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a812:	1a9b      	subs	r3, r3, r2
 800a814:	ec5b ab10 	vmov	sl, fp, d0
 800a818:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bfce      	itee	gt
 800a820:	462a      	movgt	r2, r5
 800a822:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a826:	465a      	movle	r2, fp
 800a828:	462f      	mov	r7, r5
 800a82a:	46d9      	mov	r9, fp
 800a82c:	bfcc      	ite	gt
 800a82e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a832:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a836:	464b      	mov	r3, r9
 800a838:	4652      	mov	r2, sl
 800a83a:	4620      	mov	r0, r4
 800a83c:	4639      	mov	r1, r7
 800a83e:	f7f6 f805 	bl	800084c <__aeabi_ddiv>
 800a842:	ec41 0b10 	vmov	d0, r0, r1
 800a846:	b005      	add	sp, #20
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a84c <__copybits>:
 800a84c:	3901      	subs	r1, #1
 800a84e:	b570      	push	{r4, r5, r6, lr}
 800a850:	1149      	asrs	r1, r1, #5
 800a852:	6914      	ldr	r4, [r2, #16]
 800a854:	3101      	adds	r1, #1
 800a856:	f102 0314 	add.w	r3, r2, #20
 800a85a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a85e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a862:	1f05      	subs	r5, r0, #4
 800a864:	42a3      	cmp	r3, r4
 800a866:	d30c      	bcc.n	800a882 <__copybits+0x36>
 800a868:	1aa3      	subs	r3, r4, r2
 800a86a:	3b11      	subs	r3, #17
 800a86c:	f023 0303 	bic.w	r3, r3, #3
 800a870:	3211      	adds	r2, #17
 800a872:	42a2      	cmp	r2, r4
 800a874:	bf88      	it	hi
 800a876:	2300      	movhi	r3, #0
 800a878:	4418      	add	r0, r3
 800a87a:	2300      	movs	r3, #0
 800a87c:	4288      	cmp	r0, r1
 800a87e:	d305      	bcc.n	800a88c <__copybits+0x40>
 800a880:	bd70      	pop	{r4, r5, r6, pc}
 800a882:	f853 6b04 	ldr.w	r6, [r3], #4
 800a886:	f845 6f04 	str.w	r6, [r5, #4]!
 800a88a:	e7eb      	b.n	800a864 <__copybits+0x18>
 800a88c:	f840 3b04 	str.w	r3, [r0], #4
 800a890:	e7f4      	b.n	800a87c <__copybits+0x30>

0800a892 <__any_on>:
 800a892:	f100 0214 	add.w	r2, r0, #20
 800a896:	6900      	ldr	r0, [r0, #16]
 800a898:	114b      	asrs	r3, r1, #5
 800a89a:	4298      	cmp	r0, r3
 800a89c:	b510      	push	{r4, lr}
 800a89e:	db11      	blt.n	800a8c4 <__any_on+0x32>
 800a8a0:	dd0a      	ble.n	800a8b8 <__any_on+0x26>
 800a8a2:	f011 011f 	ands.w	r1, r1, #31
 800a8a6:	d007      	beq.n	800a8b8 <__any_on+0x26>
 800a8a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8ac:	fa24 f001 	lsr.w	r0, r4, r1
 800a8b0:	fa00 f101 	lsl.w	r1, r0, r1
 800a8b4:	428c      	cmp	r4, r1
 800a8b6:	d10b      	bne.n	800a8d0 <__any_on+0x3e>
 800a8b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d803      	bhi.n	800a8c8 <__any_on+0x36>
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	e7f7      	b.n	800a8b8 <__any_on+0x26>
 800a8c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	d0f5      	beq.n	800a8bc <__any_on+0x2a>
 800a8d0:	2001      	movs	r0, #1
 800a8d2:	e7f6      	b.n	800a8c2 <__any_on+0x30>

0800a8d4 <sulp>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	460d      	mov	r5, r1
 800a8da:	ec45 4b10 	vmov	d0, r4, r5
 800a8de:	4616      	mov	r6, r2
 800a8e0:	f7ff feba 	bl	800a658 <__ulp>
 800a8e4:	ec51 0b10 	vmov	r0, r1, d0
 800a8e8:	b17e      	cbz	r6, 800a90a <sulp+0x36>
 800a8ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a8ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	dd09      	ble.n	800a90a <sulp+0x36>
 800a8f6:	051b      	lsls	r3, r3, #20
 800a8f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a8fc:	2400      	movs	r4, #0
 800a8fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a902:	4622      	mov	r2, r4
 800a904:	462b      	mov	r3, r5
 800a906:	f7f5 fe77 	bl	80005f8 <__aeabi_dmul>
 800a90a:	ec41 0b10 	vmov	d0, r0, r1
 800a90e:	bd70      	pop	{r4, r5, r6, pc}

0800a910 <_strtod_l>:
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	b09f      	sub	sp, #124	@ 0x7c
 800a916:	460c      	mov	r4, r1
 800a918:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a91a:	2200      	movs	r2, #0
 800a91c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a91e:	9005      	str	r0, [sp, #20]
 800a920:	f04f 0a00 	mov.w	sl, #0
 800a924:	f04f 0b00 	mov.w	fp, #0
 800a928:	460a      	mov	r2, r1
 800a92a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a92c:	7811      	ldrb	r1, [r2, #0]
 800a92e:	292b      	cmp	r1, #43	@ 0x2b
 800a930:	d04a      	beq.n	800a9c8 <_strtod_l+0xb8>
 800a932:	d838      	bhi.n	800a9a6 <_strtod_l+0x96>
 800a934:	290d      	cmp	r1, #13
 800a936:	d832      	bhi.n	800a99e <_strtod_l+0x8e>
 800a938:	2908      	cmp	r1, #8
 800a93a:	d832      	bhi.n	800a9a2 <_strtod_l+0x92>
 800a93c:	2900      	cmp	r1, #0
 800a93e:	d03b      	beq.n	800a9b8 <_strtod_l+0xa8>
 800a940:	2200      	movs	r2, #0
 800a942:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a944:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a946:	782a      	ldrb	r2, [r5, #0]
 800a948:	2a30      	cmp	r2, #48	@ 0x30
 800a94a:	f040 80b3 	bne.w	800aab4 <_strtod_l+0x1a4>
 800a94e:	786a      	ldrb	r2, [r5, #1]
 800a950:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a954:	2a58      	cmp	r2, #88	@ 0x58
 800a956:	d16e      	bne.n	800aa36 <_strtod_l+0x126>
 800a958:	9302      	str	r3, [sp, #8]
 800a95a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a960:	9300      	str	r3, [sp, #0]
 800a962:	4a8e      	ldr	r2, [pc, #568]	@ (800ab9c <_strtod_l+0x28c>)
 800a964:	9805      	ldr	r0, [sp, #20]
 800a966:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a968:	a919      	add	r1, sp, #100	@ 0x64
 800a96a:	f001 fac7 	bl	800befc <__gethex>
 800a96e:	f010 060f 	ands.w	r6, r0, #15
 800a972:	4604      	mov	r4, r0
 800a974:	d005      	beq.n	800a982 <_strtod_l+0x72>
 800a976:	2e06      	cmp	r6, #6
 800a978:	d128      	bne.n	800a9cc <_strtod_l+0xbc>
 800a97a:	3501      	adds	r5, #1
 800a97c:	2300      	movs	r3, #0
 800a97e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a980:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a984:	2b00      	cmp	r3, #0
 800a986:	f040 858e 	bne.w	800b4a6 <_strtod_l+0xb96>
 800a98a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a98c:	b1cb      	cbz	r3, 800a9c2 <_strtod_l+0xb2>
 800a98e:	4652      	mov	r2, sl
 800a990:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a994:	ec43 2b10 	vmov	d0, r2, r3
 800a998:	b01f      	add	sp, #124	@ 0x7c
 800a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99e:	2920      	cmp	r1, #32
 800a9a0:	d1ce      	bne.n	800a940 <_strtod_l+0x30>
 800a9a2:	3201      	adds	r2, #1
 800a9a4:	e7c1      	b.n	800a92a <_strtod_l+0x1a>
 800a9a6:	292d      	cmp	r1, #45	@ 0x2d
 800a9a8:	d1ca      	bne.n	800a940 <_strtod_l+0x30>
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a9ae:	1c51      	adds	r1, r2, #1
 800a9b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a9b2:	7852      	ldrb	r2, [r2, #1]
 800a9b4:	2a00      	cmp	r2, #0
 800a9b6:	d1c5      	bne.n	800a944 <_strtod_l+0x34>
 800a9b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a9ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f040 8570 	bne.w	800b4a2 <_strtod_l+0xb92>
 800a9c2:	4652      	mov	r2, sl
 800a9c4:	465b      	mov	r3, fp
 800a9c6:	e7e5      	b.n	800a994 <_strtod_l+0x84>
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	e7ef      	b.n	800a9ac <_strtod_l+0x9c>
 800a9cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a9ce:	b13a      	cbz	r2, 800a9e0 <_strtod_l+0xd0>
 800a9d0:	2135      	movs	r1, #53	@ 0x35
 800a9d2:	a81c      	add	r0, sp, #112	@ 0x70
 800a9d4:	f7ff ff3a 	bl	800a84c <__copybits>
 800a9d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9da:	9805      	ldr	r0, [sp, #20]
 800a9dc:	f7ff fb08 	bl	8009ff0 <_Bfree>
 800a9e0:	3e01      	subs	r6, #1
 800a9e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a9e4:	2e04      	cmp	r6, #4
 800a9e6:	d806      	bhi.n	800a9f6 <_strtod_l+0xe6>
 800a9e8:	e8df f006 	tbb	[pc, r6]
 800a9ec:	201d0314 	.word	0x201d0314
 800a9f0:	14          	.byte	0x14
 800a9f1:	00          	.byte	0x00
 800a9f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a9f6:	05e1      	lsls	r1, r4, #23
 800a9f8:	bf48      	it	mi
 800a9fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a9fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa02:	0d1b      	lsrs	r3, r3, #20
 800aa04:	051b      	lsls	r3, r3, #20
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1bb      	bne.n	800a982 <_strtod_l+0x72>
 800aa0a:	f7fe fb03 	bl	8009014 <__errno>
 800aa0e:	2322      	movs	r3, #34	@ 0x22
 800aa10:	6003      	str	r3, [r0, #0]
 800aa12:	e7b6      	b.n	800a982 <_strtod_l+0x72>
 800aa14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aa18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aa1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aa20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa24:	e7e7      	b.n	800a9f6 <_strtod_l+0xe6>
 800aa26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800aba4 <_strtod_l+0x294>
 800aa2a:	e7e4      	b.n	800a9f6 <_strtod_l+0xe6>
 800aa2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aa30:	f04f 3aff 	mov.w	sl, #4294967295
 800aa34:	e7df      	b.n	800a9f6 <_strtod_l+0xe6>
 800aa36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa3c:	785b      	ldrb	r3, [r3, #1]
 800aa3e:	2b30      	cmp	r3, #48	@ 0x30
 800aa40:	d0f9      	beq.n	800aa36 <_strtod_l+0x126>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d09d      	beq.n	800a982 <_strtod_l+0x72>
 800aa46:	2301      	movs	r3, #1
 800aa48:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa4e:	2300      	movs	r3, #0
 800aa50:	9308      	str	r3, [sp, #32]
 800aa52:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa54:	461f      	mov	r7, r3
 800aa56:	220a      	movs	r2, #10
 800aa58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aa5a:	7805      	ldrb	r5, [r0, #0]
 800aa5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aa60:	b2d9      	uxtb	r1, r3
 800aa62:	2909      	cmp	r1, #9
 800aa64:	d928      	bls.n	800aab8 <_strtod_l+0x1a8>
 800aa66:	494e      	ldr	r1, [pc, #312]	@ (800aba0 <_strtod_l+0x290>)
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f7fe f9f1 	bl	8008e50 <strncmp>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d032      	beq.n	800aad8 <_strtod_l+0x1c8>
 800aa72:	2000      	movs	r0, #0
 800aa74:	462a      	mov	r2, r5
 800aa76:	4681      	mov	r9, r0
 800aa78:	463d      	mov	r5, r7
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2a65      	cmp	r2, #101	@ 0x65
 800aa7e:	d001      	beq.n	800aa84 <_strtod_l+0x174>
 800aa80:	2a45      	cmp	r2, #69	@ 0x45
 800aa82:	d114      	bne.n	800aaae <_strtod_l+0x19e>
 800aa84:	b91d      	cbnz	r5, 800aa8e <_strtod_l+0x17e>
 800aa86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa88:	4302      	orrs	r2, r0
 800aa8a:	d095      	beq.n	800a9b8 <_strtod_l+0xa8>
 800aa8c:	2500      	movs	r5, #0
 800aa8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aa90:	1c62      	adds	r2, r4, #1
 800aa92:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa94:	7862      	ldrb	r2, [r4, #1]
 800aa96:	2a2b      	cmp	r2, #43	@ 0x2b
 800aa98:	d077      	beq.n	800ab8a <_strtod_l+0x27a>
 800aa9a:	2a2d      	cmp	r2, #45	@ 0x2d
 800aa9c:	d07b      	beq.n	800ab96 <_strtod_l+0x286>
 800aa9e:	f04f 0c00 	mov.w	ip, #0
 800aaa2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aaa6:	2909      	cmp	r1, #9
 800aaa8:	f240 8082 	bls.w	800abb0 <_strtod_l+0x2a0>
 800aaac:	9419      	str	r4, [sp, #100]	@ 0x64
 800aaae:	f04f 0800 	mov.w	r8, #0
 800aab2:	e0a2      	b.n	800abfa <_strtod_l+0x2ea>
 800aab4:	2300      	movs	r3, #0
 800aab6:	e7c7      	b.n	800aa48 <_strtod_l+0x138>
 800aab8:	2f08      	cmp	r7, #8
 800aaba:	bfd5      	itete	le
 800aabc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800aabe:	9908      	ldrgt	r1, [sp, #32]
 800aac0:	fb02 3301 	mlale	r3, r2, r1, r3
 800aac4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aac8:	f100 0001 	add.w	r0, r0, #1
 800aacc:	bfd4      	ite	le
 800aace:	930a      	strle	r3, [sp, #40]	@ 0x28
 800aad0:	9308      	strgt	r3, [sp, #32]
 800aad2:	3701      	adds	r7, #1
 800aad4:	9019      	str	r0, [sp, #100]	@ 0x64
 800aad6:	e7bf      	b.n	800aa58 <_strtod_l+0x148>
 800aad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	9219      	str	r2, [sp, #100]	@ 0x64
 800aade:	785a      	ldrb	r2, [r3, #1]
 800aae0:	b37f      	cbz	r7, 800ab42 <_strtod_l+0x232>
 800aae2:	4681      	mov	r9, r0
 800aae4:	463d      	mov	r5, r7
 800aae6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aaea:	2b09      	cmp	r3, #9
 800aaec:	d912      	bls.n	800ab14 <_strtod_l+0x204>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e7c4      	b.n	800aa7c <_strtod_l+0x16c>
 800aaf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	9219      	str	r2, [sp, #100]	@ 0x64
 800aaf8:	785a      	ldrb	r2, [r3, #1]
 800aafa:	3001      	adds	r0, #1
 800aafc:	2a30      	cmp	r2, #48	@ 0x30
 800aafe:	d0f8      	beq.n	800aaf2 <_strtod_l+0x1e2>
 800ab00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ab04:	2b08      	cmp	r3, #8
 800ab06:	f200 84d3 	bhi.w	800b4b0 <_strtod_l+0xba0>
 800ab0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab0e:	4681      	mov	r9, r0
 800ab10:	2000      	movs	r0, #0
 800ab12:	4605      	mov	r5, r0
 800ab14:	3a30      	subs	r2, #48	@ 0x30
 800ab16:	f100 0301 	add.w	r3, r0, #1
 800ab1a:	d02a      	beq.n	800ab72 <_strtod_l+0x262>
 800ab1c:	4499      	add	r9, r3
 800ab1e:	eb00 0c05 	add.w	ip, r0, r5
 800ab22:	462b      	mov	r3, r5
 800ab24:	210a      	movs	r1, #10
 800ab26:	4563      	cmp	r3, ip
 800ab28:	d10d      	bne.n	800ab46 <_strtod_l+0x236>
 800ab2a:	1c69      	adds	r1, r5, #1
 800ab2c:	4401      	add	r1, r0
 800ab2e:	4428      	add	r0, r5
 800ab30:	2808      	cmp	r0, #8
 800ab32:	dc16      	bgt.n	800ab62 <_strtod_l+0x252>
 800ab34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab36:	230a      	movs	r3, #10
 800ab38:	fb03 2300 	mla	r3, r3, r0, r2
 800ab3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e018      	b.n	800ab74 <_strtod_l+0x264>
 800ab42:	4638      	mov	r0, r7
 800ab44:	e7da      	b.n	800aafc <_strtod_l+0x1ec>
 800ab46:	2b08      	cmp	r3, #8
 800ab48:	f103 0301 	add.w	r3, r3, #1
 800ab4c:	dc03      	bgt.n	800ab56 <_strtod_l+0x246>
 800ab4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ab50:	434e      	muls	r6, r1
 800ab52:	960a      	str	r6, [sp, #40]	@ 0x28
 800ab54:	e7e7      	b.n	800ab26 <_strtod_l+0x216>
 800ab56:	2b10      	cmp	r3, #16
 800ab58:	bfde      	ittt	le
 800ab5a:	9e08      	ldrle	r6, [sp, #32]
 800ab5c:	434e      	mulle	r6, r1
 800ab5e:	9608      	strle	r6, [sp, #32]
 800ab60:	e7e1      	b.n	800ab26 <_strtod_l+0x216>
 800ab62:	280f      	cmp	r0, #15
 800ab64:	dceb      	bgt.n	800ab3e <_strtod_l+0x22e>
 800ab66:	9808      	ldr	r0, [sp, #32]
 800ab68:	230a      	movs	r3, #10
 800ab6a:	fb03 2300 	mla	r3, r3, r0, r2
 800ab6e:	9308      	str	r3, [sp, #32]
 800ab70:	e7e5      	b.n	800ab3e <_strtod_l+0x22e>
 800ab72:	4629      	mov	r1, r5
 800ab74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ab76:	1c50      	adds	r0, r2, #1
 800ab78:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab7a:	7852      	ldrb	r2, [r2, #1]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	460d      	mov	r5, r1
 800ab80:	e7b1      	b.n	800aae6 <_strtod_l+0x1d6>
 800ab82:	f04f 0900 	mov.w	r9, #0
 800ab86:	2301      	movs	r3, #1
 800ab88:	e77d      	b.n	800aa86 <_strtod_l+0x176>
 800ab8a:	f04f 0c00 	mov.w	ip, #0
 800ab8e:	1ca2      	adds	r2, r4, #2
 800ab90:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab92:	78a2      	ldrb	r2, [r4, #2]
 800ab94:	e785      	b.n	800aaa2 <_strtod_l+0x192>
 800ab96:	f04f 0c01 	mov.w	ip, #1
 800ab9a:	e7f8      	b.n	800ab8e <_strtod_l+0x27e>
 800ab9c:	0800d178 	.word	0x0800d178
 800aba0:	0800d160 	.word	0x0800d160
 800aba4:	7ff00000 	.word	0x7ff00000
 800aba8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abaa:	1c51      	adds	r1, r2, #1
 800abac:	9119      	str	r1, [sp, #100]	@ 0x64
 800abae:	7852      	ldrb	r2, [r2, #1]
 800abb0:	2a30      	cmp	r2, #48	@ 0x30
 800abb2:	d0f9      	beq.n	800aba8 <_strtod_l+0x298>
 800abb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800abb8:	2908      	cmp	r1, #8
 800abba:	f63f af78 	bhi.w	800aaae <_strtod_l+0x19e>
 800abbe:	3a30      	subs	r2, #48	@ 0x30
 800abc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800abc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800abc6:	f04f 080a 	mov.w	r8, #10
 800abca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abcc:	1c56      	adds	r6, r2, #1
 800abce:	9619      	str	r6, [sp, #100]	@ 0x64
 800abd0:	7852      	ldrb	r2, [r2, #1]
 800abd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800abd6:	f1be 0f09 	cmp.w	lr, #9
 800abda:	d939      	bls.n	800ac50 <_strtod_l+0x340>
 800abdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800abde:	1a76      	subs	r6, r6, r1
 800abe0:	2e08      	cmp	r6, #8
 800abe2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800abe6:	dc03      	bgt.n	800abf0 <_strtod_l+0x2e0>
 800abe8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800abea:	4588      	cmp	r8, r1
 800abec:	bfa8      	it	ge
 800abee:	4688      	movge	r8, r1
 800abf0:	f1bc 0f00 	cmp.w	ip, #0
 800abf4:	d001      	beq.n	800abfa <_strtod_l+0x2ea>
 800abf6:	f1c8 0800 	rsb	r8, r8, #0
 800abfa:	2d00      	cmp	r5, #0
 800abfc:	d14e      	bne.n	800ac9c <_strtod_l+0x38c>
 800abfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac00:	4308      	orrs	r0, r1
 800ac02:	f47f aebe 	bne.w	800a982 <_strtod_l+0x72>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f47f aed6 	bne.w	800a9b8 <_strtod_l+0xa8>
 800ac0c:	2a69      	cmp	r2, #105	@ 0x69
 800ac0e:	d028      	beq.n	800ac62 <_strtod_l+0x352>
 800ac10:	dc25      	bgt.n	800ac5e <_strtod_l+0x34e>
 800ac12:	2a49      	cmp	r2, #73	@ 0x49
 800ac14:	d025      	beq.n	800ac62 <_strtod_l+0x352>
 800ac16:	2a4e      	cmp	r2, #78	@ 0x4e
 800ac18:	f47f aece 	bne.w	800a9b8 <_strtod_l+0xa8>
 800ac1c:	499b      	ldr	r1, [pc, #620]	@ (800ae8c <_strtod_l+0x57c>)
 800ac1e:	a819      	add	r0, sp, #100	@ 0x64
 800ac20:	f001 fb8e 	bl	800c340 <__match>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f43f aec7 	beq.w	800a9b8 <_strtod_l+0xa8>
 800ac2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	2b28      	cmp	r3, #40	@ 0x28
 800ac30:	d12e      	bne.n	800ac90 <_strtod_l+0x380>
 800ac32:	4997      	ldr	r1, [pc, #604]	@ (800ae90 <_strtod_l+0x580>)
 800ac34:	aa1c      	add	r2, sp, #112	@ 0x70
 800ac36:	a819      	add	r0, sp, #100	@ 0x64
 800ac38:	f001 fb96 	bl	800c368 <__hexnan>
 800ac3c:	2805      	cmp	r0, #5
 800ac3e:	d127      	bne.n	800ac90 <_strtod_l+0x380>
 800ac40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ac46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ac4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ac4e:	e698      	b.n	800a982 <_strtod_l+0x72>
 800ac50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac52:	fb08 2101 	mla	r1, r8, r1, r2
 800ac56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ac5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac5c:	e7b5      	b.n	800abca <_strtod_l+0x2ba>
 800ac5e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ac60:	e7da      	b.n	800ac18 <_strtod_l+0x308>
 800ac62:	498c      	ldr	r1, [pc, #560]	@ (800ae94 <_strtod_l+0x584>)
 800ac64:	a819      	add	r0, sp, #100	@ 0x64
 800ac66:	f001 fb6b 	bl	800c340 <__match>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	f43f aea4 	beq.w	800a9b8 <_strtod_l+0xa8>
 800ac70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac72:	4989      	ldr	r1, [pc, #548]	@ (800ae98 <_strtod_l+0x588>)
 800ac74:	3b01      	subs	r3, #1
 800ac76:	a819      	add	r0, sp, #100	@ 0x64
 800ac78:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac7a:	f001 fb61 	bl	800c340 <__match>
 800ac7e:	b910      	cbnz	r0, 800ac86 <_strtod_l+0x376>
 800ac80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac82:	3301      	adds	r3, #1
 800ac84:	9319      	str	r3, [sp, #100]	@ 0x64
 800ac86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aea8 <_strtod_l+0x598>
 800ac8a:	f04f 0a00 	mov.w	sl, #0
 800ac8e:	e678      	b.n	800a982 <_strtod_l+0x72>
 800ac90:	4882      	ldr	r0, [pc, #520]	@ (800ae9c <_strtod_l+0x58c>)
 800ac92:	f001 f8a9 	bl	800bde8 <nan>
 800ac96:	ec5b ab10 	vmov	sl, fp, d0
 800ac9a:	e672      	b.n	800a982 <_strtod_l+0x72>
 800ac9c:	eba8 0309 	sub.w	r3, r8, r9
 800aca0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	bf08      	it	eq
 800aca8:	462f      	moveq	r7, r5
 800acaa:	2d10      	cmp	r5, #16
 800acac:	462c      	mov	r4, r5
 800acae:	bfa8      	it	ge
 800acb0:	2410      	movge	r4, #16
 800acb2:	f7f5 fc27 	bl	8000504 <__aeabi_ui2d>
 800acb6:	2d09      	cmp	r5, #9
 800acb8:	4682      	mov	sl, r0
 800acba:	468b      	mov	fp, r1
 800acbc:	dc13      	bgt.n	800ace6 <_strtod_l+0x3d6>
 800acbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f43f ae5e 	beq.w	800a982 <_strtod_l+0x72>
 800acc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc8:	dd78      	ble.n	800adbc <_strtod_l+0x4ac>
 800acca:	2b16      	cmp	r3, #22
 800accc:	dc5f      	bgt.n	800ad8e <_strtod_l+0x47e>
 800acce:	4974      	ldr	r1, [pc, #464]	@ (800aea0 <_strtod_l+0x590>)
 800acd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd8:	4652      	mov	r2, sl
 800acda:	465b      	mov	r3, fp
 800acdc:	f7f5 fc8c 	bl	80005f8 <__aeabi_dmul>
 800ace0:	4682      	mov	sl, r0
 800ace2:	468b      	mov	fp, r1
 800ace4:	e64d      	b.n	800a982 <_strtod_l+0x72>
 800ace6:	4b6e      	ldr	r3, [pc, #440]	@ (800aea0 <_strtod_l+0x590>)
 800ace8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800acf0:	f7f5 fc82 	bl	80005f8 <__aeabi_dmul>
 800acf4:	4682      	mov	sl, r0
 800acf6:	9808      	ldr	r0, [sp, #32]
 800acf8:	468b      	mov	fp, r1
 800acfa:	f7f5 fc03 	bl	8000504 <__aeabi_ui2d>
 800acfe:	4602      	mov	r2, r0
 800ad00:	460b      	mov	r3, r1
 800ad02:	4650      	mov	r0, sl
 800ad04:	4659      	mov	r1, fp
 800ad06:	f7f5 fac1 	bl	800028c <__adddf3>
 800ad0a:	2d0f      	cmp	r5, #15
 800ad0c:	4682      	mov	sl, r0
 800ad0e:	468b      	mov	fp, r1
 800ad10:	ddd5      	ble.n	800acbe <_strtod_l+0x3ae>
 800ad12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad14:	1b2c      	subs	r4, r5, r4
 800ad16:	441c      	add	r4, r3
 800ad18:	2c00      	cmp	r4, #0
 800ad1a:	f340 8096 	ble.w	800ae4a <_strtod_l+0x53a>
 800ad1e:	f014 030f 	ands.w	r3, r4, #15
 800ad22:	d00a      	beq.n	800ad3a <_strtod_l+0x42a>
 800ad24:	495e      	ldr	r1, [pc, #376]	@ (800aea0 <_strtod_l+0x590>)
 800ad26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad2a:	4652      	mov	r2, sl
 800ad2c:	465b      	mov	r3, fp
 800ad2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad32:	f7f5 fc61 	bl	80005f8 <__aeabi_dmul>
 800ad36:	4682      	mov	sl, r0
 800ad38:	468b      	mov	fp, r1
 800ad3a:	f034 040f 	bics.w	r4, r4, #15
 800ad3e:	d073      	beq.n	800ae28 <_strtod_l+0x518>
 800ad40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ad44:	dd48      	ble.n	800add8 <_strtod_l+0x4c8>
 800ad46:	2400      	movs	r4, #0
 800ad48:	46a0      	mov	r8, r4
 800ad4a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad4c:	46a1      	mov	r9, r4
 800ad4e:	9a05      	ldr	r2, [sp, #20]
 800ad50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aea8 <_strtod_l+0x598>
 800ad54:	2322      	movs	r3, #34	@ 0x22
 800ad56:	6013      	str	r3, [r2, #0]
 800ad58:	f04f 0a00 	mov.w	sl, #0
 800ad5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f43f ae0f 	beq.w	800a982 <_strtod_l+0x72>
 800ad64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad66:	9805      	ldr	r0, [sp, #20]
 800ad68:	f7ff f942 	bl	8009ff0 <_Bfree>
 800ad6c:	9805      	ldr	r0, [sp, #20]
 800ad6e:	4649      	mov	r1, r9
 800ad70:	f7ff f93e 	bl	8009ff0 <_Bfree>
 800ad74:	9805      	ldr	r0, [sp, #20]
 800ad76:	4641      	mov	r1, r8
 800ad78:	f7ff f93a 	bl	8009ff0 <_Bfree>
 800ad7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad7e:	9805      	ldr	r0, [sp, #20]
 800ad80:	f7ff f936 	bl	8009ff0 <_Bfree>
 800ad84:	9805      	ldr	r0, [sp, #20]
 800ad86:	4621      	mov	r1, r4
 800ad88:	f7ff f932 	bl	8009ff0 <_Bfree>
 800ad8c:	e5f9      	b.n	800a982 <_strtod_l+0x72>
 800ad8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ad94:	4293      	cmp	r3, r2
 800ad96:	dbbc      	blt.n	800ad12 <_strtod_l+0x402>
 800ad98:	4c41      	ldr	r4, [pc, #260]	@ (800aea0 <_strtod_l+0x590>)
 800ad9a:	f1c5 050f 	rsb	r5, r5, #15
 800ad9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ada2:	4652      	mov	r2, sl
 800ada4:	465b      	mov	r3, fp
 800ada6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adaa:	f7f5 fc25 	bl	80005f8 <__aeabi_dmul>
 800adae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb0:	1b5d      	subs	r5, r3, r5
 800adb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800adb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800adba:	e78f      	b.n	800acdc <_strtod_l+0x3cc>
 800adbc:	3316      	adds	r3, #22
 800adbe:	dba8      	blt.n	800ad12 <_strtod_l+0x402>
 800adc0:	4b37      	ldr	r3, [pc, #220]	@ (800aea0 <_strtod_l+0x590>)
 800adc2:	eba9 0808 	sub.w	r8, r9, r8
 800adc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800adca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800adce:	4650      	mov	r0, sl
 800add0:	4659      	mov	r1, fp
 800add2:	f7f5 fd3b 	bl	800084c <__aeabi_ddiv>
 800add6:	e783      	b.n	800ace0 <_strtod_l+0x3d0>
 800add8:	4b32      	ldr	r3, [pc, #200]	@ (800aea4 <_strtod_l+0x594>)
 800adda:	9308      	str	r3, [sp, #32]
 800addc:	2300      	movs	r3, #0
 800adde:	1124      	asrs	r4, r4, #4
 800ade0:	4650      	mov	r0, sl
 800ade2:	4659      	mov	r1, fp
 800ade4:	461e      	mov	r6, r3
 800ade6:	2c01      	cmp	r4, #1
 800ade8:	dc21      	bgt.n	800ae2e <_strtod_l+0x51e>
 800adea:	b10b      	cbz	r3, 800adf0 <_strtod_l+0x4e0>
 800adec:	4682      	mov	sl, r0
 800adee:	468b      	mov	fp, r1
 800adf0:	492c      	ldr	r1, [pc, #176]	@ (800aea4 <_strtod_l+0x594>)
 800adf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800adf6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800adfa:	4652      	mov	r2, sl
 800adfc:	465b      	mov	r3, fp
 800adfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae02:	f7f5 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ae06:	4b28      	ldr	r3, [pc, #160]	@ (800aea8 <_strtod_l+0x598>)
 800ae08:	460a      	mov	r2, r1
 800ae0a:	400b      	ands	r3, r1
 800ae0c:	4927      	ldr	r1, [pc, #156]	@ (800aeac <_strtod_l+0x59c>)
 800ae0e:	428b      	cmp	r3, r1
 800ae10:	4682      	mov	sl, r0
 800ae12:	d898      	bhi.n	800ad46 <_strtod_l+0x436>
 800ae14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ae18:	428b      	cmp	r3, r1
 800ae1a:	bf86      	itte	hi
 800ae1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aeb0 <_strtod_l+0x5a0>
 800ae20:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ae28:	2300      	movs	r3, #0
 800ae2a:	9308      	str	r3, [sp, #32]
 800ae2c:	e07a      	b.n	800af24 <_strtod_l+0x614>
 800ae2e:	07e2      	lsls	r2, r4, #31
 800ae30:	d505      	bpl.n	800ae3e <_strtod_l+0x52e>
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f7f5 fbde 	bl	80005f8 <__aeabi_dmul>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	9a08      	ldr	r2, [sp, #32]
 800ae40:	3208      	adds	r2, #8
 800ae42:	3601      	adds	r6, #1
 800ae44:	1064      	asrs	r4, r4, #1
 800ae46:	9208      	str	r2, [sp, #32]
 800ae48:	e7cd      	b.n	800ade6 <_strtod_l+0x4d6>
 800ae4a:	d0ed      	beq.n	800ae28 <_strtod_l+0x518>
 800ae4c:	4264      	negs	r4, r4
 800ae4e:	f014 020f 	ands.w	r2, r4, #15
 800ae52:	d00a      	beq.n	800ae6a <_strtod_l+0x55a>
 800ae54:	4b12      	ldr	r3, [pc, #72]	@ (800aea0 <_strtod_l+0x590>)
 800ae56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae5a:	4650      	mov	r0, sl
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f7f5 fcf3 	bl	800084c <__aeabi_ddiv>
 800ae66:	4682      	mov	sl, r0
 800ae68:	468b      	mov	fp, r1
 800ae6a:	1124      	asrs	r4, r4, #4
 800ae6c:	d0dc      	beq.n	800ae28 <_strtod_l+0x518>
 800ae6e:	2c1f      	cmp	r4, #31
 800ae70:	dd20      	ble.n	800aeb4 <_strtod_l+0x5a4>
 800ae72:	2400      	movs	r4, #0
 800ae74:	46a0      	mov	r8, r4
 800ae76:	940a      	str	r4, [sp, #40]	@ 0x28
 800ae78:	46a1      	mov	r9, r4
 800ae7a:	9a05      	ldr	r2, [sp, #20]
 800ae7c:	2322      	movs	r3, #34	@ 0x22
 800ae7e:	f04f 0a00 	mov.w	sl, #0
 800ae82:	f04f 0b00 	mov.w	fp, #0
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	e768      	b.n	800ad5c <_strtod_l+0x44c>
 800ae8a:	bf00      	nop
 800ae8c:	0800ceb5 	.word	0x0800ceb5
 800ae90:	0800d164 	.word	0x0800d164
 800ae94:	0800cead 	.word	0x0800cead
 800ae98:	0800cf91 	.word	0x0800cf91
 800ae9c:	0800cf8d 	.word	0x0800cf8d
 800aea0:	0800d098 	.word	0x0800d098
 800aea4:	0800d070 	.word	0x0800d070
 800aea8:	7ff00000 	.word	0x7ff00000
 800aeac:	7ca00000 	.word	0x7ca00000
 800aeb0:	7fefffff 	.word	0x7fefffff
 800aeb4:	f014 0310 	ands.w	r3, r4, #16
 800aeb8:	bf18      	it	ne
 800aeba:	236a      	movne	r3, #106	@ 0x6a
 800aebc:	4ea9      	ldr	r6, [pc, #676]	@ (800b164 <_strtod_l+0x854>)
 800aebe:	9308      	str	r3, [sp, #32]
 800aec0:	4650      	mov	r0, sl
 800aec2:	4659      	mov	r1, fp
 800aec4:	2300      	movs	r3, #0
 800aec6:	07e2      	lsls	r2, r4, #31
 800aec8:	d504      	bpl.n	800aed4 <_strtod_l+0x5c4>
 800aeca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aece:	f7f5 fb93 	bl	80005f8 <__aeabi_dmul>
 800aed2:	2301      	movs	r3, #1
 800aed4:	1064      	asrs	r4, r4, #1
 800aed6:	f106 0608 	add.w	r6, r6, #8
 800aeda:	d1f4      	bne.n	800aec6 <_strtod_l+0x5b6>
 800aedc:	b10b      	cbz	r3, 800aee2 <_strtod_l+0x5d2>
 800aede:	4682      	mov	sl, r0
 800aee0:	468b      	mov	fp, r1
 800aee2:	9b08      	ldr	r3, [sp, #32]
 800aee4:	b1b3      	cbz	r3, 800af14 <_strtod_l+0x604>
 800aee6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aeea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	4659      	mov	r1, fp
 800aef2:	dd0f      	ble.n	800af14 <_strtod_l+0x604>
 800aef4:	2b1f      	cmp	r3, #31
 800aef6:	dd55      	ble.n	800afa4 <_strtod_l+0x694>
 800aef8:	2b34      	cmp	r3, #52	@ 0x34
 800aefa:	bfde      	ittt	le
 800aefc:	f04f 33ff 	movle.w	r3, #4294967295
 800af00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800af04:	4093      	lslle	r3, r2
 800af06:	f04f 0a00 	mov.w	sl, #0
 800af0a:	bfcc      	ite	gt
 800af0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800af10:	ea03 0b01 	andle.w	fp, r3, r1
 800af14:	2200      	movs	r2, #0
 800af16:	2300      	movs	r3, #0
 800af18:	4650      	mov	r0, sl
 800af1a:	4659      	mov	r1, fp
 800af1c:	f7f5 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800af20:	2800      	cmp	r0, #0
 800af22:	d1a6      	bne.n	800ae72 <_strtod_l+0x562>
 800af24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af2a:	9805      	ldr	r0, [sp, #20]
 800af2c:	462b      	mov	r3, r5
 800af2e:	463a      	mov	r2, r7
 800af30:	f7ff f8c6 	bl	800a0c0 <__s2b>
 800af34:	900a      	str	r0, [sp, #40]	@ 0x28
 800af36:	2800      	cmp	r0, #0
 800af38:	f43f af05 	beq.w	800ad46 <_strtod_l+0x436>
 800af3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af3e:	2a00      	cmp	r2, #0
 800af40:	eba9 0308 	sub.w	r3, r9, r8
 800af44:	bfa8      	it	ge
 800af46:	2300      	movge	r3, #0
 800af48:	9312      	str	r3, [sp, #72]	@ 0x48
 800af4a:	2400      	movs	r4, #0
 800af4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af50:	9316      	str	r3, [sp, #88]	@ 0x58
 800af52:	46a0      	mov	r8, r4
 800af54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af56:	9805      	ldr	r0, [sp, #20]
 800af58:	6859      	ldr	r1, [r3, #4]
 800af5a:	f7ff f809 	bl	8009f70 <_Balloc>
 800af5e:	4681      	mov	r9, r0
 800af60:	2800      	cmp	r0, #0
 800af62:	f43f aef4 	beq.w	800ad4e <_strtod_l+0x43e>
 800af66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af68:	691a      	ldr	r2, [r3, #16]
 800af6a:	3202      	adds	r2, #2
 800af6c:	f103 010c 	add.w	r1, r3, #12
 800af70:	0092      	lsls	r2, r2, #2
 800af72:	300c      	adds	r0, #12
 800af74:	f7fe f87b 	bl	800906e <memcpy>
 800af78:	ec4b ab10 	vmov	d0, sl, fp
 800af7c:	9805      	ldr	r0, [sp, #20]
 800af7e:	aa1c      	add	r2, sp, #112	@ 0x70
 800af80:	a91b      	add	r1, sp, #108	@ 0x6c
 800af82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800af86:	f7ff fbd7 	bl	800a738 <__d2b>
 800af8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800af8c:	2800      	cmp	r0, #0
 800af8e:	f43f aede 	beq.w	800ad4e <_strtod_l+0x43e>
 800af92:	9805      	ldr	r0, [sp, #20]
 800af94:	2101      	movs	r1, #1
 800af96:	f7ff f929 	bl	800a1ec <__i2b>
 800af9a:	4680      	mov	r8, r0
 800af9c:	b948      	cbnz	r0, 800afb2 <_strtod_l+0x6a2>
 800af9e:	f04f 0800 	mov.w	r8, #0
 800afa2:	e6d4      	b.n	800ad4e <_strtod_l+0x43e>
 800afa4:	f04f 32ff 	mov.w	r2, #4294967295
 800afa8:	fa02 f303 	lsl.w	r3, r2, r3
 800afac:	ea03 0a0a 	and.w	sl, r3, sl
 800afb0:	e7b0      	b.n	800af14 <_strtod_l+0x604>
 800afb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800afb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800afb6:	2d00      	cmp	r5, #0
 800afb8:	bfab      	itete	ge
 800afba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800afbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800afbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800afc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800afc2:	bfac      	ite	ge
 800afc4:	18ef      	addge	r7, r5, r3
 800afc6:	1b5e      	sublt	r6, r3, r5
 800afc8:	9b08      	ldr	r3, [sp, #32]
 800afca:	1aed      	subs	r5, r5, r3
 800afcc:	4415      	add	r5, r2
 800afce:	4b66      	ldr	r3, [pc, #408]	@ (800b168 <_strtod_l+0x858>)
 800afd0:	3d01      	subs	r5, #1
 800afd2:	429d      	cmp	r5, r3
 800afd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800afd8:	da50      	bge.n	800b07c <_strtod_l+0x76c>
 800afda:	1b5b      	subs	r3, r3, r5
 800afdc:	2b1f      	cmp	r3, #31
 800afde:	eba2 0203 	sub.w	r2, r2, r3
 800afe2:	f04f 0101 	mov.w	r1, #1
 800afe6:	dc3d      	bgt.n	800b064 <_strtod_l+0x754>
 800afe8:	fa01 f303 	lsl.w	r3, r1, r3
 800afec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afee:	2300      	movs	r3, #0
 800aff0:	9310      	str	r3, [sp, #64]	@ 0x40
 800aff2:	18bd      	adds	r5, r7, r2
 800aff4:	9b08      	ldr	r3, [sp, #32]
 800aff6:	42af      	cmp	r7, r5
 800aff8:	4416      	add	r6, r2
 800affa:	441e      	add	r6, r3
 800affc:	463b      	mov	r3, r7
 800affe:	bfa8      	it	ge
 800b000:	462b      	movge	r3, r5
 800b002:	42b3      	cmp	r3, r6
 800b004:	bfa8      	it	ge
 800b006:	4633      	movge	r3, r6
 800b008:	2b00      	cmp	r3, #0
 800b00a:	bfc2      	ittt	gt
 800b00c:	1aed      	subgt	r5, r5, r3
 800b00e:	1af6      	subgt	r6, r6, r3
 800b010:	1aff      	subgt	r7, r7, r3
 800b012:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b014:	2b00      	cmp	r3, #0
 800b016:	dd16      	ble.n	800b046 <_strtod_l+0x736>
 800b018:	4641      	mov	r1, r8
 800b01a:	9805      	ldr	r0, [sp, #20]
 800b01c:	461a      	mov	r2, r3
 800b01e:	f7ff f9a5 	bl	800a36c <__pow5mult>
 800b022:	4680      	mov	r8, r0
 800b024:	2800      	cmp	r0, #0
 800b026:	d0ba      	beq.n	800af9e <_strtod_l+0x68e>
 800b028:	4601      	mov	r1, r0
 800b02a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b02c:	9805      	ldr	r0, [sp, #20]
 800b02e:	f7ff f8f3 	bl	800a218 <__multiply>
 800b032:	900e      	str	r0, [sp, #56]	@ 0x38
 800b034:	2800      	cmp	r0, #0
 800b036:	f43f ae8a 	beq.w	800ad4e <_strtod_l+0x43e>
 800b03a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b03c:	9805      	ldr	r0, [sp, #20]
 800b03e:	f7fe ffd7 	bl	8009ff0 <_Bfree>
 800b042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b044:	931a      	str	r3, [sp, #104]	@ 0x68
 800b046:	2d00      	cmp	r5, #0
 800b048:	dc1d      	bgt.n	800b086 <_strtod_l+0x776>
 800b04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dd23      	ble.n	800b098 <_strtod_l+0x788>
 800b050:	4649      	mov	r1, r9
 800b052:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b054:	9805      	ldr	r0, [sp, #20]
 800b056:	f7ff f989 	bl	800a36c <__pow5mult>
 800b05a:	4681      	mov	r9, r0
 800b05c:	b9e0      	cbnz	r0, 800b098 <_strtod_l+0x788>
 800b05e:	f04f 0900 	mov.w	r9, #0
 800b062:	e674      	b.n	800ad4e <_strtod_l+0x43e>
 800b064:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b068:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b06c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b070:	35e2      	adds	r5, #226	@ 0xe2
 800b072:	fa01 f305 	lsl.w	r3, r1, r5
 800b076:	9310      	str	r3, [sp, #64]	@ 0x40
 800b078:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b07a:	e7ba      	b.n	800aff2 <_strtod_l+0x6e2>
 800b07c:	2300      	movs	r3, #0
 800b07e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b080:	2301      	movs	r3, #1
 800b082:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b084:	e7b5      	b.n	800aff2 <_strtod_l+0x6e2>
 800b086:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b088:	9805      	ldr	r0, [sp, #20]
 800b08a:	462a      	mov	r2, r5
 800b08c:	f7ff f9c8 	bl	800a420 <__lshift>
 800b090:	901a      	str	r0, [sp, #104]	@ 0x68
 800b092:	2800      	cmp	r0, #0
 800b094:	d1d9      	bne.n	800b04a <_strtod_l+0x73a>
 800b096:	e65a      	b.n	800ad4e <_strtod_l+0x43e>
 800b098:	2e00      	cmp	r6, #0
 800b09a:	dd07      	ble.n	800b0ac <_strtod_l+0x79c>
 800b09c:	4649      	mov	r1, r9
 800b09e:	9805      	ldr	r0, [sp, #20]
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	f7ff f9bd 	bl	800a420 <__lshift>
 800b0a6:	4681      	mov	r9, r0
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	d0d8      	beq.n	800b05e <_strtod_l+0x74e>
 800b0ac:	2f00      	cmp	r7, #0
 800b0ae:	dd08      	ble.n	800b0c2 <_strtod_l+0x7b2>
 800b0b0:	4641      	mov	r1, r8
 800b0b2:	9805      	ldr	r0, [sp, #20]
 800b0b4:	463a      	mov	r2, r7
 800b0b6:	f7ff f9b3 	bl	800a420 <__lshift>
 800b0ba:	4680      	mov	r8, r0
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	f43f ae46 	beq.w	800ad4e <_strtod_l+0x43e>
 800b0c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0c4:	9805      	ldr	r0, [sp, #20]
 800b0c6:	464a      	mov	r2, r9
 800b0c8:	f7ff fa32 	bl	800a530 <__mdiff>
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f ae3d 	beq.w	800ad4e <_strtod_l+0x43e>
 800b0d4:	68c3      	ldr	r3, [r0, #12]
 800b0d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60c3      	str	r3, [r0, #12]
 800b0dc:	4641      	mov	r1, r8
 800b0de:	f7ff fa0b 	bl	800a4f8 <__mcmp>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	da46      	bge.n	800b174 <_strtod_l+0x864>
 800b0e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0e8:	ea53 030a 	orrs.w	r3, r3, sl
 800b0ec:	d16c      	bne.n	800b1c8 <_strtod_l+0x8b8>
 800b0ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d168      	bne.n	800b1c8 <_strtod_l+0x8b8>
 800b0f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0fa:	0d1b      	lsrs	r3, r3, #20
 800b0fc:	051b      	lsls	r3, r3, #20
 800b0fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b102:	d961      	bls.n	800b1c8 <_strtod_l+0x8b8>
 800b104:	6963      	ldr	r3, [r4, #20]
 800b106:	b913      	cbnz	r3, 800b10e <_strtod_l+0x7fe>
 800b108:	6923      	ldr	r3, [r4, #16]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	dd5c      	ble.n	800b1c8 <_strtod_l+0x8b8>
 800b10e:	4621      	mov	r1, r4
 800b110:	2201      	movs	r2, #1
 800b112:	9805      	ldr	r0, [sp, #20]
 800b114:	f7ff f984 	bl	800a420 <__lshift>
 800b118:	4641      	mov	r1, r8
 800b11a:	4604      	mov	r4, r0
 800b11c:	f7ff f9ec 	bl	800a4f8 <__mcmp>
 800b120:	2800      	cmp	r0, #0
 800b122:	dd51      	ble.n	800b1c8 <_strtod_l+0x8b8>
 800b124:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b128:	9a08      	ldr	r2, [sp, #32]
 800b12a:	0d1b      	lsrs	r3, r3, #20
 800b12c:	051b      	lsls	r3, r3, #20
 800b12e:	2a00      	cmp	r2, #0
 800b130:	d06b      	beq.n	800b20a <_strtod_l+0x8fa>
 800b132:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b136:	d868      	bhi.n	800b20a <_strtod_l+0x8fa>
 800b138:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b13c:	f67f ae9d 	bls.w	800ae7a <_strtod_l+0x56a>
 800b140:	4b0a      	ldr	r3, [pc, #40]	@ (800b16c <_strtod_l+0x85c>)
 800b142:	4650      	mov	r0, sl
 800b144:	4659      	mov	r1, fp
 800b146:	2200      	movs	r2, #0
 800b148:	f7f5 fa56 	bl	80005f8 <__aeabi_dmul>
 800b14c:	4b08      	ldr	r3, [pc, #32]	@ (800b170 <_strtod_l+0x860>)
 800b14e:	400b      	ands	r3, r1
 800b150:	4682      	mov	sl, r0
 800b152:	468b      	mov	fp, r1
 800b154:	2b00      	cmp	r3, #0
 800b156:	f47f ae05 	bne.w	800ad64 <_strtod_l+0x454>
 800b15a:	9a05      	ldr	r2, [sp, #20]
 800b15c:	2322      	movs	r3, #34	@ 0x22
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	e600      	b.n	800ad64 <_strtod_l+0x454>
 800b162:	bf00      	nop
 800b164:	0800d190 	.word	0x0800d190
 800b168:	fffffc02 	.word	0xfffffc02
 800b16c:	39500000 	.word	0x39500000
 800b170:	7ff00000 	.word	0x7ff00000
 800b174:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b178:	d165      	bne.n	800b246 <_strtod_l+0x936>
 800b17a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b17c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b180:	b35a      	cbz	r2, 800b1da <_strtod_l+0x8ca>
 800b182:	4a9f      	ldr	r2, [pc, #636]	@ (800b400 <_strtod_l+0xaf0>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d12b      	bne.n	800b1e0 <_strtod_l+0x8d0>
 800b188:	9b08      	ldr	r3, [sp, #32]
 800b18a:	4651      	mov	r1, sl
 800b18c:	b303      	cbz	r3, 800b1d0 <_strtod_l+0x8c0>
 800b18e:	4b9d      	ldr	r3, [pc, #628]	@ (800b404 <_strtod_l+0xaf4>)
 800b190:	465a      	mov	r2, fp
 800b192:	4013      	ands	r3, r2
 800b194:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b198:	f04f 32ff 	mov.w	r2, #4294967295
 800b19c:	d81b      	bhi.n	800b1d6 <_strtod_l+0x8c6>
 800b19e:	0d1b      	lsrs	r3, r3, #20
 800b1a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a8:	4299      	cmp	r1, r3
 800b1aa:	d119      	bne.n	800b1e0 <_strtod_l+0x8d0>
 800b1ac:	4b96      	ldr	r3, [pc, #600]	@ (800b408 <_strtod_l+0xaf8>)
 800b1ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d102      	bne.n	800b1ba <_strtod_l+0x8aa>
 800b1b4:	3101      	adds	r1, #1
 800b1b6:	f43f adca 	beq.w	800ad4e <_strtod_l+0x43e>
 800b1ba:	4b92      	ldr	r3, [pc, #584]	@ (800b404 <_strtod_l+0xaf4>)
 800b1bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1be:	401a      	ands	r2, r3
 800b1c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b1c4:	f04f 0a00 	mov.w	sl, #0
 800b1c8:	9b08      	ldr	r3, [sp, #32]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1b8      	bne.n	800b140 <_strtod_l+0x830>
 800b1ce:	e5c9      	b.n	800ad64 <_strtod_l+0x454>
 800b1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d4:	e7e8      	b.n	800b1a8 <_strtod_l+0x898>
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	e7e6      	b.n	800b1a8 <_strtod_l+0x898>
 800b1da:	ea53 030a 	orrs.w	r3, r3, sl
 800b1de:	d0a1      	beq.n	800b124 <_strtod_l+0x814>
 800b1e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b1e2:	b1db      	cbz	r3, 800b21c <_strtod_l+0x90c>
 800b1e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1e6:	4213      	tst	r3, r2
 800b1e8:	d0ee      	beq.n	800b1c8 <_strtod_l+0x8b8>
 800b1ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ec:	9a08      	ldr	r2, [sp, #32]
 800b1ee:	4650      	mov	r0, sl
 800b1f0:	4659      	mov	r1, fp
 800b1f2:	b1bb      	cbz	r3, 800b224 <_strtod_l+0x914>
 800b1f4:	f7ff fb6e 	bl	800a8d4 <sulp>
 800b1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1fc:	ec53 2b10 	vmov	r2, r3, d0
 800b200:	f7f5 f844 	bl	800028c <__adddf3>
 800b204:	4682      	mov	sl, r0
 800b206:	468b      	mov	fp, r1
 800b208:	e7de      	b.n	800b1c8 <_strtod_l+0x8b8>
 800b20a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b20e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b212:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b216:	f04f 3aff 	mov.w	sl, #4294967295
 800b21a:	e7d5      	b.n	800b1c8 <_strtod_l+0x8b8>
 800b21c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b21e:	ea13 0f0a 	tst.w	r3, sl
 800b222:	e7e1      	b.n	800b1e8 <_strtod_l+0x8d8>
 800b224:	f7ff fb56 	bl	800a8d4 <sulp>
 800b228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b22c:	ec53 2b10 	vmov	r2, r3, d0
 800b230:	f7f5 f82a 	bl	8000288 <__aeabi_dsub>
 800b234:	2200      	movs	r2, #0
 800b236:	2300      	movs	r3, #0
 800b238:	4682      	mov	sl, r0
 800b23a:	468b      	mov	fp, r1
 800b23c:	f7f5 fc44 	bl	8000ac8 <__aeabi_dcmpeq>
 800b240:	2800      	cmp	r0, #0
 800b242:	d0c1      	beq.n	800b1c8 <_strtod_l+0x8b8>
 800b244:	e619      	b.n	800ae7a <_strtod_l+0x56a>
 800b246:	4641      	mov	r1, r8
 800b248:	4620      	mov	r0, r4
 800b24a:	f7ff facd 	bl	800a7e8 <__ratio>
 800b24e:	ec57 6b10 	vmov	r6, r7, d0
 800b252:	2200      	movs	r2, #0
 800b254:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f5 fc48 	bl	8000af0 <__aeabi_dcmple>
 800b260:	2800      	cmp	r0, #0
 800b262:	d06f      	beq.n	800b344 <_strtod_l+0xa34>
 800b264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d17a      	bne.n	800b360 <_strtod_l+0xa50>
 800b26a:	f1ba 0f00 	cmp.w	sl, #0
 800b26e:	d158      	bne.n	800b322 <_strtod_l+0xa12>
 800b270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b276:	2b00      	cmp	r3, #0
 800b278:	d15a      	bne.n	800b330 <_strtod_l+0xa20>
 800b27a:	4b64      	ldr	r3, [pc, #400]	@ (800b40c <_strtod_l+0xafc>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	4630      	mov	r0, r6
 800b280:	4639      	mov	r1, r7
 800b282:	f7f5 fc2b 	bl	8000adc <__aeabi_dcmplt>
 800b286:	2800      	cmp	r0, #0
 800b288:	d159      	bne.n	800b33e <_strtod_l+0xa2e>
 800b28a:	4630      	mov	r0, r6
 800b28c:	4639      	mov	r1, r7
 800b28e:	4b60      	ldr	r3, [pc, #384]	@ (800b410 <_strtod_l+0xb00>)
 800b290:	2200      	movs	r2, #0
 800b292:	f7f5 f9b1 	bl	80005f8 <__aeabi_dmul>
 800b296:	4606      	mov	r6, r0
 800b298:	460f      	mov	r7, r1
 800b29a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b29e:	9606      	str	r6, [sp, #24]
 800b2a0:	9307      	str	r3, [sp, #28]
 800b2a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2a6:	4d57      	ldr	r5, [pc, #348]	@ (800b404 <_strtod_l+0xaf4>)
 800b2a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ae:	401d      	ands	r5, r3
 800b2b0:	4b58      	ldr	r3, [pc, #352]	@ (800b414 <_strtod_l+0xb04>)
 800b2b2:	429d      	cmp	r5, r3
 800b2b4:	f040 80b2 	bne.w	800b41c <_strtod_l+0xb0c>
 800b2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b2be:	ec4b ab10 	vmov	d0, sl, fp
 800b2c2:	f7ff f9c9 	bl	800a658 <__ulp>
 800b2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2ca:	ec51 0b10 	vmov	r0, r1, d0
 800b2ce:	f7f5 f993 	bl	80005f8 <__aeabi_dmul>
 800b2d2:	4652      	mov	r2, sl
 800b2d4:	465b      	mov	r3, fp
 800b2d6:	f7f4 ffd9 	bl	800028c <__adddf3>
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4949      	ldr	r1, [pc, #292]	@ (800b404 <_strtod_l+0xaf4>)
 800b2de:	4a4e      	ldr	r2, [pc, #312]	@ (800b418 <_strtod_l+0xb08>)
 800b2e0:	4019      	ands	r1, r3
 800b2e2:	4291      	cmp	r1, r2
 800b2e4:	4682      	mov	sl, r0
 800b2e6:	d942      	bls.n	800b36e <_strtod_l+0xa5e>
 800b2e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2ea:	4b47      	ldr	r3, [pc, #284]	@ (800b408 <_strtod_l+0xaf8>)
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d103      	bne.n	800b2f8 <_strtod_l+0x9e8>
 800b2f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	f43f ad2b 	beq.w	800ad4e <_strtod_l+0x43e>
 800b2f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b408 <_strtod_l+0xaf8>
 800b2fc:	f04f 3aff 	mov.w	sl, #4294967295
 800b300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b302:	9805      	ldr	r0, [sp, #20]
 800b304:	f7fe fe74 	bl	8009ff0 <_Bfree>
 800b308:	9805      	ldr	r0, [sp, #20]
 800b30a:	4649      	mov	r1, r9
 800b30c:	f7fe fe70 	bl	8009ff0 <_Bfree>
 800b310:	9805      	ldr	r0, [sp, #20]
 800b312:	4641      	mov	r1, r8
 800b314:	f7fe fe6c 	bl	8009ff0 <_Bfree>
 800b318:	9805      	ldr	r0, [sp, #20]
 800b31a:	4621      	mov	r1, r4
 800b31c:	f7fe fe68 	bl	8009ff0 <_Bfree>
 800b320:	e618      	b.n	800af54 <_strtod_l+0x644>
 800b322:	f1ba 0f01 	cmp.w	sl, #1
 800b326:	d103      	bne.n	800b330 <_strtod_l+0xa20>
 800b328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f43f ada5 	beq.w	800ae7a <_strtod_l+0x56a>
 800b330:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b3e0 <_strtod_l+0xad0>
 800b334:	4f35      	ldr	r7, [pc, #212]	@ (800b40c <_strtod_l+0xafc>)
 800b336:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b33a:	2600      	movs	r6, #0
 800b33c:	e7b1      	b.n	800b2a2 <_strtod_l+0x992>
 800b33e:	4f34      	ldr	r7, [pc, #208]	@ (800b410 <_strtod_l+0xb00>)
 800b340:	2600      	movs	r6, #0
 800b342:	e7aa      	b.n	800b29a <_strtod_l+0x98a>
 800b344:	4b32      	ldr	r3, [pc, #200]	@ (800b410 <_strtod_l+0xb00>)
 800b346:	4630      	mov	r0, r6
 800b348:	4639      	mov	r1, r7
 800b34a:	2200      	movs	r2, #0
 800b34c:	f7f5 f954 	bl	80005f8 <__aeabi_dmul>
 800b350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b352:	4606      	mov	r6, r0
 800b354:	460f      	mov	r7, r1
 800b356:	2b00      	cmp	r3, #0
 800b358:	d09f      	beq.n	800b29a <_strtod_l+0x98a>
 800b35a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b35e:	e7a0      	b.n	800b2a2 <_strtod_l+0x992>
 800b360:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b3e8 <_strtod_l+0xad8>
 800b364:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b368:	ec57 6b17 	vmov	r6, r7, d7
 800b36c:	e799      	b.n	800b2a2 <_strtod_l+0x992>
 800b36e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b372:	9b08      	ldr	r3, [sp, #32]
 800b374:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1c1      	bne.n	800b300 <_strtod_l+0x9f0>
 800b37c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b380:	0d1b      	lsrs	r3, r3, #20
 800b382:	051b      	lsls	r3, r3, #20
 800b384:	429d      	cmp	r5, r3
 800b386:	d1bb      	bne.n	800b300 <_strtod_l+0x9f0>
 800b388:	4630      	mov	r0, r6
 800b38a:	4639      	mov	r1, r7
 800b38c:	f7f5 fc94 	bl	8000cb8 <__aeabi_d2lz>
 800b390:	f7f5 f904 	bl	800059c <__aeabi_l2d>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4630      	mov	r0, r6
 800b39a:	4639      	mov	r1, r7
 800b39c:	f7f4 ff74 	bl	8000288 <__aeabi_dsub>
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b3a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ae:	ea46 060a 	orr.w	r6, r6, sl
 800b3b2:	431e      	orrs	r6, r3
 800b3b4:	d06f      	beq.n	800b496 <_strtod_l+0xb86>
 800b3b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b3f0 <_strtod_l+0xae0>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f7f5 fb8e 	bl	8000adc <__aeabi_dcmplt>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	f47f accf 	bne.w	800ad64 <_strtod_l+0x454>
 800b3c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b3f8 <_strtod_l+0xae8>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3d0:	f7f5 fba2 	bl	8000b18 <__aeabi_dcmpgt>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d093      	beq.n	800b300 <_strtod_l+0x9f0>
 800b3d8:	e4c4      	b.n	800ad64 <_strtod_l+0x454>
 800b3da:	bf00      	nop
 800b3dc:	f3af 8000 	nop.w
 800b3e0:	00000000 	.word	0x00000000
 800b3e4:	bff00000 	.word	0xbff00000
 800b3e8:	00000000 	.word	0x00000000
 800b3ec:	3ff00000 	.word	0x3ff00000
 800b3f0:	94a03595 	.word	0x94a03595
 800b3f4:	3fdfffff 	.word	0x3fdfffff
 800b3f8:	35afe535 	.word	0x35afe535
 800b3fc:	3fe00000 	.word	0x3fe00000
 800b400:	000fffff 	.word	0x000fffff
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	7fefffff 	.word	0x7fefffff
 800b40c:	3ff00000 	.word	0x3ff00000
 800b410:	3fe00000 	.word	0x3fe00000
 800b414:	7fe00000 	.word	0x7fe00000
 800b418:	7c9fffff 	.word	0x7c9fffff
 800b41c:	9b08      	ldr	r3, [sp, #32]
 800b41e:	b323      	cbz	r3, 800b46a <_strtod_l+0xb5a>
 800b420:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b424:	d821      	bhi.n	800b46a <_strtod_l+0xb5a>
 800b426:	a328      	add	r3, pc, #160	@ (adr r3, 800b4c8 <_strtod_l+0xbb8>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	4630      	mov	r0, r6
 800b42e:	4639      	mov	r1, r7
 800b430:	f7f5 fb5e 	bl	8000af0 <__aeabi_dcmple>
 800b434:	b1a0      	cbz	r0, 800b460 <_strtod_l+0xb50>
 800b436:	4639      	mov	r1, r7
 800b438:	4630      	mov	r0, r6
 800b43a:	f7f5 fbb5 	bl	8000ba8 <__aeabi_d2uiz>
 800b43e:	2801      	cmp	r0, #1
 800b440:	bf38      	it	cc
 800b442:	2001      	movcc	r0, #1
 800b444:	f7f5 f85e 	bl	8000504 <__aeabi_ui2d>
 800b448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b44a:	4606      	mov	r6, r0
 800b44c:	460f      	mov	r7, r1
 800b44e:	b9fb      	cbnz	r3, 800b490 <_strtod_l+0xb80>
 800b450:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b454:	9014      	str	r0, [sp, #80]	@ 0x50
 800b456:	9315      	str	r3, [sp, #84]	@ 0x54
 800b458:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b45c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b462:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b466:	1b5b      	subs	r3, r3, r5
 800b468:	9311      	str	r3, [sp, #68]	@ 0x44
 800b46a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b46e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b472:	f7ff f8f1 	bl	800a658 <__ulp>
 800b476:	4650      	mov	r0, sl
 800b478:	ec53 2b10 	vmov	r2, r3, d0
 800b47c:	4659      	mov	r1, fp
 800b47e:	f7f5 f8bb 	bl	80005f8 <__aeabi_dmul>
 800b482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b486:	f7f4 ff01 	bl	800028c <__adddf3>
 800b48a:	4682      	mov	sl, r0
 800b48c:	468b      	mov	fp, r1
 800b48e:	e770      	b.n	800b372 <_strtod_l+0xa62>
 800b490:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b494:	e7e0      	b.n	800b458 <_strtod_l+0xb48>
 800b496:	a30e      	add	r3, pc, #56	@ (adr r3, 800b4d0 <_strtod_l+0xbc0>)
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	f7f5 fb1e 	bl	8000adc <__aeabi_dcmplt>
 800b4a0:	e798      	b.n	800b3d4 <_strtod_l+0xac4>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b4a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	f7ff ba6d 	b.w	800a98a <_strtod_l+0x7a>
 800b4b0:	2a65      	cmp	r2, #101	@ 0x65
 800b4b2:	f43f ab66 	beq.w	800ab82 <_strtod_l+0x272>
 800b4b6:	2a45      	cmp	r2, #69	@ 0x45
 800b4b8:	f43f ab63 	beq.w	800ab82 <_strtod_l+0x272>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	f7ff bb9e 	b.w	800abfe <_strtod_l+0x2ee>
 800b4c2:	bf00      	nop
 800b4c4:	f3af 8000 	nop.w
 800b4c8:	ffc00000 	.word	0xffc00000
 800b4cc:	41dfffff 	.word	0x41dfffff
 800b4d0:	94a03595 	.word	0x94a03595
 800b4d4:	3fcfffff 	.word	0x3fcfffff

0800b4d8 <_strtod_r>:
 800b4d8:	4b01      	ldr	r3, [pc, #4]	@ (800b4e0 <_strtod_r+0x8>)
 800b4da:	f7ff ba19 	b.w	800a910 <_strtod_l>
 800b4de:	bf00      	nop
 800b4e0:	200000b0 	.word	0x200000b0

0800b4e4 <_strtol_l.constprop.0>:
 800b4e4:	2b24      	cmp	r3, #36	@ 0x24
 800b4e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ea:	4686      	mov	lr, r0
 800b4ec:	4690      	mov	r8, r2
 800b4ee:	d801      	bhi.n	800b4f4 <_strtol_l.constprop.0+0x10>
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d106      	bne.n	800b502 <_strtol_l.constprop.0+0x1e>
 800b4f4:	f7fd fd8e 	bl	8009014 <__errno>
 800b4f8:	2316      	movs	r3, #22
 800b4fa:	6003      	str	r3, [r0, #0]
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b502:	4834      	ldr	r0, [pc, #208]	@ (800b5d4 <_strtol_l.constprop.0+0xf0>)
 800b504:	460d      	mov	r5, r1
 800b506:	462a      	mov	r2, r5
 800b508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b50c:	5d06      	ldrb	r6, [r0, r4]
 800b50e:	f016 0608 	ands.w	r6, r6, #8
 800b512:	d1f8      	bne.n	800b506 <_strtol_l.constprop.0+0x22>
 800b514:	2c2d      	cmp	r4, #45	@ 0x2d
 800b516:	d12d      	bne.n	800b574 <_strtol_l.constprop.0+0x90>
 800b518:	782c      	ldrb	r4, [r5, #0]
 800b51a:	2601      	movs	r6, #1
 800b51c:	1c95      	adds	r5, r2, #2
 800b51e:	f033 0210 	bics.w	r2, r3, #16
 800b522:	d109      	bne.n	800b538 <_strtol_l.constprop.0+0x54>
 800b524:	2c30      	cmp	r4, #48	@ 0x30
 800b526:	d12a      	bne.n	800b57e <_strtol_l.constprop.0+0x9a>
 800b528:	782a      	ldrb	r2, [r5, #0]
 800b52a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b52e:	2a58      	cmp	r2, #88	@ 0x58
 800b530:	d125      	bne.n	800b57e <_strtol_l.constprop.0+0x9a>
 800b532:	786c      	ldrb	r4, [r5, #1]
 800b534:	2310      	movs	r3, #16
 800b536:	3502      	adds	r5, #2
 800b538:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b53c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b540:	2200      	movs	r2, #0
 800b542:	fbbc f9f3 	udiv	r9, ip, r3
 800b546:	4610      	mov	r0, r2
 800b548:	fb03 ca19 	mls	sl, r3, r9, ip
 800b54c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b550:	2f09      	cmp	r7, #9
 800b552:	d81b      	bhi.n	800b58c <_strtol_l.constprop.0+0xa8>
 800b554:	463c      	mov	r4, r7
 800b556:	42a3      	cmp	r3, r4
 800b558:	dd27      	ble.n	800b5aa <_strtol_l.constprop.0+0xc6>
 800b55a:	1c57      	adds	r7, r2, #1
 800b55c:	d007      	beq.n	800b56e <_strtol_l.constprop.0+0x8a>
 800b55e:	4581      	cmp	r9, r0
 800b560:	d320      	bcc.n	800b5a4 <_strtol_l.constprop.0+0xc0>
 800b562:	d101      	bne.n	800b568 <_strtol_l.constprop.0+0x84>
 800b564:	45a2      	cmp	sl, r4
 800b566:	db1d      	blt.n	800b5a4 <_strtol_l.constprop.0+0xc0>
 800b568:	fb00 4003 	mla	r0, r0, r3, r4
 800b56c:	2201      	movs	r2, #1
 800b56e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b572:	e7eb      	b.n	800b54c <_strtol_l.constprop.0+0x68>
 800b574:	2c2b      	cmp	r4, #43	@ 0x2b
 800b576:	bf04      	itt	eq
 800b578:	782c      	ldrbeq	r4, [r5, #0]
 800b57a:	1c95      	addeq	r5, r2, #2
 800b57c:	e7cf      	b.n	800b51e <_strtol_l.constprop.0+0x3a>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1da      	bne.n	800b538 <_strtol_l.constprop.0+0x54>
 800b582:	2c30      	cmp	r4, #48	@ 0x30
 800b584:	bf0c      	ite	eq
 800b586:	2308      	moveq	r3, #8
 800b588:	230a      	movne	r3, #10
 800b58a:	e7d5      	b.n	800b538 <_strtol_l.constprop.0+0x54>
 800b58c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b590:	2f19      	cmp	r7, #25
 800b592:	d801      	bhi.n	800b598 <_strtol_l.constprop.0+0xb4>
 800b594:	3c37      	subs	r4, #55	@ 0x37
 800b596:	e7de      	b.n	800b556 <_strtol_l.constprop.0+0x72>
 800b598:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b59c:	2f19      	cmp	r7, #25
 800b59e:	d804      	bhi.n	800b5aa <_strtol_l.constprop.0+0xc6>
 800b5a0:	3c57      	subs	r4, #87	@ 0x57
 800b5a2:	e7d8      	b.n	800b556 <_strtol_l.constprop.0+0x72>
 800b5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a8:	e7e1      	b.n	800b56e <_strtol_l.constprop.0+0x8a>
 800b5aa:	1c53      	adds	r3, r2, #1
 800b5ac:	d108      	bne.n	800b5c0 <_strtol_l.constprop.0+0xdc>
 800b5ae:	2322      	movs	r3, #34	@ 0x22
 800b5b0:	f8ce 3000 	str.w	r3, [lr]
 800b5b4:	4660      	mov	r0, ip
 800b5b6:	f1b8 0f00 	cmp.w	r8, #0
 800b5ba:	d0a0      	beq.n	800b4fe <_strtol_l.constprop.0+0x1a>
 800b5bc:	1e69      	subs	r1, r5, #1
 800b5be:	e006      	b.n	800b5ce <_strtol_l.constprop.0+0xea>
 800b5c0:	b106      	cbz	r6, 800b5c4 <_strtol_l.constprop.0+0xe0>
 800b5c2:	4240      	negs	r0, r0
 800b5c4:	f1b8 0f00 	cmp.w	r8, #0
 800b5c8:	d099      	beq.n	800b4fe <_strtol_l.constprop.0+0x1a>
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	d1f6      	bne.n	800b5bc <_strtol_l.constprop.0+0xd8>
 800b5ce:	f8c8 1000 	str.w	r1, [r8]
 800b5d2:	e794      	b.n	800b4fe <_strtol_l.constprop.0+0x1a>
 800b5d4:	0800d1b9 	.word	0x0800d1b9

0800b5d8 <_strtol_r>:
 800b5d8:	f7ff bf84 	b.w	800b4e4 <_strtol_l.constprop.0>

0800b5dc <__ssputs_r>:
 800b5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e0:	688e      	ldr	r6, [r1, #8]
 800b5e2:	461f      	mov	r7, r3
 800b5e4:	42be      	cmp	r6, r7
 800b5e6:	680b      	ldr	r3, [r1, #0]
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	4690      	mov	r8, r2
 800b5ee:	d82d      	bhi.n	800b64c <__ssputs_r+0x70>
 800b5f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b5f8:	d026      	beq.n	800b648 <__ssputs_r+0x6c>
 800b5fa:	6965      	ldr	r5, [r4, #20]
 800b5fc:	6909      	ldr	r1, [r1, #16]
 800b5fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b602:	eba3 0901 	sub.w	r9, r3, r1
 800b606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b60a:	1c7b      	adds	r3, r7, #1
 800b60c:	444b      	add	r3, r9
 800b60e:	106d      	asrs	r5, r5, #1
 800b610:	429d      	cmp	r5, r3
 800b612:	bf38      	it	cc
 800b614:	461d      	movcc	r5, r3
 800b616:	0553      	lsls	r3, r2, #21
 800b618:	d527      	bpl.n	800b66a <__ssputs_r+0x8e>
 800b61a:	4629      	mov	r1, r5
 800b61c:	f7fe fc1c 	bl	8009e58 <_malloc_r>
 800b620:	4606      	mov	r6, r0
 800b622:	b360      	cbz	r0, 800b67e <__ssputs_r+0xa2>
 800b624:	6921      	ldr	r1, [r4, #16]
 800b626:	464a      	mov	r2, r9
 800b628:	f7fd fd21 	bl	800906e <memcpy>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b636:	81a3      	strh	r3, [r4, #12]
 800b638:	6126      	str	r6, [r4, #16]
 800b63a:	6165      	str	r5, [r4, #20]
 800b63c:	444e      	add	r6, r9
 800b63e:	eba5 0509 	sub.w	r5, r5, r9
 800b642:	6026      	str	r6, [r4, #0]
 800b644:	60a5      	str	r5, [r4, #8]
 800b646:	463e      	mov	r6, r7
 800b648:	42be      	cmp	r6, r7
 800b64a:	d900      	bls.n	800b64e <__ssputs_r+0x72>
 800b64c:	463e      	mov	r6, r7
 800b64e:	6820      	ldr	r0, [r4, #0]
 800b650:	4632      	mov	r2, r6
 800b652:	4641      	mov	r1, r8
 800b654:	f000 fb7c 	bl	800bd50 <memmove>
 800b658:	68a3      	ldr	r3, [r4, #8]
 800b65a:	1b9b      	subs	r3, r3, r6
 800b65c:	60a3      	str	r3, [r4, #8]
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	4433      	add	r3, r6
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	2000      	movs	r0, #0
 800b666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66a:	462a      	mov	r2, r5
 800b66c:	f000 ff29 	bl	800c4c2 <_realloc_r>
 800b670:	4606      	mov	r6, r0
 800b672:	2800      	cmp	r0, #0
 800b674:	d1e0      	bne.n	800b638 <__ssputs_r+0x5c>
 800b676:	6921      	ldr	r1, [r4, #16]
 800b678:	4650      	mov	r0, sl
 800b67a:	f7fe fb79 	bl	8009d70 <_free_r>
 800b67e:	230c      	movs	r3, #12
 800b680:	f8ca 3000 	str.w	r3, [sl]
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b68a:	81a3      	strh	r3, [r4, #12]
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295
 800b690:	e7e9      	b.n	800b666 <__ssputs_r+0x8a>
	...

0800b694 <_svfiprintf_r>:
 800b694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b698:	4698      	mov	r8, r3
 800b69a:	898b      	ldrh	r3, [r1, #12]
 800b69c:	061b      	lsls	r3, r3, #24
 800b69e:	b09d      	sub	sp, #116	@ 0x74
 800b6a0:	4607      	mov	r7, r0
 800b6a2:	460d      	mov	r5, r1
 800b6a4:	4614      	mov	r4, r2
 800b6a6:	d510      	bpl.n	800b6ca <_svfiprintf_r+0x36>
 800b6a8:	690b      	ldr	r3, [r1, #16]
 800b6aa:	b973      	cbnz	r3, 800b6ca <_svfiprintf_r+0x36>
 800b6ac:	2140      	movs	r1, #64	@ 0x40
 800b6ae:	f7fe fbd3 	bl	8009e58 <_malloc_r>
 800b6b2:	6028      	str	r0, [r5, #0]
 800b6b4:	6128      	str	r0, [r5, #16]
 800b6b6:	b930      	cbnz	r0, 800b6c6 <_svfiprintf_r+0x32>
 800b6b8:	230c      	movs	r3, #12
 800b6ba:	603b      	str	r3, [r7, #0]
 800b6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c0:	b01d      	add	sp, #116	@ 0x74
 800b6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c6:	2340      	movs	r3, #64	@ 0x40
 800b6c8:	616b      	str	r3, [r5, #20]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ce:	2320      	movs	r3, #32
 800b6d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6d8:	2330      	movs	r3, #48	@ 0x30
 800b6da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b878 <_svfiprintf_r+0x1e4>
 800b6de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6e2:	f04f 0901 	mov.w	r9, #1
 800b6e6:	4623      	mov	r3, r4
 800b6e8:	469a      	mov	sl, r3
 800b6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ee:	b10a      	cbz	r2, 800b6f4 <_svfiprintf_r+0x60>
 800b6f0:	2a25      	cmp	r2, #37	@ 0x25
 800b6f2:	d1f9      	bne.n	800b6e8 <_svfiprintf_r+0x54>
 800b6f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b6f8:	d00b      	beq.n	800b712 <_svfiprintf_r+0x7e>
 800b6fa:	465b      	mov	r3, fp
 800b6fc:	4622      	mov	r2, r4
 800b6fe:	4629      	mov	r1, r5
 800b700:	4638      	mov	r0, r7
 800b702:	f7ff ff6b 	bl	800b5dc <__ssputs_r>
 800b706:	3001      	adds	r0, #1
 800b708:	f000 80a7 	beq.w	800b85a <_svfiprintf_r+0x1c6>
 800b70c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b70e:	445a      	add	r2, fp
 800b710:	9209      	str	r2, [sp, #36]	@ 0x24
 800b712:	f89a 3000 	ldrb.w	r3, [sl]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 809f 	beq.w	800b85a <_svfiprintf_r+0x1c6>
 800b71c:	2300      	movs	r3, #0
 800b71e:	f04f 32ff 	mov.w	r2, #4294967295
 800b722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b726:	f10a 0a01 	add.w	sl, sl, #1
 800b72a:	9304      	str	r3, [sp, #16]
 800b72c:	9307      	str	r3, [sp, #28]
 800b72e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b732:	931a      	str	r3, [sp, #104]	@ 0x68
 800b734:	4654      	mov	r4, sl
 800b736:	2205      	movs	r2, #5
 800b738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b73c:	484e      	ldr	r0, [pc, #312]	@ (800b878 <_svfiprintf_r+0x1e4>)
 800b73e:	f7f4 fd47 	bl	80001d0 <memchr>
 800b742:	9a04      	ldr	r2, [sp, #16]
 800b744:	b9d8      	cbnz	r0, 800b77e <_svfiprintf_r+0xea>
 800b746:	06d0      	lsls	r0, r2, #27
 800b748:	bf44      	itt	mi
 800b74a:	2320      	movmi	r3, #32
 800b74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b750:	0711      	lsls	r1, r2, #28
 800b752:	bf44      	itt	mi
 800b754:	232b      	movmi	r3, #43	@ 0x2b
 800b756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b75a:	f89a 3000 	ldrb.w	r3, [sl]
 800b75e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b760:	d015      	beq.n	800b78e <_svfiprintf_r+0xfa>
 800b762:	9a07      	ldr	r2, [sp, #28]
 800b764:	4654      	mov	r4, sl
 800b766:	2000      	movs	r0, #0
 800b768:	f04f 0c0a 	mov.w	ip, #10
 800b76c:	4621      	mov	r1, r4
 800b76e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b772:	3b30      	subs	r3, #48	@ 0x30
 800b774:	2b09      	cmp	r3, #9
 800b776:	d94b      	bls.n	800b810 <_svfiprintf_r+0x17c>
 800b778:	b1b0      	cbz	r0, 800b7a8 <_svfiprintf_r+0x114>
 800b77a:	9207      	str	r2, [sp, #28]
 800b77c:	e014      	b.n	800b7a8 <_svfiprintf_r+0x114>
 800b77e:	eba0 0308 	sub.w	r3, r0, r8
 800b782:	fa09 f303 	lsl.w	r3, r9, r3
 800b786:	4313      	orrs	r3, r2
 800b788:	9304      	str	r3, [sp, #16]
 800b78a:	46a2      	mov	sl, r4
 800b78c:	e7d2      	b.n	800b734 <_svfiprintf_r+0xa0>
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	1d19      	adds	r1, r3, #4
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	9103      	str	r1, [sp, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	bfbb      	ittet	lt
 800b79a:	425b      	neglt	r3, r3
 800b79c:	f042 0202 	orrlt.w	r2, r2, #2
 800b7a0:	9307      	strge	r3, [sp, #28]
 800b7a2:	9307      	strlt	r3, [sp, #28]
 800b7a4:	bfb8      	it	lt
 800b7a6:	9204      	strlt	r2, [sp, #16]
 800b7a8:	7823      	ldrb	r3, [r4, #0]
 800b7aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7ac:	d10a      	bne.n	800b7c4 <_svfiprintf_r+0x130>
 800b7ae:	7863      	ldrb	r3, [r4, #1]
 800b7b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7b2:	d132      	bne.n	800b81a <_svfiprintf_r+0x186>
 800b7b4:	9b03      	ldr	r3, [sp, #12]
 800b7b6:	1d1a      	adds	r2, r3, #4
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	9203      	str	r2, [sp, #12]
 800b7bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7c0:	3402      	adds	r4, #2
 800b7c2:	9305      	str	r3, [sp, #20]
 800b7c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b888 <_svfiprintf_r+0x1f4>
 800b7c8:	7821      	ldrb	r1, [r4, #0]
 800b7ca:	2203      	movs	r2, #3
 800b7cc:	4650      	mov	r0, sl
 800b7ce:	f7f4 fcff 	bl	80001d0 <memchr>
 800b7d2:	b138      	cbz	r0, 800b7e4 <_svfiprintf_r+0x150>
 800b7d4:	9b04      	ldr	r3, [sp, #16]
 800b7d6:	eba0 000a 	sub.w	r0, r0, sl
 800b7da:	2240      	movs	r2, #64	@ 0x40
 800b7dc:	4082      	lsls	r2, r0
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	3401      	adds	r4, #1
 800b7e2:	9304      	str	r3, [sp, #16]
 800b7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e8:	4824      	ldr	r0, [pc, #144]	@ (800b87c <_svfiprintf_r+0x1e8>)
 800b7ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7ee:	2206      	movs	r2, #6
 800b7f0:	f7f4 fcee 	bl	80001d0 <memchr>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d036      	beq.n	800b866 <_svfiprintf_r+0x1d2>
 800b7f8:	4b21      	ldr	r3, [pc, #132]	@ (800b880 <_svfiprintf_r+0x1ec>)
 800b7fa:	bb1b      	cbnz	r3, 800b844 <_svfiprintf_r+0x1b0>
 800b7fc:	9b03      	ldr	r3, [sp, #12]
 800b7fe:	3307      	adds	r3, #7
 800b800:	f023 0307 	bic.w	r3, r3, #7
 800b804:	3308      	adds	r3, #8
 800b806:	9303      	str	r3, [sp, #12]
 800b808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b80a:	4433      	add	r3, r6
 800b80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b80e:	e76a      	b.n	800b6e6 <_svfiprintf_r+0x52>
 800b810:	fb0c 3202 	mla	r2, ip, r2, r3
 800b814:	460c      	mov	r4, r1
 800b816:	2001      	movs	r0, #1
 800b818:	e7a8      	b.n	800b76c <_svfiprintf_r+0xd8>
 800b81a:	2300      	movs	r3, #0
 800b81c:	3401      	adds	r4, #1
 800b81e:	9305      	str	r3, [sp, #20]
 800b820:	4619      	mov	r1, r3
 800b822:	f04f 0c0a 	mov.w	ip, #10
 800b826:	4620      	mov	r0, r4
 800b828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b82c:	3a30      	subs	r2, #48	@ 0x30
 800b82e:	2a09      	cmp	r2, #9
 800b830:	d903      	bls.n	800b83a <_svfiprintf_r+0x1a6>
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0c6      	beq.n	800b7c4 <_svfiprintf_r+0x130>
 800b836:	9105      	str	r1, [sp, #20]
 800b838:	e7c4      	b.n	800b7c4 <_svfiprintf_r+0x130>
 800b83a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b83e:	4604      	mov	r4, r0
 800b840:	2301      	movs	r3, #1
 800b842:	e7f0      	b.n	800b826 <_svfiprintf_r+0x192>
 800b844:	ab03      	add	r3, sp, #12
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	462a      	mov	r2, r5
 800b84a:	4b0e      	ldr	r3, [pc, #56]	@ (800b884 <_svfiprintf_r+0x1f0>)
 800b84c:	a904      	add	r1, sp, #16
 800b84e:	4638      	mov	r0, r7
 800b850:	f7fc fb00 	bl	8007e54 <_printf_float>
 800b854:	1c42      	adds	r2, r0, #1
 800b856:	4606      	mov	r6, r0
 800b858:	d1d6      	bne.n	800b808 <_svfiprintf_r+0x174>
 800b85a:	89ab      	ldrh	r3, [r5, #12]
 800b85c:	065b      	lsls	r3, r3, #25
 800b85e:	f53f af2d 	bmi.w	800b6bc <_svfiprintf_r+0x28>
 800b862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b864:	e72c      	b.n	800b6c0 <_svfiprintf_r+0x2c>
 800b866:	ab03      	add	r3, sp, #12
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	462a      	mov	r2, r5
 800b86c:	4b05      	ldr	r3, [pc, #20]	@ (800b884 <_svfiprintf_r+0x1f0>)
 800b86e:	a904      	add	r1, sp, #16
 800b870:	4638      	mov	r0, r7
 800b872:	f7fc fd87 	bl	8008384 <_printf_i>
 800b876:	e7ed      	b.n	800b854 <_svfiprintf_r+0x1c0>
 800b878:	0800d2b9 	.word	0x0800d2b9
 800b87c:	0800d2c3 	.word	0x0800d2c3
 800b880:	08007e55 	.word	0x08007e55
 800b884:	0800b5dd 	.word	0x0800b5dd
 800b888:	0800d2bf 	.word	0x0800d2bf

0800b88c <__sfputc_r>:
 800b88c:	6893      	ldr	r3, [r2, #8]
 800b88e:	3b01      	subs	r3, #1
 800b890:	2b00      	cmp	r3, #0
 800b892:	b410      	push	{r4}
 800b894:	6093      	str	r3, [r2, #8]
 800b896:	da08      	bge.n	800b8aa <__sfputc_r+0x1e>
 800b898:	6994      	ldr	r4, [r2, #24]
 800b89a:	42a3      	cmp	r3, r4
 800b89c:	db01      	blt.n	800b8a2 <__sfputc_r+0x16>
 800b89e:	290a      	cmp	r1, #10
 800b8a0:	d103      	bne.n	800b8aa <__sfputc_r+0x1e>
 800b8a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8a6:	f7fd ba36 	b.w	8008d16 <__swbuf_r>
 800b8aa:	6813      	ldr	r3, [r2, #0]
 800b8ac:	1c58      	adds	r0, r3, #1
 800b8ae:	6010      	str	r0, [r2, #0]
 800b8b0:	7019      	strb	r1, [r3, #0]
 800b8b2:	4608      	mov	r0, r1
 800b8b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <__sfputs_r>:
 800b8ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8bc:	4606      	mov	r6, r0
 800b8be:	460f      	mov	r7, r1
 800b8c0:	4614      	mov	r4, r2
 800b8c2:	18d5      	adds	r5, r2, r3
 800b8c4:	42ac      	cmp	r4, r5
 800b8c6:	d101      	bne.n	800b8cc <__sfputs_r+0x12>
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	e007      	b.n	800b8dc <__sfputs_r+0x22>
 800b8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d0:	463a      	mov	r2, r7
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f7ff ffda 	bl	800b88c <__sfputc_r>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d1f3      	bne.n	800b8c4 <__sfputs_r+0xa>
 800b8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8e0 <_vfiprintf_r>:
 800b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	460d      	mov	r5, r1
 800b8e6:	b09d      	sub	sp, #116	@ 0x74
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	4698      	mov	r8, r3
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	b118      	cbz	r0, 800b8f8 <_vfiprintf_r+0x18>
 800b8f0:	6a03      	ldr	r3, [r0, #32]
 800b8f2:	b90b      	cbnz	r3, 800b8f8 <_vfiprintf_r+0x18>
 800b8f4:	f7fd f906 	bl	8008b04 <__sinit>
 800b8f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8fa:	07d9      	lsls	r1, r3, #31
 800b8fc:	d405      	bmi.n	800b90a <_vfiprintf_r+0x2a>
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	059a      	lsls	r2, r3, #22
 800b902:	d402      	bmi.n	800b90a <_vfiprintf_r+0x2a>
 800b904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b906:	f7fd fbb0 	bl	800906a <__retarget_lock_acquire_recursive>
 800b90a:	89ab      	ldrh	r3, [r5, #12]
 800b90c:	071b      	lsls	r3, r3, #28
 800b90e:	d501      	bpl.n	800b914 <_vfiprintf_r+0x34>
 800b910:	692b      	ldr	r3, [r5, #16]
 800b912:	b99b      	cbnz	r3, 800b93c <_vfiprintf_r+0x5c>
 800b914:	4629      	mov	r1, r5
 800b916:	4630      	mov	r0, r6
 800b918:	f7fd fa3c 	bl	8008d94 <__swsetup_r>
 800b91c:	b170      	cbz	r0, 800b93c <_vfiprintf_r+0x5c>
 800b91e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b920:	07dc      	lsls	r4, r3, #31
 800b922:	d504      	bpl.n	800b92e <_vfiprintf_r+0x4e>
 800b924:	f04f 30ff 	mov.w	r0, #4294967295
 800b928:	b01d      	add	sp, #116	@ 0x74
 800b92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	0598      	lsls	r0, r3, #22
 800b932:	d4f7      	bmi.n	800b924 <_vfiprintf_r+0x44>
 800b934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b936:	f7fd fb99 	bl	800906c <__retarget_lock_release_recursive>
 800b93a:	e7f3      	b.n	800b924 <_vfiprintf_r+0x44>
 800b93c:	2300      	movs	r3, #0
 800b93e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b940:	2320      	movs	r3, #32
 800b942:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b946:	f8cd 800c 	str.w	r8, [sp, #12]
 800b94a:	2330      	movs	r3, #48	@ 0x30
 800b94c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bafc <_vfiprintf_r+0x21c>
 800b950:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b954:	f04f 0901 	mov.w	r9, #1
 800b958:	4623      	mov	r3, r4
 800b95a:	469a      	mov	sl, r3
 800b95c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b960:	b10a      	cbz	r2, 800b966 <_vfiprintf_r+0x86>
 800b962:	2a25      	cmp	r2, #37	@ 0x25
 800b964:	d1f9      	bne.n	800b95a <_vfiprintf_r+0x7a>
 800b966:	ebba 0b04 	subs.w	fp, sl, r4
 800b96a:	d00b      	beq.n	800b984 <_vfiprintf_r+0xa4>
 800b96c:	465b      	mov	r3, fp
 800b96e:	4622      	mov	r2, r4
 800b970:	4629      	mov	r1, r5
 800b972:	4630      	mov	r0, r6
 800b974:	f7ff ffa1 	bl	800b8ba <__sfputs_r>
 800b978:	3001      	adds	r0, #1
 800b97a:	f000 80a7 	beq.w	800bacc <_vfiprintf_r+0x1ec>
 800b97e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b980:	445a      	add	r2, fp
 800b982:	9209      	str	r2, [sp, #36]	@ 0x24
 800b984:	f89a 3000 	ldrb.w	r3, [sl]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	f000 809f 	beq.w	800bacc <_vfiprintf_r+0x1ec>
 800b98e:	2300      	movs	r3, #0
 800b990:	f04f 32ff 	mov.w	r2, #4294967295
 800b994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b998:	f10a 0a01 	add.w	sl, sl, #1
 800b99c:	9304      	str	r3, [sp, #16]
 800b99e:	9307      	str	r3, [sp, #28]
 800b9a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9a6:	4654      	mov	r4, sl
 800b9a8:	2205      	movs	r2, #5
 800b9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ae:	4853      	ldr	r0, [pc, #332]	@ (800bafc <_vfiprintf_r+0x21c>)
 800b9b0:	f7f4 fc0e 	bl	80001d0 <memchr>
 800b9b4:	9a04      	ldr	r2, [sp, #16]
 800b9b6:	b9d8      	cbnz	r0, 800b9f0 <_vfiprintf_r+0x110>
 800b9b8:	06d1      	lsls	r1, r2, #27
 800b9ba:	bf44      	itt	mi
 800b9bc:	2320      	movmi	r3, #32
 800b9be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9c2:	0713      	lsls	r3, r2, #28
 800b9c4:	bf44      	itt	mi
 800b9c6:	232b      	movmi	r3, #43	@ 0x2b
 800b9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9d2:	d015      	beq.n	800ba00 <_vfiprintf_r+0x120>
 800b9d4:	9a07      	ldr	r2, [sp, #28]
 800b9d6:	4654      	mov	r4, sl
 800b9d8:	2000      	movs	r0, #0
 800b9da:	f04f 0c0a 	mov.w	ip, #10
 800b9de:	4621      	mov	r1, r4
 800b9e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9e4:	3b30      	subs	r3, #48	@ 0x30
 800b9e6:	2b09      	cmp	r3, #9
 800b9e8:	d94b      	bls.n	800ba82 <_vfiprintf_r+0x1a2>
 800b9ea:	b1b0      	cbz	r0, 800ba1a <_vfiprintf_r+0x13a>
 800b9ec:	9207      	str	r2, [sp, #28]
 800b9ee:	e014      	b.n	800ba1a <_vfiprintf_r+0x13a>
 800b9f0:	eba0 0308 	sub.w	r3, r0, r8
 800b9f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	9304      	str	r3, [sp, #16]
 800b9fc:	46a2      	mov	sl, r4
 800b9fe:	e7d2      	b.n	800b9a6 <_vfiprintf_r+0xc6>
 800ba00:	9b03      	ldr	r3, [sp, #12]
 800ba02:	1d19      	adds	r1, r3, #4
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	9103      	str	r1, [sp, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	bfbb      	ittet	lt
 800ba0c:	425b      	neglt	r3, r3
 800ba0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba12:	9307      	strge	r3, [sp, #28]
 800ba14:	9307      	strlt	r3, [sp, #28]
 800ba16:	bfb8      	it	lt
 800ba18:	9204      	strlt	r2, [sp, #16]
 800ba1a:	7823      	ldrb	r3, [r4, #0]
 800ba1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba1e:	d10a      	bne.n	800ba36 <_vfiprintf_r+0x156>
 800ba20:	7863      	ldrb	r3, [r4, #1]
 800ba22:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba24:	d132      	bne.n	800ba8c <_vfiprintf_r+0x1ac>
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	1d1a      	adds	r2, r3, #4
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	9203      	str	r2, [sp, #12]
 800ba2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba32:	3402      	adds	r4, #2
 800ba34:	9305      	str	r3, [sp, #20]
 800ba36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb0c <_vfiprintf_r+0x22c>
 800ba3a:	7821      	ldrb	r1, [r4, #0]
 800ba3c:	2203      	movs	r2, #3
 800ba3e:	4650      	mov	r0, sl
 800ba40:	f7f4 fbc6 	bl	80001d0 <memchr>
 800ba44:	b138      	cbz	r0, 800ba56 <_vfiprintf_r+0x176>
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	eba0 000a 	sub.w	r0, r0, sl
 800ba4c:	2240      	movs	r2, #64	@ 0x40
 800ba4e:	4082      	lsls	r2, r0
 800ba50:	4313      	orrs	r3, r2
 800ba52:	3401      	adds	r4, #1
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba5a:	4829      	ldr	r0, [pc, #164]	@ (800bb00 <_vfiprintf_r+0x220>)
 800ba5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba60:	2206      	movs	r2, #6
 800ba62:	f7f4 fbb5 	bl	80001d0 <memchr>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d03f      	beq.n	800baea <_vfiprintf_r+0x20a>
 800ba6a:	4b26      	ldr	r3, [pc, #152]	@ (800bb04 <_vfiprintf_r+0x224>)
 800ba6c:	bb1b      	cbnz	r3, 800bab6 <_vfiprintf_r+0x1d6>
 800ba6e:	9b03      	ldr	r3, [sp, #12]
 800ba70:	3307      	adds	r3, #7
 800ba72:	f023 0307 	bic.w	r3, r3, #7
 800ba76:	3308      	adds	r3, #8
 800ba78:	9303      	str	r3, [sp, #12]
 800ba7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7c:	443b      	add	r3, r7
 800ba7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba80:	e76a      	b.n	800b958 <_vfiprintf_r+0x78>
 800ba82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba86:	460c      	mov	r4, r1
 800ba88:	2001      	movs	r0, #1
 800ba8a:	e7a8      	b.n	800b9de <_vfiprintf_r+0xfe>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	3401      	adds	r4, #1
 800ba90:	9305      	str	r3, [sp, #20]
 800ba92:	4619      	mov	r1, r3
 800ba94:	f04f 0c0a 	mov.w	ip, #10
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba9e:	3a30      	subs	r2, #48	@ 0x30
 800baa0:	2a09      	cmp	r2, #9
 800baa2:	d903      	bls.n	800baac <_vfiprintf_r+0x1cc>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d0c6      	beq.n	800ba36 <_vfiprintf_r+0x156>
 800baa8:	9105      	str	r1, [sp, #20]
 800baaa:	e7c4      	b.n	800ba36 <_vfiprintf_r+0x156>
 800baac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bab0:	4604      	mov	r4, r0
 800bab2:	2301      	movs	r3, #1
 800bab4:	e7f0      	b.n	800ba98 <_vfiprintf_r+0x1b8>
 800bab6:	ab03      	add	r3, sp, #12
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	462a      	mov	r2, r5
 800babc:	4b12      	ldr	r3, [pc, #72]	@ (800bb08 <_vfiprintf_r+0x228>)
 800babe:	a904      	add	r1, sp, #16
 800bac0:	4630      	mov	r0, r6
 800bac2:	f7fc f9c7 	bl	8007e54 <_printf_float>
 800bac6:	4607      	mov	r7, r0
 800bac8:	1c78      	adds	r0, r7, #1
 800baca:	d1d6      	bne.n	800ba7a <_vfiprintf_r+0x19a>
 800bacc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bace:	07d9      	lsls	r1, r3, #31
 800bad0:	d405      	bmi.n	800bade <_vfiprintf_r+0x1fe>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	059a      	lsls	r2, r3, #22
 800bad6:	d402      	bmi.n	800bade <_vfiprintf_r+0x1fe>
 800bad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bada:	f7fd fac7 	bl	800906c <__retarget_lock_release_recursive>
 800bade:	89ab      	ldrh	r3, [r5, #12]
 800bae0:	065b      	lsls	r3, r3, #25
 800bae2:	f53f af1f 	bmi.w	800b924 <_vfiprintf_r+0x44>
 800bae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bae8:	e71e      	b.n	800b928 <_vfiprintf_r+0x48>
 800baea:	ab03      	add	r3, sp, #12
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	462a      	mov	r2, r5
 800baf0:	4b05      	ldr	r3, [pc, #20]	@ (800bb08 <_vfiprintf_r+0x228>)
 800baf2:	a904      	add	r1, sp, #16
 800baf4:	4630      	mov	r0, r6
 800baf6:	f7fc fc45 	bl	8008384 <_printf_i>
 800bafa:	e7e4      	b.n	800bac6 <_vfiprintf_r+0x1e6>
 800bafc:	0800d2b9 	.word	0x0800d2b9
 800bb00:	0800d2c3 	.word	0x0800d2c3
 800bb04:	08007e55 	.word	0x08007e55
 800bb08:	0800b8bb 	.word	0x0800b8bb
 800bb0c:	0800d2bf 	.word	0x0800d2bf

0800bb10 <__sflush_r>:
 800bb10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb18:	0716      	lsls	r6, r2, #28
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	d454      	bmi.n	800bbca <__sflush_r+0xba>
 800bb20:	684b      	ldr	r3, [r1, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dc02      	bgt.n	800bb2c <__sflush_r+0x1c>
 800bb26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	dd48      	ble.n	800bbbe <__sflush_r+0xae>
 800bb2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	d045      	beq.n	800bbbe <__sflush_r+0xae>
 800bb32:	2300      	movs	r3, #0
 800bb34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb38:	682f      	ldr	r7, [r5, #0]
 800bb3a:	6a21      	ldr	r1, [r4, #32]
 800bb3c:	602b      	str	r3, [r5, #0]
 800bb3e:	d030      	beq.n	800bba2 <__sflush_r+0x92>
 800bb40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	0759      	lsls	r1, r3, #29
 800bb46:	d505      	bpl.n	800bb54 <__sflush_r+0x44>
 800bb48:	6863      	ldr	r3, [r4, #4]
 800bb4a:	1ad2      	subs	r2, r2, r3
 800bb4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb4e:	b10b      	cbz	r3, 800bb54 <__sflush_r+0x44>
 800bb50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb52:	1ad2      	subs	r2, r2, r3
 800bb54:	2300      	movs	r3, #0
 800bb56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb58:	6a21      	ldr	r1, [r4, #32]
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	47b0      	blx	r6
 800bb5e:	1c43      	adds	r3, r0, #1
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	d106      	bne.n	800bb72 <__sflush_r+0x62>
 800bb64:	6829      	ldr	r1, [r5, #0]
 800bb66:	291d      	cmp	r1, #29
 800bb68:	d82b      	bhi.n	800bbc2 <__sflush_r+0xb2>
 800bb6a:	4a2a      	ldr	r2, [pc, #168]	@ (800bc14 <__sflush_r+0x104>)
 800bb6c:	410a      	asrs	r2, r1
 800bb6e:	07d6      	lsls	r6, r2, #31
 800bb70:	d427      	bmi.n	800bbc2 <__sflush_r+0xb2>
 800bb72:	2200      	movs	r2, #0
 800bb74:	6062      	str	r2, [r4, #4]
 800bb76:	04d9      	lsls	r1, r3, #19
 800bb78:	6922      	ldr	r2, [r4, #16]
 800bb7a:	6022      	str	r2, [r4, #0]
 800bb7c:	d504      	bpl.n	800bb88 <__sflush_r+0x78>
 800bb7e:	1c42      	adds	r2, r0, #1
 800bb80:	d101      	bne.n	800bb86 <__sflush_r+0x76>
 800bb82:	682b      	ldr	r3, [r5, #0]
 800bb84:	b903      	cbnz	r3, 800bb88 <__sflush_r+0x78>
 800bb86:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb8a:	602f      	str	r7, [r5, #0]
 800bb8c:	b1b9      	cbz	r1, 800bbbe <__sflush_r+0xae>
 800bb8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb92:	4299      	cmp	r1, r3
 800bb94:	d002      	beq.n	800bb9c <__sflush_r+0x8c>
 800bb96:	4628      	mov	r0, r5
 800bb98:	f7fe f8ea 	bl	8009d70 <_free_r>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bba0:	e00d      	b.n	800bbbe <__sflush_r+0xae>
 800bba2:	2301      	movs	r3, #1
 800bba4:	4628      	mov	r0, r5
 800bba6:	47b0      	blx	r6
 800bba8:	4602      	mov	r2, r0
 800bbaa:	1c50      	adds	r0, r2, #1
 800bbac:	d1c9      	bne.n	800bb42 <__sflush_r+0x32>
 800bbae:	682b      	ldr	r3, [r5, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0c6      	beq.n	800bb42 <__sflush_r+0x32>
 800bbb4:	2b1d      	cmp	r3, #29
 800bbb6:	d001      	beq.n	800bbbc <__sflush_r+0xac>
 800bbb8:	2b16      	cmp	r3, #22
 800bbba:	d11e      	bne.n	800bbfa <__sflush_r+0xea>
 800bbbc:	602f      	str	r7, [r5, #0]
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	e022      	b.n	800bc08 <__sflush_r+0xf8>
 800bbc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbc6:	b21b      	sxth	r3, r3
 800bbc8:	e01b      	b.n	800bc02 <__sflush_r+0xf2>
 800bbca:	690f      	ldr	r7, [r1, #16]
 800bbcc:	2f00      	cmp	r7, #0
 800bbce:	d0f6      	beq.n	800bbbe <__sflush_r+0xae>
 800bbd0:	0793      	lsls	r3, r2, #30
 800bbd2:	680e      	ldr	r6, [r1, #0]
 800bbd4:	bf08      	it	eq
 800bbd6:	694b      	ldreq	r3, [r1, #20]
 800bbd8:	600f      	str	r7, [r1, #0]
 800bbda:	bf18      	it	ne
 800bbdc:	2300      	movne	r3, #0
 800bbde:	eba6 0807 	sub.w	r8, r6, r7
 800bbe2:	608b      	str	r3, [r1, #8]
 800bbe4:	f1b8 0f00 	cmp.w	r8, #0
 800bbe8:	dde9      	ble.n	800bbbe <__sflush_r+0xae>
 800bbea:	6a21      	ldr	r1, [r4, #32]
 800bbec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbee:	4643      	mov	r3, r8
 800bbf0:	463a      	mov	r2, r7
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	47b0      	blx	r6
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	dc08      	bgt.n	800bc0c <__sflush_r+0xfc>
 800bbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc02:	81a3      	strh	r3, [r4, #12]
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc0c:	4407      	add	r7, r0
 800bc0e:	eba8 0800 	sub.w	r8, r8, r0
 800bc12:	e7e7      	b.n	800bbe4 <__sflush_r+0xd4>
 800bc14:	dfbffffe 	.word	0xdfbffffe

0800bc18 <_fflush_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	690b      	ldr	r3, [r1, #16]
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	b913      	cbnz	r3, 800bc28 <_fflush_r+0x10>
 800bc22:	2500      	movs	r5, #0
 800bc24:	4628      	mov	r0, r5
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	b118      	cbz	r0, 800bc32 <_fflush_r+0x1a>
 800bc2a:	6a03      	ldr	r3, [r0, #32]
 800bc2c:	b90b      	cbnz	r3, 800bc32 <_fflush_r+0x1a>
 800bc2e:	f7fc ff69 	bl	8008b04 <__sinit>
 800bc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d0f3      	beq.n	800bc22 <_fflush_r+0xa>
 800bc3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc3c:	07d0      	lsls	r0, r2, #31
 800bc3e:	d404      	bmi.n	800bc4a <_fflush_r+0x32>
 800bc40:	0599      	lsls	r1, r3, #22
 800bc42:	d402      	bmi.n	800bc4a <_fflush_r+0x32>
 800bc44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc46:	f7fd fa10 	bl	800906a <__retarget_lock_acquire_recursive>
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	f7ff ff5f 	bl	800bb10 <__sflush_r>
 800bc52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc54:	07da      	lsls	r2, r3, #31
 800bc56:	4605      	mov	r5, r0
 800bc58:	d4e4      	bmi.n	800bc24 <_fflush_r+0xc>
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	059b      	lsls	r3, r3, #22
 800bc5e:	d4e1      	bmi.n	800bc24 <_fflush_r+0xc>
 800bc60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc62:	f7fd fa03 	bl	800906c <__retarget_lock_release_recursive>
 800bc66:	e7dd      	b.n	800bc24 <_fflush_r+0xc>

0800bc68 <fiprintf>:
 800bc68:	b40e      	push	{r1, r2, r3}
 800bc6a:	b503      	push	{r0, r1, lr}
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	ab03      	add	r3, sp, #12
 800bc70:	4805      	ldr	r0, [pc, #20]	@ (800bc88 <fiprintf+0x20>)
 800bc72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc76:	6800      	ldr	r0, [r0, #0]
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	f7ff fe31 	bl	800b8e0 <_vfiprintf_r>
 800bc7e:	b002      	add	sp, #8
 800bc80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc84:	b003      	add	sp, #12
 800bc86:	4770      	bx	lr
 800bc88:	20000060 	.word	0x20000060

0800bc8c <__swhatbuf_r>:
 800bc8c:	b570      	push	{r4, r5, r6, lr}
 800bc8e:	460c      	mov	r4, r1
 800bc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc94:	2900      	cmp	r1, #0
 800bc96:	b096      	sub	sp, #88	@ 0x58
 800bc98:	4615      	mov	r5, r2
 800bc9a:	461e      	mov	r6, r3
 800bc9c:	da0d      	bge.n	800bcba <__swhatbuf_r+0x2e>
 800bc9e:	89a3      	ldrh	r3, [r4, #12]
 800bca0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bca4:	f04f 0100 	mov.w	r1, #0
 800bca8:	bf14      	ite	ne
 800bcaa:	2340      	movne	r3, #64	@ 0x40
 800bcac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	6031      	str	r1, [r6, #0]
 800bcb4:	602b      	str	r3, [r5, #0]
 800bcb6:	b016      	add	sp, #88	@ 0x58
 800bcb8:	bd70      	pop	{r4, r5, r6, pc}
 800bcba:	466a      	mov	r2, sp
 800bcbc:	f000 f862 	bl	800bd84 <_fstat_r>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	dbec      	blt.n	800bc9e <__swhatbuf_r+0x12>
 800bcc4:	9901      	ldr	r1, [sp, #4]
 800bcc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcce:	4259      	negs	r1, r3
 800bcd0:	4159      	adcs	r1, r3
 800bcd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcd6:	e7eb      	b.n	800bcb0 <__swhatbuf_r+0x24>

0800bcd8 <__smakebuf_r>:
 800bcd8:	898b      	ldrh	r3, [r1, #12]
 800bcda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcdc:	079d      	lsls	r5, r3, #30
 800bcde:	4606      	mov	r6, r0
 800bce0:	460c      	mov	r4, r1
 800bce2:	d507      	bpl.n	800bcf4 <__smakebuf_r+0x1c>
 800bce4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	6123      	str	r3, [r4, #16]
 800bcec:	2301      	movs	r3, #1
 800bcee:	6163      	str	r3, [r4, #20]
 800bcf0:	b003      	add	sp, #12
 800bcf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcf4:	ab01      	add	r3, sp, #4
 800bcf6:	466a      	mov	r2, sp
 800bcf8:	f7ff ffc8 	bl	800bc8c <__swhatbuf_r>
 800bcfc:	9f00      	ldr	r7, [sp, #0]
 800bcfe:	4605      	mov	r5, r0
 800bd00:	4639      	mov	r1, r7
 800bd02:	4630      	mov	r0, r6
 800bd04:	f7fe f8a8 	bl	8009e58 <_malloc_r>
 800bd08:	b948      	cbnz	r0, 800bd1e <__smakebuf_r+0x46>
 800bd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd0e:	059a      	lsls	r2, r3, #22
 800bd10:	d4ee      	bmi.n	800bcf0 <__smakebuf_r+0x18>
 800bd12:	f023 0303 	bic.w	r3, r3, #3
 800bd16:	f043 0302 	orr.w	r3, r3, #2
 800bd1a:	81a3      	strh	r3, [r4, #12]
 800bd1c:	e7e2      	b.n	800bce4 <__smakebuf_r+0xc>
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	6020      	str	r0, [r4, #0]
 800bd22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd26:	81a3      	strh	r3, [r4, #12]
 800bd28:	9b01      	ldr	r3, [sp, #4]
 800bd2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd2e:	b15b      	cbz	r3, 800bd48 <__smakebuf_r+0x70>
 800bd30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd34:	4630      	mov	r0, r6
 800bd36:	f000 f837 	bl	800bda8 <_isatty_r>
 800bd3a:	b128      	cbz	r0, 800bd48 <__smakebuf_r+0x70>
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	f023 0303 	bic.w	r3, r3, #3
 800bd42:	f043 0301 	orr.w	r3, r3, #1
 800bd46:	81a3      	strh	r3, [r4, #12]
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	431d      	orrs	r5, r3
 800bd4c:	81a5      	strh	r5, [r4, #12]
 800bd4e:	e7cf      	b.n	800bcf0 <__smakebuf_r+0x18>

0800bd50 <memmove>:
 800bd50:	4288      	cmp	r0, r1
 800bd52:	b510      	push	{r4, lr}
 800bd54:	eb01 0402 	add.w	r4, r1, r2
 800bd58:	d902      	bls.n	800bd60 <memmove+0x10>
 800bd5a:	4284      	cmp	r4, r0
 800bd5c:	4623      	mov	r3, r4
 800bd5e:	d807      	bhi.n	800bd70 <memmove+0x20>
 800bd60:	1e43      	subs	r3, r0, #1
 800bd62:	42a1      	cmp	r1, r4
 800bd64:	d008      	beq.n	800bd78 <memmove+0x28>
 800bd66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd6e:	e7f8      	b.n	800bd62 <memmove+0x12>
 800bd70:	4402      	add	r2, r0
 800bd72:	4601      	mov	r1, r0
 800bd74:	428a      	cmp	r2, r1
 800bd76:	d100      	bne.n	800bd7a <memmove+0x2a>
 800bd78:	bd10      	pop	{r4, pc}
 800bd7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd82:	e7f7      	b.n	800bd74 <memmove+0x24>

0800bd84 <_fstat_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4d07      	ldr	r5, [pc, #28]	@ (800bda4 <_fstat_r+0x20>)
 800bd88:	2300      	movs	r3, #0
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	4608      	mov	r0, r1
 800bd8e:	4611      	mov	r1, r2
 800bd90:	602b      	str	r3, [r5, #0]
 800bd92:	f7f5 fbb8 	bl	8001506 <_fstat>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	d102      	bne.n	800bda0 <_fstat_r+0x1c>
 800bd9a:	682b      	ldr	r3, [r5, #0]
 800bd9c:	b103      	cbz	r3, 800bda0 <_fstat_r+0x1c>
 800bd9e:	6023      	str	r3, [r4, #0]
 800bda0:	bd38      	pop	{r3, r4, r5, pc}
 800bda2:	bf00      	nop
 800bda4:	20000dd0 	.word	0x20000dd0

0800bda8 <_isatty_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d06      	ldr	r5, [pc, #24]	@ (800bdc4 <_isatty_r+0x1c>)
 800bdac:	2300      	movs	r3, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	f7f5 fbb7 	bl	8001526 <_isatty>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_isatty_r+0x1a>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_isatty_r+0x1a>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20000dd0 	.word	0x20000dd0

0800bdc8 <_sbrk_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d06      	ldr	r5, [pc, #24]	@ (800bde4 <_sbrk_r+0x1c>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7f5 fbc0 	bl	8001558 <_sbrk>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_sbrk_r+0x1a>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_sbrk_r+0x1a>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20000dd0 	.word	0x20000dd0

0800bde8 <nan>:
 800bde8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bdf0 <nan+0x8>
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	00000000 	.word	0x00000000
 800bdf4:	7ff80000 	.word	0x7ff80000

0800bdf8 <abort>:
 800bdf8:	b508      	push	{r3, lr}
 800bdfa:	2006      	movs	r0, #6
 800bdfc:	f000 fbc4 	bl	800c588 <raise>
 800be00:	2001      	movs	r0, #1
 800be02:	f7f5 fb30 	bl	8001466 <_exit>

0800be06 <_calloc_r>:
 800be06:	b570      	push	{r4, r5, r6, lr}
 800be08:	fba1 5402 	umull	r5, r4, r1, r2
 800be0c:	b93c      	cbnz	r4, 800be1e <_calloc_r+0x18>
 800be0e:	4629      	mov	r1, r5
 800be10:	f7fe f822 	bl	8009e58 <_malloc_r>
 800be14:	4606      	mov	r6, r0
 800be16:	b928      	cbnz	r0, 800be24 <_calloc_r+0x1e>
 800be18:	2600      	movs	r6, #0
 800be1a:	4630      	mov	r0, r6
 800be1c:	bd70      	pop	{r4, r5, r6, pc}
 800be1e:	220c      	movs	r2, #12
 800be20:	6002      	str	r2, [r0, #0]
 800be22:	e7f9      	b.n	800be18 <_calloc_r+0x12>
 800be24:	462a      	mov	r2, r5
 800be26:	4621      	mov	r1, r4
 800be28:	f7fd f80a 	bl	8008e40 <memset>
 800be2c:	e7f5      	b.n	800be1a <_calloc_r+0x14>

0800be2e <rshift>:
 800be2e:	6903      	ldr	r3, [r0, #16]
 800be30:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be38:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be3c:	f100 0414 	add.w	r4, r0, #20
 800be40:	dd45      	ble.n	800bece <rshift+0xa0>
 800be42:	f011 011f 	ands.w	r1, r1, #31
 800be46:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be4a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800be4e:	d10c      	bne.n	800be6a <rshift+0x3c>
 800be50:	f100 0710 	add.w	r7, r0, #16
 800be54:	4629      	mov	r1, r5
 800be56:	42b1      	cmp	r1, r6
 800be58:	d334      	bcc.n	800bec4 <rshift+0x96>
 800be5a:	1a9b      	subs	r3, r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	1eea      	subs	r2, r5, #3
 800be60:	4296      	cmp	r6, r2
 800be62:	bf38      	it	cc
 800be64:	2300      	movcc	r3, #0
 800be66:	4423      	add	r3, r4
 800be68:	e015      	b.n	800be96 <rshift+0x68>
 800be6a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800be6e:	f1c1 0820 	rsb	r8, r1, #32
 800be72:	40cf      	lsrs	r7, r1
 800be74:	f105 0e04 	add.w	lr, r5, #4
 800be78:	46a1      	mov	r9, r4
 800be7a:	4576      	cmp	r6, lr
 800be7c:	46f4      	mov	ip, lr
 800be7e:	d815      	bhi.n	800beac <rshift+0x7e>
 800be80:	1a9a      	subs	r2, r3, r2
 800be82:	0092      	lsls	r2, r2, #2
 800be84:	3a04      	subs	r2, #4
 800be86:	3501      	adds	r5, #1
 800be88:	42ae      	cmp	r6, r5
 800be8a:	bf38      	it	cc
 800be8c:	2200      	movcc	r2, #0
 800be8e:	18a3      	adds	r3, r4, r2
 800be90:	50a7      	str	r7, [r4, r2]
 800be92:	b107      	cbz	r7, 800be96 <rshift+0x68>
 800be94:	3304      	adds	r3, #4
 800be96:	1b1a      	subs	r2, r3, r4
 800be98:	42a3      	cmp	r3, r4
 800be9a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be9e:	bf08      	it	eq
 800bea0:	2300      	moveq	r3, #0
 800bea2:	6102      	str	r2, [r0, #16]
 800bea4:	bf08      	it	eq
 800bea6:	6143      	streq	r3, [r0, #20]
 800bea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beac:	f8dc c000 	ldr.w	ip, [ip]
 800beb0:	fa0c fc08 	lsl.w	ip, ip, r8
 800beb4:	ea4c 0707 	orr.w	r7, ip, r7
 800beb8:	f849 7b04 	str.w	r7, [r9], #4
 800bebc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bec0:	40cf      	lsrs	r7, r1
 800bec2:	e7da      	b.n	800be7a <rshift+0x4c>
 800bec4:	f851 cb04 	ldr.w	ip, [r1], #4
 800bec8:	f847 cf04 	str.w	ip, [r7, #4]!
 800becc:	e7c3      	b.n	800be56 <rshift+0x28>
 800bece:	4623      	mov	r3, r4
 800bed0:	e7e1      	b.n	800be96 <rshift+0x68>

0800bed2 <__hexdig_fun>:
 800bed2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bed6:	2b09      	cmp	r3, #9
 800bed8:	d802      	bhi.n	800bee0 <__hexdig_fun+0xe>
 800beda:	3820      	subs	r0, #32
 800bedc:	b2c0      	uxtb	r0, r0
 800bede:	4770      	bx	lr
 800bee0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bee4:	2b05      	cmp	r3, #5
 800bee6:	d801      	bhi.n	800beec <__hexdig_fun+0x1a>
 800bee8:	3847      	subs	r0, #71	@ 0x47
 800beea:	e7f7      	b.n	800bedc <__hexdig_fun+0xa>
 800beec:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bef0:	2b05      	cmp	r3, #5
 800bef2:	d801      	bhi.n	800bef8 <__hexdig_fun+0x26>
 800bef4:	3827      	subs	r0, #39	@ 0x27
 800bef6:	e7f1      	b.n	800bedc <__hexdig_fun+0xa>
 800bef8:	2000      	movs	r0, #0
 800befa:	4770      	bx	lr

0800befc <__gethex>:
 800befc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf00:	b085      	sub	sp, #20
 800bf02:	468a      	mov	sl, r1
 800bf04:	9302      	str	r3, [sp, #8]
 800bf06:	680b      	ldr	r3, [r1, #0]
 800bf08:	9001      	str	r0, [sp, #4]
 800bf0a:	4690      	mov	r8, r2
 800bf0c:	1c9c      	adds	r4, r3, #2
 800bf0e:	46a1      	mov	r9, r4
 800bf10:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bf14:	2830      	cmp	r0, #48	@ 0x30
 800bf16:	d0fa      	beq.n	800bf0e <__gethex+0x12>
 800bf18:	eba9 0303 	sub.w	r3, r9, r3
 800bf1c:	f1a3 0b02 	sub.w	fp, r3, #2
 800bf20:	f7ff ffd7 	bl	800bed2 <__hexdig_fun>
 800bf24:	4605      	mov	r5, r0
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d168      	bne.n	800bffc <__gethex+0x100>
 800bf2a:	49a0      	ldr	r1, [pc, #640]	@ (800c1ac <__gethex+0x2b0>)
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	4648      	mov	r0, r9
 800bf30:	f7fc ff8e 	bl	8008e50 <strncmp>
 800bf34:	4607      	mov	r7, r0
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d167      	bne.n	800c00a <__gethex+0x10e>
 800bf3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bf3e:	4626      	mov	r6, r4
 800bf40:	f7ff ffc7 	bl	800bed2 <__hexdig_fun>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d062      	beq.n	800c00e <__gethex+0x112>
 800bf48:	4623      	mov	r3, r4
 800bf4a:	7818      	ldrb	r0, [r3, #0]
 800bf4c:	2830      	cmp	r0, #48	@ 0x30
 800bf4e:	4699      	mov	r9, r3
 800bf50:	f103 0301 	add.w	r3, r3, #1
 800bf54:	d0f9      	beq.n	800bf4a <__gethex+0x4e>
 800bf56:	f7ff ffbc 	bl	800bed2 <__hexdig_fun>
 800bf5a:	fab0 f580 	clz	r5, r0
 800bf5e:	096d      	lsrs	r5, r5, #5
 800bf60:	f04f 0b01 	mov.w	fp, #1
 800bf64:	464a      	mov	r2, r9
 800bf66:	4616      	mov	r6, r2
 800bf68:	3201      	adds	r2, #1
 800bf6a:	7830      	ldrb	r0, [r6, #0]
 800bf6c:	f7ff ffb1 	bl	800bed2 <__hexdig_fun>
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d1f8      	bne.n	800bf66 <__gethex+0x6a>
 800bf74:	498d      	ldr	r1, [pc, #564]	@ (800c1ac <__gethex+0x2b0>)
 800bf76:	2201      	movs	r2, #1
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f7fc ff69 	bl	8008e50 <strncmp>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d13f      	bne.n	800c002 <__gethex+0x106>
 800bf82:	b944      	cbnz	r4, 800bf96 <__gethex+0x9a>
 800bf84:	1c74      	adds	r4, r6, #1
 800bf86:	4622      	mov	r2, r4
 800bf88:	4616      	mov	r6, r2
 800bf8a:	3201      	adds	r2, #1
 800bf8c:	7830      	ldrb	r0, [r6, #0]
 800bf8e:	f7ff ffa0 	bl	800bed2 <__hexdig_fun>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d1f8      	bne.n	800bf88 <__gethex+0x8c>
 800bf96:	1ba4      	subs	r4, r4, r6
 800bf98:	00a7      	lsls	r7, r4, #2
 800bf9a:	7833      	ldrb	r3, [r6, #0]
 800bf9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bfa0:	2b50      	cmp	r3, #80	@ 0x50
 800bfa2:	d13e      	bne.n	800c022 <__gethex+0x126>
 800bfa4:	7873      	ldrb	r3, [r6, #1]
 800bfa6:	2b2b      	cmp	r3, #43	@ 0x2b
 800bfa8:	d033      	beq.n	800c012 <__gethex+0x116>
 800bfaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800bfac:	d034      	beq.n	800c018 <__gethex+0x11c>
 800bfae:	1c71      	adds	r1, r6, #1
 800bfb0:	2400      	movs	r4, #0
 800bfb2:	7808      	ldrb	r0, [r1, #0]
 800bfb4:	f7ff ff8d 	bl	800bed2 <__hexdig_fun>
 800bfb8:	1e43      	subs	r3, r0, #1
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b18      	cmp	r3, #24
 800bfbe:	d830      	bhi.n	800c022 <__gethex+0x126>
 800bfc0:	f1a0 0210 	sub.w	r2, r0, #16
 800bfc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bfc8:	f7ff ff83 	bl	800bed2 <__hexdig_fun>
 800bfcc:	f100 3cff 	add.w	ip, r0, #4294967295
 800bfd0:	fa5f fc8c 	uxtb.w	ip, ip
 800bfd4:	f1bc 0f18 	cmp.w	ip, #24
 800bfd8:	f04f 030a 	mov.w	r3, #10
 800bfdc:	d91e      	bls.n	800c01c <__gethex+0x120>
 800bfde:	b104      	cbz	r4, 800bfe2 <__gethex+0xe6>
 800bfe0:	4252      	negs	r2, r2
 800bfe2:	4417      	add	r7, r2
 800bfe4:	f8ca 1000 	str.w	r1, [sl]
 800bfe8:	b1ed      	cbz	r5, 800c026 <__gethex+0x12a>
 800bfea:	f1bb 0f00 	cmp.w	fp, #0
 800bfee:	bf0c      	ite	eq
 800bff0:	2506      	moveq	r5, #6
 800bff2:	2500      	movne	r5, #0
 800bff4:	4628      	mov	r0, r5
 800bff6:	b005      	add	sp, #20
 800bff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffc:	2500      	movs	r5, #0
 800bffe:	462c      	mov	r4, r5
 800c000:	e7b0      	b.n	800bf64 <__gethex+0x68>
 800c002:	2c00      	cmp	r4, #0
 800c004:	d1c7      	bne.n	800bf96 <__gethex+0x9a>
 800c006:	4627      	mov	r7, r4
 800c008:	e7c7      	b.n	800bf9a <__gethex+0x9e>
 800c00a:	464e      	mov	r6, r9
 800c00c:	462f      	mov	r7, r5
 800c00e:	2501      	movs	r5, #1
 800c010:	e7c3      	b.n	800bf9a <__gethex+0x9e>
 800c012:	2400      	movs	r4, #0
 800c014:	1cb1      	adds	r1, r6, #2
 800c016:	e7cc      	b.n	800bfb2 <__gethex+0xb6>
 800c018:	2401      	movs	r4, #1
 800c01a:	e7fb      	b.n	800c014 <__gethex+0x118>
 800c01c:	fb03 0002 	mla	r0, r3, r2, r0
 800c020:	e7ce      	b.n	800bfc0 <__gethex+0xc4>
 800c022:	4631      	mov	r1, r6
 800c024:	e7de      	b.n	800bfe4 <__gethex+0xe8>
 800c026:	eba6 0309 	sub.w	r3, r6, r9
 800c02a:	3b01      	subs	r3, #1
 800c02c:	4629      	mov	r1, r5
 800c02e:	2b07      	cmp	r3, #7
 800c030:	dc0a      	bgt.n	800c048 <__gethex+0x14c>
 800c032:	9801      	ldr	r0, [sp, #4]
 800c034:	f7fd ff9c 	bl	8009f70 <_Balloc>
 800c038:	4604      	mov	r4, r0
 800c03a:	b940      	cbnz	r0, 800c04e <__gethex+0x152>
 800c03c:	4b5c      	ldr	r3, [pc, #368]	@ (800c1b0 <__gethex+0x2b4>)
 800c03e:	4602      	mov	r2, r0
 800c040:	21e4      	movs	r1, #228	@ 0xe4
 800c042:	485c      	ldr	r0, [pc, #368]	@ (800c1b4 <__gethex+0x2b8>)
 800c044:	f7fd f828 	bl	8009098 <__assert_func>
 800c048:	3101      	adds	r1, #1
 800c04a:	105b      	asrs	r3, r3, #1
 800c04c:	e7ef      	b.n	800c02e <__gethex+0x132>
 800c04e:	f100 0a14 	add.w	sl, r0, #20
 800c052:	2300      	movs	r3, #0
 800c054:	4655      	mov	r5, sl
 800c056:	469b      	mov	fp, r3
 800c058:	45b1      	cmp	r9, r6
 800c05a:	d337      	bcc.n	800c0cc <__gethex+0x1d0>
 800c05c:	f845 bb04 	str.w	fp, [r5], #4
 800c060:	eba5 050a 	sub.w	r5, r5, sl
 800c064:	10ad      	asrs	r5, r5, #2
 800c066:	6125      	str	r5, [r4, #16]
 800c068:	4658      	mov	r0, fp
 800c06a:	f7fe f873 	bl	800a154 <__hi0bits>
 800c06e:	016d      	lsls	r5, r5, #5
 800c070:	f8d8 6000 	ldr.w	r6, [r8]
 800c074:	1a2d      	subs	r5, r5, r0
 800c076:	42b5      	cmp	r5, r6
 800c078:	dd54      	ble.n	800c124 <__gethex+0x228>
 800c07a:	1bad      	subs	r5, r5, r6
 800c07c:	4629      	mov	r1, r5
 800c07e:	4620      	mov	r0, r4
 800c080:	f7fe fc07 	bl	800a892 <__any_on>
 800c084:	4681      	mov	r9, r0
 800c086:	b178      	cbz	r0, 800c0a8 <__gethex+0x1ac>
 800c088:	1e6b      	subs	r3, r5, #1
 800c08a:	1159      	asrs	r1, r3, #5
 800c08c:	f003 021f 	and.w	r2, r3, #31
 800c090:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c094:	f04f 0901 	mov.w	r9, #1
 800c098:	fa09 f202 	lsl.w	r2, r9, r2
 800c09c:	420a      	tst	r2, r1
 800c09e:	d003      	beq.n	800c0a8 <__gethex+0x1ac>
 800c0a0:	454b      	cmp	r3, r9
 800c0a2:	dc36      	bgt.n	800c112 <__gethex+0x216>
 800c0a4:	f04f 0902 	mov.w	r9, #2
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f7ff febf 	bl	800be2e <rshift>
 800c0b0:	442f      	add	r7, r5
 800c0b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0b6:	42bb      	cmp	r3, r7
 800c0b8:	da42      	bge.n	800c140 <__gethex+0x244>
 800c0ba:	9801      	ldr	r0, [sp, #4]
 800c0bc:	4621      	mov	r1, r4
 800c0be:	f7fd ff97 	bl	8009ff0 <_Bfree>
 800c0c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	25a3      	movs	r5, #163	@ 0xa3
 800c0ca:	e793      	b.n	800bff4 <__gethex+0xf8>
 800c0cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c0d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c0d2:	d012      	beq.n	800c0fa <__gethex+0x1fe>
 800c0d4:	2b20      	cmp	r3, #32
 800c0d6:	d104      	bne.n	800c0e2 <__gethex+0x1e6>
 800c0d8:	f845 bb04 	str.w	fp, [r5], #4
 800c0dc:	f04f 0b00 	mov.w	fp, #0
 800c0e0:	465b      	mov	r3, fp
 800c0e2:	7830      	ldrb	r0, [r6, #0]
 800c0e4:	9303      	str	r3, [sp, #12]
 800c0e6:	f7ff fef4 	bl	800bed2 <__hexdig_fun>
 800c0ea:	9b03      	ldr	r3, [sp, #12]
 800c0ec:	f000 000f 	and.w	r0, r0, #15
 800c0f0:	4098      	lsls	r0, r3
 800c0f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	e7ae      	b.n	800c058 <__gethex+0x15c>
 800c0fa:	45b1      	cmp	r9, r6
 800c0fc:	d8ea      	bhi.n	800c0d4 <__gethex+0x1d8>
 800c0fe:	492b      	ldr	r1, [pc, #172]	@ (800c1ac <__gethex+0x2b0>)
 800c100:	9303      	str	r3, [sp, #12]
 800c102:	2201      	movs	r2, #1
 800c104:	4630      	mov	r0, r6
 800c106:	f7fc fea3 	bl	8008e50 <strncmp>
 800c10a:	9b03      	ldr	r3, [sp, #12]
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d1e1      	bne.n	800c0d4 <__gethex+0x1d8>
 800c110:	e7a2      	b.n	800c058 <__gethex+0x15c>
 800c112:	1ea9      	subs	r1, r5, #2
 800c114:	4620      	mov	r0, r4
 800c116:	f7fe fbbc 	bl	800a892 <__any_on>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d0c2      	beq.n	800c0a4 <__gethex+0x1a8>
 800c11e:	f04f 0903 	mov.w	r9, #3
 800c122:	e7c1      	b.n	800c0a8 <__gethex+0x1ac>
 800c124:	da09      	bge.n	800c13a <__gethex+0x23e>
 800c126:	1b75      	subs	r5, r6, r5
 800c128:	4621      	mov	r1, r4
 800c12a:	9801      	ldr	r0, [sp, #4]
 800c12c:	462a      	mov	r2, r5
 800c12e:	f7fe f977 	bl	800a420 <__lshift>
 800c132:	1b7f      	subs	r7, r7, r5
 800c134:	4604      	mov	r4, r0
 800c136:	f100 0a14 	add.w	sl, r0, #20
 800c13a:	f04f 0900 	mov.w	r9, #0
 800c13e:	e7b8      	b.n	800c0b2 <__gethex+0x1b6>
 800c140:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c144:	42bd      	cmp	r5, r7
 800c146:	dd6f      	ble.n	800c228 <__gethex+0x32c>
 800c148:	1bed      	subs	r5, r5, r7
 800c14a:	42ae      	cmp	r6, r5
 800c14c:	dc34      	bgt.n	800c1b8 <__gethex+0x2bc>
 800c14e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c152:	2b02      	cmp	r3, #2
 800c154:	d022      	beq.n	800c19c <__gethex+0x2a0>
 800c156:	2b03      	cmp	r3, #3
 800c158:	d024      	beq.n	800c1a4 <__gethex+0x2a8>
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d115      	bne.n	800c18a <__gethex+0x28e>
 800c15e:	42ae      	cmp	r6, r5
 800c160:	d113      	bne.n	800c18a <__gethex+0x28e>
 800c162:	2e01      	cmp	r6, #1
 800c164:	d10b      	bne.n	800c17e <__gethex+0x282>
 800c166:	9a02      	ldr	r2, [sp, #8]
 800c168:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c16c:	6013      	str	r3, [r2, #0]
 800c16e:	2301      	movs	r3, #1
 800c170:	6123      	str	r3, [r4, #16]
 800c172:	f8ca 3000 	str.w	r3, [sl]
 800c176:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c178:	2562      	movs	r5, #98	@ 0x62
 800c17a:	601c      	str	r4, [r3, #0]
 800c17c:	e73a      	b.n	800bff4 <__gethex+0xf8>
 800c17e:	1e71      	subs	r1, r6, #1
 800c180:	4620      	mov	r0, r4
 800c182:	f7fe fb86 	bl	800a892 <__any_on>
 800c186:	2800      	cmp	r0, #0
 800c188:	d1ed      	bne.n	800c166 <__gethex+0x26a>
 800c18a:	9801      	ldr	r0, [sp, #4]
 800c18c:	4621      	mov	r1, r4
 800c18e:	f7fd ff2f 	bl	8009ff0 <_Bfree>
 800c192:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c194:	2300      	movs	r3, #0
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	2550      	movs	r5, #80	@ 0x50
 800c19a:	e72b      	b.n	800bff4 <__gethex+0xf8>
 800c19c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1f3      	bne.n	800c18a <__gethex+0x28e>
 800c1a2:	e7e0      	b.n	800c166 <__gethex+0x26a>
 800c1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1dd      	bne.n	800c166 <__gethex+0x26a>
 800c1aa:	e7ee      	b.n	800c18a <__gethex+0x28e>
 800c1ac:	0800d160 	.word	0x0800d160
 800c1b0:	0800cff3 	.word	0x0800cff3
 800c1b4:	0800d2d2 	.word	0x0800d2d2
 800c1b8:	1e6f      	subs	r7, r5, #1
 800c1ba:	f1b9 0f00 	cmp.w	r9, #0
 800c1be:	d130      	bne.n	800c222 <__gethex+0x326>
 800c1c0:	b127      	cbz	r7, 800c1cc <__gethex+0x2d0>
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f7fe fb64 	bl	800a892 <__any_on>
 800c1ca:	4681      	mov	r9, r0
 800c1cc:	117a      	asrs	r2, r7, #5
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c1d4:	f007 071f 	and.w	r7, r7, #31
 800c1d8:	40bb      	lsls	r3, r7
 800c1da:	4213      	tst	r3, r2
 800c1dc:	4629      	mov	r1, r5
 800c1de:	4620      	mov	r0, r4
 800c1e0:	bf18      	it	ne
 800c1e2:	f049 0902 	orrne.w	r9, r9, #2
 800c1e6:	f7ff fe22 	bl	800be2e <rshift>
 800c1ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c1ee:	1b76      	subs	r6, r6, r5
 800c1f0:	2502      	movs	r5, #2
 800c1f2:	f1b9 0f00 	cmp.w	r9, #0
 800c1f6:	d047      	beq.n	800c288 <__gethex+0x38c>
 800c1f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d015      	beq.n	800c22c <__gethex+0x330>
 800c200:	2b03      	cmp	r3, #3
 800c202:	d017      	beq.n	800c234 <__gethex+0x338>
 800c204:	2b01      	cmp	r3, #1
 800c206:	d109      	bne.n	800c21c <__gethex+0x320>
 800c208:	f019 0f02 	tst.w	r9, #2
 800c20c:	d006      	beq.n	800c21c <__gethex+0x320>
 800c20e:	f8da 3000 	ldr.w	r3, [sl]
 800c212:	ea49 0903 	orr.w	r9, r9, r3
 800c216:	f019 0f01 	tst.w	r9, #1
 800c21a:	d10e      	bne.n	800c23a <__gethex+0x33e>
 800c21c:	f045 0510 	orr.w	r5, r5, #16
 800c220:	e032      	b.n	800c288 <__gethex+0x38c>
 800c222:	f04f 0901 	mov.w	r9, #1
 800c226:	e7d1      	b.n	800c1cc <__gethex+0x2d0>
 800c228:	2501      	movs	r5, #1
 800c22a:	e7e2      	b.n	800c1f2 <__gethex+0x2f6>
 800c22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c22e:	f1c3 0301 	rsb	r3, r3, #1
 800c232:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c236:	2b00      	cmp	r3, #0
 800c238:	d0f0      	beq.n	800c21c <__gethex+0x320>
 800c23a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c23e:	f104 0314 	add.w	r3, r4, #20
 800c242:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c246:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c24a:	f04f 0c00 	mov.w	ip, #0
 800c24e:	4618      	mov	r0, r3
 800c250:	f853 2b04 	ldr.w	r2, [r3], #4
 800c254:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c258:	d01b      	beq.n	800c292 <__gethex+0x396>
 800c25a:	3201      	adds	r2, #1
 800c25c:	6002      	str	r2, [r0, #0]
 800c25e:	2d02      	cmp	r5, #2
 800c260:	f104 0314 	add.w	r3, r4, #20
 800c264:	d13c      	bne.n	800c2e0 <__gethex+0x3e4>
 800c266:	f8d8 2000 	ldr.w	r2, [r8]
 800c26a:	3a01      	subs	r2, #1
 800c26c:	42b2      	cmp	r2, r6
 800c26e:	d109      	bne.n	800c284 <__gethex+0x388>
 800c270:	1171      	asrs	r1, r6, #5
 800c272:	2201      	movs	r2, #1
 800c274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c278:	f006 061f 	and.w	r6, r6, #31
 800c27c:	fa02 f606 	lsl.w	r6, r2, r6
 800c280:	421e      	tst	r6, r3
 800c282:	d13a      	bne.n	800c2fa <__gethex+0x3fe>
 800c284:	f045 0520 	orr.w	r5, r5, #32
 800c288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c28a:	601c      	str	r4, [r3, #0]
 800c28c:	9b02      	ldr	r3, [sp, #8]
 800c28e:	601f      	str	r7, [r3, #0]
 800c290:	e6b0      	b.n	800bff4 <__gethex+0xf8>
 800c292:	4299      	cmp	r1, r3
 800c294:	f843 cc04 	str.w	ip, [r3, #-4]
 800c298:	d8d9      	bhi.n	800c24e <__gethex+0x352>
 800c29a:	68a3      	ldr	r3, [r4, #8]
 800c29c:	459b      	cmp	fp, r3
 800c29e:	db17      	blt.n	800c2d0 <__gethex+0x3d4>
 800c2a0:	6861      	ldr	r1, [r4, #4]
 800c2a2:	9801      	ldr	r0, [sp, #4]
 800c2a4:	3101      	adds	r1, #1
 800c2a6:	f7fd fe63 	bl	8009f70 <_Balloc>
 800c2aa:	4681      	mov	r9, r0
 800c2ac:	b918      	cbnz	r0, 800c2b6 <__gethex+0x3ba>
 800c2ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c318 <__gethex+0x41c>)
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	2184      	movs	r1, #132	@ 0x84
 800c2b4:	e6c5      	b.n	800c042 <__gethex+0x146>
 800c2b6:	6922      	ldr	r2, [r4, #16]
 800c2b8:	3202      	adds	r2, #2
 800c2ba:	f104 010c 	add.w	r1, r4, #12
 800c2be:	0092      	lsls	r2, r2, #2
 800c2c0:	300c      	adds	r0, #12
 800c2c2:	f7fc fed4 	bl	800906e <memcpy>
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	9801      	ldr	r0, [sp, #4]
 800c2ca:	f7fd fe91 	bl	8009ff0 <_Bfree>
 800c2ce:	464c      	mov	r4, r9
 800c2d0:	6923      	ldr	r3, [r4, #16]
 800c2d2:	1c5a      	adds	r2, r3, #1
 800c2d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2d8:	6122      	str	r2, [r4, #16]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	615a      	str	r2, [r3, #20]
 800c2de:	e7be      	b.n	800c25e <__gethex+0x362>
 800c2e0:	6922      	ldr	r2, [r4, #16]
 800c2e2:	455a      	cmp	r2, fp
 800c2e4:	dd0b      	ble.n	800c2fe <__gethex+0x402>
 800c2e6:	2101      	movs	r1, #1
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f7ff fda0 	bl	800be2e <rshift>
 800c2ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2f2:	3701      	adds	r7, #1
 800c2f4:	42bb      	cmp	r3, r7
 800c2f6:	f6ff aee0 	blt.w	800c0ba <__gethex+0x1be>
 800c2fa:	2501      	movs	r5, #1
 800c2fc:	e7c2      	b.n	800c284 <__gethex+0x388>
 800c2fe:	f016 061f 	ands.w	r6, r6, #31
 800c302:	d0fa      	beq.n	800c2fa <__gethex+0x3fe>
 800c304:	4453      	add	r3, sl
 800c306:	f1c6 0620 	rsb	r6, r6, #32
 800c30a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c30e:	f7fd ff21 	bl	800a154 <__hi0bits>
 800c312:	42b0      	cmp	r0, r6
 800c314:	dbe7      	blt.n	800c2e6 <__gethex+0x3ea>
 800c316:	e7f0      	b.n	800c2fa <__gethex+0x3fe>
 800c318:	0800cff3 	.word	0x0800cff3

0800c31c <L_shift>:
 800c31c:	f1c2 0208 	rsb	r2, r2, #8
 800c320:	0092      	lsls	r2, r2, #2
 800c322:	b570      	push	{r4, r5, r6, lr}
 800c324:	f1c2 0620 	rsb	r6, r2, #32
 800c328:	6843      	ldr	r3, [r0, #4]
 800c32a:	6804      	ldr	r4, [r0, #0]
 800c32c:	fa03 f506 	lsl.w	r5, r3, r6
 800c330:	432c      	orrs	r4, r5
 800c332:	40d3      	lsrs	r3, r2
 800c334:	6004      	str	r4, [r0, #0]
 800c336:	f840 3f04 	str.w	r3, [r0, #4]!
 800c33a:	4288      	cmp	r0, r1
 800c33c:	d3f4      	bcc.n	800c328 <L_shift+0xc>
 800c33e:	bd70      	pop	{r4, r5, r6, pc}

0800c340 <__match>:
 800c340:	b530      	push	{r4, r5, lr}
 800c342:	6803      	ldr	r3, [r0, #0]
 800c344:	3301      	adds	r3, #1
 800c346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c34a:	b914      	cbnz	r4, 800c352 <__match+0x12>
 800c34c:	6003      	str	r3, [r0, #0]
 800c34e:	2001      	movs	r0, #1
 800c350:	bd30      	pop	{r4, r5, pc}
 800c352:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c356:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c35a:	2d19      	cmp	r5, #25
 800c35c:	bf98      	it	ls
 800c35e:	3220      	addls	r2, #32
 800c360:	42a2      	cmp	r2, r4
 800c362:	d0f0      	beq.n	800c346 <__match+0x6>
 800c364:	2000      	movs	r0, #0
 800c366:	e7f3      	b.n	800c350 <__match+0x10>

0800c368 <__hexnan>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	680b      	ldr	r3, [r1, #0]
 800c36e:	6801      	ldr	r1, [r0, #0]
 800c370:	115e      	asrs	r6, r3, #5
 800c372:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c376:	f013 031f 	ands.w	r3, r3, #31
 800c37a:	b087      	sub	sp, #28
 800c37c:	bf18      	it	ne
 800c37e:	3604      	addne	r6, #4
 800c380:	2500      	movs	r5, #0
 800c382:	1f37      	subs	r7, r6, #4
 800c384:	4682      	mov	sl, r0
 800c386:	4690      	mov	r8, r2
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c38e:	46b9      	mov	r9, r7
 800c390:	463c      	mov	r4, r7
 800c392:	9502      	str	r5, [sp, #8]
 800c394:	46ab      	mov	fp, r5
 800c396:	784a      	ldrb	r2, [r1, #1]
 800c398:	1c4b      	adds	r3, r1, #1
 800c39a:	9303      	str	r3, [sp, #12]
 800c39c:	b342      	cbz	r2, 800c3f0 <__hexnan+0x88>
 800c39e:	4610      	mov	r0, r2
 800c3a0:	9105      	str	r1, [sp, #20]
 800c3a2:	9204      	str	r2, [sp, #16]
 800c3a4:	f7ff fd95 	bl	800bed2 <__hexdig_fun>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d151      	bne.n	800c450 <__hexnan+0xe8>
 800c3ac:	9a04      	ldr	r2, [sp, #16]
 800c3ae:	9905      	ldr	r1, [sp, #20]
 800c3b0:	2a20      	cmp	r2, #32
 800c3b2:	d818      	bhi.n	800c3e6 <__hexnan+0x7e>
 800c3b4:	9b02      	ldr	r3, [sp, #8]
 800c3b6:	459b      	cmp	fp, r3
 800c3b8:	dd13      	ble.n	800c3e2 <__hexnan+0x7a>
 800c3ba:	454c      	cmp	r4, r9
 800c3bc:	d206      	bcs.n	800c3cc <__hexnan+0x64>
 800c3be:	2d07      	cmp	r5, #7
 800c3c0:	dc04      	bgt.n	800c3cc <__hexnan+0x64>
 800c3c2:	462a      	mov	r2, r5
 800c3c4:	4649      	mov	r1, r9
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f7ff ffa8 	bl	800c31c <L_shift>
 800c3cc:	4544      	cmp	r4, r8
 800c3ce:	d952      	bls.n	800c476 <__hexnan+0x10e>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f1a4 0904 	sub.w	r9, r4, #4
 800c3d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3da:	f8cd b008 	str.w	fp, [sp, #8]
 800c3de:	464c      	mov	r4, r9
 800c3e0:	461d      	mov	r5, r3
 800c3e2:	9903      	ldr	r1, [sp, #12]
 800c3e4:	e7d7      	b.n	800c396 <__hexnan+0x2e>
 800c3e6:	2a29      	cmp	r2, #41	@ 0x29
 800c3e8:	d157      	bne.n	800c49a <__hexnan+0x132>
 800c3ea:	3102      	adds	r1, #2
 800c3ec:	f8ca 1000 	str.w	r1, [sl]
 800c3f0:	f1bb 0f00 	cmp.w	fp, #0
 800c3f4:	d051      	beq.n	800c49a <__hexnan+0x132>
 800c3f6:	454c      	cmp	r4, r9
 800c3f8:	d206      	bcs.n	800c408 <__hexnan+0xa0>
 800c3fa:	2d07      	cmp	r5, #7
 800c3fc:	dc04      	bgt.n	800c408 <__hexnan+0xa0>
 800c3fe:	462a      	mov	r2, r5
 800c400:	4649      	mov	r1, r9
 800c402:	4620      	mov	r0, r4
 800c404:	f7ff ff8a 	bl	800c31c <L_shift>
 800c408:	4544      	cmp	r4, r8
 800c40a:	d936      	bls.n	800c47a <__hexnan+0x112>
 800c40c:	f1a8 0204 	sub.w	r2, r8, #4
 800c410:	4623      	mov	r3, r4
 800c412:	f853 1b04 	ldr.w	r1, [r3], #4
 800c416:	f842 1f04 	str.w	r1, [r2, #4]!
 800c41a:	429f      	cmp	r7, r3
 800c41c:	d2f9      	bcs.n	800c412 <__hexnan+0xaa>
 800c41e:	1b3b      	subs	r3, r7, r4
 800c420:	f023 0303 	bic.w	r3, r3, #3
 800c424:	3304      	adds	r3, #4
 800c426:	3401      	adds	r4, #1
 800c428:	3e03      	subs	r6, #3
 800c42a:	42b4      	cmp	r4, r6
 800c42c:	bf88      	it	hi
 800c42e:	2304      	movhi	r3, #4
 800c430:	4443      	add	r3, r8
 800c432:	2200      	movs	r2, #0
 800c434:	f843 2b04 	str.w	r2, [r3], #4
 800c438:	429f      	cmp	r7, r3
 800c43a:	d2fb      	bcs.n	800c434 <__hexnan+0xcc>
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	b91b      	cbnz	r3, 800c448 <__hexnan+0xe0>
 800c440:	4547      	cmp	r7, r8
 800c442:	d128      	bne.n	800c496 <__hexnan+0x12e>
 800c444:	2301      	movs	r3, #1
 800c446:	603b      	str	r3, [r7, #0]
 800c448:	2005      	movs	r0, #5
 800c44a:	b007      	add	sp, #28
 800c44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c450:	3501      	adds	r5, #1
 800c452:	2d08      	cmp	r5, #8
 800c454:	f10b 0b01 	add.w	fp, fp, #1
 800c458:	dd06      	ble.n	800c468 <__hexnan+0x100>
 800c45a:	4544      	cmp	r4, r8
 800c45c:	d9c1      	bls.n	800c3e2 <__hexnan+0x7a>
 800c45e:	2300      	movs	r3, #0
 800c460:	f844 3c04 	str.w	r3, [r4, #-4]
 800c464:	2501      	movs	r5, #1
 800c466:	3c04      	subs	r4, #4
 800c468:	6822      	ldr	r2, [r4, #0]
 800c46a:	f000 000f 	and.w	r0, r0, #15
 800c46e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c472:	6020      	str	r0, [r4, #0]
 800c474:	e7b5      	b.n	800c3e2 <__hexnan+0x7a>
 800c476:	2508      	movs	r5, #8
 800c478:	e7b3      	b.n	800c3e2 <__hexnan+0x7a>
 800c47a:	9b01      	ldr	r3, [sp, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d0dd      	beq.n	800c43c <__hexnan+0xd4>
 800c480:	f1c3 0320 	rsb	r3, r3, #32
 800c484:	f04f 32ff 	mov.w	r2, #4294967295
 800c488:	40da      	lsrs	r2, r3
 800c48a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c48e:	4013      	ands	r3, r2
 800c490:	f846 3c04 	str.w	r3, [r6, #-4]
 800c494:	e7d2      	b.n	800c43c <__hexnan+0xd4>
 800c496:	3f04      	subs	r7, #4
 800c498:	e7d0      	b.n	800c43c <__hexnan+0xd4>
 800c49a:	2004      	movs	r0, #4
 800c49c:	e7d5      	b.n	800c44a <__hexnan+0xe2>

0800c49e <__ascii_mbtowc>:
 800c49e:	b082      	sub	sp, #8
 800c4a0:	b901      	cbnz	r1, 800c4a4 <__ascii_mbtowc+0x6>
 800c4a2:	a901      	add	r1, sp, #4
 800c4a4:	b142      	cbz	r2, 800c4b8 <__ascii_mbtowc+0x1a>
 800c4a6:	b14b      	cbz	r3, 800c4bc <__ascii_mbtowc+0x1e>
 800c4a8:	7813      	ldrb	r3, [r2, #0]
 800c4aa:	600b      	str	r3, [r1, #0]
 800c4ac:	7812      	ldrb	r2, [r2, #0]
 800c4ae:	1e10      	subs	r0, r2, #0
 800c4b0:	bf18      	it	ne
 800c4b2:	2001      	movne	r0, #1
 800c4b4:	b002      	add	sp, #8
 800c4b6:	4770      	bx	lr
 800c4b8:	4610      	mov	r0, r2
 800c4ba:	e7fb      	b.n	800c4b4 <__ascii_mbtowc+0x16>
 800c4bc:	f06f 0001 	mvn.w	r0, #1
 800c4c0:	e7f8      	b.n	800c4b4 <__ascii_mbtowc+0x16>

0800c4c2 <_realloc_r>:
 800c4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c6:	4680      	mov	r8, r0
 800c4c8:	4615      	mov	r5, r2
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	b921      	cbnz	r1, 800c4d8 <_realloc_r+0x16>
 800c4ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	f7fd bcc0 	b.w	8009e58 <_malloc_r>
 800c4d8:	b92a      	cbnz	r2, 800c4e6 <_realloc_r+0x24>
 800c4da:	f7fd fc49 	bl	8009d70 <_free_r>
 800c4de:	2400      	movs	r4, #0
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e6:	f000 f86b 	bl	800c5c0 <_malloc_usable_size_r>
 800c4ea:	4285      	cmp	r5, r0
 800c4ec:	4606      	mov	r6, r0
 800c4ee:	d802      	bhi.n	800c4f6 <_realloc_r+0x34>
 800c4f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c4f4:	d8f4      	bhi.n	800c4e0 <_realloc_r+0x1e>
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	4640      	mov	r0, r8
 800c4fa:	f7fd fcad 	bl	8009e58 <_malloc_r>
 800c4fe:	4607      	mov	r7, r0
 800c500:	2800      	cmp	r0, #0
 800c502:	d0ec      	beq.n	800c4de <_realloc_r+0x1c>
 800c504:	42b5      	cmp	r5, r6
 800c506:	462a      	mov	r2, r5
 800c508:	4621      	mov	r1, r4
 800c50a:	bf28      	it	cs
 800c50c:	4632      	movcs	r2, r6
 800c50e:	f7fc fdae 	bl	800906e <memcpy>
 800c512:	4621      	mov	r1, r4
 800c514:	4640      	mov	r0, r8
 800c516:	f7fd fc2b 	bl	8009d70 <_free_r>
 800c51a:	463c      	mov	r4, r7
 800c51c:	e7e0      	b.n	800c4e0 <_realloc_r+0x1e>

0800c51e <__ascii_wctomb>:
 800c51e:	4603      	mov	r3, r0
 800c520:	4608      	mov	r0, r1
 800c522:	b141      	cbz	r1, 800c536 <__ascii_wctomb+0x18>
 800c524:	2aff      	cmp	r2, #255	@ 0xff
 800c526:	d904      	bls.n	800c532 <__ascii_wctomb+0x14>
 800c528:	228a      	movs	r2, #138	@ 0x8a
 800c52a:	601a      	str	r2, [r3, #0]
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295
 800c530:	4770      	bx	lr
 800c532:	700a      	strb	r2, [r1, #0]
 800c534:	2001      	movs	r0, #1
 800c536:	4770      	bx	lr

0800c538 <_raise_r>:
 800c538:	291f      	cmp	r1, #31
 800c53a:	b538      	push	{r3, r4, r5, lr}
 800c53c:	4605      	mov	r5, r0
 800c53e:	460c      	mov	r4, r1
 800c540:	d904      	bls.n	800c54c <_raise_r+0x14>
 800c542:	2316      	movs	r3, #22
 800c544:	6003      	str	r3, [r0, #0]
 800c546:	f04f 30ff 	mov.w	r0, #4294967295
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c54e:	b112      	cbz	r2, 800c556 <_raise_r+0x1e>
 800c550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c554:	b94b      	cbnz	r3, 800c56a <_raise_r+0x32>
 800c556:	4628      	mov	r0, r5
 800c558:	f000 f830 	bl	800c5bc <_getpid_r>
 800c55c:	4622      	mov	r2, r4
 800c55e:	4601      	mov	r1, r0
 800c560:	4628      	mov	r0, r5
 800c562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c566:	f000 b817 	b.w	800c598 <_kill_r>
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d00a      	beq.n	800c584 <_raise_r+0x4c>
 800c56e:	1c59      	adds	r1, r3, #1
 800c570:	d103      	bne.n	800c57a <_raise_r+0x42>
 800c572:	2316      	movs	r3, #22
 800c574:	6003      	str	r3, [r0, #0]
 800c576:	2001      	movs	r0, #1
 800c578:	e7e7      	b.n	800c54a <_raise_r+0x12>
 800c57a:	2100      	movs	r1, #0
 800c57c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c580:	4620      	mov	r0, r4
 800c582:	4798      	blx	r3
 800c584:	2000      	movs	r0, #0
 800c586:	e7e0      	b.n	800c54a <_raise_r+0x12>

0800c588 <raise>:
 800c588:	4b02      	ldr	r3, [pc, #8]	@ (800c594 <raise+0xc>)
 800c58a:	4601      	mov	r1, r0
 800c58c:	6818      	ldr	r0, [r3, #0]
 800c58e:	f7ff bfd3 	b.w	800c538 <_raise_r>
 800c592:	bf00      	nop
 800c594:	20000060 	.word	0x20000060

0800c598 <_kill_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d07      	ldr	r5, [pc, #28]	@ (800c5b8 <_kill_r+0x20>)
 800c59c:	2300      	movs	r3, #0
 800c59e:	4604      	mov	r4, r0
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	602b      	str	r3, [r5, #0]
 800c5a6:	f7f4 ff4e 	bl	8001446 <_kill>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d102      	bne.n	800c5b4 <_kill_r+0x1c>
 800c5ae:	682b      	ldr	r3, [r5, #0]
 800c5b0:	b103      	cbz	r3, 800c5b4 <_kill_r+0x1c>
 800c5b2:	6023      	str	r3, [r4, #0]
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20000dd0 	.word	0x20000dd0

0800c5bc <_getpid_r>:
 800c5bc:	f7f4 bf3b 	b.w	8001436 <_getpid>

0800c5c0 <_malloc_usable_size_r>:
 800c5c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5c4:	1f18      	subs	r0, r3, #4
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	bfbc      	itt	lt
 800c5ca:	580b      	ldrlt	r3, [r1, r0]
 800c5cc:	18c0      	addlt	r0, r0, r3
 800c5ce:	4770      	bx	lr

0800c5d0 <_init>:
 800c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d2:	bf00      	nop
 800c5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d6:	bc08      	pop	{r3}
 800c5d8:	469e      	mov	lr, r3
 800c5da:	4770      	bx	lr

0800c5dc <_fini>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	bf00      	nop
 800c5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e2:	bc08      	pop	{r3}
 800c5e4:	469e      	mov	lr, r3
 800c5e6:	4770      	bx	lr
