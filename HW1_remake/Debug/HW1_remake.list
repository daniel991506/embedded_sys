
HW1_remake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08008ce4  08008ce4  00009ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dec  08008dec  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  08008dec  08008dec  00009dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008df4  08008df4  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df4  08008df4  00009df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008df8  08008df8  00009df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008dfc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d8  20000010  08008e0c  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020e8  08008e0c  0000a0e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026151  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004945  00000000  00000000  00030191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002300  00000000  00000000  00034ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b58  00000000  00000000  00036dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049f2  00000000  00000000  00038930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027938  00000000  00000000  0003d322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001081df  00000000  00000000  00064c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016ce39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097e4  00000000  00000000  0016ce7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00176660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ccc 	.word	0x08008ccc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008ccc 	.word	0x08008ccc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004d0:	d104      	bne.n	80004dc <HAL_GPIO_EXTI_Callback+0x1c>
        // Release the button semaphore from ISR
        osSemaphoreRelease(buttonHandle);
 80004d2:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <HAL_GPIO_EXTI_Callback+0x24>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f005 f9f8 	bl	80058cc <osSemaphoreRelease>
    }
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200007ac 	.word	0x200007ac

080004e8 <HAL_TIM_PeriodElapsedCallback>:

// Timer Interrupt Handler
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a05      	ldr	r2, [pc, #20]	@ (800050c <HAL_TIM_PeriodElapsedCallback+0x24>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d104      	bne.n	8000504 <HAL_TIM_PeriodElapsedCallback+0x1c>
        // Release the timer semaphore from ISR
        osSemaphoreRelease(timerHandle);
 80004fa:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f005 f9e4 	bl	80058cc <osSemaphoreRelease>
    }
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40001000 	.word	0x40001000
 8000510:	200007b0 	.word	0x200007b0

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fff3 	bl	8001502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f85c 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa5c 	bl	80009dc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000524:	f000 f8ba 	bl	800069c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000528:	f000 f8f0 	bl	800070c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800052c:	f000 f92c 	bl	8000788 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000530:	f000 f950 	bl	80007d4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000534:	f000 f9c4 	bl	80008c0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000538:	f000 f9f2 	bl	8000920 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800053c:	f000 fa20 	bl	8000980 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000540:	f000 f986 	bl	8000850 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8000544:	4817      	ldr	r0, [pc, #92]	@ (80005a4 <main+0x90>)
 8000546:	f003 fbf3 	bl	8003d30 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054a:	f004 fedf 	bl	800530c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of blink */
  blinkHandle = osMutexNew(&blink_attributes);
 800054e:	4816      	ldr	r0, [pc, #88]	@ (80005a8 <main+0x94>)
 8000550:	f004 ffd3 	bl	80054fa <osMutexNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a15      	ldr	r2, [pc, #84]	@ (80005ac <main+0x98>)
 8000558:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of button */
  buttonHandle = osSemaphoreNew(1, 0, &button_attributes);
 800055a:	4a15      	ldr	r2, [pc, #84]	@ (80005b0 <main+0x9c>)
 800055c:	2100      	movs	r1, #0
 800055e:	2001      	movs	r0, #1
 8000560:	f005 f8d9 	bl	8005716 <osSemaphoreNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a13      	ldr	r2, [pc, #76]	@ (80005b4 <main+0xa0>)
 8000568:	6013      	str	r3, [r2, #0]

  /* creation of timer */
  timerHandle = osSemaphoreNew(1, 0, &timer_attributes);
 800056a:	4a13      	ldr	r2, [pc, #76]	@ (80005b8 <main+0xa4>)
 800056c:	2100      	movs	r1, #0
 800056e:	2001      	movs	r0, #1
 8000570:	f005 f8d1 	bl	8005716 <osSemaphoreNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a11      	ldr	r2, [pc, #68]	@ (80005bc <main+0xa8>)
 8000578:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057a:	4a11      	ldr	r2, [pc, #68]	@ (80005c0 <main+0xac>)
 800057c:	2100      	movs	r1, #0
 800057e:	4811      	ldr	r0, [pc, #68]	@ (80005c4 <main+0xb0>)
 8000580:	f004 ff0e 	bl	80053a0 <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a10      	ldr	r2, [pc, #64]	@ (80005c8 <main+0xb4>)
 8000588:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800058a:	4a10      	ldr	r2, [pc, #64]	@ (80005cc <main+0xb8>)
 800058c:	2100      	movs	r1, #0
 800058e:	4810      	ldr	r0, [pc, #64]	@ (80005d0 <main+0xbc>)
 8000590:	f004 ff06 	bl	80053a0 <osThreadNew>
 8000594:	4603      	mov	r3, r0
 8000596:	4a0f      	ldr	r2, [pc, #60]	@ (80005d4 <main+0xc0>)
 8000598:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800059a:	f004 fedb 	bl	8005354 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	bf00      	nop
 80005a0:	e7fd      	b.n	800059e <main+0x8a>
 80005a2:	bf00      	nop
 80005a4:	20000160 	.word	0x20000160
 80005a8:	08008d74 	.word	0x08008d74
 80005ac:	200007a8 	.word	0x200007a8
 80005b0:	08008d84 	.word	0x08008d84
 80005b4:	200007ac 	.word	0x200007ac
 80005b8:	08008d94 	.word	0x08008d94
 80005bc:	200007b0 	.word	0x200007b0
 80005c0:	08008d2c 	.word	0x08008d2c
 80005c4:	08000d41 	.word	0x08000d41
 80005c8:	200007a0 	.word	0x200007a0
 80005cc:	08008d50 	.word	0x08008d50
 80005d0:	08000dad 	.word	0x08000dad
 80005d4:	200007a4 	.word	0x200007a4

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	@ 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	@ 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fb36 	bl	8008c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005fe:	f001 feaf 	bl	8002360 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 fc06 	bl	8000e18 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060c:	f001 fe8a 	bl	8002324 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <SystemClock_Config+0xc0>)
 8000612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000616:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <SystemClock_Config+0xc0>)
 8000618:	f023 0318 	bic.w	r3, r3, #24
 800061c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000620:	2314      	movs	r3, #20
 8000622:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000630:	2360      	movs	r3, #96	@ 0x60
 8000632:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000638:	2301      	movs	r3, #1
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000640:	2328      	movs	r3, #40	@ 0x28
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f001 ffa5 	bl	80025a4 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000660:	f000 fbda 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2104      	movs	r1, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fb6d 	bl	8002d5c <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000688:	f000 fbc6 	bl	8000e18 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800068c:	f003 f874 	bl	8003778 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000690:	bf00      	nop
 8000692:	3758      	adds	r7, #88	@ 0x58
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006a0:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006a2:	4a19      	ldr	r2, [pc, #100]	@ (8000708 <MX_DFSDM1_Init+0x6c>)
 80006a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006ac:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006b4:	2202      	movs	r2, #2
 80006b6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_DFSDM1_Init+0x68>)
 80006f2:	f001 f8b1 	bl	8001858 <HAL_DFSDM_ChannelInit>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006fc:	f000 fb8c 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000002c 	.word	0x2000002c
 8000708:	40016020 	.word	0x40016020

0800070c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <MX_I2C2_Init+0x74>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <MX_I2C2_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_I2C2_Init+0x74>)
 8000718:	f640 6214 	movw	r2, #3604	@ 0xe14
 800071c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800071e:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <MX_I2C2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_I2C2_Init+0x74>)
 8000726:	2201      	movs	r2, #1
 8000728:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000748:	480d      	ldr	r0, [pc, #52]	@ (8000780 <MX_I2C2_Init+0x74>)
 800074a:	f001 fb85 	bl	8001e58 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 fb60 	bl	8000e18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000758:	2100      	movs	r1, #0
 800075a:	4809      	ldr	r0, [pc, #36]	@ (8000780 <MX_I2C2_Init+0x74>)
 800075c:	f001 fc17 	bl	8001f8e <HAL_I2CEx_ConfigAnalogFilter>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000766:	f000 fb57 	bl	8000e18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_I2C2_Init+0x74>)
 800076e:	f001 fc59 	bl	8002024 <HAL_I2CEx_ConfigDigitalFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000778:	f000 fb4e 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000064 	.word	0x20000064
 8000784:	40005800 	.word	0x40005800

08000788 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_QUADSPI_Init+0x44>)
 800078e:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <MX_QUADSPI_Init+0x48>)
 8000790:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_QUADSPI_Init+0x44>)
 8000794:	2202      	movs	r2, #2
 8000796:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_QUADSPI_Init+0x44>)
 800079a:	2204      	movs	r2, #4
 800079c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_QUADSPI_Init+0x44>)
 80007a0:	2210      	movs	r2, #16
 80007a2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_QUADSPI_Init+0x44>)
 80007a6:	2217      	movs	r2, #23
 80007a8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_QUADSPI_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_QUADSPI_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_QUADSPI_Init+0x44>)
 80007b8:	f001 fe38 	bl	800242c <HAL_QSPI_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007c2:	f000 fb29 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000b8 	.word	0x200000b8
 80007d0:	a0001000 	.word	0xa0001000

080007d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_SPI3_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	@ (800084c <MX_SPI3_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_SPI3_Init+0x74>)
 80007e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_SPI3_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_SPI3_Init+0x74>)
 80007ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_SPI3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_SPI3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_SPI3_Init+0x74>)
 8000802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000806:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_SPI3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_SPI3_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_SPI3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_SPI3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_SPI3_Init+0x74>)
 8000822:	2207      	movs	r2, #7
 8000824:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_SPI3_Init+0x74>)
 800082e:	2208      	movs	r2, #8
 8000830:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_SPI3_Init+0x74>)
 8000834:	f003 f982 	bl	8003b3c <HAL_SPI_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 faeb 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000fc 	.word	0x200000fc
 800084c:	40003c00 	.word	0x40003c00

08000850 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_TIM6_Init+0x68>)
 8000862:	4a16      	ldr	r2, [pc, #88]	@ (80008bc <MX_TIM6_Init+0x6c>)
 8000864:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39999;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_TIM6_Init+0x68>)
 8000868:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800086c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_TIM6_Init+0x68>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8000874:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_TIM6_Init+0x68>)
 8000876:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800087a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_TIM6_Init+0x68>)
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000882:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <MX_TIM6_Init+0x68>)
 8000884:	f003 f9fd 	bl	8003c82 <HAL_TIM_Base_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800088e:	f000 fac3 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	@ (80008b8 <MX_TIM6_Init+0x68>)
 80008a0:	f003 fc8c 	bl	80041bc <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008aa:	f000 fab5 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000160 	.word	0x20000160
 80008bc:	40001000 	.word	0x40001000

080008c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	@ (800091c <MX_USART1_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_USART1_UART_Init+0x58>)
 8000904:	f003 fd00 	bl	8004308 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800090e:	f000 fa83 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001ac 	.word	0x200001ac
 800091c:	40013800 	.word	0x40013800

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000926:	4a15      	ldr	r2, [pc, #84]	@ (800097c <MX_USART3_UART_Init+0x5c>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_USART3_UART_Init+0x58>)
 8000964:	f003 fcd0 	bl	8004308 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 fa53 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000234 	.word	0x20000234
 800097c:	40004800 	.word	0x40004800

08000980 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800098a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2206      	movs	r2, #6
 8000990:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2202      	movs	r2, #2
 8000996:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2202      	movs	r2, #2
 800099c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	f001 fb7a 	bl	80020bc <HAL_PCD_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 fa23 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200002bc 	.word	0x200002bc

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f2:	4bbd      	ldr	r3, [pc, #756]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4abc      	ldr	r2, [pc, #752]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 80009f8:	f043 0310 	orr.w	r3, r3, #16
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4bba      	ldr	r3, [pc, #744]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4bb7      	ldr	r3, [pc, #732]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4ab6      	ldr	r2, [pc, #728]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4bb4      	ldr	r3, [pc, #720]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4bb1      	ldr	r3, [pc, #708]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4ab0      	ldr	r2, [pc, #704]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4bae      	ldr	r3, [pc, #696]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4bab      	ldr	r3, [pc, #684]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4aaa      	ldr	r2, [pc, #680]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4ba8      	ldr	r3, [pc, #672]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4ba5      	ldr	r3, [pc, #660]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4aa4      	ldr	r2, [pc, #656]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4ba2      	ldr	r3, [pc, #648]	@ (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000a70:	489e      	ldr	r0, [pc, #632]	@ (8000cec <MX_GPIO_Init+0x310>)
 8000a72:	f001 f9a7 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f001 f9a0 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a84:	2200      	movs	r2, #0
 8000a86:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000a8a:	4899      	ldr	r0, [pc, #612]	@ (8000cf0 <MX_GPIO_Init+0x314>)
 8000a8c:	f001 f99a 	bl	8001dc4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000a96:	4897      	ldr	r0, [pc, #604]	@ (8000cf4 <MX_GPIO_Init+0x318>)
 8000a98:	f001 f994 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa2:	4894      	ldr	r0, [pc, #592]	@ (8000cf4 <MX_GPIO_Init+0x318>)
 8000aa4:	f001 f98e 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000aae:	4892      	ldr	r0, [pc, #584]	@ (8000cf8 <MX_GPIO_Init+0x31c>)
 8000ab0:	f001 f988 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	488d      	ldr	r0, [pc, #564]	@ (8000cf0 <MX_GPIO_Init+0x314>)
 8000aba:	f001 f983 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	488a      	ldr	r0, [pc, #552]	@ (8000cec <MX_GPIO_Init+0x310>)
 8000ac4:	f001 f97e 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ac8:	f240 1315 	movw	r3, #277	@ 0x115
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4882      	ldr	r0, [pc, #520]	@ (8000cec <MX_GPIO_Init+0x310>)
 8000ae2:	f000 ffc5 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000ae6:	236a      	movs	r3, #106	@ 0x6a
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	487c      	ldr	r0, [pc, #496]	@ (8000cec <MX_GPIO_Init+0x310>)
 8000afc:	f000 ffb8 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b06:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4878      	ldr	r0, [pc, #480]	@ (8000cf8 <MX_GPIO_Init+0x31c>)
 8000b18:	f000 ffaa 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b1c:	233f      	movs	r3, #63	@ 0x3f
 8000b1e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b20:	230b      	movs	r3, #11
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4872      	ldr	r0, [pc, #456]	@ (8000cf8 <MX_GPIO_Init+0x31c>)
 8000b30:	f000 ff9e 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b34:	2303      	movs	r3, #3
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b44:	2308      	movs	r3, #8
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f000 ff8d 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b56:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b72:	f000 ff7d 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b76:	2308      	movs	r3, #8
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b86:	2301      	movs	r3, #1
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f000 ff6c 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bae:	f000 ff5f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bb2:	23e0      	movs	r3, #224	@ 0xe0
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f000 ff4e 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4841      	ldr	r0, [pc, #260]	@ (8000cf0 <MX_GPIO_Init+0x314>)
 8000bea:	f000 ff41 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	483b      	ldr	r0, [pc, #236]	@ (8000cf0 <MX_GPIO_Init+0x314>)
 8000c02:	f000 ff35 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c06:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000c0a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4834      	ldr	r0, [pc, #208]	@ (8000cf0 <MX_GPIO_Init+0x314>)
 8000c20:	f000 ff26 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c24:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000c28:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	482e      	ldr	r0, [pc, #184]	@ (8000cf4 <MX_GPIO_Init+0x318>)
 8000c3c:	f000 ff18 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c40:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4826      	ldr	r0, [pc, #152]	@ (8000cf4 <MX_GPIO_Init+0x318>)
 8000c5a:	f000 ff09 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c5e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4820      	ldr	r0, [pc, #128]	@ (8000cf8 <MX_GPIO_Init+0x31c>)
 8000c78:	f000 fefa 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c7c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4819      	ldr	r0, [pc, #100]	@ (8000cf8 <MX_GPIO_Init+0x31c>)
 8000c94:	f000 feec 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca8:	2305      	movs	r3, #5
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4810      	ldr	r0, [pc, #64]	@ (8000cf4 <MX_GPIO_Init+0x318>)
 8000cb4:	f000 fedc 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cb8:	2378      	movs	r3, #120	@ 0x78
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <MX_GPIO_Init+0x318>)
 8000cd4:	f000 fecc 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cd8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <MX_GPIO_Init+0x320>
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48001000 	.word	0x48001000
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	48000c00 	.word	0x48000c00
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d02:	2304      	movs	r3, #4
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <MX_GPIO_Init+0x360>)
 8000d0e:	f000 feaf 	bl	8001a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2105      	movs	r1, #5
 8000d16:	2017      	movs	r0, #23
 8000d18:	f000 fd67 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d1c:	2017      	movs	r0, #23
 8000d1e:	f000 fd80 	bl	8001822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2105      	movs	r1, #5
 8000d26:	2028      	movs	r0, #40	@ 0x28
 8000d28:	f000 fd5f 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d2c:	2028      	movs	r0, #40	@ 0x28
 8000d2e:	f000 fd78 	bl	8001822 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	@ 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	48000400 	.word	0x48000400

08000d40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(buttonHandle, osWaitForever)== osOK) {
 8000d48:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <StartDefaultTask+0x60>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fd69 	bl	8005828 <osSemaphoreAcquire>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f5      	bne.n	8000d48 <StartDefaultTask+0x8>
	              // Acquire the mutex before starting the blink operation
	              if (osMutexAcquire(blinkHandle, osWaitForever) == osOK) {
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <StartDefaultTask+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 fc4e 	bl	8005606 <osMutexAcquire>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1eb      	bne.n	8000d48 <StartDefaultTask+0x8>
	                  // Blink LED2 at 1 Hz for 5 seconds
	                  for (int i = 0; i < 10; i++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	e00b      	b.n	8000d8e <StartDefaultTask+0x4e>
	                      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000d76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d7a:	480b      	ldr	r0, [pc, #44]	@ (8000da8 <StartDefaultTask+0x68>)
 8000d7c:	f001 f83a 	bl	8001df4 <HAL_GPIO_TogglePin>
	                      osDelay(500); // 500ms delay for 1 Hz blinking
 8000d80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d84:	f004 fb9e 	bl	80054c4 <osDelay>
	                  for (int i = 0; i < 10; i++) {
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b09      	cmp	r3, #9
 8000d92:	ddf0      	ble.n	8000d76 <StartDefaultTask+0x36>
	                  }
	                  // Release the mutex after blinking is done
	                  osMutexRelease(blinkHandle);
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <StartDefaultTask+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fc7f 	bl	800569c <osMutexRelease>
	  if (osSemaphoreAcquire(buttonHandle, osWaitForever)== osOK) {
 8000d9e:	e7d3      	b.n	8000d48 <StartDefaultTask+0x8>
 8000da0:	200007ac 	.word	0x200007ac
 8000da4:	200007a8 	.word	0x200007a8
 8000da8:	48000400 	.word	0x48000400

08000dac <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(timerHandle, osWaitForever) == osOK) {
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <StartTask02+0x60>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f004 fd33 	bl	8005828 <osSemaphoreAcquire>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f5      	bne.n	8000db4 <StartTask02+0x8>
	              // Acquire the mutex before starting the blink operation
	              if (osMutexAcquire(blinkHandle, osWaitForever) == osOK) {
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <StartTask02+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 fc18 	bl	8005606 <osMutexAcquire>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1eb      	bne.n	8000db4 <StartTask02+0x8>
	                  // Blink LED2 at 10 Hz for 2 seconds
	                  for (int i = 0; i < 40; i++) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	e00a      	b.n	8000df8 <StartTask02+0x4c>
	                      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000de2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000de6:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <StartTask02+0x68>)
 8000de8:	f001 f804 	bl	8001df4 <HAL_GPIO_TogglePin>
	                      osDelay(50); // 50ms delay for 10 Hz blinking
 8000dec:	2032      	movs	r0, #50	@ 0x32
 8000dee:	f004 fb69 	bl	80054c4 <osDelay>
	                  for (int i = 0; i < 40; i++) {
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b27      	cmp	r3, #39	@ 0x27
 8000dfc:	ddf1      	ble.n	8000de2 <StartTask02+0x36>
	                  }
	                  // Release the mutex after blinking is done
	                  osMutexRelease(blinkHandle);
 8000dfe:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <StartTask02+0x64>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fc4a 	bl	800569c <osMutexRelease>
	  if (osSemaphoreAcquire(timerHandle, osWaitForever) == osOK) {
 8000e08:	e7d4      	b.n	8000db4 <StartTask02+0x8>
 8000e0a:	bf00      	nop
 8000e0c:	200007b0 	.word	0x200007b0
 8000e10:	200007a8 	.word	0x200007a8
 8000e14:	48000400 	.word	0x48000400

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <Error_Handler+0x8>

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2e:	4a10      	ldr	r2, [pc, #64]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e4e:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	f06f 0001 	mvn.w	r0, #1
 8000e62:	f000 fcc2 	bl	80017ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0ac      	sub	sp, #176	@ 0xb0
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2288      	movs	r2, #136	@ 0x88
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 fedf 	bl	8008c58 <memset>
  if(DFSDM1_Init == 0)
 8000e9a:	4b25      	ldr	r3, [pc, #148]	@ (8000f30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d142      	bne.n	8000f28 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000ea2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 f976 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000ebe:	f7ff ffab 	bl	8000e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ec8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	4a15      	ldr	r2, [pc, #84]	@ (8000f34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee6:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000ef2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000ef6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f12:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f1a:	f000 fda9 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000f1e:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	4a02      	ldr	r2, [pc, #8]	@ (8000f30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f26:	6013      	str	r3, [r2, #0]
  }

}
 8000f28:	bf00      	nop
 8000f2a:	37b0      	adds	r7, #176	@ 0xb0
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200007b4 	.word	0x200007b4
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48001000 	.word	0x48001000

08000f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0ac      	sub	sp, #176	@ 0xb0
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2288      	movs	r2, #136	@ 0x88
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f007 fe7b 	bl	8008c58 <memset>
  if(hi2c->Instance==I2C2)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a21      	ldr	r2, [pc, #132]	@ (8000fec <HAL_I2C_MspInit+0xb0>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d13b      	bne.n	8000fe4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f6c:	2380      	movs	r3, #128	@ 0x80
 8000f6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 f913 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f84:	f7ff ff48 	bl	8000e18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <HAL_I2C_MspInit+0xb4>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8c:	4a18      	ldr	r2, [pc, #96]	@ (8000ff0 <HAL_I2C_MspInit+0xb4>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <HAL_I2C_MspInit+0xb4>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000fa0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa8:	2312      	movs	r3, #18
 8000faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <HAL_I2C_MspInit+0xb8>)
 8000fc8:	f000 fd52 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_I2C_MspInit+0xb4>)
 8000fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <HAL_I2C_MspInit+0xb4>)
 8000fd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_I2C_MspInit+0xb4>)
 8000fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000fe4:	bf00      	nop
 8000fe6:	37b0      	adds	r7, #176	@ 0xb0
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40005800 	.word	0x40005800
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	@ (8001074 <HAL_QSPI_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d128      	bne.n	800106c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <HAL_QSPI_MspInit+0x80>)
 800101c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800101e:	4a16      	ldr	r2, [pc, #88]	@ (8001078 <HAL_QSPI_MspInit+0x80>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001024:	6513      	str	r3, [r2, #80]	@ 0x50
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <HAL_QSPI_MspInit+0x80>)
 8001028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800102a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_QSPI_MspInit+0x80>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <HAL_QSPI_MspInit+0x80>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_QSPI_MspInit+0x80>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800104a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800104e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800105c:	230a      	movs	r3, #10
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <HAL_QSPI_MspInit+0x84>)
 8001068:	f000 fd02 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	@ 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	a0001000 	.word	0xa0001000
 8001078:	40021000 	.word	0x40021000
 800107c:	48001000 	.word	0x48001000

08001080 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a17      	ldr	r2, [pc, #92]	@ (80010fc <HAL_SPI_MspInit+0x7c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d128      	bne.n	80010f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <HAL_SPI_MspInit+0x80>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a6:	4a16      	ldr	r2, [pc, #88]	@ (8001100 <HAL_SPI_MspInit+0x80>)
 80010a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <HAL_SPI_MspInit+0x80>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_SPI_MspInit+0x80>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a10      	ldr	r2, [pc, #64]	@ (8001100 <HAL_SPI_MspInit+0x80>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_SPI_MspInit+0x80>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010d2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e4:	2306      	movs	r3, #6
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_SPI_MspInit+0x84>)
 80010f0:	f000 fcbe 	bl	8001a70 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	@ 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40003c00 	.word	0x40003c00
 8001100:	40021000 	.word	0x40021000
 8001104:	48000800 	.word	0x48000800

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <HAL_TIM_Base_MspInit+0x44>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d113      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <HAL_TIM_Base_MspInit+0x48>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	4a0c      	ldr	r2, [pc, #48]	@ (8001150 <HAL_TIM_Base_MspInit+0x48>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6593      	str	r3, [r2, #88]	@ 0x58
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_TIM_Base_MspInit+0x48>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2036      	movs	r0, #54	@ 0x36
 8001138:	f000 fb57 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800113c:	2036      	movs	r0, #54	@ 0x36
 800113e:	f000 fb70 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40001000 	.word	0x40001000
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0ae      	sub	sp, #184	@ 0xb8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	2288      	movs	r2, #136	@ 0x88
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f007 fd6f 	bl	8008c58 <memset>
  if(huart->Instance==USART1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a42      	ldr	r2, [pc, #264]	@ (8001288 <HAL_UART_MspInit+0x134>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d13b      	bne.n	80011fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001184:	2301      	movs	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001188:	2300      	movs	r3, #0
 800118a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4618      	mov	r0, r3
 8001192:	f002 f807 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800119c:	f7ff fe3c 	bl	8000e18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a0:	4b3a      	ldr	r3, [pc, #232]	@ (800128c <HAL_UART_MspInit+0x138>)
 80011a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a4:	4a39      	ldr	r2, [pc, #228]	@ (800128c <HAL_UART_MspInit+0x138>)
 80011a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ac:	4b37      	ldr	r3, [pc, #220]	@ (800128c <HAL_UART_MspInit+0x138>)
 80011ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b34      	ldr	r3, [pc, #208]	@ (800128c <HAL_UART_MspInit+0x138>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	4a33      	ldr	r2, [pc, #204]	@ (800128c <HAL_UART_MspInit+0x138>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c4:	4b31      	ldr	r3, [pc, #196]	@ (800128c <HAL_UART_MspInit+0x138>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011d0:	23c0      	movs	r3, #192	@ 0xc0
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011e8:	2307      	movs	r3, #7
 80011ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011f2:	4619      	mov	r1, r3
 80011f4:	4826      	ldr	r0, [pc, #152]	@ (8001290 <HAL_UART_MspInit+0x13c>)
 80011f6:	f000 fc3b 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011fa:	e040      	b.n	800127e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a24      	ldr	r2, [pc, #144]	@ (8001294 <HAL_UART_MspInit+0x140>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d13b      	bne.n	800127e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001206:	2304      	movs	r3, #4
 8001208:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800120a:	2300      	movs	r3, #0
 800120c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4618      	mov	r0, r3
 8001214:	f001 ffc6 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800121e:	f7ff fdfb 	bl	8000e18 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HAL_UART_MspInit+0x138>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001226:	4a19      	ldr	r2, [pc, #100]	@ (800128c <HAL_UART_MspInit+0x138>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800122c:	6593      	str	r3, [r2, #88]	@ 0x58
 800122e:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_UART_MspInit+0x138>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_UART_MspInit+0x138>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a13      	ldr	r2, [pc, #76]	@ (800128c <HAL_UART_MspInit+0x138>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <HAL_UART_MspInit+0x138>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001252:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001256:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800126c:	2307      	movs	r3, #7
 800126e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001272:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001276:	4619      	mov	r1, r3
 8001278:	4807      	ldr	r0, [pc, #28]	@ (8001298 <HAL_UART_MspInit+0x144>)
 800127a:	f000 fbf9 	bl	8001a70 <HAL_GPIO_Init>
}
 800127e:	bf00      	nop
 8001280:	37b8      	adds	r7, #184	@ 0xb8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40013800 	.word	0x40013800
 800128c:	40021000 	.word	0x40021000
 8001290:	48000400 	.word	0x48000400
 8001294:	40004800 	.word	0x40004800
 8001298:	48000c00 	.word	0x48000c00

0800129c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0ac      	sub	sp, #176	@ 0xb0
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2288      	movs	r2, #136	@ 0x88
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f007 fccb 	bl	8008c58 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ca:	d17c      	bne.n	80013c6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012da:	2301      	movs	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012e2:	2318      	movs	r3, #24
 80012e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012e6:	2307      	movs	r3, #7
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012ee:	2302      	movs	r3, #2
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012f2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012f6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 ff51 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001308:	f7ff fd86 	bl	8000e18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b30      	ldr	r3, [pc, #192]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001310:	4a2f      	ldr	r2, [pc, #188]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001318:	4b2d      	ldr	r3, [pc, #180]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001324:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001342:	f000 fb95 	bl	8001a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001346:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800134a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001360:	230a      	movs	r3, #10
 8001362:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f000 fb7e 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001374:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001378:	4a15      	ldr	r2, [pc, #84]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 800137a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800137e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138c:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d114      	bne.n	80013c2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80013b0:	f001 f82c 	bl	800240c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b8:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <HAL_PCD_MspInit+0x134>)
 80013ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013be:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80013c0:	e001      	b.n	80013c6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80013c2:	f001 f823 	bl	800240c <HAL_PWREx_EnableVddUSB>
}
 80013c6:	bf00      	nop
 80013c8:	37b0      	adds	r7, #176	@ 0xb0
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <NMI_Handler+0x4>

080013dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <MemManage_Handler+0x4>

080013ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140e:	f000 f8cd 	bl	80015ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001412:	f006 faa5 	bl	8007960 <xTaskGetSchedulerState>
 8001416:	4603      	mov	r3, r0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d001      	beq.n	8001420 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800141c:	f007 f99c 	bl	8008758 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001428:	2020      	movs	r0, #32
 800142a:	f000 fcfd 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800142e:	2040      	movs	r0, #64	@ 0x40
 8001430:	f000 fcfa 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001434:	2080      	movs	r0, #128	@ 0x80
 8001436:	f000 fcf7 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800143a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800143e:	f000 fcf3 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}

08001446 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800144a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800144e:	f000 fceb 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001452:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001456:	f000 fce7 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800145a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800145e:	f000 fce3 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001462:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001466:	f000 fcdf 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800146a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800146e:	f000 fcdb 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <TIM6_DAC_IRQHandler+0x10>)
 800147e:	f002 fcc7 	bl	8003e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000160 	.word	0x20000160

0800148c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b4:	f7ff ffea 	bl	800148c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480c      	ldr	r0, [pc, #48]	@ (80014ec <LoopForever+0x6>)
  ldr r1, =_edata
 80014ba:	490d      	ldr	r1, [pc, #52]	@ (80014f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <LoopForever+0xe>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d0:	4c0a      	ldr	r4, [pc, #40]	@ (80014fc <LoopForever+0x16>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014de:	f007 fbc3 	bl	8008c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e2:	f7ff f817 	bl	8000514 <main>

080014e6 <LoopForever>:

LoopForever:
    b LoopForever
 80014e6:	e7fe      	b.n	80014e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014f4:	08008dfc 	.word	0x08008dfc
  ldr r2, =_sbss
 80014f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014fc:	200020e8 	.word	0x200020e8

08001500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>

08001502 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f961 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f80e 	bl	8001534 <HAL_InitTick>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	e001      	b.n	8001528 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001524:	f7ff fc7e 	bl	8000e24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001528:	79fb      	ldrb	r3, [r7, #7]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001540:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <HAL_InitTick+0x6c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d023      	beq.n	8001590 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <HAL_InitTick+0x70>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <HAL_InitTick+0x6c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f96d 	bl	800183e <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d809      	bhi.n	8001584 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 f937 	bl	80017ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157c:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <HAL_InitTick+0x74>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e007      	b.n	8001594 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e004      	b.n	8001594 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e001      	b.n	8001594 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	200007b8 	.word	0x200007b8

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200007b8 	.word	0x200007b8

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	@ (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	@ (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff3e 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0ac      	b.n	80019c4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f8b2 	bl	80019d8 <DFSDM_GetChannelFromInstance>
 8001874:	4603      	mov	r3, r0
 8001876:	4a55      	ldr	r2, [pc, #340]	@ (80019cc <HAL_DFSDM_ChannelInit+0x174>)
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e09f      	b.n	80019c4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff faf5 	bl	8000e74 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800188a:	4b51      	ldr	r3, [pc, #324]	@ (80019d0 <HAL_DFSDM_ChannelInit+0x178>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a4f      	ldr	r2, [pc, #316]	@ (80019d0 <HAL_DFSDM_ChannelInit+0x178>)
 8001892:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001894:	4b4e      	ldr	r3, [pc, #312]	@ (80019d0 <HAL_DFSDM_ChannelInit+0x178>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d125      	bne.n	80018e8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800189c:	4b4d      	ldr	r3, [pc, #308]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a4c      	ldr	r2, [pc, #304]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80018a6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80018a8:	4b4a      	ldr	r3, [pc, #296]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4948      	ldr	r1, [pc, #288]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018b6:	4b47      	ldr	r3, [pc, #284]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a46      	ldr	r2, [pc, #280]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018bc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80018c0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80018ca:	4b42      	ldr	r3, [pc, #264]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	493f      	ldr	r1, [pc, #252]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018dc:	4b3d      	ldr	r3, [pc, #244]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80018e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80018e6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80018f6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001906:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800190c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020f 	bic.w	r2, r2, #15
 8001924:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800194c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6899      	ldr	r1, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f002 0207 	and.w	r2, r2, #7
 8001978:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001984:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019a4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f810 	bl	80019d8 <DFSDM_GetChannelFromInstance>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4904      	ldr	r1, [pc, #16]	@ (80019cc <HAL_DFSDM_ChannelInit+0x174>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200007c0 	.word	0x200007c0
 80019d0:	200007bc 	.word	0x200007bc
 80019d4:	40016000 	.word	0x40016000

080019d8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a54 <DFSDM_GetChannelFromInstance+0x7c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d102      	bne.n	80019ee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e02b      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <DFSDM_GetChannelFromInstance+0x80>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d102      	bne.n	80019fc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e024      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <DFSDM_GetChannelFromInstance+0x84>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d102      	bne.n	8001a0a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	e01d      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <DFSDM_GetChannelFromInstance+0x88>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d102      	bne.n	8001a18 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001a12:	2304      	movs	r3, #4
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e016      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <DFSDM_GetChannelFromInstance+0x8c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a20:	2305      	movs	r3, #5
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e00f      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0f      	ldr	r2, [pc, #60]	@ (8001a68 <DFSDM_GetChannelFromInstance+0x90>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d102      	bne.n	8001a34 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e008      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <DFSDM_GetChannelFromInstance+0x94>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d102      	bne.n	8001a42 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e001      	b.n	8001a46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a42:	2303      	movs	r3, #3
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40016000 	.word	0x40016000
 8001a58:	40016020 	.word	0x40016020
 8001a5c:	40016040 	.word	0x40016040
 8001a60:	40016080 	.word	0x40016080
 8001a64:	400160a0 	.word	0x400160a0
 8001a68:	400160c0 	.word	0x400160c0
 8001a6c:	400160e0 	.word	0x400160e0

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e17f      	b.n	8001d80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8171 	beq.w	8001d7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d005      	beq.n	8001ab0 <HAL_GPIO_Init+0x40>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d130      	bne.n	8001b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 0201 	and.w	r2, r3, #1
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d118      	bne.n	8001b50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b24:	2201      	movs	r2, #1
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	08db      	lsrs	r3, r3, #3
 8001b3a:	f003 0201 	and.w	r2, r3, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d017      	beq.n	8001b8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d123      	bne.n	8001be0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	220f      	movs	r2, #15
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	08da      	lsrs	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3208      	adds	r2, #8
 8001bda:	6939      	ldr	r1, [r7, #16]
 8001bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80ac 	beq.w	8001d7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b5f      	ldr	r3, [pc, #380]	@ (8001da0 <HAL_GPIO_Init+0x330>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	4a5e      	ldr	r2, [pc, #376]	@ (8001da0 <HAL_GPIO_Init+0x330>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001da0 <HAL_GPIO_Init+0x330>)
 8001c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c3a:	4a5a      	ldr	r2, [pc, #360]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c64:	d025      	beq.n	8001cb2 <HAL_GPIO_Init+0x242>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4f      	ldr	r2, [pc, #316]	@ (8001da8 <HAL_GPIO_Init+0x338>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01f      	beq.n	8001cae <HAL_GPIO_Init+0x23e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4e      	ldr	r2, [pc, #312]	@ (8001dac <HAL_GPIO_Init+0x33c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0x23a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4d      	ldr	r2, [pc, #308]	@ (8001db0 <HAL_GPIO_Init+0x340>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x236>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4c      	ldr	r2, [pc, #304]	@ (8001db4 <HAL_GPIO_Init+0x344>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x232>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4b      	ldr	r2, [pc, #300]	@ (8001db8 <HAL_GPIO_Init+0x348>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x22e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4a      	ldr	r2, [pc, #296]	@ (8001dbc <HAL_GPIO_Init+0x34c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x22a>
 8001c96:	2306      	movs	r3, #6
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x244>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cc4:	4937      	ldr	r1, [pc, #220]	@ (8001da4 <HAL_GPIO_Init+0x334>)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_GPIO_Init+0x350>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f47f ae78 	bne.w	8001a80 <HAL_GPIO_Init+0x10>
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	48000400 	.word	0x48000400
 8001dac:	48000800 	.word	0x48000800
 8001db0:	48000c00 	.word	0x48000c00
 8001db4:	48001000 	.word	0x48001000
 8001db8:	48001400 	.word	0x48001400
 8001dbc:	48001800 	.word	0x48001800
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43d9      	mvns	r1, r3
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	400b      	ands	r3, r1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3e:	4a05      	ldr	r2, [pc, #20]	@ (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb3a 	bl	80004c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e08d      	b.n	8001f86 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff f85c 	bl	8000f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2224      	movs	r2, #36	@ 0x24
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ea8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	e006      	b.n	8001ee0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ede:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d108      	bne.n	8001efa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	e007      	b.n	8001f0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69d9      	ldr	r1, [r3, #28]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d138      	bne.n	8002016 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e032      	b.n	8002018 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2224      	movs	r2, #36	@ 0x24
 8001fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fe0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6819      	ldr	r1, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b20      	cmp	r3, #32
 8002038:	d139      	bne.n	80020ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002044:	2302      	movs	r3, #2
 8002046:	e033      	b.n	80020b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002076:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e101      	b.n	80022d2 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff f8da 	bl	800129c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2203      	movs	r2, #3
 80020ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fe52 	bl	8004da4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7c1a      	ldrb	r2, [r3, #16]
 8002108:	f88d 2000 	strb.w	r2, [sp]
 800210c:	3304      	adds	r3, #4
 800210e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002110:	f002 fe1b 	bl	8004d4a <USB_CoreInit>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0d5      	b.n	80022d2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fe4a 	bl	8004dc6 <USB_SetCurrentMode>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0c6      	b.n	80022d2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e04a      	b.n	80021e0 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3315      	adds	r3, #21
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3314      	adds	r3, #20
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	b298      	uxth	r0, r3
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	332e      	adds	r3, #46	@ 0x2e
 8002186:	4602      	mov	r2, r0
 8002188:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	3318      	adds	r3, #24
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	331c      	adds	r3, #28
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3320      	adds	r3, #32
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	3324      	adds	r3, #36	@ 0x24
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	3301      	adds	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3af      	bcc.n	800214a <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
 80021ee:	e044      	b.n	800227a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4413      	add	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3301      	adds	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	791b      	ldrb	r3, [r3, #4]
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	429a      	cmp	r2, r3
 8002282:	d3b5      	bcc.n	80021f0 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7c1a      	ldrb	r2, [r3, #16]
 800228c:	f88d 2000 	strb.w	r2, [sp]
 8002290:	3304      	adds	r3, #4
 8002292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002294:	f002 fde4 	bl	8004e60 <USB_DevInit>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e013      	b.n	80022d2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7b1b      	ldrb	r3, [r3, #12]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d102      	bne.n	80022c6 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f80a 	bl	80022da <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 ff89 	bl	80051e2 <USB_DevDisconnect>

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800230c:	f043 0303 	orr.w	r3, r3, #3
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40007000 	.word	0x40007000

08002344 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <HAL_PWREx_GetVoltageRange+0x18>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40007000 	.word	0x40007000

08002360 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236e:	d130      	bne.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002370:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800237c:	d038      	beq.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002386:	4a1e      	ldr	r2, [pc, #120]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002388:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800238e:	4b1d      	ldr	r3, [pc, #116]	@ (8002404 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2232      	movs	r2, #50	@ 0x32
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	4a1b      	ldr	r2, [pc, #108]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9b      	lsrs	r3, r3, #18
 80023a0:	3301      	adds	r3, #1
 80023a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a4:	e002      	b.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b8:	d102      	bne.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f2      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023cc:	d110      	bne.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e00f      	b.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023de:	d007      	beq.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023e0:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023e8:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40007000 	.word	0x40007000
 8002404:	20000000 	.word	0x20000000
 8002408:	431bde83 	.word	0x431bde83

0800240c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800241a:	6053      	str	r3, [r2, #4]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40007000 	.word	0x40007000

0800242c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff f8ce 	bl	80015d4 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e063      	b.n	800250c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fe fdcd 	bl	8000ff8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800245e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f858 	bl	8002518 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	3b01      	subs	r3, #1
 8002478:	021a      	lsls	r2, r3, #8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	2120      	movs	r1, #32
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f850 	bl	8002534 <QSPI_WaitFlagStateUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d131      	bne.n	8002502 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024a8:	f023 0310 	bic.w	r3, r3, #16
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6852      	ldr	r2, [r2, #4]
 80024b0:	0611      	lsls	r1, r2, #24
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <HAL_QSPI_Init+0xe8>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6912      	ldr	r2, [r2, #16]
 80024ce:	0411      	lsls	r1, r2, #16
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6952      	ldr	r2, [r2, #20]
 80024d4:	4311      	orrs	r1, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6992      	ldr	r2, [r2, #24]
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800250a:	7afb      	ldrb	r3, [r7, #11]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	ffe0f8fe 	.word	0xffe0f8fe

08002518 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002544:	e01a      	b.n	800257c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d016      	beq.n	800257c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7ff f841 	bl	80015d4 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10b      	bne.n	800257c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2204      	movs	r2, #4
 8002568:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e00e      	b.n	800259a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	bf14      	ite	ne
 800258a:	2301      	movne	r3, #1
 800258c:	2300      	moveq	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	429a      	cmp	r2, r3
 8002596:	d1d6      	bne.n	8002546 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e3ca      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	4b97      	ldr	r3, [pc, #604]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c0:	4b94      	ldr	r3, [pc, #592]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80e4 	beq.w	80027a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_RCC_OscConfig+0x4a>
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	2b0c      	cmp	r3, #12
 80025e2:	f040 808b 	bne.w	80026fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 8087 	bne.w	80026fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025ee:	4b89      	ldr	r3, [pc, #548]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x62>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e3a2      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1a      	ldr	r2, [r3, #32]
 800260a:	4b82      	ldr	r3, [pc, #520]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <HAL_RCC_OscConfig+0x7c>
 8002616:	4b7f      	ldr	r3, [pc, #508]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800261e:	e005      	b.n	800262c <HAL_RCC_OscConfig+0x88>
 8002620:	4b7c      	ldr	r3, [pc, #496]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800262c:	4293      	cmp	r3, r2
 800262e:	d223      	bcs.n	8002678 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fd55 	bl	80030e4 <RCC_SetFlashLatencyFromMSIRange>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e383      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002644:	4b73      	ldr	r3, [pc, #460]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a72      	ldr	r2, [pc, #456]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800264a:	f043 0308 	orr.w	r3, r3, #8
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b70      	ldr	r3, [pc, #448]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	496d      	ldr	r1, [pc, #436]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002662:	4b6c      	ldr	r3, [pc, #432]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	4968      	ldr	r1, [pc, #416]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
 8002676:	e025      	b.n	80026c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002678:	4b66      	ldr	r3, [pc, #408]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a65      	ldr	r2, [pc, #404]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800267e:	f043 0308 	orr.w	r3, r3, #8
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b63      	ldr	r3, [pc, #396]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4960      	ldr	r1, [pc, #384]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002696:	4b5f      	ldr	r3, [pc, #380]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	495b      	ldr	r1, [pc, #364]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fd15 	bl	80030e4 <RCC_SetFlashLatencyFromMSIRange>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e343      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026c4:	f000 fc4a 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b52      	ldr	r3, [pc, #328]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4950      	ldr	r1, [pc, #320]	@ (8002818 <HAL_RCC_OscConfig+0x274>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	4a4e      	ldr	r2, [pc, #312]	@ (800281c <HAL_RCC_OscConfig+0x278>)
 80026e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002820 <HAL_RCC_OscConfig+0x27c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe ff23 	bl	8001534 <HAL_InitTick>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d052      	beq.n	800279e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	e327      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d032      	beq.n	800276a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002704:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a42      	ldr	r2, [pc, #264]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002710:	f7fe ff60 	bl	80015d4 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002718:	f7fe ff5c 	bl	80015d4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e310      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800272a:	4b3a      	ldr	r3, [pc, #232]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002736:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a36      	ldr	r2, [pc, #216]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800273c:	f043 0308 	orr.w	r3, r3, #8
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b34      	ldr	r3, [pc, #208]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4931      	ldr	r1, [pc, #196]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002754:	4b2f      	ldr	r3, [pc, #188]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	492c      	ldr	r1, [pc, #176]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
 8002768:	e01a      	b.n	80027a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a29      	ldr	r2, [pc, #164]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002776:	f7fe ff2d 	bl	80015d4 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800277e:	f7fe ff29 	bl	80015d4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e2dd      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002790:	4b20      	ldr	r3, [pc, #128]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x1da>
 800279c:	e000      	b.n	80027a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800279e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d074      	beq.n	8002896 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x21a>
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	d10e      	bne.n	80027d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d10b      	bne.n	80027d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d064      	beq.n	8002894 <HAL_RCC_OscConfig+0x2f0>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d160      	bne.n	8002894 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e2ba      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x24a>
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e026      	b.n	800283c <HAL_RCC_OscConfig+0x298>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027f6:	d115      	bne.n	8002824 <HAL_RCC_OscConfig+0x280>
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 80027fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a02      	ldr	r2, [pc, #8]	@ (8002814 <HAL_RCC_OscConfig+0x270>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x298>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	08008da4 	.word	0x08008da4
 800281c:	20000000 	.word	0x20000000
 8002820:	20000004 	.word	0x20000004
 8002824:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a9f      	ldr	r2, [pc, #636]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a9c      	ldr	r2, [pc, #624]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fec6 	bl	80015d4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe fec2 	bl	80015d4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	@ 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e276      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285e:	4b92      	ldr	r3, [pc, #584]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x2a8>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe feb2 	bl	80015d4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe feae 	bl	80015d4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e262      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002886:	4b88      	ldr	r3, [pc, #544]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x2d0>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d060      	beq.n	8002964 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_OscConfig+0x310>
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d119      	bne.n	80028e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d116      	bne.n	80028e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b4:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_OscConfig+0x328>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e23f      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b76      	ldr	r3, [pc, #472]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	4973      	ldr	r1, [pc, #460]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e0:	e040      	b.n	8002964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d023      	beq.n	8002932 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028ea:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80028f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fe fe6d 	bl	80015d4 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe fe69 	bl	80015d4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e21d      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002910:	4b65      	ldr	r3, [pc, #404]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291c:	4b62      	ldr	r3, [pc, #392]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	495f      	ldr	r1, [pc, #380]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
 8002930:	e018      	b.n	8002964 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002932:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5c      	ldr	r2, [pc, #368]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800293c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293e:	f7fe fe49 	bl	80015d4 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002946:	f7fe fe45 	bl	80015d4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e1f9      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002958:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d03c      	beq.n	80029ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002978:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 800297a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800297e:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe fe24 	bl	80015d4 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002990:	f7fe fe20 	bl	80015d4 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1d4      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a2:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ef      	beq.n	8002990 <HAL_RCC_OscConfig+0x3ec>
 80029b0:	e01b      	b.n	80029ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b2:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b8:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7fe fe07 	bl	80015d4 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ca:	f7fe fe03 	bl	80015d4 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1b7      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029dc:	4b32      	ldr	r3, [pc, #200]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ef      	bne.n	80029ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80a6 	beq.w	8002b44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029fc:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10d      	bne.n	8002a24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	4a26      	ldr	r2, [pc, #152]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a14:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a20:	2301      	movs	r3, #1
 8002a22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a24:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <HAL_RCC_OscConfig+0x508>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d118      	bne.n	8002a62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a30:	4b1e      	ldr	r3, [pc, #120]	@ (8002aac <HAL_RCC_OscConfig+0x508>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	@ (8002aac <HAL_RCC_OscConfig+0x508>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fdca 	bl	80015d4 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a44:	f7fe fdc6 	bl	80015d4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e17a      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_RCC_OscConfig+0x508>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d108      	bne.n	8002a7c <HAL_RCC_OscConfig+0x4d8>
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a7a:	e029      	b.n	8002ad0 <HAL_RCC_OscConfig+0x52c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d115      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x50c>
 8002a84:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	4a07      	ldr	r2, [pc, #28]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	4a03      	ldr	r2, [pc, #12]	@ (8002aa8 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aa4:	e014      	b.n	8002ad0 <HAL_RCC_OscConfig+0x52c>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab6:	4a9b      	ldr	r2, [pc, #620]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac0:	4b98      	ldr	r3, [pc, #608]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	4a97      	ldr	r2, [pc, #604]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002ac8:	f023 0304 	bic.w	r3, r3, #4
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d016      	beq.n	8002b06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fd7c 	bl	80015d4 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fd78 	bl	80015d4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e12a      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af6:	4b8b      	ldr	r3, [pc, #556]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ed      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x53c>
 8002b04:	e015      	b.n	8002b32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe fd65 	bl	80015d4 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fd61 	bl	80015d4 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e113      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b24:	4b7f      	ldr	r3, [pc, #508]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1ed      	bne.n	8002b0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b32:	7ffb      	ldrb	r3, [r7, #31]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b38:	4b7a      	ldr	r3, [pc, #488]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3c:	4a79      	ldr	r2, [pc, #484]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b42:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80fe 	beq.w	8002d4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	f040 80d0 	bne.w	8002cf8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b58:	4b72      	ldr	r3, [pc, #456]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d130      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	3b01      	subs	r3, #1
 8002b78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d127      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11f      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b98:	2a07      	cmp	r2, #7
 8002b9a:	bf14      	ite	ne
 8002b9c:	2201      	movne	r2, #1
 8002b9e:	2200      	moveq	r2, #0
 8002ba0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d113      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d06e      	beq.n	8002cac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d069      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bd4:	4b53      	ldr	r3, [pc, #332]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002be0:	4b50      	ldr	r3, [pc, #320]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0ad      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bfc:	f7fe fcea 	bl	80015d4 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fce6 	bl	80015d4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e09a      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c16:	4b43      	ldr	r3, [pc, #268]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c22:	4b40      	ldr	r3, [pc, #256]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	4b40      	ldr	r3, [pc, #256]	@ (8002d28 <HAL_RCC_OscConfig+0x784>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c32:	3a01      	subs	r2, #1
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	4311      	orrs	r1, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c3c:	0212      	lsls	r2, r2, #8
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c44:	0852      	lsrs	r2, r2, #1
 8002c46:	3a01      	subs	r2, #1
 8002c48:	0552      	lsls	r2, r2, #21
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c50:	0852      	lsrs	r2, r2, #1
 8002c52:	3a01      	subs	r2, #1
 8002c54:	0652      	lsls	r2, r2, #25
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c5c:	0912      	lsrs	r2, r2, #4
 8002c5e:	0452      	lsls	r2, r2, #17
 8002c60:	430a      	orrs	r2, r1
 8002c62:	4930      	ldr	r1, [pc, #192]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c68:	4b2e      	ldr	r3, [pc, #184]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c74:	4b2b      	ldr	r3, [pc, #172]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c80:	f7fe fca8 	bl	80015d4 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fca4 	bl	80015d4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e058      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9a:	4b22      	ldr	r3, [pc, #136]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ca6:	e050      	b.n	8002d4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e04f      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d148      	bne.n	8002d4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc4:	4b17      	ldr	r3, [pc, #92]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a16      	ldr	r2, [pc, #88]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd0:	f7fe fc80 	bl	80015d4 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe fc7c 	bl	80015d4 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e030      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x734>
 8002cf6:	e028      	b.n	8002d4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d023      	beq.n	8002d46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <HAL_RCC_OscConfig+0x780>)
 8002d04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe fc63 	bl	80015d4 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d10:	e00c      	b.n	8002d2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d12:	f7fe fc5f 	bl	80015d4 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d905      	bls.n	8002d2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e013      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_RCC_OscConfig+0x7b0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ec      	bne.n	8002d12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_OscConfig+0x7b0>)
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4905      	ldr	r1, [pc, #20]	@ (8002d54 <HAL_RCC_OscConfig+0x7b0>)
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_RCC_OscConfig+0x7b4>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	60cb      	str	r3, [r1, #12]
 8002d44:	e001      	b.n	8002d4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	feeefffc 	.word	0xfeeefffc

08002d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0e7      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b75      	ldr	r3, [pc, #468]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d910      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b72      	ldr	r3, [pc, #456]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	4970      	ldr	r1, [pc, #448]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0cf      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	4b66      	ldr	r3, [pc, #408]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d908      	bls.n	8002dce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dbc:	4b63      	ldr	r3, [pc, #396]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4960      	ldr	r1, [pc, #384]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d04c      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d121      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0a6      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfa:	4b54      	ldr	r3, [pc, #336]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d115      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e09a      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d107      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e12:	4b4e      	ldr	r3, [pc, #312]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e08e      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e22:	4b4a      	ldr	r3, [pc, #296]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e086      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e32:	4b46      	ldr	r3, [pc, #280]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f023 0203 	bic.w	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	4943      	ldr	r1, [pc, #268]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e44:	f7fe fbc6 	bl	80015d4 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fe fbc2 	bl	80015d4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e06e      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	4b3a      	ldr	r3, [pc, #232]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 020c 	and.w	r2, r3, #12
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d1eb      	bne.n	8002e4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	4b31      	ldr	r3, [pc, #196]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d208      	bcs.n	8002ea2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e90:	4b2e      	ldr	r3, [pc, #184]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	492b      	ldr	r1, [pc, #172]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea2:	4b29      	ldr	r3, [pc, #164]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d210      	bcs.n	8002ed2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb0:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 0207 	bic.w	r2, r3, #7
 8002eb8:	4923      	ldr	r1, [pc, #140]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec0:	4b21      	ldr	r3, [pc, #132]	@ (8002f48 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e036      	b.n	8002f40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ede:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4918      	ldr	r1, [pc, #96]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efc:	4b13      	ldr	r3, [pc, #76]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4910      	ldr	r1, [pc, #64]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f10:	f000 f824 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <HAL_RCC_ClockConfig+0x1f0>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	490b      	ldr	r1, [pc, #44]	@ (8002f50 <HAL_RCC_ClockConfig+0x1f4>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	4a09      	ldr	r2, [pc, #36]	@ (8002f54 <HAL_RCC_ClockConfig+0x1f8>)
 8002f2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f30:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <HAL_RCC_ClockConfig+0x1fc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fafd 	bl	8001534 <HAL_InitTick>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	08008da4 	.word	0x08008da4
 8002f54:	20000000 	.word	0x20000000
 8002f58:	20000004 	.word	0x20000004

08002f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	@ 0x24
 8002f60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f74:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x34>
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d121      	bne.n	8002fce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d11e      	bne.n	8002fce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f90:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f9c:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e005      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fac:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d102      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fd4:	4b25      	ldr	r3, [pc, #148]	@ (800306c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	e004      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fe0:	4b23      	ldr	r3, [pc, #140]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fe2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b0c      	cmp	r3, #12
 8002fe8:	d134      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fea:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d003      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0xa6>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d003      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0xac>
 8003000:	e005      	b.n	800300e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003002:	4b1a      	ldr	r3, [pc, #104]	@ (800306c <HAL_RCC_GetSysClockFreq+0x110>)
 8003004:	617b      	str	r3, [r7, #20]
      break;
 8003006:	e005      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x114>)
 800300a:	617b      	str	r3, [r7, #20]
      break;
 800300c:	e002      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	617b      	str	r3, [r7, #20]
      break;
 8003012:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003014:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	3301      	adds	r3, #1
 8003020:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003022:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	fb03 f202 	mul.w	r2, r3, r2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800303a:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x108>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	0e5b      	lsrs	r3, r3, #25
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	3301      	adds	r3, #1
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003054:	69bb      	ldr	r3, [r7, #24]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	@ 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	08008dbc 	.word	0x08008dbc
 800306c:	00f42400 	.word	0x00f42400
 8003070:	007a1200 	.word	0x007a1200

08003074 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003078:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <HAL_RCC_GetHCLKFreq+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000000 	.word	0x20000000

0800308c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003090:	f7ff fff0 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4904      	ldr	r1, [pc, #16]	@ (80030b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	08008db4 	.word	0x08008db4

080030b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030bc:	f7ff ffda 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0adb      	lsrs	r3, r3, #11
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4904      	ldr	r1, [pc, #16]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08008db4 	.word	0x08008db4

080030e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030f0:	4b2a      	ldr	r3, [pc, #168]	@ (800319c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030fc:	f7ff f922 	bl	8002344 <HAL_PWREx_GetVoltageRange>
 8003100:	6178      	str	r0, [r7, #20]
 8003102:	e014      	b.n	800312e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003104:	4b25      	ldr	r3, [pc, #148]	@ (800319c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003108:	4a24      	ldr	r2, [pc, #144]	@ (800319c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003110:	4b22      	ldr	r3, [pc, #136]	@ (800319c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800311c:	f7ff f912 	bl	8002344 <HAL_PWREx_GetVoltageRange>
 8003120:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	4b1e      	ldr	r3, [pc, #120]	@ (800319c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	4a1d      	ldr	r2, [pc, #116]	@ (800319c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800312c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003134:	d10b      	bne.n	800314e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b80      	cmp	r3, #128	@ 0x80
 800313a:	d919      	bls.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003140:	d902      	bls.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003142:	2302      	movs	r3, #2
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	e013      	b.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003148:	2301      	movs	r3, #1
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	e010      	b.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b80      	cmp	r3, #128	@ 0x80
 8003152:	d902      	bls.n	800315a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003154:	2303      	movs	r3, #3
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	e00a      	b.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b80      	cmp	r3, #128	@ 0x80
 800315e:	d102      	bne.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003160:	2302      	movs	r3, #2
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e004      	b.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b70      	cmp	r3, #112	@ 0x70
 800316a:	d101      	bne.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800316c:	2301      	movs	r3, #1
 800316e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 0207 	bic.w	r2, r3, #7
 8003178:	4909      	ldr	r1, [pc, #36]	@ (80031a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003180:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	429a      	cmp	r2, r3
 800318c:	d001      	beq.n	8003192 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	40022000 	.word	0x40022000

080031a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031ac:	2300      	movs	r3, #0
 80031ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031b0:	2300      	movs	r3, #0
 80031b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d041      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031c8:	d02a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031ce:	d824      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031d4:	d008      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031da:	d81e      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031e4:	d010      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031e6:	e018      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031e8:	4b86      	ldr	r3, [pc, #536]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4a85      	ldr	r2, [pc, #532]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031f4:	e015      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 facb 	bl	8003798 <RCCEx_PLLSAI1_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003206:	e00c      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3320      	adds	r3, #32
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fbb6 	bl	8003980 <RCCEx_PLLSAI2_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003218:	e003      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	74fb      	strb	r3, [r7, #19]
      break;
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003222:	7cfb      	ldrb	r3, [r7, #19]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003228:	4b76      	ldr	r3, [pc, #472]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003236:	4973      	ldr	r1, [pc, #460]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800323e:	e001      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d041      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003254:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003258:	d02a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800325a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800325e:	d824      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003260:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003264:	d008      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800326a:	d81e      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003274:	d010      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003276:	e018      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003278:	4b62      	ldr	r3, [pc, #392]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a61      	ldr	r2, [pc, #388]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003282:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003284:	e015      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	2100      	movs	r1, #0
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fa83 	bl	8003798 <RCCEx_PLLSAI1_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003296:	e00c      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3320      	adds	r3, #32
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fb6e 	bl	8003980 <RCCEx_PLLSAI2_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a8:	e003      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	74fb      	strb	r3, [r7, #19]
      break;
 80032ae:	e000      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032b8:	4b52      	ldr	r3, [pc, #328]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032c6:	494f      	ldr	r1, [pc, #316]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032ce:	e001      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80a0 	beq.w	8003422 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e2:	2300      	movs	r3, #0
 80032e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032e6:	4b47      	ldr	r3, [pc, #284]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fc:	4b41      	ldr	r3, [pc, #260]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	4a40      	ldr	r2, [pc, #256]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003306:	6593      	str	r3, [r2, #88]	@ 0x58
 8003308:	4b3e      	ldr	r3, [pc, #248]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003314:	2301      	movs	r3, #1
 8003316:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003318:	4b3b      	ldr	r3, [pc, #236]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3a      	ldr	r2, [pc, #232]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800331e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003322:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003324:	f7fe f956 	bl	80015d4 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800332a:	e009      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332c:	f7fe f952 	bl	80015d4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d902      	bls.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	74fb      	strb	r3, [r7, #19]
        break;
 800333e:	e005      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003340:	4b31      	ldr	r3, [pc, #196]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ef      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d15c      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003352:	4b2c      	ldr	r3, [pc, #176]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800335c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01f      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	d019      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003370:	4b24      	ldr	r3, [pc, #144]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800337a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800337c:	4b21      	ldr	r3, [pc, #132]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003382:	4a20      	ldr	r2, [pc, #128]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800338c:	4b1d      	ldr	r3, [pc, #116]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	4a1c      	ldr	r2, [pc, #112]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800339c:	4a19      	ldr	r2, [pc, #100]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ae:	f7fe f911 	bl	80015d4 <HAL_GetTick>
 80033b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b4:	e00b      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b6:	f7fe f90d 	bl	80015d4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d902      	bls.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	74fb      	strb	r3, [r7, #19]
            break;
 80033cc:	e006      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ec      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10c      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e2:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033f2:	4904      	ldr	r1, [pc, #16]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033fa:	e009      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	74bb      	strb	r3, [r7, #18]
 8003400:	e006      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003410:	7c7b      	ldrb	r3, [r7, #17]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003416:	4b9e      	ldr	r3, [pc, #632]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341a:	4a9d      	ldr	r2, [pc, #628]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003420:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800342e:	4b98      	ldr	r3, [pc, #608]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003434:	f023 0203 	bic.w	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	4994      	ldr	r1, [pc, #592]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003450:	4b8f      	ldr	r3, [pc, #572]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003456:	f023 020c 	bic.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345e:	498c      	ldr	r1, [pc, #560]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003472:	4b87      	ldr	r3, [pc, #540]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003478:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	4983      	ldr	r1, [pc, #524]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003494:	4b7e      	ldr	r3, [pc, #504]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	497b      	ldr	r1, [pc, #492]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034b6:	4b76      	ldr	r3, [pc, #472]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c4:	4972      	ldr	r1, [pc, #456]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034d8:	4b6d      	ldr	r3, [pc, #436]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e6:	496a      	ldr	r1, [pc, #424]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034fa:	4b65      	ldr	r3, [pc, #404]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003500:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	4961      	ldr	r1, [pc, #388]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800351c:	4b5c      	ldr	r3, [pc, #368]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352a:	4959      	ldr	r1, [pc, #356]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800353e:	4b54      	ldr	r3, [pc, #336]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003544:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354c:	4950      	ldr	r1, [pc, #320]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003560:	4b4b      	ldr	r3, [pc, #300]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003566:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356e:	4948      	ldr	r1, [pc, #288]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003582:	4b43      	ldr	r3, [pc, #268]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003588:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003590:	493f      	ldr	r1, [pc, #252]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d028      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035b2:	4937      	ldr	r1, [pc, #220]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035c2:	d106      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c4:	4b32      	ldr	r3, [pc, #200]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a31      	ldr	r2, [pc, #196]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ce:	60d3      	str	r3, [r2, #12]
 80035d0:	e011      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035da:	d10c      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	2101      	movs	r1, #1
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f8d8 	bl	8003798 <RCCEx_PLLSAI1_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d028      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003602:	4b23      	ldr	r3, [pc, #140]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003608:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	491f      	ldr	r1, [pc, #124]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003620:	d106      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003622:	4b1b      	ldr	r3, [pc, #108]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4a1a      	ldr	r2, [pc, #104]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800362c:	60d3      	str	r3, [r2, #12]
 800362e:	e011      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003634:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003638:	d10c      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f8a9 	bl	8003798 <RCCEx_PLLSAI1_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d02b      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003666:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800366e:	4908      	ldr	r1, [pc, #32]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800367e:	d109      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003680:	4b03      	ldr	r3, [pc, #12]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a02      	ldr	r2, [pc, #8]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800368a:	60d3      	str	r3, [r2, #12]
 800368c:	e014      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f877 	bl	8003798 <RCCEx_PLLSAI1_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d02f      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036d2:	4928      	ldr	r1, [pc, #160]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036e2:	d10d      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f854 	bl	8003798 <RCCEx_PLLSAI1_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d014      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	74bb      	strb	r3, [r7, #18]
 80036fe:	e011      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003704:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003708:	d10c      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3320      	adds	r3, #32
 800370e:	2102      	movs	r1, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f935 	bl	8003980 <RCCEx_PLLSAI2_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003730:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800373e:	490d      	ldr	r1, [pc, #52]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003752:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003762:	4904      	ldr	r1, [pc, #16]	@ (8003774 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800376a:	7cbb      	ldrb	r3, [r7, #18]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000

08003778 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800377c:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a04      	ldr	r2, [pc, #16]	@ (8003794 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	6013      	str	r3, [r2, #0]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000

08003798 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037a6:	4b75      	ldr	r3, [pc, #468]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d018      	beq.n	80037e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037b2:	4b72      	ldr	r3, [pc, #456]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0203 	and.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d10d      	bne.n	80037de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
       ||
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037ca:	4b6c      	ldr	r3, [pc, #432]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
       ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d047      	beq.n	800386e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
 80037e2:	e044      	b.n	800386e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d018      	beq.n	800381e <RCCEx_PLLSAI1_Config+0x86>
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d825      	bhi.n	800383c <RCCEx_PLLSAI1_Config+0xa4>
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d002      	beq.n	80037fa <RCCEx_PLLSAI1_Config+0x62>
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d009      	beq.n	800380c <RCCEx_PLLSAI1_Config+0x74>
 80037f8:	e020      	b.n	800383c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037fa:	4b60      	ldr	r3, [pc, #384]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11d      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380a:	e01a      	b.n	8003842 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800380c:	4b5b      	ldr	r3, [pc, #364]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003814:	2b00      	cmp	r3, #0
 8003816:	d116      	bne.n	8003846 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381c:	e013      	b.n	8003846 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800381e:	4b57      	ldr	r3, [pc, #348]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800382a:	4b54      	ldr	r3, [pc, #336]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800383a:	e006      	b.n	800384a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      break;
 8003840:	e004      	b.n	800384c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800384a:	bf00      	nop
    }

    if(status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10d      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003852:	4b4a      	ldr	r3, [pc, #296]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	430b      	orrs	r3, r1
 8003868:	4944      	ldr	r1, [pc, #272]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d17d      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003874:	4b41      	ldr	r3, [pc, #260]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a40      	ldr	r2, [pc, #256]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800387a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800387e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003880:	f7fd fea8 	bl	80015d4 <HAL_GetTick>
 8003884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003886:	e009      	b.n	800389c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003888:	f7fd fea4 	bl	80015d4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d902      	bls.n	800389c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	73fb      	strb	r3, [r7, #15]
        break;
 800389a:	e005      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800389c:	4b37      	ldr	r3, [pc, #220]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ef      	bne.n	8003888 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d160      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b4:	4b31      	ldr	r3, [pc, #196]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6892      	ldr	r2, [r2, #8]
 80038c4:	0211      	lsls	r1, r2, #8
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68d2      	ldr	r2, [r2, #12]
 80038ca:	0912      	lsrs	r2, r2, #4
 80038cc:	0452      	lsls	r2, r2, #17
 80038ce:	430a      	orrs	r2, r1
 80038d0:	492a      	ldr	r1, [pc, #168]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	610b      	str	r3, [r1, #16]
 80038d6:	e027      	b.n	8003928 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d112      	bne.n	8003904 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038de:	4b27      	ldr	r3, [pc, #156]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80038e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6892      	ldr	r2, [r2, #8]
 80038ee:	0211      	lsls	r1, r2, #8
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6912      	ldr	r2, [r2, #16]
 80038f4:	0852      	lsrs	r2, r2, #1
 80038f6:	3a01      	subs	r2, #1
 80038f8:	0552      	lsls	r2, r2, #21
 80038fa:	430a      	orrs	r2, r1
 80038fc:	491f      	ldr	r1, [pc, #124]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	610b      	str	r3, [r1, #16]
 8003902:	e011      	b.n	8003928 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003904:	4b1d      	ldr	r3, [pc, #116]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800390c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6892      	ldr	r2, [r2, #8]
 8003914:	0211      	lsls	r1, r2, #8
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6952      	ldr	r2, [r2, #20]
 800391a:	0852      	lsrs	r2, r2, #1
 800391c:	3a01      	subs	r2, #1
 800391e:	0652      	lsls	r2, r2, #25
 8003920:	430a      	orrs	r2, r1
 8003922:	4916      	ldr	r1, [pc, #88]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a13      	ldr	r2, [pc, #76]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003932:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fe4e 	bl	80015d4 <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800393a:	e009      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800393c:	f7fd fe4a 	bl	80015d4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d902      	bls.n	8003950 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	73fb      	strb	r3, [r7, #15]
          break;
 800394e:	e005      	b.n	800395c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003950:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ef      	beq.n	800393c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003962:	4b06      	ldr	r3, [pc, #24]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	4904      	ldr	r1, [pc, #16]	@ (800397c <RCCEx_PLLSAI1_Config+0x1e4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000

08003980 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800398e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800399a:	4b67      	ldr	r3, [pc, #412]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d10d      	bne.n	80039c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
       ||
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039b2:	4b61      	ldr	r3, [pc, #388]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
       ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d047      	beq.n	8003a56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	e044      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d018      	beq.n	8003a06 <RCCEx_PLLSAI2_Config+0x86>
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d825      	bhi.n	8003a24 <RCCEx_PLLSAI2_Config+0xa4>
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d002      	beq.n	80039e2 <RCCEx_PLLSAI2_Config+0x62>
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d009      	beq.n	80039f4 <RCCEx_PLLSAI2_Config+0x74>
 80039e0:	e020      	b.n	8003a24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039e2:	4b55      	ldr	r3, [pc, #340]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11d      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f2:	e01a      	b.n	8003a2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039f4:	4b50      	ldr	r3, [pc, #320]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d116      	bne.n	8003a2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e013      	b.n	8003a2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a06:	4b4c      	ldr	r3, [pc, #304]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a12:	4b49      	ldr	r3, [pc, #292]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a22:	e006      	b.n	8003a32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      break;
 8003a28:	e004      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e002      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10d      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	4939      	ldr	r1, [pc, #228]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d167      	bne.n	8003b2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a5c:	4b36      	ldr	r3, [pc, #216]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a35      	ldr	r2, [pc, #212]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a68:	f7fd fdb4 	bl	80015d4 <HAL_GetTick>
 8003a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a6e:	e009      	b.n	8003a84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a70:	f7fd fdb0 	bl	80015d4 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d902      	bls.n	8003a84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	73fb      	strb	r3, [r7, #15]
        break;
 8003a82:	e005      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a84:	4b2c      	ldr	r3, [pc, #176]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ef      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d14a      	bne.n	8003b2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d111      	bne.n	8003ac0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a9c:	4b26      	ldr	r3, [pc, #152]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6892      	ldr	r2, [r2, #8]
 8003aac:	0211      	lsls	r1, r2, #8
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68d2      	ldr	r2, [r2, #12]
 8003ab2:	0912      	lsrs	r2, r2, #4
 8003ab4:	0452      	lsls	r2, r2, #17
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	491f      	ldr	r1, [pc, #124]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	614b      	str	r3, [r1, #20]
 8003abe:	e011      	b.n	8003ae4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ac8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6892      	ldr	r2, [r2, #8]
 8003ad0:	0211      	lsls	r1, r2, #8
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6912      	ldr	r2, [r2, #16]
 8003ad6:	0852      	lsrs	r2, r2, #1
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	0652      	lsls	r2, r2, #25
 8003adc:	430a      	orrs	r2, r1
 8003ade:	4916      	ldr	r1, [pc, #88]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ae4:	4b14      	ldr	r3, [pc, #80]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fd fd70 	bl	80015d4 <HAL_GetTick>
 8003af4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003af6:	e009      	b.n	8003b0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003af8:	f7fd fd6c 	bl	80015d4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d902      	bls.n	8003b0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	73fb      	strb	r3, [r7, #15]
          break;
 8003b0a:	e005      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ef      	beq.n	8003af8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4904      	ldr	r1, [pc, #16]	@ (8003b38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000

08003b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e095      	b.n	8003c7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b5e:	d009      	beq.n	8003b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
 8003b66:	e005      	b.n	8003b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fa76 	bl	8001080 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003baa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bb4:	d902      	bls.n	8003bbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e002      	b.n	8003bc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003bca:	d007      	beq.n	8003bdc <HAL_SPI_Init+0xa0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bd4:	d002      	beq.n	8003bdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	ea42 0103 	orr.w	r1, r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	f003 0204 	and.w	r2, r3, #4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c58:	ea42 0103 	orr.w	r1, r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e049      	b.n	8003d28 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7fd fa2d 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f000 f9d5 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d001      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e04f      	b.n	8003de8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a23      	ldr	r2, [pc, #140]	@ (8003df4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01d      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x76>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d72:	d018      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x76>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1f      	ldr	r2, [pc, #124]	@ (8003df8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x76>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1e      	ldr	r2, [pc, #120]	@ (8003dfc <HAL_TIM_Base_Start_IT+0xcc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x76>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x76>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1b      	ldr	r2, [pc, #108]	@ (8003e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIM_Base_Start_IT+0x76>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a19      	ldr	r2, [pc, #100]	@ (8003e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d115      	bne.n	8003dd2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	4b17      	ldr	r3, [pc, #92]	@ (8003e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b06      	cmp	r3, #6
 8003db6:	d015      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0xb4>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dbe:	d011      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	e008      	b.n	8003de4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e000      	b.n	8003de6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	40013400 	.word	0x40013400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	00010007 	.word	0x00010007

08003e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d020      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01b      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0202 	mvn.w	r2, #2
 8003e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8e9 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f8db 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f8ec 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d020      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01b      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0204 	mvn.w	r2, #4
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8c3 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8b5 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8c6 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d020      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01b      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0208 	mvn.w	r2, #8
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f89d 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f88f 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f8a0 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d020      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01b      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0210 	mvn.w	r2, #16
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f877 	bl	8004032 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f869 	bl	800401e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f87a 	bl	8004046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0201 	mvn.w	r2, #1
 8003f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fc fab6 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00c      	beq.n	8003faa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f99b 	bl	80042e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00c      	beq.n	8003fce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f993 	bl	80042f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f834 	bl	800405a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00c      	beq.n	8004016 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f06f 0220 	mvn.w	r2, #32
 800400e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f95b 	bl	80042cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a46      	ldr	r2, [pc, #280]	@ (800419c <TIM_Base_SetConfig+0x12c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408e:	d00f      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a43      	ldr	r2, [pc, #268]	@ (80041a0 <TIM_Base_SetConfig+0x130>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a42      	ldr	r2, [pc, #264]	@ (80041a4 <TIM_Base_SetConfig+0x134>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a41      	ldr	r2, [pc, #260]	@ (80041a8 <TIM_Base_SetConfig+0x138>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a40      	ldr	r2, [pc, #256]	@ (80041ac <TIM_Base_SetConfig+0x13c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d108      	bne.n	80040c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a35      	ldr	r2, [pc, #212]	@ (800419c <TIM_Base_SetConfig+0x12c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01f      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d0:	d01b      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a32      	ldr	r2, [pc, #200]	@ (80041a0 <TIM_Base_SetConfig+0x130>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d017      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a31      	ldr	r2, [pc, #196]	@ (80041a4 <TIM_Base_SetConfig+0x134>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a30      	ldr	r2, [pc, #192]	@ (80041a8 <TIM_Base_SetConfig+0x138>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00f      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2f      	ldr	r2, [pc, #188]	@ (80041ac <TIM_Base_SetConfig+0x13c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00b      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2e      	ldr	r2, [pc, #184]	@ (80041b0 <TIM_Base_SetConfig+0x140>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2d      	ldr	r2, [pc, #180]	@ (80041b4 <TIM_Base_SetConfig+0x144>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d003      	beq.n	800410a <TIM_Base_SetConfig+0x9a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2c      	ldr	r2, [pc, #176]	@ (80041b8 <TIM_Base_SetConfig+0x148>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d108      	bne.n	800411c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a16      	ldr	r2, [pc, #88]	@ (800419c <TIM_Base_SetConfig+0x12c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00f      	beq.n	8004168 <TIM_Base_SetConfig+0xf8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <TIM_Base_SetConfig+0x13c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00b      	beq.n	8004168 <TIM_Base_SetConfig+0xf8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a17      	ldr	r2, [pc, #92]	@ (80041b0 <TIM_Base_SetConfig+0x140>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d007      	beq.n	8004168 <TIM_Base_SetConfig+0xf8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a16      	ldr	r2, [pc, #88]	@ (80041b4 <TIM_Base_SetConfig+0x144>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_Base_SetConfig+0xf8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a15      	ldr	r2, [pc, #84]	@ (80041b8 <TIM_Base_SetConfig+0x148>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d103      	bne.n	8004170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f023 0201 	bic.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	611a      	str	r2, [r3, #16]
  }
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800

080041bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e068      	b.n	80042a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2e      	ldr	r2, [pc, #184]	@ (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2d      	ldr	r2, [pc, #180]	@ (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d108      	bne.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800420e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004220:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1e      	ldr	r2, [pc, #120]	@ (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01d      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004246:	d018      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1b      	ldr	r2, [pc, #108]	@ (80042bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1a      	ldr	r2, [pc, #104]	@ (80042c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00e      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a18      	ldr	r2, [pc, #96]	@ (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a13      	ldr	r2, [pc, #76]	@ (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d004      	beq.n	800427a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a14      	ldr	r2, [pc, #80]	@ (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d10c      	bne.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4313      	orrs	r3, r2
 800428a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40013400 	.word	0x40013400
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40000c00 	.word	0x40000c00
 80042c8:	40014000 	.word	0x40014000

080042cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e040      	b.n	800439c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc ff12 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2224      	movs	r2, #36	@ 0x24
 8004334:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fae0 	bl	8004914 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f825 	bl	80043a4 <UART_SetConfig>
 800435a:	4603      	mov	r3, r0
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e01b      	b.n	800439c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fb5f 	bl	8004a58 <UART_CheckIdleState>
 800439a:	4603      	mov	r3, r0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a8:	b08a      	sub	sp, #40	@ 0x28
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	431a      	orrs	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4ba4      	ldr	r3, [pc, #656]	@ (8004664 <UART_SetConfig+0x2c0>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043dc:	430b      	orrs	r3, r1
 80043de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a99      	ldr	r2, [pc, #612]	@ (8004668 <UART_SetConfig+0x2c4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440c:	4313      	orrs	r3, r2
 800440e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a90      	ldr	r2, [pc, #576]	@ (800466c <UART_SetConfig+0x2c8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d126      	bne.n	800447c <UART_SetConfig+0xd8>
 800442e:	4b90      	ldr	r3, [pc, #576]	@ (8004670 <UART_SetConfig+0x2cc>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	2b03      	cmp	r3, #3
 800443a:	d81b      	bhi.n	8004474 <UART_SetConfig+0xd0>
 800443c:	a201      	add	r2, pc, #4	@ (adr r2, 8004444 <UART_SetConfig+0xa0>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004455 	.word	0x08004455
 8004448:	08004465 	.word	0x08004465
 800444c:	0800445d 	.word	0x0800445d
 8004450:	0800446d 	.word	0x0800446d
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445a:	e116      	b.n	800468a <UART_SetConfig+0x2e6>
 800445c:	2302      	movs	r3, #2
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004462:	e112      	b.n	800468a <UART_SetConfig+0x2e6>
 8004464:	2304      	movs	r3, #4
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446a:	e10e      	b.n	800468a <UART_SetConfig+0x2e6>
 800446c:	2308      	movs	r3, #8
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004472:	e10a      	b.n	800468a <UART_SetConfig+0x2e6>
 8004474:	2310      	movs	r3, #16
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447a:	e106      	b.n	800468a <UART_SetConfig+0x2e6>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7c      	ldr	r2, [pc, #496]	@ (8004674 <UART_SetConfig+0x2d0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d138      	bne.n	80044f8 <UART_SetConfig+0x154>
 8004486:	4b7a      	ldr	r3, [pc, #488]	@ (8004670 <UART_SetConfig+0x2cc>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d82d      	bhi.n	80044f0 <UART_SetConfig+0x14c>
 8004494:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <UART_SetConfig+0xf8>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044d1 	.word	0x080044d1
 80044a0:	080044f1 	.word	0x080044f1
 80044a4:	080044f1 	.word	0x080044f1
 80044a8:	080044f1 	.word	0x080044f1
 80044ac:	080044e1 	.word	0x080044e1
 80044b0:	080044f1 	.word	0x080044f1
 80044b4:	080044f1 	.word	0x080044f1
 80044b8:	080044f1 	.word	0x080044f1
 80044bc:	080044d9 	.word	0x080044d9
 80044c0:	080044f1 	.word	0x080044f1
 80044c4:	080044f1 	.word	0x080044f1
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044e9 	.word	0x080044e9
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d6:	e0d8      	b.n	800468a <UART_SetConfig+0x2e6>
 80044d8:	2302      	movs	r3, #2
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044de:	e0d4      	b.n	800468a <UART_SetConfig+0x2e6>
 80044e0:	2304      	movs	r3, #4
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e6:	e0d0      	b.n	800468a <UART_SetConfig+0x2e6>
 80044e8:	2308      	movs	r3, #8
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ee:	e0cc      	b.n	800468a <UART_SetConfig+0x2e6>
 80044f0:	2310      	movs	r3, #16
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f6:	e0c8      	b.n	800468a <UART_SetConfig+0x2e6>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004678 <UART_SetConfig+0x2d4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d125      	bne.n	800454e <UART_SetConfig+0x1aa>
 8004502:	4b5b      	ldr	r3, [pc, #364]	@ (8004670 <UART_SetConfig+0x2cc>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004508:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800450c:	2b30      	cmp	r3, #48	@ 0x30
 800450e:	d016      	beq.n	800453e <UART_SetConfig+0x19a>
 8004510:	2b30      	cmp	r3, #48	@ 0x30
 8004512:	d818      	bhi.n	8004546 <UART_SetConfig+0x1a2>
 8004514:	2b20      	cmp	r3, #32
 8004516:	d00a      	beq.n	800452e <UART_SetConfig+0x18a>
 8004518:	2b20      	cmp	r3, #32
 800451a:	d814      	bhi.n	8004546 <UART_SetConfig+0x1a2>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <UART_SetConfig+0x182>
 8004520:	2b10      	cmp	r3, #16
 8004522:	d008      	beq.n	8004536 <UART_SetConfig+0x192>
 8004524:	e00f      	b.n	8004546 <UART_SetConfig+0x1a2>
 8004526:	2300      	movs	r3, #0
 8004528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452c:	e0ad      	b.n	800468a <UART_SetConfig+0x2e6>
 800452e:	2302      	movs	r3, #2
 8004530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004534:	e0a9      	b.n	800468a <UART_SetConfig+0x2e6>
 8004536:	2304      	movs	r3, #4
 8004538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453c:	e0a5      	b.n	800468a <UART_SetConfig+0x2e6>
 800453e:	2308      	movs	r3, #8
 8004540:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004544:	e0a1      	b.n	800468a <UART_SetConfig+0x2e6>
 8004546:	2310      	movs	r3, #16
 8004548:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454c:	e09d      	b.n	800468a <UART_SetConfig+0x2e6>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a4a      	ldr	r2, [pc, #296]	@ (800467c <UART_SetConfig+0x2d8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d125      	bne.n	80045a4 <UART_SetConfig+0x200>
 8004558:	4b45      	ldr	r3, [pc, #276]	@ (8004670 <UART_SetConfig+0x2cc>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004562:	2bc0      	cmp	r3, #192	@ 0xc0
 8004564:	d016      	beq.n	8004594 <UART_SetConfig+0x1f0>
 8004566:	2bc0      	cmp	r3, #192	@ 0xc0
 8004568:	d818      	bhi.n	800459c <UART_SetConfig+0x1f8>
 800456a:	2b80      	cmp	r3, #128	@ 0x80
 800456c:	d00a      	beq.n	8004584 <UART_SetConfig+0x1e0>
 800456e:	2b80      	cmp	r3, #128	@ 0x80
 8004570:	d814      	bhi.n	800459c <UART_SetConfig+0x1f8>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <UART_SetConfig+0x1d8>
 8004576:	2b40      	cmp	r3, #64	@ 0x40
 8004578:	d008      	beq.n	800458c <UART_SetConfig+0x1e8>
 800457a:	e00f      	b.n	800459c <UART_SetConfig+0x1f8>
 800457c:	2300      	movs	r3, #0
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004582:	e082      	b.n	800468a <UART_SetConfig+0x2e6>
 8004584:	2302      	movs	r3, #2
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800458a:	e07e      	b.n	800468a <UART_SetConfig+0x2e6>
 800458c:	2304      	movs	r3, #4
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004592:	e07a      	b.n	800468a <UART_SetConfig+0x2e6>
 8004594:	2308      	movs	r3, #8
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459a:	e076      	b.n	800468a <UART_SetConfig+0x2e6>
 800459c:	2310      	movs	r3, #16
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a2:	e072      	b.n	800468a <UART_SetConfig+0x2e6>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a35      	ldr	r2, [pc, #212]	@ (8004680 <UART_SetConfig+0x2dc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d12a      	bne.n	8004604 <UART_SetConfig+0x260>
 80045ae:	4b30      	ldr	r3, [pc, #192]	@ (8004670 <UART_SetConfig+0x2cc>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045bc:	d01a      	beq.n	80045f4 <UART_SetConfig+0x250>
 80045be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c2:	d81b      	bhi.n	80045fc <UART_SetConfig+0x258>
 80045c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c8:	d00c      	beq.n	80045e4 <UART_SetConfig+0x240>
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ce:	d815      	bhi.n	80045fc <UART_SetConfig+0x258>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <UART_SetConfig+0x238>
 80045d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d8:	d008      	beq.n	80045ec <UART_SetConfig+0x248>
 80045da:	e00f      	b.n	80045fc <UART_SetConfig+0x258>
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e2:	e052      	b.n	800468a <UART_SetConfig+0x2e6>
 80045e4:	2302      	movs	r3, #2
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ea:	e04e      	b.n	800468a <UART_SetConfig+0x2e6>
 80045ec:	2304      	movs	r3, #4
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f2:	e04a      	b.n	800468a <UART_SetConfig+0x2e6>
 80045f4:	2308      	movs	r3, #8
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fa:	e046      	b.n	800468a <UART_SetConfig+0x2e6>
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004602:	e042      	b.n	800468a <UART_SetConfig+0x2e6>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a17      	ldr	r2, [pc, #92]	@ (8004668 <UART_SetConfig+0x2c4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d13a      	bne.n	8004684 <UART_SetConfig+0x2e0>
 800460e:	4b18      	ldr	r3, [pc, #96]	@ (8004670 <UART_SetConfig+0x2cc>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004614:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004618:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800461c:	d01a      	beq.n	8004654 <UART_SetConfig+0x2b0>
 800461e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004622:	d81b      	bhi.n	800465c <UART_SetConfig+0x2b8>
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004628:	d00c      	beq.n	8004644 <UART_SetConfig+0x2a0>
 800462a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462e:	d815      	bhi.n	800465c <UART_SetConfig+0x2b8>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <UART_SetConfig+0x298>
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004638:	d008      	beq.n	800464c <UART_SetConfig+0x2a8>
 800463a:	e00f      	b.n	800465c <UART_SetConfig+0x2b8>
 800463c:	2300      	movs	r3, #0
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004642:	e022      	b.n	800468a <UART_SetConfig+0x2e6>
 8004644:	2302      	movs	r3, #2
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464a:	e01e      	b.n	800468a <UART_SetConfig+0x2e6>
 800464c:	2304      	movs	r3, #4
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004652:	e01a      	b.n	800468a <UART_SetConfig+0x2e6>
 8004654:	2308      	movs	r3, #8
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465a:	e016      	b.n	800468a <UART_SetConfig+0x2e6>
 800465c:	2310      	movs	r3, #16
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004662:	e012      	b.n	800468a <UART_SetConfig+0x2e6>
 8004664:	efff69f3 	.word	0xefff69f3
 8004668:	40008000 	.word	0x40008000
 800466c:	40013800 	.word	0x40013800
 8004670:	40021000 	.word	0x40021000
 8004674:	40004400 	.word	0x40004400
 8004678:	40004800 	.word	0x40004800
 800467c:	40004c00 	.word	0x40004c00
 8004680:	40005000 	.word	0x40005000
 8004684:	2310      	movs	r3, #16
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a9f      	ldr	r2, [pc, #636]	@ (800490c <UART_SetConfig+0x568>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d17a      	bne.n	800478a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004694:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004698:	2b08      	cmp	r3, #8
 800469a:	d824      	bhi.n	80046e6 <UART_SetConfig+0x342>
 800469c:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <UART_SetConfig+0x300>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	080046e7 	.word	0x080046e7
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046e7 	.word	0x080046e7
 80046b4:	080046d7 	.word	0x080046d7
 80046b8:	080046e7 	.word	0x080046e7
 80046bc:	080046e7 	.word	0x080046e7
 80046c0:	080046e7 	.word	0x080046e7
 80046c4:	080046df 	.word	0x080046df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c8:	f7fe fce0 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80046cc:	61f8      	str	r0, [r7, #28]
        break;
 80046ce:	e010      	b.n	80046f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004910 <UART_SetConfig+0x56c>)
 80046d2:	61fb      	str	r3, [r7, #28]
        break;
 80046d4:	e00d      	b.n	80046f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d6:	f7fe fc41 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 80046da:	61f8      	str	r0, [r7, #28]
        break;
 80046dc:	e009      	b.n	80046f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e2:	61fb      	str	r3, [r7, #28]
        break;
 80046e4:	e005      	b.n	80046f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80fb 	beq.w	80048f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	429a      	cmp	r2, r3
 8004708:	d305      	bcc.n	8004716 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	429a      	cmp	r2, r3
 8004714:	d903      	bls.n	800471e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800471c:	e0e8      	b.n	80048f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2200      	movs	r2, #0
 8004722:	461c      	mov	r4, r3
 8004724:	4615      	mov	r5, r2
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	022b      	lsls	r3, r5, #8
 8004730:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004734:	0222      	lsls	r2, r4, #8
 8004736:	68f9      	ldr	r1, [r7, #12]
 8004738:	6849      	ldr	r1, [r1, #4]
 800473a:	0849      	lsrs	r1, r1, #1
 800473c:	2000      	movs	r0, #0
 800473e:	4688      	mov	r8, r1
 8004740:	4681      	mov	r9, r0
 8004742:	eb12 0a08 	adds.w	sl, r2, r8
 8004746:	eb43 0b09 	adc.w	fp, r3, r9
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004758:	4650      	mov	r0, sl
 800475a:	4659      	mov	r1, fp
 800475c:	f7fb fd38 	bl	80001d0 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4613      	mov	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800476e:	d308      	bcc.n	8004782 <UART_SetConfig+0x3de>
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004776:	d204      	bcs.n	8004782 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	60da      	str	r2, [r3, #12]
 8004780:	e0b6      	b.n	80048f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004788:	e0b2      	b.n	80048f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004792:	d15e      	bne.n	8004852 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004794:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004798:	2b08      	cmp	r3, #8
 800479a:	d828      	bhi.n	80047ee <UART_SetConfig+0x44a>
 800479c:	a201      	add	r2, pc, #4	@ (adr r2, 80047a4 <UART_SetConfig+0x400>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047d9 	.word	0x080047d9
 80047b0:	080047ef 	.word	0x080047ef
 80047b4:	080047df 	.word	0x080047df
 80047b8:	080047ef 	.word	0x080047ef
 80047bc:	080047ef 	.word	0x080047ef
 80047c0:	080047ef 	.word	0x080047ef
 80047c4:	080047e7 	.word	0x080047e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c8:	f7fe fc60 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80047cc:	61f8      	str	r0, [r7, #28]
        break;
 80047ce:	e014      	b.n	80047fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d0:	f7fe fc72 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 80047d4:	61f8      	str	r0, [r7, #28]
        break;
 80047d6:	e010      	b.n	80047fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004910 <UART_SetConfig+0x56c>)
 80047da:	61fb      	str	r3, [r7, #28]
        break;
 80047dc:	e00d      	b.n	80047fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047de:	f7fe fbbd 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 80047e2:	61f8      	str	r0, [r7, #28]
        break;
 80047e4:	e009      	b.n	80047fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ea:	61fb      	str	r3, [r7, #28]
        break;
 80047ec:	e005      	b.n	80047fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d077      	beq.n	80048f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005a      	lsls	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	441a      	add	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b0f      	cmp	r3, #15
 800481a:	d916      	bls.n	800484a <UART_SetConfig+0x4a6>
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004822:	d212      	bcs.n	800484a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f023 030f 	bic.w	r3, r3, #15
 800482c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	b29b      	uxth	r3, r3
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	b29a      	uxth	r2, r3
 800483a:	8afb      	ldrh	r3, [r7, #22]
 800483c:	4313      	orrs	r3, r2
 800483e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	8afa      	ldrh	r2, [r7, #22]
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	e052      	b.n	80048f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004850:	e04e      	b.n	80048f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004852:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004856:	2b08      	cmp	r3, #8
 8004858:	d827      	bhi.n	80048aa <UART_SetConfig+0x506>
 800485a:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <UART_SetConfig+0x4bc>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	080048ab 	.word	0x080048ab
 8004870:	0800489b 	.word	0x0800489b
 8004874:	080048ab 	.word	0x080048ab
 8004878:	080048ab 	.word	0x080048ab
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fe fc02 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8004888:	61f8      	str	r0, [r7, #28]
        break;
 800488a:	e014      	b.n	80048b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7fe fc14 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 8004890:	61f8      	str	r0, [r7, #28]
        break;
 8004892:	e010      	b.n	80048b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b1e      	ldr	r3, [pc, #120]	@ (8004910 <UART_SetConfig+0x56c>)
 8004896:	61fb      	str	r3, [r7, #28]
        break;
 8004898:	e00d      	b.n	80048b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7fe fb5f 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 800489e:	61f8      	str	r0, [r7, #28]
        break;
 80048a0:	e009      	b.n	80048b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048a6:	61fb      	str	r3, [r7, #28]
        break;
 80048a8:	e005      	b.n	80048b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048b4:	bf00      	nop
    }

    if (pclk != 0U)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d019      	beq.n	80048f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	085a      	lsrs	r2, r3, #1
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	441a      	add	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d909      	bls.n	80048ea <UART_SetConfig+0x546>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048dc:	d205      	bcs.n	80048ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60da      	str	r2, [r3, #12]
 80048e8:	e002      	b.n	80048f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004900:	4618      	mov	r0, r3
 8004902:	3728      	adds	r7, #40	@ 0x28
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490a:	bf00      	nop
 800490c:	40008000 	.word	0x40008000
 8004910:	00f42400 	.word	0x00f42400

08004914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01a      	beq.n	8004a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a12:	d10a      	bne.n	8004a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	605a      	str	r2, [r3, #4]
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b098      	sub	sp, #96	@ 0x60
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a68:	f7fc fdb4 	bl	80015d4 <HAL_GetTick>
 8004a6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d12e      	bne.n	8004ada <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a84:	2200      	movs	r2, #0
 8004a86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f88c 	bl	8004ba8 <UART_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d021      	beq.n	8004ada <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e6      	bne.n	8004a96 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e062      	b.n	8004ba0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d149      	bne.n	8004b7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ae8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af0:	2200      	movs	r2, #0
 8004af2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f856 	bl	8004ba8 <UART_WaitOnFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03c      	beq.n	8004b7c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3308      	adds	r3, #8
 8004b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b54:	61fa      	str	r2, [r7, #28]
 8004b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	617b      	str	r3, [r7, #20]
   return(result);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e5      	bne.n	8004b34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e011      	b.n	8004ba0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3758      	adds	r7, #88	@ 0x58
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb8:	e04f      	b.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d04b      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc2:	f7fc fd07 	bl	80015d4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d302      	bcc.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e04e      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d037      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b80      	cmp	r3, #128	@ 0x80
 8004bee:	d034      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b40      	cmp	r3, #64	@ 0x40
 8004bf4:	d031      	beq.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d110      	bne.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2208      	movs	r2, #8
 8004c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f838 	bl	8004c82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2208      	movs	r2, #8
 8004c16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e029      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c34:	d111      	bne.n	8004c5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f81e 	bl	8004c82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e00f      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69da      	ldr	r2, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4013      	ands	r3, r2
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	bf0c      	ite	eq
 8004c6a:	2301      	moveq	r3, #1
 8004c6c:	2300      	movne	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d0a0      	beq.n	8004bba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b095      	sub	sp, #84	@ 0x54
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004caa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e6      	bne.n	8004c8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e5      	bne.n	8004cbc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d118      	bne.n	8004d2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f023 0310 	bic.w	r3, r3, #16
 8004d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6979      	ldr	r1, [r7, #20]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	613b      	str	r3, [r7, #16]
   return(result);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e6      	bne.n	8004cf8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d3e:	bf00      	nop
 8004d40:	3754      	adds	r7, #84	@ 0x54
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	f107 001c 	add.w	r0, r7, #28
 8004d58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fa69 	bl	8005240 <USB_CoreReset>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004d72:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d86:	e005      	b.n	8004d94 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004da0:	b004      	add	sp, #16
 8004da2:	4770      	bx	lr

08004da4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 0201 	bic.w	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d115      	bne.n	8004e14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004df4:	200a      	movs	r0, #10
 8004df6:	f7fc fbf9 	bl	80015ec <HAL_Delay>
      ms += 10U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	330a      	adds	r3, #10
 8004dfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fa0f 	bl	8005224 <USB_GetMode>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d01e      	beq.n	8004e4a <USB_SetCurrentMode+0x84>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e10:	d9f0      	bls.n	8004df4 <USB_SetCurrentMode+0x2e>
 8004e12:	e01a      	b.n	8004e4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d115      	bne.n	8004e46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e26:	200a      	movs	r0, #10
 8004e28:	f7fc fbe0 	bl	80015ec <HAL_Delay>
      ms += 10U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	330a      	adds	r3, #10
 8004e30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9f6 	bl	8005224 <USB_GetMode>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <USB_SetCurrentMode+0x84>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e42:	d9f0      	bls.n	8004e26 <USB_SetCurrentMode+0x60>
 8004e44:	e001      	b.n	8004e4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e005      	b.n	8004e56 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8004e4e:	d101      	bne.n	8004e54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e60:	b084      	sub	sp, #16
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	e009      	b.n	8004e94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	3340      	adds	r3, #64	@ 0x40
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3301      	adds	r3, #1
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b0e      	cmp	r3, #14
 8004e98:	d9f2      	bls.n	8004e80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d11c      	bne.n	8004edc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e005      	b.n	8004ee8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ef4:	2103      	movs	r1, #3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f95a 	bl	80051b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004efc:	2110      	movs	r1, #16
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f8f6 	bl	80050f0 <USB_FlushTxFifo>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f920 	bl	8005154 <USB_FlushRxFifo>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f24:	461a      	mov	r2, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f30:	461a      	mov	r2, r3
 8004f32:	2300      	movs	r3, #0
 8004f34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e043      	b.n	8004fd0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f5e:	d118      	bne.n	8004f92 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f72:	461a      	mov	r2, r3
 8004f74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	e013      	b.n	8004fa4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	e008      	b.n	8004fa4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d3b5      	bcc.n	8004f48 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e043      	b.n	800506a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ff8:	d118      	bne.n	800502c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800500c:	461a      	mov	r2, r3
 800500e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e013      	b.n	800503e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005022:	461a      	mov	r2, r3
 8005024:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e008      	b.n	800503e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005038:	461a      	mov	r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504a:	461a      	mov	r2, r3
 800504c:	2300      	movs	r3, #0
 800504e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505c:	461a      	mov	r2, r3
 800505e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005062:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	3301      	adds	r3, #1
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800506e:	461a      	mov	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4293      	cmp	r3, r2
 8005074:	d3b5      	bcc.n	8004fe2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005088:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005096:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f043 0210 	orr.w	r2, r3, #16
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	4b10      	ldr	r3, [pc, #64]	@ (80050ec <USB_DevInit+0x28c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f043 0208 	orr.w	r2, r3, #8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d107      	bne.n	80050dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050d4:	f043 0304 	orr.w	r3, r3, #4
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050e8:	b004      	add	sp, #16
 80050ea:	4770      	bx	lr
 80050ec:	803c3800 	.word	0x803c3800

080050f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800510a:	d901      	bls.n	8005110 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e01b      	b.n	8005148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	daf2      	bge.n	80050fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	019b      	lsls	r3, r3, #6
 8005120:	f043 0220 	orr.w	r2, r3, #32
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005134:	d901      	bls.n	800513a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e006      	b.n	8005148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b20      	cmp	r3, #32
 8005144:	d0f0      	beq.n	8005128 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3301      	adds	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800516c:	d901      	bls.n	8005172 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e018      	b.n	80051a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	daf2      	bge.n	8005160 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2210      	movs	r2, #16
 8005182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005190:	d901      	bls.n	8005196 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e006      	b.n	80051a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d0f0      	beq.n	8005184 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80051fc:	f023 0303 	bic.w	r3, r3, #3
 8005200:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005210:	f043 0302 	orr.w	r3, r3, #2
 8005214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0301 	and.w	r3, r3, #1
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3301      	adds	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005258:	d901      	bls.n	800525e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e01b      	b.n	8005296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	2b00      	cmp	r3, #0
 8005264:	daf2      	bge.n	800524c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f043 0201 	orr.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005282:	d901      	bls.n	8005288 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e006      	b.n	8005296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b01      	cmp	r3, #1
 8005292:	d0f0      	beq.n	8005276 <USB_CoreReset+0x36>

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <__NVIC_SetPriority>:
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	6039      	str	r1, [r7, #0]
 80052ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	db0a      	blt.n	80052ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	490c      	ldr	r1, [pc, #48]	@ (80052f0 <__NVIC_SetPriority+0x4c>)
 80052be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	440b      	add	r3, r1
 80052c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80052cc:	e00a      	b.n	80052e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	4908      	ldr	r1, [pc, #32]	@ (80052f4 <__NVIC_SetPriority+0x50>)
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	3b04      	subs	r3, #4
 80052dc:	0112      	lsls	r2, r2, #4
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	440b      	add	r3, r1
 80052e2:	761a      	strb	r2, [r3, #24]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000e100 	.word	0xe000e100
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80052fc:	2100      	movs	r1, #0
 80052fe:	f06f 0004 	mvn.w	r0, #4
 8005302:	f7ff ffcf 	bl	80052a4 <__NVIC_SetPriority>
#endif
}
 8005306:	bf00      	nop
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005312:	f3ef 8305 	mrs	r3, IPSR
 8005316:	603b      	str	r3, [r7, #0]
  return(result);
 8005318:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800531e:	f06f 0305 	mvn.w	r3, #5
 8005322:	607b      	str	r3, [r7, #4]
 8005324:	e00c      	b.n	8005340 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <osKernelInitialize+0x44>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d105      	bne.n	800533a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <osKernelInitialize+0x44>)
 8005330:	2201      	movs	r2, #1
 8005332:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005334:	2300      	movs	r3, #0
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	e002      	b.n	8005340 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005340:	687b      	ldr	r3, [r7, #4]
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	200007e0 	.word	0x200007e0

08005354 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535a:	f3ef 8305 	mrs	r3, IPSR
 800535e:	603b      	str	r3, [r7, #0]
  return(result);
 8005360:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005366:	f06f 0305 	mvn.w	r3, #5
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e010      	b.n	8005390 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800536e:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <osKernelStart+0x48>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d109      	bne.n	800538a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005376:	f7ff ffbf 	bl	80052f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800537a:	4b08      	ldr	r3, [pc, #32]	@ (800539c <osKernelStart+0x48>)
 800537c:	2202      	movs	r2, #2
 800537e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005380:	f001 fe90 	bl	80070a4 <vTaskStartScheduler>
      stat = osOK;
 8005384:	2300      	movs	r3, #0
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	e002      	b.n	8005390 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800538a:	f04f 33ff 	mov.w	r3, #4294967295
 800538e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005390:	687b      	ldr	r3, [r7, #4]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	200007e0 	.word	0x200007e0

080053a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08e      	sub	sp, #56	@ 0x38
 80053a4:	af04      	add	r7, sp, #16
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b0:	f3ef 8305 	mrs	r3, IPSR
 80053b4:	617b      	str	r3, [r7, #20]
  return(result);
 80053b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d17e      	bne.n	80054ba <osThreadNew+0x11a>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d07b      	beq.n	80054ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053c2:	2380      	movs	r3, #128	@ 0x80
 80053c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053c6:	2318      	movs	r3, #24
 80053c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d045      	beq.n	8005466 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <osThreadNew+0x48>
        name = attr->name;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <osThreadNew+0x6e>
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b38      	cmp	r3, #56	@ 0x38
 8005400:	d805      	bhi.n	800540e <osThreadNew+0x6e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <osThreadNew+0x72>
        return (NULL);
 800540e:	2300      	movs	r3, #0
 8005410:	e054      	b.n	80054bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	089b      	lsrs	r3, r3, #2
 8005420:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00e      	beq.n	8005448 <osThreadNew+0xa8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005430:	d90a      	bls.n	8005448 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005436:	2b00      	cmp	r3, #0
 8005438:	d006      	beq.n	8005448 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <osThreadNew+0xa8>
        mem = 1;
 8005442:	2301      	movs	r3, #1
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	e010      	b.n	800546a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10c      	bne.n	800546a <osThreadNew+0xca>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <osThreadNew+0xca>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d104      	bne.n	800546a <osThreadNew+0xca>
          mem = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	e001      	b.n	800546a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d110      	bne.n	8005492 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005478:	9202      	str	r2, [sp, #8]
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	6a3a      	ldr	r2, [r7, #32]
 8005484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f001 fc30 	bl	8006cec <xTaskCreateStatic>
 800548c:	4603      	mov	r3, r0
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	e013      	b.n	80054ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d110      	bne.n	80054ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	b29a      	uxth	r2, r3
 800549c:	f107 0310 	add.w	r3, r7, #16
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f001 fc7e 	bl	8006dac <xTaskCreate>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d001      	beq.n	80054ba <osThreadNew+0x11a>
            hTask = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054ba:	693b      	ldr	r3, [r7, #16]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3728      	adds	r7, #40	@ 0x28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054cc:	f3ef 8305 	mrs	r3, IPSR
 80054d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80054d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <osDelay+0x1c>
    stat = osErrorISR;
 80054d8:	f06f 0305 	mvn.w	r3, #5
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e007      	b.n	80054f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f001 fda4 	bl	8007038 <vTaskDelay>
    }
  }

  return (stat);
 80054f0:	68fb      	ldr	r3, [r7, #12]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b088      	sub	sp, #32
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005506:	f3ef 8305 	mrs	r3, IPSR
 800550a:	60bb      	str	r3, [r7, #8]
  return(result);
 800550c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800550e:	2b00      	cmp	r3, #0
 8005510:	d174      	bne.n	80055fc <osMutexNew+0x102>
    if (attr != NULL) {
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	e001      	b.n	8005524 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <osMutexNew+0x3a>
      rmtx = 1U;
 800552e:	2301      	movs	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e001      	b.n	8005538 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d15c      	bne.n	80055fc <osMutexNew+0x102>
      mem = -1;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295
 8005546:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d015      	beq.n	800557a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d006      	beq.n	8005564 <osMutexNew+0x6a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b4f      	cmp	r3, #79	@ 0x4f
 800555c:	d902      	bls.n	8005564 <osMutexNew+0x6a>
          mem = 1;
 800555e:	2301      	movs	r3, #1
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	e00c      	b.n	800557e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d108      	bne.n	800557e <osMutexNew+0x84>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <osMutexNew+0x84>
            mem = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	e001      	b.n	800557e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d112      	bne.n	80055aa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d007      	beq.n	800559a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	4619      	mov	r1, r3
 8005590:	2004      	movs	r0, #4
 8005592:	f000 fc3e 	bl	8005e12 <xQueueCreateMutexStatic>
 8005596:	61f8      	str	r0, [r7, #28]
 8005598:	e016      	b.n	80055c8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	4619      	mov	r1, r3
 80055a0:	2001      	movs	r0, #1
 80055a2:	f000 fc36 	bl	8005e12 <xQueueCreateMutexStatic>
 80055a6:	61f8      	str	r0, [r7, #28]
 80055a8:	e00e      	b.n	80055c8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10b      	bne.n	80055c8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80055b6:	2004      	movs	r0, #4
 80055b8:	f000 fc13 	bl	8005de2 <xQueueCreateMutex>
 80055bc:	61f8      	str	r0, [r7, #28]
 80055be:	e003      	b.n	80055c8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80055c0:	2001      	movs	r0, #1
 80055c2:	f000 fc0e 	bl	8005de2 <xQueueCreateMutex>
 80055c6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <osMutexNew+0xee>
        if (attr != NULL) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <osMutexNew+0xe2>
          name = attr->name;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	e001      	b.n	80055e0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	69f8      	ldr	r0, [r7, #28]
 80055e4:	f001 fafa 	bl	8006bdc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d006      	beq.n	80055fc <osMutexNew+0x102>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80055fc:	69fb      	ldr	r3, [r7, #28]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005624:	f3ef 8305 	mrs	r3, IPSR
 8005628:	60bb      	str	r3, [r7, #8]
  return(result);
 800562a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005630:	f06f 0305 	mvn.w	r3, #5
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	e02c      	b.n	8005692 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800563e:	f06f 0303 	mvn.w	r3, #3
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e025      	b.n	8005692 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	6938      	ldr	r0, [r7, #16]
 8005650:	f000 fc2f 	bl	8005eb2 <xQueueTakeMutexRecursive>
 8005654:	4603      	mov	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d01b      	beq.n	8005692 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005660:	f06f 0301 	mvn.w	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e014      	b.n	8005692 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005668:	f06f 0302 	mvn.w	r3, #2
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e010      	b.n	8005692 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6938      	ldr	r0, [r7, #16]
 8005674:	f000 ffd4 	bl	8006620 <xQueueSemaphoreTake>
 8005678:	4603      	mov	r3, r0
 800567a:	2b01      	cmp	r3, #1
 800567c:	d009      	beq.n	8005692 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005684:	f06f 0301 	mvn.w	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e002      	b.n	8005692 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800568c:	f06f 0302 	mvn.w	r3, #2
 8005690:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005692:	697b      	ldr	r3, [r7, #20]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b8:	f3ef 8305 	mrs	r3, IPSR
 80056bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80056be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <osMutexRelease+0x30>
    stat = osErrorISR;
 80056c4:	f06f 0305 	mvn.w	r3, #5
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e01f      	b.n	800570c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d103      	bne.n	80056da <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80056d2:	f06f 0303 	mvn.w	r3, #3
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e018      	b.n	800570c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80056e0:	6938      	ldr	r0, [r7, #16]
 80056e2:	f000 fbb1 	bl	8005e48 <xQueueGiveMutexRecursive>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d00f      	beq.n	800570c <osMutexRelease+0x70>
        stat = osErrorResource;
 80056ec:	f06f 0302 	mvn.w	r3, #2
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	e00b      	b.n	800570c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80056f4:	2300      	movs	r3, #0
 80056f6:	2200      	movs	r2, #0
 80056f8:	2100      	movs	r1, #0
 80056fa:	6938      	ldr	r0, [r7, #16]
 80056fc:	f000 fc7e 	bl	8005ffc <xQueueGenericSend>
 8005700:	4603      	mov	r3, r0
 8005702:	2b01      	cmp	r3, #1
 8005704:	d002      	beq.n	800570c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005706:	f06f 0302 	mvn.w	r3, #2
 800570a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800570c:	697b      	ldr	r3, [r7, #20]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005716:	b580      	push	{r7, lr}
 8005718:	b08a      	sub	sp, #40	@ 0x28
 800571a:	af02      	add	r7, sp, #8
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005726:	f3ef 8305 	mrs	r3, IPSR
 800572a:	613b      	str	r3, [r7, #16]
  return(result);
 800572c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800572e:	2b00      	cmp	r3, #0
 8005730:	d175      	bne.n	800581e <osSemaphoreNew+0x108>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d072      	beq.n	800581e <osSemaphoreNew+0x108>
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	429a      	cmp	r2, r3
 800573e:	d86e      	bhi.n	800581e <osSemaphoreNew+0x108>
    mem = -1;
 8005740:	f04f 33ff 	mov.w	r3, #4294967295
 8005744:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d015      	beq.n	8005778 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <osSemaphoreNew+0x4c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b4f      	cmp	r3, #79	@ 0x4f
 800575a:	d902      	bls.n	8005762 <osSemaphoreNew+0x4c>
        mem = 1;
 800575c:	2301      	movs	r3, #1
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	e00c      	b.n	800577c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d108      	bne.n	800577c <osSemaphoreNew+0x66>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d104      	bne.n	800577c <osSemaphoreNew+0x66>
          mem = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	e001      	b.n	800577c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d04c      	beq.n	800581e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d128      	bne.n	80057dc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10a      	bne.n	80057a6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2203      	movs	r2, #3
 8005796:	9200      	str	r2, [sp, #0]
 8005798:	2200      	movs	r2, #0
 800579a:	2100      	movs	r1, #0
 800579c:	2001      	movs	r0, #1
 800579e:	f000 fa2b 	bl	8005bf8 <xQueueGenericCreateStatic>
 80057a2:	61f8      	str	r0, [r7, #28]
 80057a4:	e005      	b.n	80057b2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80057a6:	2203      	movs	r2, #3
 80057a8:	2100      	movs	r1, #0
 80057aa:	2001      	movs	r0, #1
 80057ac:	f000 faa1 	bl	8005cf2 <xQueueGenericCreate>
 80057b0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d022      	beq.n	80057fe <osSemaphoreNew+0xe8>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01f      	beq.n	80057fe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80057be:	2300      	movs	r3, #0
 80057c0:	2200      	movs	r2, #0
 80057c2:	2100      	movs	r1, #0
 80057c4:	69f8      	ldr	r0, [r7, #28]
 80057c6:	f000 fc19 	bl	8005ffc <xQueueGenericSend>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d016      	beq.n	80057fe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80057d0:	69f8      	ldr	r0, [r7, #28]
 80057d2:	f001 f8b7 	bl	8006944 <vQueueDelete>
            hSemaphore = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e010      	b.n	80057fe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d108      	bne.n	80057f4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fb98 	bl	8005f20 <xQueueCreateCountingSemaphoreStatic>
 80057f0:	61f8      	str	r0, [r7, #28]
 80057f2:	e004      	b.n	80057fe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 fbcb 	bl	8005f92 <xQueueCreateCountingSemaphore>
 80057fc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <osSemaphoreNew+0xfc>
          name = attr->name;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e001      	b.n	8005816 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005816:	6979      	ldr	r1, [r7, #20]
 8005818:	69f8      	ldr	r0, [r7, #28]
 800581a:	f001 f9df 	bl	8006bdc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800581e:	69fb      	ldr	r3, [r7, #28]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005840:	f06f 0303 	mvn.w	r3, #3
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	e039      	b.n	80058bc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005848:	f3ef 8305 	mrs	r3, IPSR
 800584c:	60fb      	str	r3, [r7, #12]
  return(result);
 800584e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005850:	2b00      	cmp	r3, #0
 8005852:	d022      	beq.n	800589a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800585a:	f06f 0303 	mvn.w	r3, #3
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e02c      	b.n	80058bc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005866:	f107 0308 	add.w	r3, r7, #8
 800586a:	461a      	mov	r2, r3
 800586c:	2100      	movs	r1, #0
 800586e:	6938      	ldr	r0, [r7, #16]
 8005870:	f000 ffe6 	bl	8006840 <xQueueReceiveFromISR>
 8005874:	4603      	mov	r3, r0
 8005876:	2b01      	cmp	r3, #1
 8005878:	d003      	beq.n	8005882 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800587a:	f06f 0302 	mvn.w	r3, #2
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e01c      	b.n	80058bc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d019      	beq.n	80058bc <osSemaphoreAcquire+0x94>
 8005888:	4b0f      	ldr	r3, [pc, #60]	@ (80058c8 <osSemaphoreAcquire+0xa0>)
 800588a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	e010      	b.n	80058bc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6938      	ldr	r0, [r7, #16]
 800589e:	f000 febf 	bl	8006620 <xQueueSemaphoreTake>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d009      	beq.n	80058bc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80058ae:	f06f 0301 	mvn.w	r3, #1
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	e002      	b.n	80058bc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80058b6:	f06f 0302 	mvn.w	r3, #2
 80058ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80058bc:	697b      	ldr	r3, [r7, #20]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80058e2:	f06f 0303 	mvn.w	r3, #3
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	e02c      	b.n	8005944 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ea:	f3ef 8305 	mrs	r3, IPSR
 80058ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80058f0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01a      	beq.n	800592c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80058fa:	f107 0308 	add.w	r3, r7, #8
 80058fe:	4619      	mov	r1, r3
 8005900:	6938      	ldr	r0, [r7, #16]
 8005902:	f000 fd1b 	bl	800633c <xQueueGiveFromISR>
 8005906:	4603      	mov	r3, r0
 8005908:	2b01      	cmp	r3, #1
 800590a:	d003      	beq.n	8005914 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800590c:	f06f 0302 	mvn.w	r3, #2
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	e017      	b.n	8005944 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d014      	beq.n	8005944 <osSemaphoreRelease+0x78>
 800591a:	4b0d      	ldr	r3, [pc, #52]	@ (8005950 <osSemaphoreRelease+0x84>)
 800591c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	e00b      	b.n	8005944 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800592c:	2300      	movs	r3, #0
 800592e:	2200      	movs	r2, #0
 8005930:	2100      	movs	r1, #0
 8005932:	6938      	ldr	r0, [r7, #16]
 8005934:	f000 fb62 	bl	8005ffc <xQueueGenericSend>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d002      	beq.n	8005944 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800593e:	f06f 0302 	mvn.w	r3, #2
 8005942:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005944:	697b      	ldr	r3, [r7, #20]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	e000ed04 	.word	0xe000ed04

08005954 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4a07      	ldr	r2, [pc, #28]	@ (8005980 <vApplicationGetIdleTaskMemory+0x2c>)
 8005964:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4a06      	ldr	r2, [pc, #24]	@ (8005984 <vApplicationGetIdleTaskMemory+0x30>)
 800596a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2280      	movs	r2, #128	@ 0x80
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	200007e4 	.word	0x200007e4
 8005984:	20000840 	.word	0x20000840

08005988 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4a07      	ldr	r2, [pc, #28]	@ (80059b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005998:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4a06      	ldr	r2, [pc, #24]	@ (80059b8 <vApplicationGetTimerTaskMemory+0x30>)
 800599e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059a6:	601a      	str	r2, [r3, #0]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	20000a40 	.word	0x20000a40
 80059b8:	20000a9c 	.word	0x20000a9c

080059bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f103 0208 	add.w	r2, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f103 0208 	add.w	r2, r3, #8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f103 0208 	add.w	r2, r3, #8
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
}
 8005a52:	bf00      	nop
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d103      	bne.n	8005a7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e00c      	b.n	8005a98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3308      	adds	r3, #8
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	e002      	b.n	8005a8c <vListInsert+0x2e>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d2f6      	bcs.n	8005a86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6892      	ldr	r2, [r2, #8]
 8005ae6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6852      	ldr	r2, [r2, #4]
 8005af0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d103      	bne.n	8005b04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	1e5a      	subs	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b4a:	bf00      	nop
 8005b4c:	bf00      	nop
 8005b4e:	e7fd      	b.n	8005b4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b50:	f002 fd72 	bl	8008638 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	441a      	add	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b80:	3b01      	subs	r3, #1
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	22ff      	movs	r2, #255	@ 0xff
 8005b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	22ff      	movs	r2, #255	@ 0xff
 8005b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d114      	bne.n	8005bd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01a      	beq.n	8005be4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3310      	adds	r3, #16
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 fd04 	bl	80075c0 <xTaskRemoveFromEventList>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d012      	beq.n	8005be4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <xQueueGenericReset+0xd0>)
 8005bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	e009      	b.n	8005be4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3310      	adds	r3, #16
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fef1 	bl	80059bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3324      	adds	r3, #36	@ 0x24
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff feec 	bl	80059bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005be4:	f002 fd5a 	bl	800869c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005be8:	2301      	movs	r3, #1
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	e000ed04 	.word	0xe000ed04

08005bf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	@ 0x38
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	e7fd      	b.n	8005c3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <xQueueGenericCreateStatic+0x56>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <xQueueGenericCreateStatic+0x5a>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <xQueueGenericCreateStatic+0x5c>
 8005c52:	2300      	movs	r3, #0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10b      	bne.n	8005c70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	623b      	str	r3, [r7, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	e7fd      	b.n	8005c6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <xQueueGenericCreateStatic+0x84>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <xQueueGenericCreateStatic+0x88>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <xQueueGenericCreateStatic+0x8a>
 8005c80:	2300      	movs	r3, #0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10b      	bne.n	8005c9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	61fb      	str	r3, [r7, #28]
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	e7fd      	b.n	8005c9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c9e:	2350      	movs	r3, #80	@ 0x50
 8005ca0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b50      	cmp	r3, #80	@ 0x50
 8005ca6:	d00b      	beq.n	8005cc0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	61bb      	str	r3, [r7, #24]
}
 8005cba:	bf00      	nop
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00d      	beq.n	8005ce8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cd4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f840 	bl	8005d68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3730      	adds	r7, #48	@ 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b08a      	sub	sp, #40	@ 0x28
 8005cf6:	af02      	add	r7, sp, #8
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10b      	bne.n	8005d1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	613b      	str	r3, [r7, #16]
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	e7fd      	b.n	8005d1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	3350      	adds	r3, #80	@ 0x50
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f002 fda5 	bl	800887c <pvPortMalloc>
 8005d32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d011      	beq.n	8005d5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	3350      	adds	r3, #80	@ 0x50
 8005d42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d4c:	79fa      	ldrb	r2, [r7, #7]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	4613      	mov	r3, r2
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f805 	bl	8005d68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
	}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d103      	bne.n	8005d84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e002      	b.n	8005d8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d96:	2101      	movs	r1, #1
 8005d98:	69b8      	ldr	r0, [r7, #24]
 8005d9a:	f7ff fec3 	bl	8005b24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00e      	beq.n	8005dda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f911 	bl	8005ffc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b086      	sub	sp, #24
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	4603      	mov	r3, r0
 8005dea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dec:	2301      	movs	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	2300      	movs	r3, #0
 8005df2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	461a      	mov	r2, r3
 8005df8:	6939      	ldr	r1, [r7, #16]
 8005dfa:	6978      	ldr	r0, [r7, #20]
 8005dfc:	f7ff ff79 	bl	8005cf2 <xQueueGenericCreate>
 8005e00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f7ff ffd3 	bl	8005dae <prvInitialiseMutex>

		return xNewQueue;
 8005e08:	68fb      	ldr	r3, [r7, #12]
	}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b088      	sub	sp, #32
 8005e16:	af02      	add	r7, sp, #8
 8005e18:	4603      	mov	r3, r0
 8005e1a:	6039      	str	r1, [r7, #0]
 8005e1c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	6939      	ldr	r1, [r7, #16]
 8005e30:	6978      	ldr	r0, [r7, #20]
 8005e32:	f7ff fee1 	bl	8005bf8 <xQueueGenericCreateStatic>
 8005e36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7ff ffb8 	bl	8005dae <prvInitialiseMutex>

		return xNewQueue;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
	}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	60fb      	str	r3, [r7, #12]
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	689c      	ldr	r4, [r3, #8]
 8005e76:	f001 fd63 	bl	8007940 <xTaskGetCurrentTaskHandle>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	d111      	bne.n	8005ea4 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	1e5a      	subs	r2, r3, #1
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d105      	bne.n	8005e9e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005e92:	2300      	movs	r3, #0
 8005e94:	2200      	movs	r2, #0
 8005e96:	2100      	movs	r1, #0
 8005e98:	6938      	ldr	r0, [r7, #16]
 8005e9a:	f000 f8af 	bl	8005ffc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e001      	b.n	8005ea8 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005ea8:	697b      	ldr	r3, [r7, #20]
	}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd90      	pop	{r4, r7, pc}

08005eb2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005eb2:	b590      	push	{r4, r7, lr}
 8005eb4:	b087      	sub	sp, #28
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	60fb      	str	r3, [r7, #12]
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	689c      	ldr	r4, [r3, #8]
 8005ee2:	f001 fd2d 	bl	8007940 <xTaskGetCurrentTaskHandle>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	429c      	cmp	r4, r3
 8005eea:	d107      	bne.n	8005efc <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e00c      	b.n	8005f16 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6938      	ldr	r0, [r7, #16]
 8005f00:	f000 fb8e 	bl	8006620 <xQueueSemaphoreTake>
 8005f04:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d004      	beq.n	8005f16 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005f16:	697b      	ldr	r3, [r7, #20]
	}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd90      	pop	{r4, r7, pc}

08005f20 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	@ 0x28
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10b      	bne.n	8005f4a <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	61bb      	str	r3, [r7, #24]
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	e7fd      	b.n	8005f46 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d90b      	bls.n	8005f6a <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	617b      	str	r3, [r7, #20]
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	e7fd      	b.n	8005f66 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	2100      	movs	r1, #0
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fe3f 	bl	8005bf8 <xQueueGenericCreateStatic>
 8005f7a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f88:	69fb      	ldr	r3, [r7, #28]
	}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b086      	sub	sp, #24
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10b      	bne.n	8005fba <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	613b      	str	r3, [r7, #16]
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop
 8005fb8:	e7fd      	b.n	8005fb6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d90b      	bls.n	8005fda <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	60fb      	str	r3, [r7, #12]
}
 8005fd4:	bf00      	nop
 8005fd6:	bf00      	nop
 8005fd8:	e7fd      	b.n	8005fd6 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005fda:	2202      	movs	r2, #2
 8005fdc:	2100      	movs	r1, #0
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fe87 	bl	8005cf2 <xQueueGenericCreate>
 8005fe4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ff2:	697b      	ldr	r3, [r7, #20]
	}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08e      	sub	sp, #56	@ 0x38
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800600a:	2300      	movs	r3, #0
 800600c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <xQueueGenericSend+0x34>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	e7fd      	b.n	800602c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d103      	bne.n	800603e <xQueueGenericSend+0x42>
 8006036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <xQueueGenericSend+0x46>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <xQueueGenericSend+0x48>
 8006042:	2300      	movs	r3, #0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <xQueueGenericSend+0x64>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	e7fd      	b.n	800605c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b02      	cmp	r3, #2
 8006064:	d103      	bne.n	800606e <xQueueGenericSend+0x72>
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <xQueueGenericSend+0x76>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <xQueueGenericSend+0x78>
 8006072:	2300      	movs	r3, #0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <xQueueGenericSend+0x94>
	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	623b      	str	r3, [r7, #32]
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	e7fd      	b.n	800608c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006090:	f001 fc66 	bl	8007960 <xTaskGetSchedulerState>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <xQueueGenericSend+0xa4>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <xQueueGenericSend+0xa8>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <xQueueGenericSend+0xaa>
 80060a4:	2300      	movs	r3, #0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	61fb      	str	r3, [r7, #28]
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	e7fd      	b.n	80060be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060c2:	f002 fab9 	bl	8008638 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <xQueueGenericSend+0xdc>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d129      	bne.n	800612c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060de:	f000 fc6d 	bl	80069bc <prvCopyDataToQueue>
 80060e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d010      	beq.n	800610e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ee:	3324      	adds	r3, #36	@ 0x24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fa65 	bl	80075c0 <xTaskRemoveFromEventList>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d013      	beq.n	8006124 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060fc:	4b3f      	ldr	r3, [pc, #252]	@ (80061fc <xQueueGenericSend+0x200>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	e00a      	b.n	8006124 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800610e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006114:	4b39      	ldr	r3, [pc, #228]	@ (80061fc <xQueueGenericSend+0x200>)
 8006116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006124:	f002 faba 	bl	800869c <vPortExitCritical>
				return pdPASS;
 8006128:	2301      	movs	r3, #1
 800612a:	e063      	b.n	80061f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d103      	bne.n	800613a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006132:	f002 fab3 	bl	800869c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006136:	2300      	movs	r3, #0
 8006138:	e05c      	b.n	80061f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800613a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613c:	2b00      	cmp	r3, #0
 800613e:	d106      	bne.n	800614e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006140:	f107 0314 	add.w	r3, r7, #20
 8006144:	4618      	mov	r0, r3
 8006146:	f001 fa9f 	bl	8007688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800614a:	2301      	movs	r3, #1
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800614e:	f002 faa5 	bl	800869c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006152:	f001 f80f 	bl	8007174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006156:	f002 fa6f 	bl	8008638 <vPortEnterCritical>
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006160:	b25b      	sxtb	r3, r3
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006166:	d103      	bne.n	8006170 <xQueueGenericSend+0x174>
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006176:	b25b      	sxtb	r3, r3
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d103      	bne.n	8006186 <xQueueGenericSend+0x18a>
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006186:	f002 fa89 	bl	800869c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800618a:	1d3a      	adds	r2, r7, #4
 800618c:	f107 0314 	add.w	r3, r7, #20
 8006190:	4611      	mov	r1, r2
 8006192:	4618      	mov	r0, r3
 8006194:	f001 fa8e 	bl	80076b4 <xTaskCheckForTimeOut>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d124      	bne.n	80061e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800619e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061a0:	f000 fd04 	bl	8006bac <prvIsQueueFull>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d018      	beq.n	80061dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	3310      	adds	r3, #16
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	4611      	mov	r1, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f001 f9b2 	bl	800751c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80061b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061ba:	f000 fc8f 	bl	8006adc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80061be:	f000 ffe7 	bl	8007190 <xTaskResumeAll>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f47f af7c 	bne.w	80060c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80061ca:	4b0c      	ldr	r3, [pc, #48]	@ (80061fc <xQueueGenericSend+0x200>)
 80061cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	e772      	b.n	80060c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061de:	f000 fc7d 	bl	8006adc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061e2:	f000 ffd5 	bl	8007190 <xTaskResumeAll>
 80061e6:	e76c      	b.n	80060c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061ea:	f000 fc77 	bl	8006adc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061ee:	f000 ffcf 	bl	8007190 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3738      	adds	r7, #56	@ 0x38
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	e000ed04 	.word	0xe000ed04

08006200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b090      	sub	sp, #64	@ 0x40
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	e7fd      	b.n	800622c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <xQueueGenericSendFromISR+0x3e>
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <xQueueGenericSendFromISR+0x42>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueGenericSendFromISR+0x44>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800625a:	bf00      	nop
 800625c:	bf00      	nop
 800625e:	e7fd      	b.n	800625c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d103      	bne.n	800626e <xQueueGenericSendFromISR+0x6e>
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <xQueueGenericSendFromISR+0x72>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueGenericSendFromISR+0x74>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10b      	bne.n	8006290 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	623b      	str	r3, [r7, #32]
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	e7fd      	b.n	800628c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006290:	f002 fab2 	bl	80087f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006294:	f3ef 8211 	mrs	r2, BASEPRI
 8006298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80062ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d302      	bcc.n	80062c2 <xQueueGenericSendFromISR+0xc2>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d12f      	bne.n	8006322 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062d8:	f000 fb70 	bl	80069bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d112      	bne.n	800630c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f0:	3324      	adds	r3, #36	@ 0x24
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 f964 	bl	80075c0 <xTaskRemoveFromEventList>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e007      	b.n	800631c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800630c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006310:	3301      	adds	r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	b25a      	sxtb	r2, r3
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800631c:	2301      	movs	r3, #1
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006320:	e001      	b.n	8006326 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006322:	2300      	movs	r3, #0
 8006324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006328:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006330:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006334:	4618      	mov	r0, r3
 8006336:	3740      	adds	r7, #64	@ 0x40
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08e      	sub	sp, #56	@ 0x38
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10b      	bne.n	8006368 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	623b      	str	r3, [r7, #32]
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	61fb      	str	r3, [r7, #28]
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <xQueueGiveFromISR+0x5c>
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <xQueueGiveFromISR+0x60>
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <xQueueGiveFromISR+0x62>
 800639c:	2300      	movs	r3, #0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10b      	bne.n	80063ba <xQueueGiveFromISR+0x7e>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	61bb      	str	r3, [r7, #24]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063ba:	f002 fa1d 	bl	80087f8 <vPortValidateInterruptPriority>
	__asm volatile
 80063be:	f3ef 8211 	mrs	r2, BASEPRI
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	617a      	str	r2, [r7, #20]
 80063d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80063d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d22b      	bcs.n	8006442 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006404:	d112      	bne.n	800642c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	d016      	beq.n	800643c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006410:	3324      	adds	r3, #36	@ 0x24
 8006412:	4618      	mov	r0, r3
 8006414:	f001 f8d4 	bl	80075c0 <xTaskRemoveFromEventList>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00e      	beq.n	800643c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e007      	b.n	800643c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800642c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006430:	3301      	adds	r3, #1
 8006432:	b2db      	uxtb	r3, r3
 8006434:	b25a      	sxtb	r2, r3
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800643c:	2301      	movs	r3, #1
 800643e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006440:	e001      	b.n	8006446 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006442:	2300      	movs	r3, #0
 8006444:	637b      	str	r3, [r7, #52]	@ 0x34
 8006446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006448:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f383 8811 	msr	BASEPRI, r3
}
 8006450:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006454:	4618      	mov	r0, r3
 8006456:	3738      	adds	r7, #56	@ 0x38
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08c      	sub	sp, #48	@ 0x30
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006468:	2300      	movs	r3, #0
 800646a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <xQueueReceive+0x32>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	623b      	str	r3, [r7, #32]
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	e7fd      	b.n	800648a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <xQueueReceive+0x40>
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <xQueueReceive+0x44>
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <xQueueReceive+0x46>
 80064a0:	2300      	movs	r3, #0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10b      	bne.n	80064be <xQueueReceive+0x62>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	61fb      	str	r3, [r7, #28]
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	e7fd      	b.n	80064ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064be:	f001 fa4f 	bl	8007960 <xTaskGetSchedulerState>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d102      	bne.n	80064ce <xQueueReceive+0x72>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <xQueueReceive+0x76>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <xQueueReceive+0x78>
 80064d2:	2300      	movs	r3, #0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <xQueueReceive+0x94>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	61bb      	str	r3, [r7, #24]
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	e7fd      	b.n	80064ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064f0:	f002 f8a2 	bl	8008638 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01f      	beq.n	8006540 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006504:	f000 fac4 	bl	8006a90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	1e5a      	subs	r2, r3, #1
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00f      	beq.n	8006538 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	3310      	adds	r3, #16
 800651c:	4618      	mov	r0, r3
 800651e:	f001 f84f 	bl	80075c0 <xTaskRemoveFromEventList>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006528:	4b3c      	ldr	r3, [pc, #240]	@ (800661c <xQueueReceive+0x1c0>)
 800652a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006538:	f002 f8b0 	bl	800869c <vPortExitCritical>
				return pdPASS;
 800653c:	2301      	movs	r3, #1
 800653e:	e069      	b.n	8006614 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006546:	f002 f8a9 	bl	800869c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800654a:	2300      	movs	r3, #0
 800654c:	e062      	b.n	8006614 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800654e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006550:	2b00      	cmp	r3, #0
 8006552:	d106      	bne.n	8006562 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006554:	f107 0310 	add.w	r3, r7, #16
 8006558:	4618      	mov	r0, r3
 800655a:	f001 f895 	bl	8007688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800655e:	2301      	movs	r3, #1
 8006560:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006562:	f002 f89b 	bl	800869c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006566:	f000 fe05 	bl	8007174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800656a:	f002 f865 	bl	8008638 <vPortEnterCritical>
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006574:	b25b      	sxtb	r3, r3
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d103      	bne.n	8006584 <xQueueReceive+0x128>
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800658a:	b25b      	sxtb	r3, r3
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d103      	bne.n	800659a <xQueueReceive+0x13e>
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800659a:	f002 f87f 	bl	800869c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800659e:	1d3a      	adds	r2, r7, #4
 80065a0:	f107 0310 	add.w	r3, r7, #16
 80065a4:	4611      	mov	r1, r2
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 f884 	bl	80076b4 <xTaskCheckForTimeOut>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d123      	bne.n	80065fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065b4:	f000 fae4 	bl	8006b80 <prvIsQueueEmpty>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d017      	beq.n	80065ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c0:	3324      	adds	r3, #36	@ 0x24
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 ffa8 	bl	800751c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ce:	f000 fa85 	bl	8006adc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065d2:	f000 fddd 	bl	8007190 <xTaskResumeAll>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d189      	bne.n	80064f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80065dc:	4b0f      	ldr	r3, [pc, #60]	@ (800661c <xQueueReceive+0x1c0>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	e780      	b.n	80064f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065f0:	f000 fa74 	bl	8006adc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065f4:	f000 fdcc 	bl	8007190 <xTaskResumeAll>
 80065f8:	e77a      	b.n	80064f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065fc:	f000 fa6e 	bl	8006adc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006600:	f000 fdc6 	bl	8007190 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006606:	f000 fabb 	bl	8006b80 <prvIsQueueEmpty>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	f43f af6f 	beq.w	80064f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006612:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006614:	4618      	mov	r0, r3
 8006616:	3730      	adds	r7, #48	@ 0x30
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08e      	sub	sp, #56	@ 0x38
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800662a:	2300      	movs	r3, #0
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006632:	2300      	movs	r3, #0
 8006634:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	623b      	str	r3, [r7, #32]
}
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	e7fd      	b.n	8006650 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	61fb      	str	r3, [r7, #28]
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	e7fd      	b.n	8006670 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006674:	f001 f974 	bl	8007960 <xTaskGetSchedulerState>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <xQueueSemaphoreTake+0x64>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <xQueueSemaphoreTake+0x68>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <xQueueSemaphoreTake+0x6a>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10b      	bne.n	80066a6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	61bb      	str	r3, [r7, #24]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066a6:	f001 ffc7 	bl	8008638 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d024      	beq.n	8006700 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	1e5a      	subs	r2, r3, #1
 80066ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066bc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80066c6:	f001 fac5 	bl	8007c54 <pvTaskIncrementMutexHeldCount>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00f      	beq.n	80066f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066da:	3310      	adds	r3, #16
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 ff6f 	bl	80075c0 <xTaskRemoveFromEventList>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066e8:	4b54      	ldr	r3, [pc, #336]	@ (800683c <xQueueSemaphoreTake+0x21c>)
 80066ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066f8:	f001 ffd0 	bl	800869c <vPortExitCritical>
				return pdPASS;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e098      	b.n	8006832 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d112      	bne.n	800672c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	617b      	str	r3, [r7, #20]
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006724:	f001 ffba 	bl	800869c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006728:	2300      	movs	r3, #0
 800672a:	e082      	b.n	8006832 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800672c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006732:	f107 030c 	add.w	r3, r7, #12
 8006736:	4618      	mov	r0, r3
 8006738:	f000 ffa6 	bl	8007688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006740:	f001 ffac 	bl	800869c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006744:	f000 fd16 	bl	8007174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006748:	f001 ff76 	bl	8008638 <vPortEnterCritical>
 800674c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006752:	b25b      	sxtb	r3, r3
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d103      	bne.n	8006762 <xQueueSemaphoreTake+0x142>
 800675a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006768:	b25b      	sxtb	r3, r3
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676e:	d103      	bne.n	8006778 <xQueueSemaphoreTake+0x158>
 8006770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006778:	f001 ff90 	bl	800869c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800677c:	463a      	mov	r2, r7
 800677e:	f107 030c 	add.w	r3, r7, #12
 8006782:	4611      	mov	r1, r2
 8006784:	4618      	mov	r0, r3
 8006786:	f000 ff95 	bl	80076b4 <xTaskCheckForTimeOut>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d132      	bne.n	80067f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006790:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006792:	f000 f9f5 	bl	8006b80 <prvIsQueueEmpty>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d026      	beq.n	80067ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800679c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d109      	bne.n	80067b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80067a4:	f001 ff48 	bl	8008638 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 f8f5 	bl	800799c <xTaskPriorityInherit>
 80067b2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80067b4:	f001 ff72 	bl	800869c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ba:	3324      	adds	r3, #36	@ 0x24
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 feab 	bl	800751c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067c8:	f000 f988 	bl	8006adc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067cc:	f000 fce0 	bl	8007190 <xTaskResumeAll>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f47f af67 	bne.w	80066a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80067d8:	4b18      	ldr	r3, [pc, #96]	@ (800683c <xQueueSemaphoreTake+0x21c>)
 80067da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	e75d      	b.n	80066a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80067ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067ec:	f000 f976 	bl	8006adc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067f0:	f000 fcce 	bl	8007190 <xTaskResumeAll>
 80067f4:	e757      	b.n	80066a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80067f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067f8:	f000 f970 	bl	8006adc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067fc:	f000 fcc8 	bl	8007190 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006802:	f000 f9bd 	bl	8006b80 <prvIsQueueEmpty>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	f43f af4c 	beq.w	80066a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006814:	f001 ff10 	bl	8008638 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006818:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800681a:	f000 f8b7 	bl	800698c <prvGetDisinheritPriorityAfterTimeout>
 800681e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006826:	4618      	mov	r0, r3
 8006828:	f001 f990 	bl	8007b4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800682c:	f001 ff36 	bl	800869c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006830:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006832:	4618      	mov	r0, r3
 8006834:	3738      	adds	r7, #56	@ 0x38
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08e      	sub	sp, #56	@ 0x38
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10b      	bne.n	800686e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	623b      	str	r3, [r7, #32]
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	e7fd      	b.n	800686a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <xQueueReceiveFromISR+0x3c>
 8006874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <xQueueReceiveFromISR+0x40>
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <xQueueReceiveFromISR+0x42>
 8006880:	2300      	movs	r3, #0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	61fb      	str	r3, [r7, #28]
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	e7fd      	b.n	800689a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800689e:	f001 ffab 	bl	80087f8 <vPortValidateInterruptPriority>
	__asm volatile
 80068a2:	f3ef 8211 	mrs	r2, BASEPRI
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	61ba      	str	r2, [r7, #24]
 80068b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80068ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d02f      	beq.n	800692a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068d8:	f000 f8da 	bl	8006a90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	1e5a      	subs	r2, r3, #1
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80068e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d112      	bne.n	8006914 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	3310      	adds	r3, #16
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fe60 	bl	80075c0 <xTaskRemoveFromEventList>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00e      	beq.n	8006924 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e007      	b.n	8006924 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006918:	3301      	adds	r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	b25a      	sxtb	r2, r3
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006924:	2301      	movs	r3, #1
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
 8006928:	e001      	b.n	800692e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800692a:	2300      	movs	r3, #0
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
 800692e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006930:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f383 8811 	msr	BASEPRI, r3
}
 8006938:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800693a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800693c:	4618      	mov	r0, r3
 800693e:	3738      	adds	r7, #56	@ 0x38
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10b      	bne.n	800696e <vQueueDelete+0x2a>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	60bb      	str	r3, [r7, #8]
}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	e7fd      	b.n	800696a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f95e 	bl	8006c30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f002 f84a 	bl	8008a18 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	d006      	beq.n	80069aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	e001      	b.n	80069ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80069ae:	68fb      	ldr	r3, [r7, #12]
	}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10d      	bne.n	80069f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d14d      	bne.n	8006a7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f001 f840 	bl	8007a6c <xTaskPriorityDisinherit>
 80069ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	609a      	str	r2, [r3, #8]
 80069f4:	e043      	b.n	8006a7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d119      	bne.n	8006a30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6858      	ldr	r0, [r3, #4]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a04:	461a      	mov	r2, r3
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	f002 f952 	bl	8008cb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	441a      	add	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d32b      	bcc.n	8006a7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	605a      	str	r2, [r3, #4]
 8006a2e:	e026      	b.n	8006a7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	68d8      	ldr	r0, [r3, #12]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a38:	461a      	mov	r2, r3
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	f002 f938 	bl	8008cb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a48:	425b      	negs	r3, r3
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d207      	bcs.n	8006a6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a64:	425b      	negs	r3, r3
 8006a66:	441a      	add	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d105      	bne.n	8006a7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006a86:	697b      	ldr	r3, [r7, #20]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d018      	beq.n	8006ad4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aaa:	441a      	add	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d303      	bcc.n	8006ac4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68d9      	ldr	r1, [r3, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	461a      	mov	r2, r3
 8006ace:	6838      	ldr	r0, [r7, #0]
 8006ad0:	f002 f8ee 	bl	8008cb0 <memcpy>
	}
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ae4:	f001 fda8 	bl	8008638 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006af0:	e011      	b.n	8006b16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d012      	beq.n	8006b20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3324      	adds	r3, #36	@ 0x24
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fd5e 	bl	80075c0 <xTaskRemoveFromEventList>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b0a:	f000 fe37 	bl	800777c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dce9      	bgt.n	8006af2 <prvUnlockQueue+0x16>
 8006b1e:	e000      	b.n	8006b22 <prvUnlockQueue+0x46>
					break;
 8006b20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	22ff      	movs	r2, #255	@ 0xff
 8006b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006b2a:	f001 fdb7 	bl	800869c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b2e:	f001 fd83 	bl	8008638 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b3a:	e011      	b.n	8006b60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d012      	beq.n	8006b6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3310      	adds	r3, #16
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fd39 	bl	80075c0 <xTaskRemoveFromEventList>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b54:	f000 fe12 	bl	800777c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dce9      	bgt.n	8006b3c <prvUnlockQueue+0x60>
 8006b68:	e000      	b.n	8006b6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	22ff      	movs	r2, #255	@ 0xff
 8006b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006b74:	f001 fd92 	bl	800869c <vPortExitCritical>
}
 8006b78:	bf00      	nop
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b88:	f001 fd56 	bl	8008638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b94:	2301      	movs	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	e001      	b.n	8006b9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b9e:	f001 fd7d 	bl	800869c <vPortExitCritical>

	return xReturn;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bb4:	f001 fd40 	bl	8008638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d102      	bne.n	8006bca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e001      	b.n	8006bce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bce:	f001 fd65 	bl	800869c <vPortExitCritical>

	return xReturn;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006be6:	2300      	movs	r3, #0
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e014      	b.n	8006c16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006bec:	4a0f      	ldr	r2, [pc, #60]	@ (8006c2c <vQueueAddToRegistry+0x50>)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10b      	bne.n	8006c10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006bf8:	490c      	ldr	r1, [pc, #48]	@ (8006c2c <vQueueAddToRegistry+0x50>)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c02:	4a0a      	ldr	r2, [pc, #40]	@ (8006c2c <vQueueAddToRegistry+0x50>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	4413      	add	r3, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c0e:	e006      	b.n	8006c1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b07      	cmp	r3, #7
 8006c1a:	d9e7      	bls.n	8006bec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000e9c 	.word	0x20000e9c

08006c30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	e016      	b.n	8006c6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006c3e:	4a10      	ldr	r2, [pc, #64]	@ (8006c80 <vQueueUnregisterQueue+0x50>)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	4413      	add	r3, r2
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d10b      	bne.n	8006c66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006c80 <vQueueUnregisterQueue+0x50>)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2100      	movs	r1, #0
 8006c54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006c58:	4a09      	ldr	r2, [pc, #36]	@ (8006c80 <vQueueUnregisterQueue+0x50>)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	00db      	lsls	r3, r3, #3
 8006c5e:	4413      	add	r3, r2
 8006c60:	2200      	movs	r2, #0
 8006c62:	605a      	str	r2, [r3, #4]
				break;
 8006c64:	e006      	b.n	8006c74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b07      	cmp	r3, #7
 8006c70:	d9e5      	bls.n	8006c3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20000e9c 	.word	0x20000e9c

08006c84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c94:	f001 fcd0 	bl	8008638 <vPortEnterCritical>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c9e:	b25b      	sxtb	r3, r3
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d103      	bne.n	8006cae <vQueueWaitForMessageRestricted+0x2a>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cb4:	b25b      	sxtb	r3, r3
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d103      	bne.n	8006cc4 <vQueueWaitForMessageRestricted+0x40>
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cc4:	f001 fcea 	bl	800869c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d106      	bne.n	8006cde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	3324      	adds	r3, #36	@ 0x24
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fc45 	bl	8007568 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006cde:	6978      	ldr	r0, [r7, #20]
 8006ce0:	f7ff fefc 	bl	8006adc <prvUnlockQueue>
	}
 8006ce4:	bf00      	nop
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08e      	sub	sp, #56	@ 0x38
 8006cf0:	af04      	add	r7, sp, #16
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	623b      	str	r3, [r7, #32]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10b      	bne.n	8006d36 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	61fb      	str	r3, [r7, #28]
}
 8006d30:	bf00      	nop
 8006d32:	bf00      	nop
 8006d34:	e7fd      	b.n	8006d32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d36:	235c      	movs	r3, #92	@ 0x5c
 8006d38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d3e:	d00b      	beq.n	8006d58 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	61bb      	str	r3, [r7, #24]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d01e      	beq.n	8006d9e <xTaskCreateStatic+0xb2>
 8006d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01b      	beq.n	8006d9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d78:	2300      	movs	r3, #0
 8006d7a:	9303      	str	r3, [sp, #12]
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	9302      	str	r3, [sp, #8]
 8006d80:	f107 0314 	add.w	r3, r7, #20
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f850 	bl	8006e36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d98:	f000 f8de 	bl	8006f58 <prvAddNewTaskToReadyList>
 8006d9c:	e001      	b.n	8006da2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006da2:	697b      	ldr	r3, [r7, #20]
	}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3728      	adds	r7, #40	@ 0x28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08c      	sub	sp, #48	@ 0x30
 8006db0:	af04      	add	r7, sp, #16
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	4613      	mov	r3, r2
 8006dba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 fd5b 	bl	800887c <pvPortMalloc>
 8006dc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00e      	beq.n	8006dec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006dce:	205c      	movs	r0, #92	@ 0x5c
 8006dd0:	f001 fd54 	bl	800887c <pvPortMalloc>
 8006dd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006de2:	e005      	b.n	8006df0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006de4:	6978      	ldr	r0, [r7, #20]
 8006de6:	f001 fe17 	bl	8008a18 <vPortFree>
 8006dea:	e001      	b.n	8006df0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d017      	beq.n	8006e26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006dfe:	88fa      	ldrh	r2, [r7, #6]
 8006e00:	2300      	movs	r3, #0
 8006e02:	9303      	str	r3, [sp, #12]
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	9302      	str	r3, [sp, #8]
 8006e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f80e 	bl	8006e36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e1a:	69f8      	ldr	r0, [r7, #28]
 8006e1c:	f000 f89c 	bl	8006f58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e20:	2301      	movs	r3, #1
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	e002      	b.n	8006e2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
	}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b088      	sub	sp, #32
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	21a5      	movs	r1, #165	@ 0xa5
 8006e50:	f001 ff02 	bl	8008c58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	f023 0307 	bic.w	r3, r3, #7
 8006e6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	617b      	str	r3, [r7, #20]
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	e7fd      	b.n	8006e8c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01f      	beq.n	8006ed6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e96:	2300      	movs	r3, #0
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	e012      	b.n	8006ec2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	7819      	ldrb	r1, [r3, #0]
 8006ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	3334      	adds	r3, #52	@ 0x34
 8006eac:	460a      	mov	r2, r1
 8006eae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d006      	beq.n	8006eca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	2b0f      	cmp	r3, #15
 8006ec6:	d9e9      	bls.n	8006e9c <prvInitialiseNewTask+0x66>
 8006ec8:	e000      	b.n	8006ecc <prvInitialiseNewTask+0x96>
			{
				break;
 8006eca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ed4:	e003      	b.n	8006ede <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee0:	2b37      	cmp	r3, #55	@ 0x37
 8006ee2:	d901      	bls.n	8006ee8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ee4:	2337      	movs	r3, #55	@ 0x37
 8006ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006eec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ef2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	3304      	adds	r3, #4
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fd7c 	bl	80059fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	3318      	adds	r3, #24
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fd77 	bl	80059fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	2200      	movs	r2, #0
 8006f28:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	68f9      	ldr	r1, [r7, #12]
 8006f36:	69b8      	ldr	r0, [r7, #24]
 8006f38:	f001 fa4e 	bl	80083d8 <pxPortInitialiseStack>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f4e:	bf00      	nop
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f60:	f001 fb6a 	bl	8008638 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f64:	4b2d      	ldr	r3, [pc, #180]	@ (800701c <prvAddNewTaskToReadyList+0xc4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800701c <prvAddNewTaskToReadyList+0xc4>)
 8006f6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007020 <prvAddNewTaskToReadyList+0xc8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f76:	4a2a      	ldr	r2, [pc, #168]	@ (8007020 <prvAddNewTaskToReadyList+0xc8>)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f7c:	4b27      	ldr	r3, [pc, #156]	@ (800701c <prvAddNewTaskToReadyList+0xc4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d110      	bne.n	8006fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f84:	f000 fc1e 	bl	80077c4 <prvInitialiseTaskLists>
 8006f88:	e00d      	b.n	8006fa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f8a:	4b26      	ldr	r3, [pc, #152]	@ (8007024 <prvAddNewTaskToReadyList+0xcc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f92:	4b23      	ldr	r3, [pc, #140]	@ (8007020 <prvAddNewTaskToReadyList+0xc8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d802      	bhi.n	8006fa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8007020 <prvAddNewTaskToReadyList+0xc8>)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fa6:	4b20      	ldr	r3, [pc, #128]	@ (8007028 <prvAddNewTaskToReadyList+0xd0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	4a1e      	ldr	r2, [pc, #120]	@ (8007028 <prvAddNewTaskToReadyList+0xd0>)
 8006fae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007028 <prvAddNewTaskToReadyList+0xd0>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800702c <prvAddNewTaskToReadyList+0xd4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d903      	bls.n	8006fcc <prvAddNewTaskToReadyList+0x74>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc8:	4a18      	ldr	r2, [pc, #96]	@ (800702c <prvAddNewTaskToReadyList+0xd4>)
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4a15      	ldr	r2, [pc, #84]	@ (8007030 <prvAddNewTaskToReadyList+0xd8>)
 8006fda:	441a      	add	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f7fe fd17 	bl	8005a16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fe8:	f001 fb58 	bl	800869c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fec:	4b0d      	ldr	r3, [pc, #52]	@ (8007024 <prvAddNewTaskToReadyList+0xcc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00e      	beq.n	8007012 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8007020 <prvAddNewTaskToReadyList+0xc8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d207      	bcs.n	8007012 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007002:	4b0c      	ldr	r3, [pc, #48]	@ (8007034 <prvAddNewTaskToReadyList+0xdc>)
 8007004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	200013b0 	.word	0x200013b0
 8007020:	20000edc 	.word	0x20000edc
 8007024:	200013bc 	.word	0x200013bc
 8007028:	200013cc 	.word	0x200013cc
 800702c:	200013b8 	.word	0x200013b8
 8007030:	20000ee0 	.word	0x20000ee0
 8007034:	e000ed04 	.word	0xe000ed04

08007038 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d018      	beq.n	800707c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800704a:	4b14      	ldr	r3, [pc, #80]	@ (800709c <vTaskDelay+0x64>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <vTaskDelay+0x32>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60bb      	str	r3, [r7, #8]
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	e7fd      	b.n	8007066 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800706a:	f000 f883 	bl	8007174 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800706e:	2100      	movs	r1, #0
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fe03 	bl	8007c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007076:	f000 f88b 	bl	8007190 <xTaskResumeAll>
 800707a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d107      	bne.n	8007092 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007082:	4b07      	ldr	r3, [pc, #28]	@ (80070a0 <vTaskDelay+0x68>)
 8007084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200013d8 	.word	0x200013d8
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	@ 0x28
 80070a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070b2:	463a      	mov	r2, r7
 80070b4:	1d39      	adds	r1, r7, #4
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fc4a 	bl	8005954 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	9202      	str	r2, [sp, #8]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	2300      	movs	r3, #0
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2300      	movs	r3, #0
 80070d0:	460a      	mov	r2, r1
 80070d2:	4922      	ldr	r1, [pc, #136]	@ (800715c <vTaskStartScheduler+0xb8>)
 80070d4:	4822      	ldr	r0, [pc, #136]	@ (8007160 <vTaskStartScheduler+0xbc>)
 80070d6:	f7ff fe09 	bl	8006cec <xTaskCreateStatic>
 80070da:	4603      	mov	r3, r0
 80070dc:	4a21      	ldr	r2, [pc, #132]	@ (8007164 <vTaskStartScheduler+0xc0>)
 80070de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070e0:	4b20      	ldr	r3, [pc, #128]	@ (8007164 <vTaskStartScheduler+0xc0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070e8:	2301      	movs	r3, #1
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	e001      	b.n	80070f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d102      	bne.n	80070fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80070f8:	f000 fe14 	bl	8007d24 <xTimerCreateTimerTask>
 80070fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d116      	bne.n	8007132 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	613b      	str	r3, [r7, #16]
}
 8007116:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007118:	4b13      	ldr	r3, [pc, #76]	@ (8007168 <vTaskStartScheduler+0xc4>)
 800711a:	f04f 32ff 	mov.w	r2, #4294967295
 800711e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007120:	4b12      	ldr	r3, [pc, #72]	@ (800716c <vTaskStartScheduler+0xc8>)
 8007122:	2201      	movs	r2, #1
 8007124:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007126:	4b12      	ldr	r3, [pc, #72]	@ (8007170 <vTaskStartScheduler+0xcc>)
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800712c:	f001 f9e0 	bl	80084f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007130:	e00f      	b.n	8007152 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d10b      	bne.n	8007152 <vTaskStartScheduler+0xae>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	60fb      	str	r3, [r7, #12]
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <vTaskStartScheduler+0xaa>
}
 8007152:	bf00      	nop
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	08008d14 	.word	0x08008d14
 8007160:	08007795 	.word	0x08007795
 8007164:	200013d4 	.word	0x200013d4
 8007168:	200013d0 	.word	0x200013d0
 800716c:	200013bc 	.word	0x200013bc
 8007170:	200013b4 	.word	0x200013b4

08007174 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007178:	4b04      	ldr	r3, [pc, #16]	@ (800718c <vTaskSuspendAll+0x18>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	4a03      	ldr	r2, [pc, #12]	@ (800718c <vTaskSuspendAll+0x18>)
 8007180:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007182:	bf00      	nop
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	200013d8 	.word	0x200013d8

08007190 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800719a:	2300      	movs	r3, #0
 800719c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800719e:	4b42      	ldr	r3, [pc, #264]	@ (80072a8 <xTaskResumeAll+0x118>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <xTaskResumeAll+0x2e>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	603b      	str	r3, [r7, #0]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071be:	f001 fa3b 	bl	8008638 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071c2:	4b39      	ldr	r3, [pc, #228]	@ (80072a8 <xTaskResumeAll+0x118>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	4a37      	ldr	r2, [pc, #220]	@ (80072a8 <xTaskResumeAll+0x118>)
 80071ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071cc:	4b36      	ldr	r3, [pc, #216]	@ (80072a8 <xTaskResumeAll+0x118>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d162      	bne.n	800729a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071d4:	4b35      	ldr	r3, [pc, #212]	@ (80072ac <xTaskResumeAll+0x11c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d05e      	beq.n	800729a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071dc:	e02f      	b.n	800723e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071de:	4b34      	ldr	r3, [pc, #208]	@ (80072b0 <xTaskResumeAll+0x120>)
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3318      	adds	r3, #24
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fc70 	bl	8005ad0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe fc6b 	bl	8005ad0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fe:	4b2d      	ldr	r3, [pc, #180]	@ (80072b4 <xTaskResumeAll+0x124>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d903      	bls.n	800720e <xTaskResumeAll+0x7e>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	4a2a      	ldr	r2, [pc, #168]	@ (80072b4 <xTaskResumeAll+0x124>)
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4a27      	ldr	r2, [pc, #156]	@ (80072b8 <xTaskResumeAll+0x128>)
 800721c:	441a      	add	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3304      	adds	r3, #4
 8007222:	4619      	mov	r1, r3
 8007224:	4610      	mov	r0, r2
 8007226:	f7fe fbf6 	bl	8005a16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722e:	4b23      	ldr	r3, [pc, #140]	@ (80072bc <xTaskResumeAll+0x12c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007234:	429a      	cmp	r2, r3
 8007236:	d302      	bcc.n	800723e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007238:	4b21      	ldr	r3, [pc, #132]	@ (80072c0 <xTaskResumeAll+0x130>)
 800723a:	2201      	movs	r2, #1
 800723c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800723e:	4b1c      	ldr	r3, [pc, #112]	@ (80072b0 <xTaskResumeAll+0x120>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1cb      	bne.n	80071de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800724c:	f000 fb58 	bl	8007900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007250:	4b1c      	ldr	r3, [pc, #112]	@ (80072c4 <xTaskResumeAll+0x134>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d010      	beq.n	800727e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800725c:	f000 f846 	bl	80072ec <xTaskIncrementTick>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007266:	4b16      	ldr	r3, [pc, #88]	@ (80072c0 <xTaskResumeAll+0x130>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3b01      	subs	r3, #1
 8007270:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1f1      	bne.n	800725c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007278:	4b12      	ldr	r3, [pc, #72]	@ (80072c4 <xTaskResumeAll+0x134>)
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800727e:	4b10      	ldr	r3, [pc, #64]	@ (80072c0 <xTaskResumeAll+0x130>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d009      	beq.n	800729a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800728a:	4b0f      	ldr	r3, [pc, #60]	@ (80072c8 <xTaskResumeAll+0x138>)
 800728c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800729a:	f001 f9ff 	bl	800869c <vPortExitCritical>

	return xAlreadyYielded;
 800729e:	68bb      	ldr	r3, [r7, #8]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	200013d8 	.word	0x200013d8
 80072ac:	200013b0 	.word	0x200013b0
 80072b0:	20001370 	.word	0x20001370
 80072b4:	200013b8 	.word	0x200013b8
 80072b8:	20000ee0 	.word	0x20000ee0
 80072bc:	20000edc 	.word	0x20000edc
 80072c0:	200013c4 	.word	0x200013c4
 80072c4:	200013c0 	.word	0x200013c0
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072d2:	4b05      	ldr	r3, [pc, #20]	@ (80072e8 <xTaskGetTickCount+0x1c>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072d8:	687b      	ldr	r3, [r7, #4]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	200013b4 	.word	0x200013b4

080072ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007434 <xTaskIncrementTick+0x148>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f040 8090 	bne.w	8007420 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007300:	4b4d      	ldr	r3, [pc, #308]	@ (8007438 <xTaskIncrementTick+0x14c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007308:	4a4b      	ldr	r2, [pc, #300]	@ (8007438 <xTaskIncrementTick+0x14c>)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d121      	bne.n	8007358 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007314:	4b49      	ldr	r3, [pc, #292]	@ (800743c <xTaskIncrementTick+0x150>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00b      	beq.n	8007336 <xTaskIncrementTick+0x4a>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	603b      	str	r3, [r7, #0]
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	e7fd      	b.n	8007332 <xTaskIncrementTick+0x46>
 8007336:	4b41      	ldr	r3, [pc, #260]	@ (800743c <xTaskIncrementTick+0x150>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	4b40      	ldr	r3, [pc, #256]	@ (8007440 <xTaskIncrementTick+0x154>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a3e      	ldr	r2, [pc, #248]	@ (800743c <xTaskIncrementTick+0x150>)
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	4a3e      	ldr	r2, [pc, #248]	@ (8007440 <xTaskIncrementTick+0x154>)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	4b3e      	ldr	r3, [pc, #248]	@ (8007444 <xTaskIncrementTick+0x158>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3301      	adds	r3, #1
 8007350:	4a3c      	ldr	r2, [pc, #240]	@ (8007444 <xTaskIncrementTick+0x158>)
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	f000 fad4 	bl	8007900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007358:	4b3b      	ldr	r3, [pc, #236]	@ (8007448 <xTaskIncrementTick+0x15c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	429a      	cmp	r2, r3
 8007360:	d349      	bcc.n	80073f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007362:	4b36      	ldr	r3, [pc, #216]	@ (800743c <xTaskIncrementTick+0x150>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800736c:	4b36      	ldr	r3, [pc, #216]	@ (8007448 <xTaskIncrementTick+0x15c>)
 800736e:	f04f 32ff 	mov.w	r2, #4294967295
 8007372:	601a      	str	r2, [r3, #0]
					break;
 8007374:	e03f      	b.n	80073f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007376:	4b31      	ldr	r3, [pc, #196]	@ (800743c <xTaskIncrementTick+0x150>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d203      	bcs.n	8007396 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800738e:	4a2e      	ldr	r2, [pc, #184]	@ (8007448 <xTaskIncrementTick+0x15c>)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007394:	e02f      	b.n	80073f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	3304      	adds	r3, #4
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fb98 	bl	8005ad0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	3318      	adds	r3, #24
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe fb8f 	bl	8005ad0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b6:	4b25      	ldr	r3, [pc, #148]	@ (800744c <xTaskIncrementTick+0x160>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d903      	bls.n	80073c6 <xTaskIncrementTick+0xda>
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c2:	4a22      	ldr	r2, [pc, #136]	@ (800744c <xTaskIncrementTick+0x160>)
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007450 <xTaskIncrementTick+0x164>)
 80073d4:	441a      	add	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fe fb1a 	bl	8005a16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007454 <xTaskIncrementTick+0x168>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d3b8      	bcc.n	8007362 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80073f0:	2301      	movs	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073f4:	e7b5      	b.n	8007362 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073f6:	4b17      	ldr	r3, [pc, #92]	@ (8007454 <xTaskIncrementTick+0x168>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fc:	4914      	ldr	r1, [pc, #80]	@ (8007450 <xTaskIncrementTick+0x164>)
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d901      	bls.n	8007412 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800740e:	2301      	movs	r3, #1
 8007410:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007412:	4b11      	ldr	r3, [pc, #68]	@ (8007458 <xTaskIncrementTick+0x16c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800741a:	2301      	movs	r3, #1
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	e004      	b.n	800742a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007420:	4b0e      	ldr	r3, [pc, #56]	@ (800745c <xTaskIncrementTick+0x170>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	4a0d      	ldr	r2, [pc, #52]	@ (800745c <xTaskIncrementTick+0x170>)
 8007428:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800742a:	697b      	ldr	r3, [r7, #20]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	200013d8 	.word	0x200013d8
 8007438:	200013b4 	.word	0x200013b4
 800743c:	20001368 	.word	0x20001368
 8007440:	2000136c 	.word	0x2000136c
 8007444:	200013c8 	.word	0x200013c8
 8007448:	200013d0 	.word	0x200013d0
 800744c:	200013b8 	.word	0x200013b8
 8007450:	20000ee0 	.word	0x20000ee0
 8007454:	20000edc 	.word	0x20000edc
 8007458:	200013c4 	.word	0x200013c4
 800745c:	200013c0 	.word	0x200013c0

08007460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007466:	4b28      	ldr	r3, [pc, #160]	@ (8007508 <vTaskSwitchContext+0xa8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800746e:	4b27      	ldr	r3, [pc, #156]	@ (800750c <vTaskSwitchContext+0xac>)
 8007470:	2201      	movs	r2, #1
 8007472:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007474:	e042      	b.n	80074fc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007476:	4b25      	ldr	r3, [pc, #148]	@ (800750c <vTaskSwitchContext+0xac>)
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747c:	4b24      	ldr	r3, [pc, #144]	@ (8007510 <vTaskSwitchContext+0xb0>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	e011      	b.n	80074a8 <vTaskSwitchContext+0x48>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	607b      	str	r3, [r7, #4]
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	e7fd      	b.n	800749e <vTaskSwitchContext+0x3e>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	491a      	ldr	r1, [pc, #104]	@ (8007514 <vTaskSwitchContext+0xb4>)
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4613      	mov	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0e3      	beq.n	8007484 <vTaskSwitchContext+0x24>
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4a13      	ldr	r2, [pc, #76]	@ (8007514 <vTaskSwitchContext+0xb4>)
 80074c8:	4413      	add	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	605a      	str	r2, [r3, #4]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3308      	adds	r3, #8
 80074de:	429a      	cmp	r2, r3
 80074e0:	d104      	bne.n	80074ec <vTaskSwitchContext+0x8c>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	605a      	str	r2, [r3, #4]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	4a09      	ldr	r2, [pc, #36]	@ (8007518 <vTaskSwitchContext+0xb8>)
 80074f4:	6013      	str	r3, [r2, #0]
 80074f6:	4a06      	ldr	r2, [pc, #24]	@ (8007510 <vTaskSwitchContext+0xb0>)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6013      	str	r3, [r2, #0]
}
 80074fc:	bf00      	nop
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	200013d8 	.word	0x200013d8
 800750c:	200013c4 	.word	0x200013c4
 8007510:	200013b8 	.word	0x200013b8
 8007514:	20000ee0 	.word	0x20000ee0
 8007518:	20000edc 	.word	0x20000edc

0800751c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60fb      	str	r3, [r7, #12]
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007544:	4b07      	ldr	r3, [pc, #28]	@ (8007564 <vTaskPlaceOnEventList+0x48>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3318      	adds	r3, #24
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fe fa86 	bl	8005a5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007552:	2101      	movs	r1, #1
 8007554:	6838      	ldr	r0, [r7, #0]
 8007556:	f000 fb91 	bl	8007c7c <prvAddCurrentTaskToDelayedList>
}
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000edc 	.word	0x20000edc

08007568 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	617b      	str	r3, [r7, #20]
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <vTaskPlaceOnEventListRestricted+0x54>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3318      	adds	r3, #24
 8007598:	4619      	mov	r1, r3
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7fe fa3b 	bl	8005a16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80075a6:	f04f 33ff 	mov.w	r3, #4294967295
 80075aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	68b8      	ldr	r0, [r7, #8]
 80075b0:	f000 fb64 	bl	8007c7c <prvAddCurrentTaskToDelayedList>
	}
 80075b4:	bf00      	nop
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20000edc 	.word	0x20000edc

080075c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60fb      	str	r3, [r7, #12]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	3318      	adds	r3, #24
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fa6c 	bl	8005ad0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007670 <xTaskRemoveFromEventList+0xb0>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d11d      	bne.n	800763c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	3304      	adds	r3, #4
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fa63 	bl	8005ad0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760e:	4b19      	ldr	r3, [pc, #100]	@ (8007674 <xTaskRemoveFromEventList+0xb4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d903      	bls.n	800761e <xTaskRemoveFromEventList+0x5e>
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761a:	4a16      	ldr	r2, [pc, #88]	@ (8007674 <xTaskRemoveFromEventList+0xb4>)
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4a13      	ldr	r2, [pc, #76]	@ (8007678 <xTaskRemoveFromEventList+0xb8>)
 800762c:	441a      	add	r2, r3
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	3304      	adds	r3, #4
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f7fe f9ee 	bl	8005a16 <vListInsertEnd>
 800763a:	e005      	b.n	8007648 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3318      	adds	r3, #24
 8007640:	4619      	mov	r1, r3
 8007642:	480e      	ldr	r0, [pc, #56]	@ (800767c <xTaskRemoveFromEventList+0xbc>)
 8007644:	f7fe f9e7 	bl	8005a16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764c:	4b0c      	ldr	r3, [pc, #48]	@ (8007680 <xTaskRemoveFromEventList+0xc0>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007652:	429a      	cmp	r2, r3
 8007654:	d905      	bls.n	8007662 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007656:	2301      	movs	r3, #1
 8007658:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800765a:	4b0a      	ldr	r3, [pc, #40]	@ (8007684 <xTaskRemoveFromEventList+0xc4>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	e001      	b.n	8007666 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007666:	697b      	ldr	r3, [r7, #20]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	200013d8 	.word	0x200013d8
 8007674:	200013b8 	.word	0x200013b8
 8007678:	20000ee0 	.word	0x20000ee0
 800767c:	20001370 	.word	0x20001370
 8007680:	20000edc 	.word	0x20000edc
 8007684:	200013c4 	.word	0x200013c4

08007688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007690:	4b06      	ldr	r3, [pc, #24]	@ (80076ac <vTaskInternalSetTimeOutState+0x24>)
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007698:	4b05      	ldr	r3, [pc, #20]	@ (80076b0 <vTaskInternalSetTimeOutState+0x28>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	605a      	str	r2, [r3, #4]
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	200013c8 	.word	0x200013c8
 80076b0:	200013b4 	.word	0x200013b4

080076b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10b      	bne.n	80076dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	613b      	str	r3, [r7, #16]
}
 80076d6:	bf00      	nop
 80076d8:	bf00      	nop
 80076da:	e7fd      	b.n	80076d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10b      	bne.n	80076fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60fb      	str	r3, [r7, #12]
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop
 80076f8:	e7fd      	b.n	80076f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80076fa:	f000 ff9d 	bl	8008638 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007774 <xTaskCheckForTimeOut+0xc0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007716:	d102      	bne.n	800771e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
 800771c:	e023      	b.n	8007766 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b15      	ldr	r3, [pc, #84]	@ (8007778 <xTaskCheckForTimeOut+0xc4>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d007      	beq.n	800773a <xTaskCheckForTimeOut+0x86>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	429a      	cmp	r2, r3
 8007732:	d302      	bcc.n	800773a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007734:	2301      	movs	r3, #1
 8007736:	61fb      	str	r3, [r7, #28]
 8007738:	e015      	b.n	8007766 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	429a      	cmp	r2, r3
 8007742:	d20b      	bcs.n	800775c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	1ad2      	subs	r2, r2, r3
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff ff99 	bl	8007688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007756:	2300      	movs	r3, #0
 8007758:	61fb      	str	r3, [r7, #28]
 800775a:	e004      	b.n	8007766 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007762:	2301      	movs	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007766:	f000 ff99 	bl	800869c <vPortExitCritical>

	return xReturn;
 800776a:	69fb      	ldr	r3, [r7, #28]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	200013b4 	.word	0x200013b4
 8007778:	200013c8 	.word	0x200013c8

0800777c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007780:	4b03      	ldr	r3, [pc, #12]	@ (8007790 <vTaskMissedYield+0x14>)
 8007782:	2201      	movs	r2, #1
 8007784:	601a      	str	r2, [r3, #0]
}
 8007786:	bf00      	nop
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	200013c4 	.word	0x200013c4

08007794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800779c:	f000 f852 	bl	8007844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <prvIdleTask+0x28>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d9f9      	bls.n	800779c <prvIdleTask+0x8>
			{
				taskYIELD();
 80077a8:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <prvIdleTask+0x2c>)
 80077aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077b8:	e7f0      	b.n	800779c <prvIdleTask+0x8>
 80077ba:	bf00      	nop
 80077bc:	20000ee0 	.word	0x20000ee0
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077ca:	2300      	movs	r3, #0
 80077cc:	607b      	str	r3, [r7, #4]
 80077ce:	e00c      	b.n	80077ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4a12      	ldr	r2, [pc, #72]	@ (8007824 <prvInitialiseTaskLists+0x60>)
 80077dc:	4413      	add	r3, r2
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe f8ec 	bl	80059bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3301      	adds	r3, #1
 80077e8:	607b      	str	r3, [r7, #4]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b37      	cmp	r3, #55	@ 0x37
 80077ee:	d9ef      	bls.n	80077d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077f0:	480d      	ldr	r0, [pc, #52]	@ (8007828 <prvInitialiseTaskLists+0x64>)
 80077f2:	f7fe f8e3 	bl	80059bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077f6:	480d      	ldr	r0, [pc, #52]	@ (800782c <prvInitialiseTaskLists+0x68>)
 80077f8:	f7fe f8e0 	bl	80059bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077fc:	480c      	ldr	r0, [pc, #48]	@ (8007830 <prvInitialiseTaskLists+0x6c>)
 80077fe:	f7fe f8dd 	bl	80059bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007802:	480c      	ldr	r0, [pc, #48]	@ (8007834 <prvInitialiseTaskLists+0x70>)
 8007804:	f7fe f8da 	bl	80059bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007808:	480b      	ldr	r0, [pc, #44]	@ (8007838 <prvInitialiseTaskLists+0x74>)
 800780a:	f7fe f8d7 	bl	80059bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800780e:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <prvInitialiseTaskLists+0x78>)
 8007810:	4a05      	ldr	r2, [pc, #20]	@ (8007828 <prvInitialiseTaskLists+0x64>)
 8007812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007814:	4b0a      	ldr	r3, [pc, #40]	@ (8007840 <prvInitialiseTaskLists+0x7c>)
 8007816:	4a05      	ldr	r2, [pc, #20]	@ (800782c <prvInitialiseTaskLists+0x68>)
 8007818:	601a      	str	r2, [r3, #0]
}
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000ee0 	.word	0x20000ee0
 8007828:	20001340 	.word	0x20001340
 800782c:	20001354 	.word	0x20001354
 8007830:	20001370 	.word	0x20001370
 8007834:	20001384 	.word	0x20001384
 8007838:	2000139c 	.word	0x2000139c
 800783c:	20001368 	.word	0x20001368
 8007840:	2000136c 	.word	0x2000136c

08007844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800784a:	e019      	b.n	8007880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800784c:	f000 fef4 	bl	8008638 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007850:	4b10      	ldr	r3, [pc, #64]	@ (8007894 <prvCheckTasksWaitingTermination+0x50>)
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3304      	adds	r3, #4
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe f937 	bl	8005ad0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007862:	4b0d      	ldr	r3, [pc, #52]	@ (8007898 <prvCheckTasksWaitingTermination+0x54>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3b01      	subs	r3, #1
 8007868:	4a0b      	ldr	r2, [pc, #44]	@ (8007898 <prvCheckTasksWaitingTermination+0x54>)
 800786a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800786c:	4b0b      	ldr	r3, [pc, #44]	@ (800789c <prvCheckTasksWaitingTermination+0x58>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3b01      	subs	r3, #1
 8007872:	4a0a      	ldr	r2, [pc, #40]	@ (800789c <prvCheckTasksWaitingTermination+0x58>)
 8007874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007876:	f000 ff11 	bl	800869c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f810 	bl	80078a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007880:	4b06      	ldr	r3, [pc, #24]	@ (800789c <prvCheckTasksWaitingTermination+0x58>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e1      	bne.n	800784c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20001384 	.word	0x20001384
 8007898:	200013b0 	.word	0x200013b0
 800789c:	20001398 	.word	0x20001398

080078a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d108      	bne.n	80078c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b6:	4618      	mov	r0, r3
 80078b8:	f001 f8ae 	bl	8008a18 <vPortFree>
				vPortFree( pxTCB );
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 f8ab 	bl	8008a18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078c2:	e019      	b.n	80078f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d103      	bne.n	80078d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 f8a2 	bl	8008a18 <vPortFree>
	}
 80078d4:	e010      	b.n	80078f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d00b      	beq.n	80078f8 <prvDeleteTCB+0x58>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	bf00      	nop
 80078f6:	e7fd      	b.n	80078f4 <prvDeleteTCB+0x54>
	}
 80078f8:	bf00      	nop
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007906:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <prvResetNextTaskUnblockTime+0x38>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007910:	4b0a      	ldr	r3, [pc, #40]	@ (800793c <prvResetNextTaskUnblockTime+0x3c>)
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007918:	e008      	b.n	800792c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791a:	4b07      	ldr	r3, [pc, #28]	@ (8007938 <prvResetNextTaskUnblockTime+0x38>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	4a04      	ldr	r2, [pc, #16]	@ (800793c <prvResetNextTaskUnblockTime+0x3c>)
 800792a:	6013      	str	r3, [r2, #0]
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	20001368 	.word	0x20001368
 800793c:	200013d0 	.word	0x200013d0

08007940 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007946:	4b05      	ldr	r3, [pc, #20]	@ (800795c <xTaskGetCurrentTaskHandle+0x1c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800794c:	687b      	ldr	r3, [r7, #4]
	}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000edc 	.word	0x20000edc

08007960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007966:	4b0b      	ldr	r3, [pc, #44]	@ (8007994 <xTaskGetSchedulerState+0x34>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d102      	bne.n	8007974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800796e:	2301      	movs	r3, #1
 8007970:	607b      	str	r3, [r7, #4]
 8007972:	e008      	b.n	8007986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007974:	4b08      	ldr	r3, [pc, #32]	@ (8007998 <xTaskGetSchedulerState+0x38>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d102      	bne.n	8007982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800797c:	2302      	movs	r3, #2
 800797e:	607b      	str	r3, [r7, #4]
 8007980:	e001      	b.n	8007986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007982:	2300      	movs	r3, #0
 8007984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007986:	687b      	ldr	r3, [r7, #4]
	}
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	200013bc 	.word	0x200013bc
 8007998:	200013d8 	.word	0x200013d8

0800799c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d051      	beq.n	8007a56 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a60 <xTaskPriorityInherit+0xc4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079bc:	429a      	cmp	r2, r3
 80079be:	d241      	bcs.n	8007a44 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	db06      	blt.n	80079d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079c8:	4b25      	ldr	r3, [pc, #148]	@ (8007a60 <xTaskPriorityInherit+0xc4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6959      	ldr	r1, [r3, #20]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a64 <xTaskPriorityInherit+0xc8>)
 80079e8:	4413      	add	r3, r2
 80079ea:	4299      	cmp	r1, r3
 80079ec:	d122      	bne.n	8007a34 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	3304      	adds	r3, #4
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe f86c 	bl	8005ad0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079f8:	4b19      	ldr	r3, [pc, #100]	@ (8007a60 <xTaskPriorityInherit+0xc4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	4b18      	ldr	r3, [pc, #96]	@ (8007a68 <xTaskPriorityInherit+0xcc>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d903      	bls.n	8007a16 <xTaskPriorityInherit+0x7a>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a12:	4a15      	ldr	r2, [pc, #84]	@ (8007a68 <xTaskPriorityInherit+0xcc>)
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4a10      	ldr	r2, [pc, #64]	@ (8007a64 <xTaskPriorityInherit+0xc8>)
 8007a24:	441a      	add	r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f7fd fff2 	bl	8005a16 <vListInsertEnd>
 8007a32:	e004      	b.n	8007a3e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a34:	4b0a      	ldr	r3, [pc, #40]	@ (8007a60 <xTaskPriorityInherit+0xc4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	e008      	b.n	8007a56 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a48:	4b05      	ldr	r3, [pc, #20]	@ (8007a60 <xTaskPriorityInherit+0xc4>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d201      	bcs.n	8007a56 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a52:	2301      	movs	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a56:	68fb      	ldr	r3, [r7, #12]
	}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000edc 	.word	0x20000edc
 8007a64:	20000ee0 	.word	0x20000ee0
 8007a68:	200013b8 	.word	0x200013b8

08007a6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d058      	beq.n	8007b34 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a82:	4b2f      	ldr	r3, [pc, #188]	@ (8007b40 <xTaskPriorityDisinherit+0xd4>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d00b      	beq.n	8007aa4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	60fb      	str	r3, [r7, #12]
}
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	e7fd      	b.n	8007aa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10b      	bne.n	8007ac4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	60bb      	str	r3, [r7, #8]
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac8:	1e5a      	subs	r2, r3, #1
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d02c      	beq.n	8007b34 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d128      	bne.n	8007b34 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fff2 	bl	8005ad0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b04:	4b0f      	ldr	r3, [pc, #60]	@ (8007b44 <xTaskPriorityDisinherit+0xd8>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d903      	bls.n	8007b14 <xTaskPriorityDisinherit+0xa8>
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b10:	4a0c      	ldr	r2, [pc, #48]	@ (8007b44 <xTaskPriorityDisinherit+0xd8>)
 8007b12:	6013      	str	r3, [r2, #0]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4a09      	ldr	r2, [pc, #36]	@ (8007b48 <xTaskPriorityDisinherit+0xdc>)
 8007b22:	441a      	add	r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	3304      	adds	r3, #4
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	f7fd ff73 	bl	8005a16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b34:	697b      	ldr	r3, [r7, #20]
	}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000edc 	.word	0x20000edc
 8007b44:	200013b8 	.word	0x200013b8
 8007b48:	20000ee0 	.word	0x20000ee0

08007b4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b088      	sub	sp, #32
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d06c      	beq.n	8007c3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10b      	bne.n	8007b84 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	60fb      	str	r3, [r7, #12]
}
 8007b7e:	bf00      	nop
 8007b80:	bf00      	nop
 8007b82:	e7fd      	b.n	8007b80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d902      	bls.n	8007b94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	e002      	b.n	8007b9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d04c      	beq.n	8007c3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d147      	bne.n	8007c3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007bae:	4b26      	ldr	r3, [pc, #152]	@ (8007c48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d10b      	bne.n	8007bd0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	60bb      	str	r3, [r7, #8]
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	e7fd      	b.n	8007bcc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	db04      	blt.n	8007bee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	6959      	ldr	r1, [r3, #20]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4a13      	ldr	r2, [pc, #76]	@ (8007c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007bfe:	4413      	add	r3, r2
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d11c      	bne.n	8007c3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	3304      	adds	r3, #4
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fd ff61 	bl	8005ad0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c12:	4b0f      	ldr	r3, [pc, #60]	@ (8007c50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d903      	bls.n	8007c22 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8007c50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4a07      	ldr	r2, [pc, #28]	@ (8007c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007c30:	441a      	add	r2, r3
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4619      	mov	r1, r3
 8007c38:	4610      	mov	r0, r2
 8007c3a:	f7fd feec 	bl	8005a16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c3e:	bf00      	nop
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000edc 	.word	0x20000edc
 8007c4c:	20000ee0 	.word	0x20000ee0
 8007c50:	200013b8 	.word	0x200013b8

08007c54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c58:	4b07      	ldr	r3, [pc, #28]	@ (8007c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d004      	beq.n	8007c6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c60:	4b05      	ldr	r3, [pc, #20]	@ (8007c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c66:	3201      	adds	r2, #1
 8007c68:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007c6a:	4b03      	ldr	r3, [pc, #12]	@ (8007c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
	}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20000edc 	.word	0x20000edc

08007c7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c86:	4b21      	ldr	r3, [pc, #132]	@ (8007d0c <prvAddCurrentTaskToDelayedList+0x90>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c8c:	4b20      	ldr	r3, [pc, #128]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3304      	adds	r3, #4
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fd ff1c 	bl	8005ad0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d10a      	bne.n	8007cb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d007      	beq.n	8007cb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4619      	mov	r1, r3
 8007cae:	4819      	ldr	r0, [pc, #100]	@ (8007d14 <prvAddCurrentTaskToDelayedList+0x98>)
 8007cb0:	f7fd feb1 	bl	8005a16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cb4:	e026      	b.n	8007d04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4413      	add	r3, r2
 8007cbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cbe:	4b14      	ldr	r3, [pc, #80]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d209      	bcs.n	8007ce2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cce:	4b12      	ldr	r3, [pc, #72]	@ (8007d18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f7fd febf 	bl	8005a5e <vListInsert>
}
 8007ce0:	e010      	b.n	8007d04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4619      	mov	r1, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	f7fd feb5 	bl	8005a5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d202      	bcs.n	8007d04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007cfe:	4a08      	ldr	r2, [pc, #32]	@ (8007d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	6013      	str	r3, [r2, #0]
}
 8007d04:	bf00      	nop
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	200013b4 	.word	0x200013b4
 8007d10:	20000edc 	.word	0x20000edc
 8007d14:	2000139c 	.word	0x2000139c
 8007d18:	2000136c 	.word	0x2000136c
 8007d1c:	20001368 	.word	0x20001368
 8007d20:	200013d0 	.word	0x200013d0

08007d24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	@ 0x28
 8007d28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d2e:	f000 fb13 	bl	8008358 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d32:	4b1d      	ldr	r3, [pc, #116]	@ (8007da8 <xTimerCreateTimerTask+0x84>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d021      	beq.n	8007d7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d42:	1d3a      	adds	r2, r7, #4
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	f107 030c 	add.w	r3, r7, #12
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd fe1b 	bl	8005988 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	9202      	str	r2, [sp, #8]
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	2300      	movs	r3, #0
 8007d62:	460a      	mov	r2, r1
 8007d64:	4911      	ldr	r1, [pc, #68]	@ (8007dac <xTimerCreateTimerTask+0x88>)
 8007d66:	4812      	ldr	r0, [pc, #72]	@ (8007db0 <xTimerCreateTimerTask+0x8c>)
 8007d68:	f7fe ffc0 	bl	8006cec <xTaskCreateStatic>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	4a11      	ldr	r2, [pc, #68]	@ (8007db4 <xTimerCreateTimerTask+0x90>)
 8007d70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d72:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <xTimerCreateTimerTask+0x90>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10b      	bne.n	8007d9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	613b      	str	r3, [r7, #16]
}
 8007d96:	bf00      	nop
 8007d98:	bf00      	nop
 8007d9a:	e7fd      	b.n	8007d98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d9c:	697b      	ldr	r3, [r7, #20]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	2000140c 	.word	0x2000140c
 8007dac:	08008d1c 	.word	0x08008d1c
 8007db0:	08007ef1 	.word	0x08007ef1
 8007db4:	20001410 	.word	0x20001410

08007db8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	@ 0x28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10b      	bne.n	8007de8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	623b      	str	r3, [r7, #32]
}
 8007de2:	bf00      	nop
 8007de4:	bf00      	nop
 8007de6:	e7fd      	b.n	8007de4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007de8:	4b19      	ldr	r3, [pc, #100]	@ (8007e50 <xTimerGenericCommand+0x98>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d02a      	beq.n	8007e46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b05      	cmp	r3, #5
 8007e00:	dc18      	bgt.n	8007e34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e02:	f7ff fdad 	bl	8007960 <xTaskGetSchedulerState>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d109      	bne.n	8007e20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e0c:	4b10      	ldr	r3, [pc, #64]	@ (8007e50 <xTimerGenericCommand+0x98>)
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	f107 0110 	add.w	r1, r7, #16
 8007e14:	2300      	movs	r3, #0
 8007e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e18:	f7fe f8f0 	bl	8005ffc <xQueueGenericSend>
 8007e1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e1e:	e012      	b.n	8007e46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e20:	4b0b      	ldr	r3, [pc, #44]	@ (8007e50 <xTimerGenericCommand+0x98>)
 8007e22:	6818      	ldr	r0, [r3, #0]
 8007e24:	f107 0110 	add.w	r1, r7, #16
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f7fe f8e6 	bl	8005ffc <xQueueGenericSend>
 8007e30:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e32:	e008      	b.n	8007e46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e34:	4b06      	ldr	r3, [pc, #24]	@ (8007e50 <xTimerGenericCommand+0x98>)
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	f107 0110 	add.w	r1, r7, #16
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	f7fe f9de 	bl	8006200 <xQueueGenericSendFromISR>
 8007e44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3728      	adds	r7, #40	@ 0x28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	2000140c 	.word	0x2000140c

08007e54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e5e:	4b23      	ldr	r3, [pc, #140]	@ (8007eec <prvProcessExpiredTimer+0x98>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fd fe2f 	bl	8005ad0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d023      	beq.n	8007ec8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	699a      	ldr	r2, [r3, #24]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	18d1      	adds	r1, r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	6978      	ldr	r0, [r7, #20]
 8007e8e:	f000 f8d5 	bl	800803c <prvInsertTimerInActiveList>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d020      	beq.n	8007eda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	6978      	ldr	r0, [r7, #20]
 8007ea4:	f7ff ff88 	bl	8007db8 <xTimerGenericCommand>
 8007ea8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d114      	bne.n	8007eda <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	60fb      	str	r3, [r7, #12]
}
 8007ec2:	bf00      	nop
 8007ec4:	bf00      	nop
 8007ec6:	e7fd      	b.n	8007ec4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ece:	f023 0301 	bic.w	r3, r3, #1
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	6978      	ldr	r0, [r7, #20]
 8007ee0:	4798      	blx	r3
}
 8007ee2:	bf00      	nop
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20001404 	.word	0x20001404

08007ef0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ef8:	f107 0308 	add.w	r3, r7, #8
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 f859 	bl	8007fb4 <prvGetNextExpireTime>
 8007f02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4619      	mov	r1, r3
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f805 	bl	8007f18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f0e:	f000 f8d7 	bl	80080c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f12:	bf00      	nop
 8007f14:	e7f0      	b.n	8007ef8 <prvTimerTask+0x8>
	...

08007f18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f22:	f7ff f927 	bl	8007174 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f26:	f107 0308 	add.w	r3, r7, #8
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f866 	bl	8007ffc <prvSampleTimeNow>
 8007f30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d130      	bne.n	8007f9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <prvProcessTimerOrBlockTask+0x3c>
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d806      	bhi.n	8007f54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f46:	f7ff f923 	bl	8007190 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff ff81 	bl	8007e54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f52:	e024      	b.n	8007f9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d008      	beq.n	8007f6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f5a:	4b13      	ldr	r3, [pc, #76]	@ (8007fa8 <prvProcessTimerOrBlockTask+0x90>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <prvProcessTimerOrBlockTask+0x50>
 8007f64:	2301      	movs	r3, #1
 8007f66:	e000      	b.n	8007f6a <prvProcessTimerOrBlockTask+0x52>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fac <prvProcessTimerOrBlockTask+0x94>)
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f7fe fe83 	bl	8006c84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f7e:	f7ff f907 	bl	8007190 <xTaskResumeAll>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f88:	4b09      	ldr	r3, [pc, #36]	@ (8007fb0 <prvProcessTimerOrBlockTask+0x98>)
 8007f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	f3bf 8f6f 	isb	sy
}
 8007f98:	e001      	b.n	8007f9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f9a:	f7ff f8f9 	bl	8007190 <xTaskResumeAll>
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20001408 	.word	0x20001408
 8007fac:	2000140c 	.word	0x2000140c
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff8 <prvGetNextExpireTime+0x44>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <prvGetNextExpireTime+0x16>
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	e000      	b.n	8007fcc <prvGetNextExpireTime+0x18>
 8007fca:	2200      	movs	r2, #0
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d105      	bne.n	8007fe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fd8:	4b07      	ldr	r3, [pc, #28]	@ (8007ff8 <prvGetNextExpireTime+0x44>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	e001      	b.n	8007fe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20001404 	.word	0x20001404

08007ffc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008004:	f7ff f962 	bl	80072cc <xTaskGetTickCount>
 8008008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800800a:	4b0b      	ldr	r3, [pc, #44]	@ (8008038 <prvSampleTimeNow+0x3c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	429a      	cmp	r2, r3
 8008012:	d205      	bcs.n	8008020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008014:	f000 f93a 	bl	800828c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e002      	b.n	8008026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008026:	4a04      	ldr	r2, [pc, #16]	@ (8008038 <prvSampleTimeNow+0x3c>)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800802c:	68fb      	ldr	r3, [r7, #12]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20001414 	.word	0x20001414

0800803c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	429a      	cmp	r2, r3
 8008060:	d812      	bhi.n	8008088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	1ad2      	subs	r2, r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	429a      	cmp	r2, r3
 800806e:	d302      	bcc.n	8008076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008070:	2301      	movs	r3, #1
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	e01b      	b.n	80080ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008076:	4b10      	ldr	r3, [pc, #64]	@ (80080b8 <prvInsertTimerInActiveList+0x7c>)
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	4610      	mov	r0, r2
 8008082:	f7fd fcec 	bl	8005a5e <vListInsert>
 8008086:	e012      	b.n	80080ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d206      	bcs.n	800809e <prvInsertTimerInActiveList+0x62>
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d302      	bcc.n	800809e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	e007      	b.n	80080ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800809e:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <prvInsertTimerInActiveList+0x80>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f7fd fcd8 	bl	8005a5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080ae:	697b      	ldr	r3, [r7, #20]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20001408 	.word	0x20001408
 80080bc:	20001404 	.word	0x20001404

080080c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08e      	sub	sp, #56	@ 0x38
 80080c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080c6:	e0ce      	b.n	8008266 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da19      	bge.n	8008102 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080ce:	1d3b      	adds	r3, r7, #4
 80080d0:	3304      	adds	r3, #4
 80080d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	61fb      	str	r3, [r7, #28]
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	e7fd      	b.n	80080ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080f8:	6850      	ldr	r0, [r2, #4]
 80080fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080fc:	6892      	ldr	r2, [r2, #8]
 80080fe:	4611      	mov	r1, r2
 8008100:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f2c0 80ae 	blt.w	8008266 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800810e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d004      	beq.n	8008120 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008118:	3304      	adds	r3, #4
 800811a:	4618      	mov	r0, r3
 800811c:	f7fd fcd8 	bl	8005ad0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008120:	463b      	mov	r3, r7
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff ff6a 	bl	8007ffc <prvSampleTimeNow>
 8008128:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b09      	cmp	r3, #9
 800812e:	f200 8097 	bhi.w	8008260 <prvProcessReceivedCommands+0x1a0>
 8008132:	a201      	add	r2, pc, #4	@ (adr r2, 8008138 <prvProcessReceivedCommands+0x78>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	08008161 	.word	0x08008161
 800813c:	08008161 	.word	0x08008161
 8008140:	08008161 	.word	0x08008161
 8008144:	080081d7 	.word	0x080081d7
 8008148:	080081eb 	.word	0x080081eb
 800814c:	08008237 	.word	0x08008237
 8008150:	08008161 	.word	0x08008161
 8008154:	08008161 	.word	0x08008161
 8008158:	080081d7 	.word	0x080081d7
 800815c:	080081eb 	.word	0x080081eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008162:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	b2da      	uxtb	r2, r3
 800816c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	18d1      	adds	r1, r2, r3
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800817e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008180:	f7ff ff5c 	bl	800803c <prvInsertTimerInActiveList>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d06c      	beq.n	8008264 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800818a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008194:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d061      	beq.n	8008264 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	441a      	add	r2, r3
 80081a8:	2300      	movs	r3, #0
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	2300      	movs	r3, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b2:	f7ff fe01 	bl	8007db8 <xTimerGenericCommand>
 80081b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d152      	bne.n	8008264 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	61bb      	str	r3, [r7, #24]
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	e7fd      	b.n	80081d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081dc:	f023 0301 	bic.w	r3, r3, #1
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80081e8:	e03d      	b.n	8008266 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081f0:	f043 0301 	orr.w	r3, r3, #1
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008200:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10b      	bne.n	8008222 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	617b      	str	r3, [r7, #20]
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	e7fd      	b.n	800821e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	18d1      	adds	r1, r2, r3
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800822e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008230:	f7ff ff04 	bl	800803c <prvInsertTimerInActiveList>
					break;
 8008234:	e017      	b.n	8008266 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	2b00      	cmp	r3, #0
 8008242:	d103      	bne.n	800824c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008244:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008246:	f000 fbe7 	bl	8008a18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800824a:	e00c      	b.n	8008266 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800824c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008252:	f023 0301 	bic.w	r3, r3, #1
 8008256:	b2da      	uxtb	r2, r3
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800825e:	e002      	b.n	8008266 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008260:	bf00      	nop
 8008262:	e000      	b.n	8008266 <prvProcessReceivedCommands+0x1a6>
					break;
 8008264:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008266:	4b08      	ldr	r3, [pc, #32]	@ (8008288 <prvProcessReceivedCommands+0x1c8>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	1d39      	adds	r1, r7, #4
 800826c:	2200      	movs	r2, #0
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe f8f4 	bl	800645c <xQueueReceive>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	f47f af26 	bne.w	80080c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	3730      	adds	r7, #48	@ 0x30
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	2000140c 	.word	0x2000140c

0800828c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008292:	e049      	b.n	8008328 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008294:	4b2e      	ldr	r3, [pc, #184]	@ (8008350 <prvSwitchTimerLists+0xc4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800829e:	4b2c      	ldr	r3, [pc, #176]	@ (8008350 <prvSwitchTimerLists+0xc4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fd fc0f 	bl	8005ad0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d02f      	beq.n	8008328 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4413      	add	r3, r2
 80082d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d90e      	bls.n	80082f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008350 <prvSwitchTimerLists+0xc4>)
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3304      	adds	r3, #4
 80082ee:	4619      	mov	r1, r3
 80082f0:	4610      	mov	r0, r2
 80082f2:	f7fd fbb4 	bl	8005a5e <vListInsert>
 80082f6:	e017      	b.n	8008328 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082f8:	2300      	movs	r3, #0
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	2300      	movs	r3, #0
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	2100      	movs	r1, #0
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff fd58 	bl	8007db8 <xTimerGenericCommand>
 8008308:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10b      	bne.n	8008328 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	603b      	str	r3, [r7, #0]
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	e7fd      	b.n	8008324 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008328:	4b09      	ldr	r3, [pc, #36]	@ (8008350 <prvSwitchTimerLists+0xc4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1b0      	bne.n	8008294 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008332:	4b07      	ldr	r3, [pc, #28]	@ (8008350 <prvSwitchTimerLists+0xc4>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008338:	4b06      	ldr	r3, [pc, #24]	@ (8008354 <prvSwitchTimerLists+0xc8>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a04      	ldr	r2, [pc, #16]	@ (8008350 <prvSwitchTimerLists+0xc4>)
 800833e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008340:	4a04      	ldr	r2, [pc, #16]	@ (8008354 <prvSwitchTimerLists+0xc8>)
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	6013      	str	r3, [r2, #0]
}
 8008346:	bf00      	nop
 8008348:	3718      	adds	r7, #24
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20001404 	.word	0x20001404
 8008354:	20001408 	.word	0x20001408

08008358 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800835e:	f000 f96b 	bl	8008638 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008362:	4b15      	ldr	r3, [pc, #84]	@ (80083b8 <prvCheckForValidListAndQueue+0x60>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d120      	bne.n	80083ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800836a:	4814      	ldr	r0, [pc, #80]	@ (80083bc <prvCheckForValidListAndQueue+0x64>)
 800836c:	f7fd fb26 	bl	80059bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008370:	4813      	ldr	r0, [pc, #76]	@ (80083c0 <prvCheckForValidListAndQueue+0x68>)
 8008372:	f7fd fb23 	bl	80059bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008376:	4b13      	ldr	r3, [pc, #76]	@ (80083c4 <prvCheckForValidListAndQueue+0x6c>)
 8008378:	4a10      	ldr	r2, [pc, #64]	@ (80083bc <prvCheckForValidListAndQueue+0x64>)
 800837a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800837c:	4b12      	ldr	r3, [pc, #72]	@ (80083c8 <prvCheckForValidListAndQueue+0x70>)
 800837e:	4a10      	ldr	r2, [pc, #64]	@ (80083c0 <prvCheckForValidListAndQueue+0x68>)
 8008380:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008382:	2300      	movs	r3, #0
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	4b11      	ldr	r3, [pc, #68]	@ (80083cc <prvCheckForValidListAndQueue+0x74>)
 8008388:	4a11      	ldr	r2, [pc, #68]	@ (80083d0 <prvCheckForValidListAndQueue+0x78>)
 800838a:	2110      	movs	r1, #16
 800838c:	200a      	movs	r0, #10
 800838e:	f7fd fc33 	bl	8005bf8 <xQueueGenericCreateStatic>
 8008392:	4603      	mov	r3, r0
 8008394:	4a08      	ldr	r2, [pc, #32]	@ (80083b8 <prvCheckForValidListAndQueue+0x60>)
 8008396:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008398:	4b07      	ldr	r3, [pc, #28]	@ (80083b8 <prvCheckForValidListAndQueue+0x60>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083a0:	4b05      	ldr	r3, [pc, #20]	@ (80083b8 <prvCheckForValidListAndQueue+0x60>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	490b      	ldr	r1, [pc, #44]	@ (80083d4 <prvCheckForValidListAndQueue+0x7c>)
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe fc18 	bl	8006bdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083ac:	f000 f976 	bl	800869c <vPortExitCritical>
}
 80083b0:	bf00      	nop
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	2000140c 	.word	0x2000140c
 80083bc:	200013dc 	.word	0x200013dc
 80083c0:	200013f0 	.word	0x200013f0
 80083c4:	20001404 	.word	0x20001404
 80083c8:	20001408 	.word	0x20001408
 80083cc:	200014b8 	.word	0x200014b8
 80083d0:	20001418 	.word	0x20001418
 80083d4:	08008d24 	.word	0x08008d24

080083d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3b04      	subs	r3, #4
 80083e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80083f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3b04      	subs	r3, #4
 80083f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f023 0201 	bic.w	r2, r3, #1
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3b04      	subs	r3, #4
 8008406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008408:	4a0c      	ldr	r2, [pc, #48]	@ (800843c <pxPortInitialiseStack+0x64>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3b14      	subs	r3, #20
 8008412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3b04      	subs	r3, #4
 800841e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f06f 0202 	mvn.w	r2, #2
 8008426:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3b20      	subs	r3, #32
 800842c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800842e:	68fb      	ldr	r3, [r7, #12]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	08008441 	.word	0x08008441

08008440 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800844a:	4b13      	ldr	r3, [pc, #76]	@ (8008498 <prvTaskExitError+0x58>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008452:	d00b      	beq.n	800846c <prvTaskExitError+0x2c>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	60fb      	str	r3, [r7, #12]
}
 8008466:	bf00      	nop
 8008468:	bf00      	nop
 800846a:	e7fd      	b.n	8008468 <prvTaskExitError+0x28>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	60bb      	str	r3, [r7, #8]
}
 800847e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008480:	bf00      	nop
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0fc      	beq.n	8008482 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	2000000c 	.word	0x2000000c
 800849c:	00000000 	.word	0x00000000

080084a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084a0:	4b07      	ldr	r3, [pc, #28]	@ (80084c0 <pxCurrentTCBConst2>)
 80084a2:	6819      	ldr	r1, [r3, #0]
 80084a4:	6808      	ldr	r0, [r1, #0]
 80084a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084aa:	f380 8809 	msr	PSP, r0
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f04f 0000 	mov.w	r0, #0
 80084b6:	f380 8811 	msr	BASEPRI, r0
 80084ba:	4770      	bx	lr
 80084bc:	f3af 8000 	nop.w

080084c0 <pxCurrentTCBConst2>:
 80084c0:	20000edc 	.word	0x20000edc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop

080084c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80084c8:	4808      	ldr	r0, [pc, #32]	@ (80084ec <prvPortStartFirstTask+0x24>)
 80084ca:	6800      	ldr	r0, [r0, #0]
 80084cc:	6800      	ldr	r0, [r0, #0]
 80084ce:	f380 8808 	msr	MSP, r0
 80084d2:	f04f 0000 	mov.w	r0, #0
 80084d6:	f380 8814 	msr	CONTROL, r0
 80084da:	b662      	cpsie	i
 80084dc:	b661      	cpsie	f
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	df00      	svc	0
 80084e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084ea:	bf00      	nop
 80084ec:	e000ed08 	.word	0xe000ed08

080084f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80084f6:	4b47      	ldr	r3, [pc, #284]	@ (8008614 <xPortStartScheduler+0x124>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a47      	ldr	r2, [pc, #284]	@ (8008618 <xPortStartScheduler+0x128>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d10b      	bne.n	8008518 <xPortStartScheduler+0x28>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	613b      	str	r3, [r7, #16]
}
 8008512:	bf00      	nop
 8008514:	bf00      	nop
 8008516:	e7fd      	b.n	8008514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008518:	4b3e      	ldr	r3, [pc, #248]	@ (8008614 <xPortStartScheduler+0x124>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a3f      	ldr	r2, [pc, #252]	@ (800861c <xPortStartScheduler+0x12c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d10b      	bne.n	800853a <xPortStartScheduler+0x4a>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	60fb      	str	r3, [r7, #12]
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop
 8008538:	e7fd      	b.n	8008536 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800853a:	4b39      	ldr	r3, [pc, #228]	@ (8008620 <xPortStartScheduler+0x130>)
 800853c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	22ff      	movs	r2, #255	@ 0xff
 800854a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800855c:	b2da      	uxtb	r2, r3
 800855e:	4b31      	ldr	r3, [pc, #196]	@ (8008624 <xPortStartScheduler+0x134>)
 8008560:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008562:	4b31      	ldr	r3, [pc, #196]	@ (8008628 <xPortStartScheduler+0x138>)
 8008564:	2207      	movs	r2, #7
 8008566:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008568:	e009      	b.n	800857e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800856a:	4b2f      	ldr	r3, [pc, #188]	@ (8008628 <xPortStartScheduler+0x138>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3b01      	subs	r3, #1
 8008570:	4a2d      	ldr	r2, [pc, #180]	@ (8008628 <xPortStartScheduler+0x138>)
 8008572:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	b2db      	uxtb	r3, r3
 800857c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	b2db      	uxtb	r3, r3
 8008582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008586:	2b80      	cmp	r3, #128	@ 0x80
 8008588:	d0ef      	beq.n	800856a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800858a:	4b27      	ldr	r3, [pc, #156]	@ (8008628 <xPortStartScheduler+0x138>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f1c3 0307 	rsb	r3, r3, #7
 8008592:	2b04      	cmp	r3, #4
 8008594:	d00b      	beq.n	80085ae <xPortStartScheduler+0xbe>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	60bb      	str	r3, [r7, #8]
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	e7fd      	b.n	80085aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008628 <xPortStartScheduler+0x138>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008628 <xPortStartScheduler+0x138>)
 80085b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085b8:	4b1b      	ldr	r3, [pc, #108]	@ (8008628 <xPortStartScheduler+0x138>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085c0:	4a19      	ldr	r2, [pc, #100]	@ (8008628 <xPortStartScheduler+0x138>)
 80085c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085cc:	4b17      	ldr	r3, [pc, #92]	@ (800862c <xPortStartScheduler+0x13c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a16      	ldr	r2, [pc, #88]	@ (800862c <xPortStartScheduler+0x13c>)
 80085d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085d8:	4b14      	ldr	r3, [pc, #80]	@ (800862c <xPortStartScheduler+0x13c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a13      	ldr	r2, [pc, #76]	@ (800862c <xPortStartScheduler+0x13c>)
 80085de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085e4:	f000 f8da 	bl	800879c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085e8:	4b11      	ldr	r3, [pc, #68]	@ (8008630 <xPortStartScheduler+0x140>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80085ee:	f000 f8f9 	bl	80087e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80085f2:	4b10      	ldr	r3, [pc, #64]	@ (8008634 <xPortStartScheduler+0x144>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008634 <xPortStartScheduler+0x144>)
 80085f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80085fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085fe:	f7ff ff63 	bl	80084c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008602:	f7fe ff2d 	bl	8007460 <vTaskSwitchContext>
	prvTaskExitError();
 8008606:	f7ff ff1b 	bl	8008440 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	e000ed00 	.word	0xe000ed00
 8008618:	410fc271 	.word	0x410fc271
 800861c:	410fc270 	.word	0x410fc270
 8008620:	e000e400 	.word	0xe000e400
 8008624:	20001508 	.word	0x20001508
 8008628:	2000150c 	.word	0x2000150c
 800862c:	e000ed20 	.word	0xe000ed20
 8008630:	2000000c 	.word	0x2000000c
 8008634:	e000ef34 	.word	0xe000ef34

08008638 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	607b      	str	r3, [r7, #4]
}
 8008650:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008652:	4b10      	ldr	r3, [pc, #64]	@ (8008694 <vPortEnterCritical+0x5c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3301      	adds	r3, #1
 8008658:	4a0e      	ldr	r2, [pc, #56]	@ (8008694 <vPortEnterCritical+0x5c>)
 800865a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800865c:	4b0d      	ldr	r3, [pc, #52]	@ (8008694 <vPortEnterCritical+0x5c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d110      	bne.n	8008686 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008664:	4b0c      	ldr	r3, [pc, #48]	@ (8008698 <vPortEnterCritical+0x60>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00b      	beq.n	8008686 <vPortEnterCritical+0x4e>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	603b      	str	r3, [r7, #0]
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <vPortEnterCritical+0x4a>
	}
}
 8008686:	bf00      	nop
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	2000000c 	.word	0x2000000c
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80086a2:	4b12      	ldr	r3, [pc, #72]	@ (80086ec <vPortExitCritical+0x50>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <vPortExitCritical+0x26>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	607b      	str	r3, [r7, #4]
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	e7fd      	b.n	80086be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086c2:	4b0a      	ldr	r3, [pc, #40]	@ (80086ec <vPortExitCritical+0x50>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	4a08      	ldr	r2, [pc, #32]	@ (80086ec <vPortExitCritical+0x50>)
 80086ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086cc:	4b07      	ldr	r3, [pc, #28]	@ (80086ec <vPortExitCritical+0x50>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d105      	bne.n	80086e0 <vPortExitCritical+0x44>
 80086d4:	2300      	movs	r3, #0
 80086d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f383 8811 	msr	BASEPRI, r3
}
 80086de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	2000000c 	.word	0x2000000c

080086f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086f0:	f3ef 8009 	mrs	r0, PSP
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	4b15      	ldr	r3, [pc, #84]	@ (8008750 <pxCurrentTCBConst>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	f01e 0f10 	tst.w	lr, #16
 8008700:	bf08      	it	eq
 8008702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870a:	6010      	str	r0, [r2, #0]
 800870c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008710:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008714:	f380 8811 	msr	BASEPRI, r0
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f7fe fe9e 	bl	8007460 <vTaskSwitchContext>
 8008724:	f04f 0000 	mov.w	r0, #0
 8008728:	f380 8811 	msr	BASEPRI, r0
 800872c:	bc09      	pop	{r0, r3}
 800872e:	6819      	ldr	r1, [r3, #0]
 8008730:	6808      	ldr	r0, [r1, #0]
 8008732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008736:	f01e 0f10 	tst.w	lr, #16
 800873a:	bf08      	it	eq
 800873c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008740:	f380 8809 	msr	PSP, r0
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	f3af 8000 	nop.w

08008750 <pxCurrentTCBConst>:
 8008750:	20000edc 	.word	0x20000edc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop

08008758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	607b      	str	r3, [r7, #4]
}
 8008770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008772:	f7fe fdbb 	bl	80072ec <xTaskIncrementTick>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800877c:	4b06      	ldr	r3, [pc, #24]	@ (8008798 <xPortSysTickHandler+0x40>)
 800877e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	2300      	movs	r3, #0
 8008786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f383 8811 	msr	BASEPRI, r3
}
 800878e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	e000ed04 	.word	0xe000ed04

0800879c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800879c:	b480      	push	{r7}
 800879e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80087a0:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <vPortSetupTimerInterrupt+0x34>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80087a6:	4b0b      	ldr	r3, [pc, #44]	@ (80087d4 <vPortSetupTimerInterrupt+0x38>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80087ac:	4b0a      	ldr	r3, [pc, #40]	@ (80087d8 <vPortSetupTimerInterrupt+0x3c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a0a      	ldr	r2, [pc, #40]	@ (80087dc <vPortSetupTimerInterrupt+0x40>)
 80087b2:	fba2 2303 	umull	r2, r3, r2, r3
 80087b6:	099b      	lsrs	r3, r3, #6
 80087b8:	4a09      	ldr	r2, [pc, #36]	@ (80087e0 <vPortSetupTimerInterrupt+0x44>)
 80087ba:	3b01      	subs	r3, #1
 80087bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80087be:	4b04      	ldr	r3, [pc, #16]	@ (80087d0 <vPortSetupTimerInterrupt+0x34>)
 80087c0:	2207      	movs	r2, #7
 80087c2:	601a      	str	r2, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	e000e010 	.word	0xe000e010
 80087d4:	e000e018 	.word	0xe000e018
 80087d8:	20000000 	.word	0x20000000
 80087dc:	10624dd3 	.word	0x10624dd3
 80087e0:	e000e014 	.word	0xe000e014

080087e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80087e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80087f4 <vPortEnableVFP+0x10>
 80087e8:	6801      	ldr	r1, [r0, #0]
 80087ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80087ee:	6001      	str	r1, [r0, #0]
 80087f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80087f2:	bf00      	nop
 80087f4:	e000ed88 	.word	0xe000ed88

080087f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087fe:	f3ef 8305 	mrs	r3, IPSR
 8008802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b0f      	cmp	r3, #15
 8008808:	d915      	bls.n	8008836 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800880a:	4a18      	ldr	r2, [pc, #96]	@ (800886c <vPortValidateInterruptPriority+0x74>)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008814:	4b16      	ldr	r3, [pc, #88]	@ (8008870 <vPortValidateInterruptPriority+0x78>)
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	7afa      	ldrb	r2, [r7, #11]
 800881a:	429a      	cmp	r2, r3
 800881c:	d20b      	bcs.n	8008836 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	607b      	str	r3, [r7, #4]
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	e7fd      	b.n	8008832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008836:	4b0f      	ldr	r3, [pc, #60]	@ (8008874 <vPortValidateInterruptPriority+0x7c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800883e:	4b0e      	ldr	r3, [pc, #56]	@ (8008878 <vPortValidateInterruptPriority+0x80>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	429a      	cmp	r2, r3
 8008844:	d90b      	bls.n	800885e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	603b      	str	r3, [r7, #0]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <vPortValidateInterruptPriority+0x62>
	}
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	e000e3f0 	.word	0xe000e3f0
 8008870:	20001508 	.word	0x20001508
 8008874:	e000ed0c 	.word	0xe000ed0c
 8008878:	2000150c 	.word	0x2000150c

0800887c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	@ 0x28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008884:	2300      	movs	r3, #0
 8008886:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008888:	f7fe fc74 	bl	8007174 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800888c:	4b5c      	ldr	r3, [pc, #368]	@ (8008a00 <pvPortMalloc+0x184>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008894:	f000 f924 	bl	8008ae0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008898:	4b5a      	ldr	r3, [pc, #360]	@ (8008a04 <pvPortMalloc+0x188>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4013      	ands	r3, r2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f040 8095 	bne.w	80089d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d01e      	beq.n	80088ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80088ac:	2208      	movs	r2, #8
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4413      	add	r3, r2
 80088b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d015      	beq.n	80088ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f023 0307 	bic.w	r3, r3, #7
 80088c4:	3308      	adds	r3, #8
 80088c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00b      	beq.n	80088ea <pvPortMalloc+0x6e>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	617b      	str	r3, [r7, #20]
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	e7fd      	b.n	80088e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d06f      	beq.n	80089d0 <pvPortMalloc+0x154>
 80088f0:	4b45      	ldr	r3, [pc, #276]	@ (8008a08 <pvPortMalloc+0x18c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d86a      	bhi.n	80089d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088fa:	4b44      	ldr	r3, [pc, #272]	@ (8008a0c <pvPortMalloc+0x190>)
 80088fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088fe:	4b43      	ldr	r3, [pc, #268]	@ (8008a0c <pvPortMalloc+0x190>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008904:	e004      	b.n	8008910 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800890a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	429a      	cmp	r2, r3
 8008918:	d903      	bls.n	8008922 <pvPortMalloc+0xa6>
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1f1      	bne.n	8008906 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008922:	4b37      	ldr	r3, [pc, #220]	@ (8008a00 <pvPortMalloc+0x184>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008928:	429a      	cmp	r2, r3
 800892a:	d051      	beq.n	80089d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2208      	movs	r2, #8
 8008932:	4413      	add	r3, r2
 8008934:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	1ad2      	subs	r2, r2, r3
 8008946:	2308      	movs	r3, #8
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	429a      	cmp	r2, r3
 800894c:	d920      	bls.n	8008990 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800894e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4413      	add	r3, r2
 8008954:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <pvPortMalloc+0xfc>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	613b      	str	r3, [r7, #16]
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	e7fd      	b.n	8008974 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	1ad2      	subs	r2, r2, r3
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800898a:	69b8      	ldr	r0, [r7, #24]
 800898c:	f000 f90a 	bl	8008ba4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008990:	4b1d      	ldr	r3, [pc, #116]	@ (8008a08 <pvPortMalloc+0x18c>)
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	4a1b      	ldr	r2, [pc, #108]	@ (8008a08 <pvPortMalloc+0x18c>)
 800899c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800899e:	4b1a      	ldr	r3, [pc, #104]	@ (8008a08 <pvPortMalloc+0x18c>)
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008a10 <pvPortMalloc+0x194>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d203      	bcs.n	80089b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80089aa:	4b17      	ldr	r3, [pc, #92]	@ (8008a08 <pvPortMalloc+0x18c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a18      	ldr	r2, [pc, #96]	@ (8008a10 <pvPortMalloc+0x194>)
 80089b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80089b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	4b13      	ldr	r3, [pc, #76]	@ (8008a04 <pvPortMalloc+0x188>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	431a      	orrs	r2, r3
 80089bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80089c6:	4b13      	ldr	r3, [pc, #76]	@ (8008a14 <pvPortMalloc+0x198>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3301      	adds	r3, #1
 80089cc:	4a11      	ldr	r2, [pc, #68]	@ (8008a14 <pvPortMalloc+0x198>)
 80089ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80089d0:	f7fe fbde 	bl	8007190 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <pvPortMalloc+0x17a>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	60fb      	str	r3, [r7, #12]
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	e7fd      	b.n	80089f2 <pvPortMalloc+0x176>
	return pvReturn;
 80089f6:	69fb      	ldr	r3, [r7, #28]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3728      	adds	r7, #40	@ 0x28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	200020d0 	.word	0x200020d0
 8008a04:	200020e4 	.word	0x200020e4
 8008a08:	200020d4 	.word	0x200020d4
 8008a0c:	200020c8 	.word	0x200020c8
 8008a10:	200020d8 	.word	0x200020d8
 8008a14:	200020dc 	.word	0x200020dc

08008a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d04f      	beq.n	8008aca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a2a:	2308      	movs	r3, #8
 8008a2c:	425b      	negs	r3, r3
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4413      	add	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	4b25      	ldr	r3, [pc, #148]	@ (8008ad4 <vPortFree+0xbc>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4013      	ands	r3, r2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10b      	bne.n	8008a5e <vPortFree+0x46>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60fb      	str	r3, [r7, #12]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00b      	beq.n	8008a7e <vPortFree+0x66>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	60bb      	str	r3, [r7, #8]
}
 8008a78:	bf00      	nop
 8008a7a:	bf00      	nop
 8008a7c:	e7fd      	b.n	8008a7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	4b14      	ldr	r3, [pc, #80]	@ (8008ad4 <vPortFree+0xbc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4013      	ands	r3, r2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01e      	beq.n	8008aca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d11a      	bne.n	8008aca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	685a      	ldr	r2, [r3, #4]
 8008a98:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad4 <vPortFree+0xbc>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	43db      	mvns	r3, r3
 8008a9e:	401a      	ands	r2, r3
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008aa4:	f7fe fb66 	bl	8007174 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad8 <vPortFree+0xc0>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	4a09      	ldr	r2, [pc, #36]	@ (8008ad8 <vPortFree+0xc0>)
 8008ab4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ab6:	6938      	ldr	r0, [r7, #16]
 8008ab8:	f000 f874 	bl	8008ba4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008abc:	4b07      	ldr	r3, [pc, #28]	@ (8008adc <vPortFree+0xc4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	4a06      	ldr	r2, [pc, #24]	@ (8008adc <vPortFree+0xc4>)
 8008ac4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ac6:	f7fe fb63 	bl	8007190 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008aca:	bf00      	nop
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	200020e4 	.word	0x200020e4
 8008ad8:	200020d4 	.word	0x200020d4
 8008adc:	200020e0 	.word	0x200020e0

08008ae0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ae6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008aea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008aec:	4b27      	ldr	r3, [pc, #156]	@ (8008b8c <prvHeapInit+0xac>)
 8008aee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f003 0307 	and.w	r3, r3, #7
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00c      	beq.n	8008b14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3307      	adds	r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 0307 	bic.w	r3, r3, #7
 8008b06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008b8c <prvHeapInit+0xac>)
 8008b10:	4413      	add	r3, r2
 8008b12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b18:	4a1d      	ldr	r2, [pc, #116]	@ (8008b90 <prvHeapInit+0xb0>)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8008b90 <prvHeapInit+0xb0>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	4413      	add	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	1a9b      	subs	r3, r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4a15      	ldr	r2, [pc, #84]	@ (8008b94 <prvHeapInit+0xb4>)
 8008b40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b42:	4b14      	ldr	r3, [pc, #80]	@ (8008b94 <prvHeapInit+0xb4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2200      	movs	r2, #0
 8008b48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b4a:	4b12      	ldr	r3, [pc, #72]	@ (8008b94 <prvHeapInit+0xb4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	1ad2      	subs	r2, r2, r3
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b60:	4b0c      	ldr	r3, [pc, #48]	@ (8008b94 <prvHeapInit+0xb4>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b98 <prvHeapInit+0xb8>)
 8008b6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	4a09      	ldr	r2, [pc, #36]	@ (8008b9c <prvHeapInit+0xbc>)
 8008b76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b78:	4b09      	ldr	r3, [pc, #36]	@ (8008ba0 <prvHeapInit+0xc0>)
 8008b7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b7e:	601a      	str	r2, [r3, #0]
}
 8008b80:	bf00      	nop
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	20001510 	.word	0x20001510
 8008b90:	200020c8 	.word	0x200020c8
 8008b94:	200020d0 	.word	0x200020d0
 8008b98:	200020d8 	.word	0x200020d8
 8008b9c:	200020d4 	.word	0x200020d4
 8008ba0:	200020e4 	.word	0x200020e4

08008ba4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008bac:	4b28      	ldr	r3, [pc, #160]	@ (8008c50 <prvInsertBlockIntoFreeList+0xac>)
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	e002      	b.n	8008bb8 <prvInsertBlockIntoFreeList+0x14>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d8f7      	bhi.n	8008bb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	4413      	add	r3, r2
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d108      	bne.n	8008be6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	441a      	add	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	441a      	add	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d118      	bne.n	8008c2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b15      	ldr	r3, [pc, #84]	@ (8008c54 <prvInsertBlockIntoFreeList+0xb0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d00d      	beq.n	8008c22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	441a      	add	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	e008      	b.n	8008c34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c22:	4b0c      	ldr	r3, [pc, #48]	@ (8008c54 <prvInsertBlockIntoFreeList+0xb0>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	e003      	b.n	8008c34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d002      	beq.n	8008c42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c42:	bf00      	nop
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	200020c8 	.word	0x200020c8
 8008c54:	200020d0 	.word	0x200020d0

08008c58 <memset>:
 8008c58:	4402      	add	r2, r0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d100      	bne.n	8008c62 <memset+0xa>
 8008c60:	4770      	bx	lr
 8008c62:	f803 1b01 	strb.w	r1, [r3], #1
 8008c66:	e7f9      	b.n	8008c5c <memset+0x4>

08008c68 <__libc_init_array>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8008ca0 <__libc_init_array+0x38>)
 8008c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8008ca4 <__libc_init_array+0x3c>)
 8008c6e:	1b64      	subs	r4, r4, r5
 8008c70:	10a4      	asrs	r4, r4, #2
 8008c72:	2600      	movs	r6, #0
 8008c74:	42a6      	cmp	r6, r4
 8008c76:	d109      	bne.n	8008c8c <__libc_init_array+0x24>
 8008c78:	4d0b      	ldr	r5, [pc, #44]	@ (8008ca8 <__libc_init_array+0x40>)
 8008c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8008cac <__libc_init_array+0x44>)
 8008c7c:	f000 f826 	bl	8008ccc <_init>
 8008c80:	1b64      	subs	r4, r4, r5
 8008c82:	10a4      	asrs	r4, r4, #2
 8008c84:	2600      	movs	r6, #0
 8008c86:	42a6      	cmp	r6, r4
 8008c88:	d105      	bne.n	8008c96 <__libc_init_array+0x2e>
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c90:	4798      	blx	r3
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7ee      	b.n	8008c74 <__libc_init_array+0xc>
 8008c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9a:	4798      	blx	r3
 8008c9c:	3601      	adds	r6, #1
 8008c9e:	e7f2      	b.n	8008c86 <__libc_init_array+0x1e>
 8008ca0:	08008df4 	.word	0x08008df4
 8008ca4:	08008df4 	.word	0x08008df4
 8008ca8:	08008df4 	.word	0x08008df4
 8008cac:	08008df8 	.word	0x08008df8

08008cb0 <memcpy>:
 8008cb0:	440a      	add	r2, r1
 8008cb2:	4291      	cmp	r1, r2
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d100      	bne.n	8008cbc <memcpy+0xc>
 8008cba:	4770      	bx	lr
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cc6:	4291      	cmp	r1, r2
 8008cc8:	d1f9      	bne.n	8008cbe <memcpy+0xe>
 8008cca:	bd10      	pop	{r4, pc}

08008ccc <_init>:
 8008ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cce:	bf00      	nop
 8008cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd2:	bc08      	pop	{r3}
 8008cd4:	469e      	mov	lr, r3
 8008cd6:	4770      	bx	lr

08008cd8 <_fini>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr
