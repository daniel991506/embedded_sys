
lab6-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a97c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800ab0c  0800ab0c  0000bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac20  0800ac20  0000c06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac20  0800ac20  0000bc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac28  0800ac28  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac28  0800ac28  0000bc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac2c  0800ac2c  0000bc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800ac30  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c4  2000006c  0800ac9c  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002530  0800ac9c  0000c530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a776  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000530b  00000000  00000000  00036812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002838  00000000  00000000  0003bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f61  00000000  00000000  0003e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006cd3  00000000  00000000  000402b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d866  00000000  00000000  00046f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dc6d  00000000  00000000  000747f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019245f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b6c4  00000000  00000000  001924a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0019db68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aaf4 	.word	0x0800aaf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800aaf4 	.word	0x0800aaf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <__NVIC_SetVector+0x34>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	3310      	adds	r3, #16
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4413      	add	r3, r2
 8000580:	461a      	mov	r2, r3
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1 ,0xFFFF);
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005a6:	2201      	movs	r2, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <__io_putchar+0x20>)
 80005aa:	f005 fda9 	bl	8006100 <HAL_UART_Transmit>
	return ch;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200001bc 	.word	0x200001bc

080005bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <HAL_ADC_MspInit+0x38>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d10b      	bne.n	80005e6 <HAL_ADC_MspInit+0x2a>
    {

    	/* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 80005ce:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	4a09      	ldr	r2, [pc, #36]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <HAL_ADC_MspInit+0x3c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    }

}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	50040000 	.word	0x50040000
 80005f8:	40021000 	.word	0x40021000

080005fc <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800061e:	4b35      	ldr	r3, [pc, #212]	@ (80006f4 <ADC1_Init+0xf8>)
 8000620:	4a35      	ldr	r2, [pc, #212]	@ (80006f8 <ADC1_Init+0xfc>)
 8000622:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000624:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <ADC1_Init+0xf8>)
 8000626:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800062a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <ADC1_Init+0xf8>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <ADC1_Init+0xf8>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <ADC1_Init+0xf8>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <ADC1_Init+0xf8>)
 8000640:	2204      	movs	r2, #4
 8000642:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <ADC1_Init+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <ADC1_Init+0xf8>)
 800064c:	2200      	movs	r2, #0
 800064e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <ADC1_Init+0xf8>)
 8000652:	2201      	movs	r2, #1
 8000654:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <ADC1_Init+0xf8>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800065e:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <ADC1_Init+0xf8>)
 8000660:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000664:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000666:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <ADC1_Init+0xf8>)
 8000668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <ADC1_Init+0xf8>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <ADC1_Init+0xf8>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <ADC1_Init+0xf8>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	481b      	ldr	r0, [pc, #108]	@ (80006f4 <ADC1_Init+0xf8>)
 8000686:	f001 fba1 	bl	8001dcc <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <ADC1_Init+0x98>
    {
        Error_Handler();
 8000690:	f000 fd20 	bl	80010d4 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000694:	217f      	movs	r1, #127	@ 0x7f
 8000696:	4817      	ldr	r0, [pc, #92]	@ (80006f4 <ADC1_Init+0xf8>)
 8000698:	f002 fb6c 	bl	8002d74 <HAL_ADCEx_Calibration_Start>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <ADC1_Init+0xaa>
    {
        Error_Handler();
 80006a2:	f000 fd17 	bl	80010d4 <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <ADC1_Init+0xf8>)
 80006b2:	f002 fbbf 	bl	8002e34 <HAL_ADCEx_MultiModeConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <ADC1_Init+0xc4>
    {
        Error_Handler();
 80006bc:	f000 fd0a 	bl	80010d4 <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <ADC1_Init+0x100>)
 80006c2:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2306      	movs	r3, #6
 80006c6:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006cc:	237f      	movs	r3, #127	@ 0x7f
 80006ce:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d0:	2304      	movs	r3, #4
 80006d2:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <ADC1_Init+0xf8>)
 80006de:	f001 fd8b 	bl	80021f8 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <ADC1_Init+0xf0>
    {
        Error_Handler();
 80006e8:	f000 fcf4 	bl	80010d4 <Error_Handler>
    }

}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	@ 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000800 	.word	0x20000800
 80006f8:	50040000 	.word	0x50040000
 80006fc:	c7520000 	.word	0xc7520000

08000700 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)  // 確�?�是 ADC1 ??��?�調
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <HAL_ADC_ConvCpltCallback+0x44>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d113      	bne.n	800073a <HAL_ADC_ConvCpltCallback+0x3a>
    {
        // ??��?? adcBuffer ??��?��?�部??�數???
        for (int i = SAMPLE_BUFFER_SIZE / 2; i < SAMPLE_BUFFER_SIZE; i++) {
 8000712:	2380      	movs	r3, #128	@ 0x80
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e00d      	b.n	8000734 <HAL_ADC_ConvCpltCallback+0x34>
            printf("ADC Lower Half Value[%d]: %d\n", i - SAMPLE_BUFFER_SIZE / 2, sample_buffer[i]);
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f1a3 0180 	sub.w	r1, r3, #128	@ 0x80
 800071e:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <HAL_ADC_ConvCpltCallback+0x48>)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000726:	461a      	mov	r2, r3
 8000728:	4808      	ldr	r0, [pc, #32]	@ (800074c <HAL_ADC_ConvCpltCallback+0x4c>)
 800072a:	f009 fb67 	bl	8009dfc <iprintf>
        for (int i = SAMPLE_BUFFER_SIZE / 2; i < SAMPLE_BUFFER_SIZE; i++) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2bff      	cmp	r3, #255	@ 0xff
 8000738:	ddee      	ble.n	8000718 <HAL_ADC_ConvCpltCallback+0x18>
        }
    }
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	50040000 	.word	0x50040000
 8000748:	200008ac 	.word	0x200008ac
 800074c:	0800ab28 	.word	0x0800ab28

08000750 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    	//to do: inform RTOS task to print out sensor data
//	int i;
//	for(i=0; i<SAMPLE_BUFFER_SIZE/2; ++i)
//		printf("%d",sample_buffer[i]);
//	printf("\n");
	if (hadc->Instance == ADC1)  // 確�?�是 ADC1 ??��?�調
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d111      	bne.n	8000786 <HAL_ADC_ConvHalfCpltCallback+0x36>
	    {
	        // ??��?? adcBuffer ??��?��?�部??�數???
	        for (int i = 0; i < SAMPLE_BUFFER_SIZE / 2; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e00b      	b.n	8000780 <HAL_ADC_ConvHalfCpltCallback+0x30>
	            printf("ADC Upper Half Value[%d]: %d\n", i, sample_buffer[i]);
 8000768:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000770:	461a      	mov	r2, r3
 8000772:	68f9      	ldr	r1, [r7, #12]
 8000774:	4808      	ldr	r0, [pc, #32]	@ (8000798 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000776:	f009 fb41 	bl	8009dfc <iprintf>
	        for (int i = 0; i < SAMPLE_BUFFER_SIZE / 2; i++) {
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b7f      	cmp	r3, #127	@ 0x7f
 8000784:	ddf0      	ble.n	8000768 <HAL_ADC_ConvHalfCpltCallback+0x18>
	        }
	    }
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	50040000 	.word	0x50040000
 8000794:	200008ac 	.word	0x200008ac
 8000798:	0800ab48 	.word	0x0800ab48

0800079c <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <DMA1_Channel1_IRQHandler+0x20>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68da      	ldr	r2, [r3, #12]
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <DMA1_Channel1_IRQHandler+0x20>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f042 0202 	orr.w	r2, r2, #2
 80007ae:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 80007b0:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <DMA1_Channel1_IRQHandler+0x24>)
 80007b2:	f002 ff25 	bl	8003600 <HAL_DMA_IRQHandler>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000800 	.word	0x20000800
 80007c0:	20000864 	.word	0x20000864

080007c4 <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 80007ca:	4b24      	ldr	r3, [pc, #144]	@ (800085c <ADC1_DMA1CH1_init+0x98>)
 80007cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ce:	4a23      	ldr	r2, [pc, #140]	@ (800085c <ADC1_DMA1CH1_init+0x98>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80007d6:	4b21      	ldr	r3, [pc, #132]	@ (800085c <ADC1_DMA1CH1_init+0x98>)
 80007d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 80007e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 80007e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000864 <ADC1_DMA1CH1_init+0xa0>)
 80007e6:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 80007fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000800:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 8000804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000808:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 800080c:	2220      	movs	r2, #32
 800080e:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 8000812:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000816:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 8000818:	4811      	ldr	r0, [pc, #68]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 800081a:	f002 fdd9 	bl	80033d0 <HAL_DMA_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <ADC1_DMA1CH1_init+0x64>
    {
        Error_Handler();
 8000824:	f000 fc56 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <ADC1_DMA1CH1_init+0xa4>)
 800082a:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 800082c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <ADC1_DMA1CH1_init+0x9c>)
 8000830:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <ADC1_DMA1CH1_init+0xa4>)
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 8000834:	f7ff fee2 	bl	80005fc <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <ADC1_DMA1CH1_init+0xa8>)
 800083a:	4619      	mov	r1, r3
 800083c:	200b      	movs	r0, #11
 800083e:	f7ff fe8f 	bl	8000560 <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	200b      	movs	r0, #11
 8000848:	f002 fc7f 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800084c:	200b      	movs	r0, #11
 800084e:	f002 fc98 	bl	8003182 <HAL_NVIC_EnableIRQ>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	20000864 	.word	0x20000864
 8000864:	40020008 	.word	0x40020008
 8000868:	20000800 	.word	0x20000800
 800086c:	0800079d 	.word	0x0800079d

08000870 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_TIM_Base_MspInit+0x38>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d10b      	bne.n	800089a <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_TIM_Base_MspInit+0x3c>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000886:	4a09      	ldr	r2, [pc, #36]	@ (80008ac <HAL_TIM_Base_MspInit+0x3c>)
 8000888:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800088c:	6613      	str	r3, [r2, #96]	@ 0x60
 800088e:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <HAL_TIM_Base_MspInit+0x3c>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    }
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40012c00 	.word	0x40012c00
 80008ac:	40021000 	.word	0x40021000

080008b0 <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 80008ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <TIM1_Init+0x98>)
 80008d0:	4a1e      	ldr	r2, [pc, #120]	@ (800094c <TIM1_Init+0x9c>)
 80008d2:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 4000 - 1;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <TIM1_Init+0x98>)
 80008d6:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80008da:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <TIM1_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000 - 1;
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <TIM1_Init+0x98>)
 80008e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008e8:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <TIM1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <TIM1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f6:	4814      	ldr	r0, [pc, #80]	@ (8000948 <TIM1_Init+0x98>)
 80008f8:	f005 f85b 	bl	80059b2 <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <TIM1_Init+0x56>
    {
        Error_Handler();
 8000902:	f000 fbe7 	bl	80010d4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090a:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <TIM1_Init+0x98>)
 8000914:	f005 f914 	bl	8005b40 <HAL_TIM_ConfigClockSource>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <TIM1_Init+0x72>
    {
        Error_Handler();
 800091e:	f000 fbd9 	bl	80010d4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000922:	2320      	movs	r3, #32
 8000924:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <TIM1_Init+0x98>)
 8000930:	f005 fb10 	bl	8005f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <TIM1_Init+0x8e>
    {
        Error_Handler();
 800093a:	f000 fbcb 	bl	80010d4 <Error_Handler>
    }
}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200007b4 	.word	0x200007b4
 800094c:	40012c00 	.word	0x40012c00

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 ffa5 	bl	80018a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f838 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 fa00 	bl	8000d60 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000960:	f000 f896 	bl	8000a90 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000964:	f000 f8cc 	bl	8000b00 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000968:	f000 f908 	bl	8000b7c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800096c:	f000 f92c 	bl	8000bc8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000970:	f000 f968 	bl	8000c44 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000974:	f000 f996 	bl	8000ca4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000978:	f000 f9c4 	bl	8000d04 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  TIM1_Init();
 800097c:	f7ff ff98 	bl	80008b0 <TIM1_Init>
  ADC1_DMA1CH1_init();
 8000980:	f7ff ff20 	bl	80007c4 <ADC1_DMA1CH1_init>


  //HAL_ADC_Start_DMA(/*to do ........................*/);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)sample_buffer, SAMPLE_BUFFER_SIZE);
 8000984:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000988:	490a      	ldr	r1, [pc, #40]	@ (80009b4 <main+0x64>)
 800098a:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <main+0x68>)
 800098c:	f001 fb6e 	bl	800206c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8000990:	480a      	ldr	r0, [pc, #40]	@ (80009bc <main+0x6c>)
 8000992:	f005 f865 	bl	8005a60 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000996:	f006 fbf1 	bl	800717c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800099a:	4a09      	ldr	r2, [pc, #36]	@ (80009c0 <main+0x70>)
 800099c:	2100      	movs	r1, #0
 800099e:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <main+0x74>)
 80009a0:	f006 fc36 	bl	8007210 <osThreadNew>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <main+0x78>)
 80009a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009aa:	f006 fc0b 	bl	80071c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ae:	bf00      	nop
 80009b0:	e7fd      	b.n	80009ae <main+0x5e>
 80009b2:	bf00      	nop
 80009b4:	200008ac 	.word	0x200008ac
 80009b8:	20000800 	.word	0x20000800
 80009bc:	200007b4 	.word	0x200007b4
 80009c0:	0800ab80 	.word	0x0800ab80
 80009c4:	080010c5 	.word	0x080010c5
 80009c8:	200007b0 	.word	0x200007b0

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	@ 0x58
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2244      	movs	r2, #68	@ 0x44
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f009 fa63 	bl	8009ea6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009f2:	f003 fb4d 	bl	8004090 <HAL_PWREx_ControlVoltageScaling>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009fc:	f000 fb6a 	bl	80010d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a00:	f003 fb28 	bl	8004054 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a04:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <SystemClock_Config+0xc0>)
 8000a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a0a:	4a20      	ldr	r2, [pc, #128]	@ (8000a8c <SystemClock_Config+0xc0>)
 8000a0c:	f023 0318 	bic.w	r3, r3, #24
 8000a10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a14:	2314      	movs	r3, #20
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a24:	2360      	movs	r3, #96	@ 0x60
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a34:	2328      	movs	r3, #40	@ 0x28
 8000a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fc43 	bl	80042d4 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a54:	f000 fb3e 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2104      	movs	r1, #4
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 f80b 	bl	8004a8c <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a7c:	f000 fb2a 	bl	80010d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a80:	f004 fd12 	bl	80054a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a84:	bf00      	nop
 8000a86:	3758      	adds	r7, #88	@ 0x58
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000

08000a90 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000a96:	4a19      	ldr	r2, [pc, #100]	@ (8000afc <MX_DFSDM1_Init+0x6c>)
 8000a98:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000aba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000abe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ae6:	f002 fb67 	bl	80031b8 <HAL_DFSDM_ChannelInit>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000af0:	f000 faf0 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000088 	.word	0x20000088
 8000afc:	40016020 	.word	0x40016020

08000b00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b06:	4a1c      	ldr	r2, [pc, #112]	@ (8000b78 <MX_I2C2_Init+0x78>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b0c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000b10:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b12:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b30:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b3c:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b3e:	f003 f824 	bl	8003b8a <HAL_I2C_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 fac4 	bl	80010d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b50:	f003 f8b6 	bl	8003cc0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b5a:	f000 fabb 	bl	80010d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <MX_I2C2_Init+0x74>)
 8000b62:	f003 f8f8 	bl	8003d56 <HAL_I2CEx_ConfigDigitalFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b6c:	f000 fab2 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	200000c0 	.word	0x200000c0
 8000b78:	40005800 	.word	0x40005800

08000b7c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_QUADSPI_Init+0x44>)
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <MX_QUADSPI_Init+0x48>)
 8000b84:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_QUADSPI_Init+0x44>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_QUADSPI_Init+0x44>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_QUADSPI_Init+0x44>)
 8000b94:	2210      	movs	r2, #16
 8000b96:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_QUADSPI_Init+0x44>)
 8000b9a:	2217      	movs	r2, #23
 8000b9c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_QUADSPI_Init+0x44>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_QUADSPI_Init+0x44>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_QUADSPI_Init+0x44>)
 8000bac:	f003 fad6 	bl	800415c <HAL_QSPI_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000bb6:	f000 fa8d 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000114 	.word	0x20000114
 8000bc4:	a0001000 	.word	0xa0001000

08000bc8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000bce:	4a1c      	ldr	r2, [pc, #112]	@ (8000c40 <MX_SPI3_Init+0x78>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000be2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000be6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bfa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000c16:	2207      	movs	r2, #7
 8000c18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000c22:	2208      	movs	r2, #8
 8000c24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_SPI3_Init+0x74>)
 8000c28:	f004 fe20 	bl	800586c <HAL_SPI_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c32:	f000 fa4f 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000158 	.word	0x20000158
 8000c40:	40003c00 	.word	0x40003c00

08000c44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c4a:	4a15      	ldr	r2, [pc, #84]	@ (8000ca0 <MX_USART1_UART_Init+0x5c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_USART1_UART_Init+0x58>)
 8000c88:	f005 f9ec 	bl	8006064 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c92:	f000 fa1f 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001bc 	.word	0x200001bc
 8000ca0:	40013800 	.word	0x40013800

08000ca4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <MX_USART3_UART_Init+0x5c>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART3_UART_Init+0x58>)
 8000ce8:	f005 f9bc 	bl	8006064 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cf2:	f000 f9ef 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000244 	.word	0x20000244
 8000d00:	40004800 	.word	0x40004800

08000d04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d12:	2206      	movs	r2, #6
 8000d14:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d18:	2202      	movs	r2, #2
 8000d1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1e:	2202      	movs	r2, #2
 8000d20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d48:	f003 f851 	bl	8003dee <HAL_PCD_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d52:	f000 f9bf 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200002cc 	.word	0x200002cc

08000d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d76:	4bbd      	ldr	r3, [pc, #756]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	4abc      	ldr	r2, [pc, #752]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000d7c:	f043 0310 	orr.w	r3, r3, #16
 8000d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d82:	4bba      	ldr	r3, [pc, #744]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4bb7      	ldr	r3, [pc, #732]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	4ab6      	ldr	r2, [pc, #728]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9a:	4bb4      	ldr	r3, [pc, #720]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4bb1      	ldr	r3, [pc, #708]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	4ab0      	ldr	r2, [pc, #704]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db2:	4bae      	ldr	r3, [pc, #696]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4bab      	ldr	r3, [pc, #684]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	4aaa      	ldr	r2, [pc, #680]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dca:	4ba8      	ldr	r3, [pc, #672]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd6:	4ba5      	ldr	r3, [pc, #660]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	4aa4      	ldr	r2, [pc, #656]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de2:	4ba2      	ldr	r3, [pc, #648]	@ (800106c <MX_GPIO_Init+0x30c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000df4:	489e      	ldr	r0, [pc, #632]	@ (8001070 <MX_GPIO_Init+0x310>)
 8000df6:	f002 fe8d 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000e00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e04:	f002 fe86 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000e0e:	4899      	ldr	r0, [pc, #612]	@ (8001074 <MX_GPIO_Init+0x314>)
 8000e10:	f002 fe80 	bl	8003b14 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000e1a:	4897      	ldr	r0, [pc, #604]	@ (8001078 <MX_GPIO_Init+0x318>)
 8000e1c:	f002 fe7a 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e26:	4894      	ldr	r0, [pc, #592]	@ (8001078 <MX_GPIO_Init+0x318>)
 8000e28:	f002 fe74 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e32:	4892      	ldr	r0, [pc, #584]	@ (800107c <MX_GPIO_Init+0x31c>)
 8000e34:	f002 fe6e 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	488d      	ldr	r0, [pc, #564]	@ (8001074 <MX_GPIO_Init+0x314>)
 8000e3e:	f002 fe69 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2101      	movs	r1, #1
 8000e46:	488a      	ldr	r0, [pc, #552]	@ (8001070 <MX_GPIO_Init+0x310>)
 8000e48:	f002 fe64 	bl	8003b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e4c:	f240 1315 	movw	r3, #277	@ 0x115
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4882      	ldr	r0, [pc, #520]	@ (8001070 <MX_GPIO_Init+0x310>)
 8000e66:	f002 fcab 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e6a:	236a      	movs	r3, #106	@ 0x6a
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	487c      	ldr	r0, [pc, #496]	@ (8001070 <MX_GPIO_Init+0x310>)
 8000e80:	f002 fc9e 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e8a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4878      	ldr	r0, [pc, #480]	@ (800107c <MX_GPIO_Init+0x31c>)
 8000e9c:	f002 fc90 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ea0:	233f      	movs	r3, #63	@ 0x3f
 8000ea2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ea4:	230b      	movs	r3, #11
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4872      	ldr	r0, [pc, #456]	@ (800107c <MX_GPIO_Init+0x31c>)
 8000eb4:	f002 fc84 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed6:	f002 fc73 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000eda:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef6:	f002 fc63 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000efa:	2308      	movs	r3, #8
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f18:	f002 fc52 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f20:	230b      	movs	r3, #11
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f32:	f002 fc45 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f36:	23e0      	movs	r3, #224	@ 0xe0
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f46:	2305      	movs	r3, #5
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f54:	f002 fc34 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4841      	ldr	r0, [pc, #260]	@ (8001074 <MX_GPIO_Init+0x314>)
 8000f6e:	f002 fc27 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f72:	2302      	movs	r3, #2
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f76:	230b      	movs	r3, #11
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	483b      	ldr	r0, [pc, #236]	@ (8001074 <MX_GPIO_Init+0x314>)
 8000f86:	f002 fc1b 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f8a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f8e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4834      	ldr	r0, [pc, #208]	@ (8001074 <MX_GPIO_Init+0x314>)
 8000fa4:	f002 fc0c 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000fa8:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000fac:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	482e      	ldr	r0, [pc, #184]	@ (8001078 <MX_GPIO_Init+0x318>)
 8000fc0:	f002 fbfe 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000fc4:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4826      	ldr	r0, [pc, #152]	@ (8001078 <MX_GPIO_Init+0x318>)
 8000fde:	f002 fbef 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fe2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4820      	ldr	r0, [pc, #128]	@ (800107c <MX_GPIO_Init+0x31c>)
 8000ffc:	f002 fbe0 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001000:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001006:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4819      	ldr	r0, [pc, #100]	@ (800107c <MX_GPIO_Init+0x31c>)
 8001018:	f002 fbd2 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800101c:	2302      	movs	r3, #2
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800102c:	2305      	movs	r3, #5
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	@ (8001078 <MX_GPIO_Init+0x318>)
 8001038:	f002 fbc2 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800103c:	2378      	movs	r3, #120	@ 0x78
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104c:	2307      	movs	r3, #7
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4808      	ldr	r0, [pc, #32]	@ (8001078 <MX_GPIO_Init+0x318>)
 8001058:	f002 fbb2 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800105c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001062:	2312      	movs	r3, #18
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	e00a      	b.n	8001080 <MX_GPIO_Init+0x320>
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	48001000 	.word	0x48001000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000c00 	.word	0x48000c00
 800107c:	48000800 	.word	0x48000800
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001086:	2304      	movs	r3, #4
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <MX_GPIO_Init+0x360>)
 8001092:	f002 fb95 	bl	80037c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2105      	movs	r1, #5
 800109a:	2017      	movs	r0, #23
 800109c:	f002 f855 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010a0:	2017      	movs	r0, #23
 80010a2:	f002 f86e 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2105      	movs	r1, #5
 80010aa:	2028      	movs	r0, #40	@ 0x28
 80010ac:	f002 f84d 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010b0:	2028      	movs	r0, #40	@ 0x28
 80010b2:	f002 f866 	bl	8003182 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	@ 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	48000400 	.word	0x48000400

080010c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f006 f931 	bl	8007334 <osDelay>
 80010d2:	e7fb      	b.n	80010cc <StartDefaultTask+0x8>

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <Error_Handler+0x8>

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_MspInit+0x4c>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <HAL_MspInit+0x4c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <HAL_MspInit+0x4c>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HAL_MspInit+0x4c>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <HAL_MspInit+0x4c>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001108:	6593      	str	r3, [r2, #88]	@ 0x58
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <HAL_MspInit+0x4c>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	210f      	movs	r1, #15
 800111a:	f06f 0001 	mvn.w	r0, #1
 800111e:	f002 f814 	bl	800314a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ac      	sub	sp, #176	@ 0xb0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2288      	movs	r2, #136	@ 0x88
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f008 fea8 	bl	8009ea6 <memset>
  if(DFSDM1_Init == 0)
 8001156:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d142      	bne.n	80011e4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800115e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001162:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4618      	mov	r0, r3
 8001170:	f003 feb0 	bl	8004ed4 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800117a:	f7ff ffab 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800117e:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001182:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001184:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001188:	6613      	str	r3, [r2, #96]	@ 0x60
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800118c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a15      	ldr	r2, [pc, #84]	@ (80011f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80011ae:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80011b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011c8:	2306      	movs	r3, #6
 80011ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011d2:	4619      	mov	r1, r3
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80011d6:	f002 faf3 	bl	80037c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80011da:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a02      	ldr	r2, [pc, #8]	@ (80011ec <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011e2:	6013      	str	r3, [r2, #0]
  }

}
 80011e4:	bf00      	nop
 80011e6:	37b0      	adds	r7, #176	@ 0xb0
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000aac 	.word	0x20000aac
 80011f0:	40021000 	.word	0x40021000
 80011f4:	48001000 	.word	0x48001000

080011f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0ac      	sub	sp, #176	@ 0xb0
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2288      	movs	r2, #136	@ 0x88
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f008 fe44 	bl	8009ea6 <memset>
  if(hi2c->Instance==I2C2)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a21      	ldr	r2, [pc, #132]	@ (80012a8 <HAL_I2C_MspInit+0xb0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d13b      	bne.n	80012a0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800122c:	2300      	movs	r3, #0
 800122e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fe4d 	bl	8004ed4 <HAL_RCCEx_PeriphCLKConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001240:	f7ff ff48 	bl	80010d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_I2C_MspInit+0xb4>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001248:	4a18      	ldr	r2, [pc, #96]	@ (80012ac <HAL_I2C_MspInit+0xb4>)
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001250:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <HAL_I2C_MspInit+0xb4>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800125c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001260:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001264:	2312      	movs	r3, #18
 8001266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126a:	2301      	movs	r3, #1
 800126c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001276:	2304      	movs	r3, #4
 8001278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001280:	4619      	mov	r1, r3
 8001282:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <HAL_I2C_MspInit+0xb8>)
 8001284:	f002 fa9c 	bl	80037c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <HAL_I2C_MspInit+0xb4>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128c:	4a07      	ldr	r2, [pc, #28]	@ (80012ac <HAL_I2C_MspInit+0xb4>)
 800128e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001292:	6593      	str	r3, [r2, #88]	@ 0x58
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_I2C_MspInit+0xb4>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	37b0      	adds	r7, #176	@ 0xb0
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40005800 	.word	0x40005800
 80012ac:	40021000 	.word	0x40021000
 80012b0:	48000400 	.word	0x48000400

080012b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <HAL_QSPI_MspInit+0x7c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d128      	bne.n	8001328 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_QSPI_MspInit+0x80>)
 80012d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012da:	4a16      	ldr	r2, [pc, #88]	@ (8001334 <HAL_QSPI_MspInit+0x80>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_QSPI_MspInit+0x80>)
 80012e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <HAL_QSPI_MspInit+0x80>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	4a10      	ldr	r2, [pc, #64]	@ (8001334 <HAL_QSPI_MspInit+0x80>)
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <HAL_QSPI_MspInit+0x80>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001306:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800130a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001318:	230a      	movs	r3, #10
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <HAL_QSPI_MspInit+0x84>)
 8001324:	f002 fa4c 	bl	80037c0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	@ 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	a0001000 	.word	0xa0001000
 8001334:	40021000 	.word	0x40021000
 8001338:	48001000 	.word	0x48001000

0800133c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <HAL_SPI_MspInit+0x7c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d128      	bne.n	80013b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001362:	4a16      	ldr	r2, [pc, #88]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 8001364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001368:	6593      	str	r3, [r2, #88]	@ 0x58
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_SPI_MspInit+0x80>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800138e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013a0:	2306      	movs	r3, #6
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <HAL_SPI_MspInit+0x84>)
 80013ac:	f002 fa08 	bl	80037c0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	@ 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40003c00 	.word	0x40003c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000800 	.word	0x48000800

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0ae      	sub	sp, #184	@ 0xb8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	2288      	movs	r2, #136	@ 0x88
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f008 fd5e 	bl	8009ea6 <memset>
  if(huart->Instance==USART1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a42      	ldr	r2, [pc, #264]	@ (80014f8 <HAL_UART_MspInit+0x134>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d13b      	bne.n	800146c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013f8:	2300      	movs	r3, #0
 80013fa:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4618      	mov	r0, r3
 8001402:	f003 fd67 	bl	8004ed4 <HAL_RCCEx_PeriphCLKConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800140c:	f7ff fe62 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001410:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <HAL_UART_MspInit+0x138>)
 8001412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001414:	4a39      	ldr	r2, [pc, #228]	@ (80014fc <HAL_UART_MspInit+0x138>)
 8001416:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800141a:	6613      	str	r3, [r2, #96]	@ 0x60
 800141c:	4b37      	ldr	r3, [pc, #220]	@ (80014fc <HAL_UART_MspInit+0x138>)
 800141e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <HAL_UART_MspInit+0x138>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142c:	4a33      	ldr	r2, [pc, #204]	@ (80014fc <HAL_UART_MspInit+0x138>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001434:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <HAL_UART_MspInit+0x138>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001440:	23c0      	movs	r3, #192	@ 0xc0
 8001442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001458:	2307      	movs	r3, #7
 800145a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001462:	4619      	mov	r1, r3
 8001464:	4826      	ldr	r0, [pc, #152]	@ (8001500 <HAL_UART_MspInit+0x13c>)
 8001466:	f002 f9ab 	bl	80037c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800146a:	e040      	b.n	80014ee <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a24      	ldr	r2, [pc, #144]	@ (8001504 <HAL_UART_MspInit+0x140>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d13b      	bne.n	80014ee <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001476:	2304      	movs	r3, #4
 8001478:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800147a:	2300      	movs	r3, #0
 800147c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fd26 	bl	8004ed4 <HAL_RCCEx_PeriphCLKConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800148e:	f7ff fe21 	bl	80010d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001492:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <HAL_UART_MspInit+0x138>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	4a19      	ldr	r2, [pc, #100]	@ (80014fc <HAL_UART_MspInit+0x138>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149c:	6593      	str	r3, [r2, #88]	@ 0x58
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <HAL_UART_MspInit+0x138>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <HAL_UART_MspInit+0x138>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	4a13      	ldr	r2, [pc, #76]	@ (80014fc <HAL_UART_MspInit+0x138>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <HAL_UART_MspInit+0x138>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80014c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014dc:	2307      	movs	r3, #7
 80014de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <HAL_UART_MspInit+0x144>)
 80014ea:	f002 f969 	bl	80037c0 <HAL_GPIO_Init>
}
 80014ee:	bf00      	nop
 80014f0:	37b8      	adds	r7, #184	@ 0xb8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40013800 	.word	0x40013800
 80014fc:	40021000 	.word	0x40021000
 8001500:	48000400 	.word	0x48000400
 8001504:	40004800 	.word	0x40004800
 8001508:	48000c00 	.word	0x48000c00

0800150c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0ac      	sub	sp, #176	@ 0xb0
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2288      	movs	r2, #136	@ 0x88
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f008 fcba 	bl	8009ea6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800153a:	d17c      	bne.n	8001636 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800153c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001540:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001542:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001546:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001552:	2318      	movs	r3, #24
 8001554:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001556:	2307      	movs	r3, #7
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800155a:	2302      	movs	r3, #2
 800155c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800155e:	2302      	movs	r3, #2
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001562:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fcb1 	bl	8004ed4 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001578:	f7ff fdac 	bl	80010d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001580:	4a2f      	ldr	r2, [pc, #188]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001588:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001598:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ac:	4619      	mov	r1, r3
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b2:	f002 f905 	bl	80037c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80015b6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015d0:	230a      	movs	r3, #10
 80015d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e0:	f002 f8ee 	bl	80037c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015e4:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 80015ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fc:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d114      	bne.n	8001632 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	4a0c      	ldr	r2, [pc, #48]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001612:	6593      	str	r3, [r2, #88]	@ 0x58
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001620:	f002 fd8c 	bl	800413c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001628:	4a05      	ldr	r2, [pc, #20]	@ (8001640 <HAL_PCD_MspInit+0x134>)
 800162a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001630:	e001      	b.n	8001636 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001632:	f002 fd83 	bl	800413c <HAL_PWREx_EnableVddUSB>
}
 8001636:	bf00      	nop
 8001638:	37b0      	adds	r7, #176	@ 0xb0
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167e:	f000 f965 	bl	800194c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001682:	f007 fa7f 	bl	8008b84 <xTaskGetSchedulerState>
 8001686:	4603      	mov	r3, r0
 8001688:	2b01      	cmp	r3, #1
 800168a:	d001      	beq.n	8001690 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800168c:	f008 f874 	bl	8009778 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001698:	2020      	movs	r0, #32
 800169a:	f002 fa53 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800169e:	2040      	movs	r0, #64	@ 0x40
 80016a0:	f002 fa50 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016a4:	2080      	movs	r0, #128	@ 0x80
 80016a6:	f002 fa4d 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016aa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016ae:	f002 fa49 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80016ba:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80016be:	f002 fa41 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80016c2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80016c6:	f002 fa3d 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80016ca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016ce:	f002 fa39 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80016d2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016d6:	f002 fa35 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80016da:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80016de:	f002 fa31 	bl	8003b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e00a      	b.n	800170e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f8:	f3af 8000 	nop.w
 80016fc:	4601      	mov	r1, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	b2ca      	uxtb	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbf0      	blt.n	80016f8 <_read+0x12>
  }

  return len;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e009      	b.n	8001746 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	60ba      	str	r2, [r7, #8]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff2c 	bl	8000598 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	429a      	cmp	r2, r3
 800174c:	dbf1      	blt.n	8001732 <_write+0x12>
  }
  return len;
 800174e:	687b      	ldr	r3, [r7, #4]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_close>:

int _close(int file)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001780:	605a      	str	r2, [r3, #4]
  return 0;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_isatty>:

int _isatty(int file)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	@ (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	@ (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f008 fba8 	bl	8009f44 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20018000 	.word	0x20018000
 8001820:	00000400 	.word	0x00000400
 8001824:	20000ab0 	.word	0x20000ab0
 8001828:	20002530 	.word	0x20002530

0800182c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	@ (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001888 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001854:	f7ff ffea 	bl	800182c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <LoopForever+0x6>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	@ (8001890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <LoopForever+0xe>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	@ (800189c <LoopForever+0x16>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187e:	f008 fb67 	bl	8009f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001882:	f7ff f865 	bl	8000950 <main>

08001886 <LoopForever>:

LoopForever:
    b LoopForever
 8001886:	e7fe      	b.n	8001886 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001888:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001894:	0800ac30 	.word	0x0800ac30
  ldr r2, =_sbss
 8001898:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800189c:	20002530 	.word	0x20002530

080018a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC1_2_IRQHandler>

080018a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f001 fc41 	bl	8003134 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b2:	200f      	movs	r0, #15
 80018b4:	f000 f80e 	bl	80018d4 <HAL_InitTick>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	e001      	b.n	80018c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c4:	f7ff fc0c 	bl	80010e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <HAL_InitTick+0x6c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d023      	beq.n	8001930 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <HAL_InitTick+0x70>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b14      	ldr	r3, [pc, #80]	@ (8001940 <HAL_InitTick+0x6c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 fc4d 	bl	800319e <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d809      	bhi.n	8001924 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f001 fc17 	bl	800314a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800191c:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <HAL_InitTick+0x74>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e007      	b.n	8001934 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
 8001928:	e004      	b.n	8001934 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e001      	b.n	8001934 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	20000ab4 	.word	0x20000ab4

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000ab4 	.word	0x20000ab4

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d005      	beq.n	80019b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_Delay+0x44>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b2:	bf00      	nop
 80019b4:	f7ff ffde 	bl	8001974 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d8f7      	bhi.n	80019b4 <HAL_Delay+0x28>
  {
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008

080019d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	609a      	str	r2, [r3, #8]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3360      	adds	r3, #96	@ 0x60
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <LL_ADC_SetOffset+0x44>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	03fff000 	.word	0x03fff000

08001a84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3360      	adds	r3, #96	@ 0x60
 8001a92:	461a      	mov	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3360      	adds	r3, #96	@ 0x60
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3330      	adds	r3, #48	@ 0x30
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	4413      	add	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	211f      	movs	r1, #31
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0e9b      	lsrs	r3, r3, #26
 8001b44:	f003 011f 	and.w	r1, r3, #31
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	431a      	orrs	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3314      	adds	r3, #20
 8001b74:	461a      	mov	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	0e5b      	lsrs	r3, r3, #25
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	4413      	add	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	0d1b      	lsrs	r3, r3, #20
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2107      	movs	r1, #7
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	401a      	ands	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	0d1b      	lsrs	r3, r3, #20
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bae:	bf00      	nop
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0318 	and.w	r3, r3, #24
 8001bde:	4908      	ldr	r1, [pc, #32]	@ (8001c00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001be0:	40d9      	lsrs	r1, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	400b      	ands	r3, r1
 8001be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bea:	431a      	orrs	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	0007ffff 	.word	0x0007ffff

08001c04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 031f 	and.w	r3, r3, #31
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6093      	str	r3, [r2, #8]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ca8:	d101      	bne.n	8001cae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ccc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cf8:	f043 0202 	orr.w	r2, r3, #2
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <LL_ADC_IsEnabled+0x18>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <LL_ADC_IsEnabled+0x1a>
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d101      	bne.n	8001d4a <LL_ADC_IsDisableOngoing+0x18>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <LL_ADC_IsDisableOngoing+0x1a>
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d101      	bne.n	8001d98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d101      	bne.n	8001dbe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	b089      	sub	sp, #36	@ 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e130      	b.n	8002048 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7fe fbe1 	bl	80005bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff19 	bl	8001c44 <LL_ADC_IsDeepPowerDownEnabled>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff feff 	bl	8001c20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff34 	bl	8001c94 <LL_ADC_IsInternalRegulatorEnabled>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d115      	bne.n	8001e5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff18 	bl	8001c6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e3c:	4b84      	ldr	r3, [pc, #528]	@ (8002050 <HAL_ADC_Init+0x284>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	4a84      	ldr	r2, [pc, #528]	@ (8002054 <HAL_ADC_Init+0x288>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e50:	e002      	b.n	8001e58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f9      	bne.n	8001e52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff16 	bl	8001c94 <LL_ADC_IsInternalRegulatorEnabled>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10d      	bne.n	8001e8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e72:	f043 0210 	orr.w	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff76 	bl	8001d80 <LL_ADC_REG_IsConversionOngoing>
 8001e94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 80c9 	bne.w	8002036 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 80c5 	bne.w	8002036 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001eb4:	f043 0202 	orr.w	r2, r3, #2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff23 	bl	8001d0c <LL_ADC_IsEnabled>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d115      	bne.n	8001ef8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ecc:	4862      	ldr	r0, [pc, #392]	@ (8002058 <HAL_ADC_Init+0x28c>)
 8001ece:	f7ff ff1d 	bl	8001d0c <LL_ADC_IsEnabled>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	4861      	ldr	r0, [pc, #388]	@ (800205c <HAL_ADC_Init+0x290>)
 8001ed6:	f7ff ff19 	bl	8001d0c <LL_ADC_IsEnabled>
 8001eda:	4603      	mov	r3, r0
 8001edc:	431c      	orrs	r4, r3
 8001ede:	4860      	ldr	r0, [pc, #384]	@ (8002060 <HAL_ADC_Init+0x294>)
 8001ee0:	f7ff ff14 	bl	8001d0c <LL_ADC_IsEnabled>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4323      	orrs	r3, r4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	485c      	ldr	r0, [pc, #368]	@ (8002064 <HAL_ADC_Init+0x298>)
 8001ef4:	f7ff fd6e 	bl	80019d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7e5b      	ldrb	r3, [r3, #25]
 8001efc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f02:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f08:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f0e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f16:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d106      	bne.n	8001f34 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	045b      	lsls	r3, r3, #17
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f48:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	4b44      	ldr	r3, [pc, #272]	@ (8002068 <HAL_ADC_Init+0x29c>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	69b9      	ldr	r1, [r7, #24]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff1c 	bl	8001da6 <LL_ADC_INJ_IsConversionOngoing>
 8001f6e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d13d      	bne.n	8001ff2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d13a      	bne.n	8001ff2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f80:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f88:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f98:	f023 0302 	bic.w	r3, r3, #2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	69b9      	ldr	r1, [r7, #24]
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d118      	bne.n	8001fe2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fba:	f023 0304 	bic.w	r3, r3, #4
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fcc:	4311      	orrs	r1, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	611a      	str	r2, [r3, #16]
 8001fe0:	e007      	b.n	8001ff2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10c      	bne.n	8002014 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002000:	f023 010f 	bic.w	r1, r3, #15
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	631a      	str	r2, [r3, #48]	@ 0x30
 8002012:	e007      	b.n	8002024 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 020f 	bic.w	r2, r2, #15
 8002022:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002028:	f023 0303 	bic.w	r3, r3, #3
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	@ 0x54
 8002034:	e007      	b.n	8002046 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	f043 0210 	orr.w	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002046:	7ffb      	ldrb	r3, [r7, #31]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3724      	adds	r7, #36	@ 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	20000000 	.word	0x20000000
 8002054:	053e2d63 	.word	0x053e2d63
 8002058:	50040000 	.word	0x50040000
 800205c:	50040100 	.word	0x50040100
 8002060:	50040200 	.word	0x50040200
 8002064:	50040300 	.word	0x50040300
 8002068:	fff0c007 	.word	0xfff0c007

0800206c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002078:	4853      	ldr	r0, [pc, #332]	@ (80021c8 <HAL_ADC_Start_DMA+0x15c>)
 800207a:	f7ff fdc3 	bl	8001c04 <LL_ADC_GetMultimode>
 800207e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe7b 	bl	8001d80 <LL_ADC_REG_IsConversionOngoing>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	f040 8093 	bne.w	80021b8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_Start_DMA+0x34>
 800209c:	2302      	movs	r3, #2
 800209e:	e08e      	b.n	80021be <HAL_ADC_Start_DMA+0x152>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a47      	ldr	r2, [pc, #284]	@ (80021cc <HAL_ADC_Start_DMA+0x160>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d008      	beq.n	80020c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d002      	beq.n	80020c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d172      	bne.n	80021aa <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fc89 	bl	80029dc <ADC_Enable>
 80020ca:	4603      	mov	r3, r0
 80020cc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d165      	bne.n	80021a0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a38      	ldr	r2, [pc, #224]	@ (80021d0 <HAL_ADC_Start_DMA+0x164>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d002      	beq.n	80020f8 <HAL_ADC_Start_DMA+0x8c>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e000      	b.n	80020fa <HAL_ADC_Start_DMA+0x8e>
 80020f8:	4b36      	ldr	r3, [pc, #216]	@ (80021d4 <HAL_ADC_Start_DMA+0x168>)
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	4293      	cmp	r3, r2
 8002100:	d002      	beq.n	8002108 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002124:	f023 0206 	bic.w	r2, r3, #6
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	659a      	str	r2, [r3, #88]	@ 0x58
 800212c:	e002      	b.n	8002134 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002138:	4a27      	ldr	r2, [pc, #156]	@ (80021d8 <HAL_ADC_Start_DMA+0x16c>)
 800213a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002140:	4a26      	ldr	r2, [pc, #152]	@ (80021dc <HAL_ADC_Start_DMA+0x170>)
 8002142:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	4a25      	ldr	r2, [pc, #148]	@ (80021e0 <HAL_ADC_Start_DMA+0x174>)
 800214a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	221c      	movs	r2, #28
 8002152:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0210 	orr.w	r2, r2, #16
 800216a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3340      	adds	r3, #64	@ 0x40
 8002186:	4619      	mov	r1, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f001 f9d8 	bl	8003540 <HAL_DMA_Start_IT>
 8002190:	4603      	mov	r3, r0
 8002192:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fddd 	bl	8001d58 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800219e:	e00d      	b.n	80021bc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80021a8:	e008      	b.n	80021bc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021b6:	e001      	b.n	80021bc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
 80021ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	50040300 	.word	0x50040300
 80021cc:	50040200 	.word	0x50040200
 80021d0:	50040100 	.word	0x50040100
 80021d4:	50040000 	.word	0x50040000
 80021d8:	08002ba7 	.word	0x08002ba7
 80021dc:	08002c7f 	.word	0x08002c7f
 80021e0:	08002c9b 	.word	0x08002c9b

080021e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b0b6      	sub	sp, #216	@ 0xd8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002208:	2300      	movs	r3, #0
 800220a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_ADC_ConfigChannel+0x22>
 8002216:	2302      	movs	r3, #2
 8002218:	e3c9      	b.n	80029ae <HAL_ADC_ConfigChannel+0x7b6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fdaa 	bl	8001d80 <LL_ADC_REG_IsConversionOngoing>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 83aa 	bne.w	8002988 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d824      	bhi.n	800228e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	3b02      	subs	r3, #2
 800224a:	2b03      	cmp	r3, #3
 800224c:	d81b      	bhi.n	8002286 <HAL_ADC_ConfigChannel+0x8e>
 800224e:	a201      	add	r2, pc, #4	@ (adr r2, 8002254 <HAL_ADC_ConfigChannel+0x5c>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	08002265 	.word	0x08002265
 8002258:	0800226d 	.word	0x0800226d
 800225c:	08002275 	.word	0x08002275
 8002260:	0800227d 	.word	0x0800227d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002264:	230c      	movs	r3, #12
 8002266:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800226a:	e010      	b.n	800228e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800226c:	2312      	movs	r3, #18
 800226e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002272:	e00c      	b.n	800228e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002274:	2318      	movs	r3, #24
 8002276:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800227a:	e008      	b.n	800228e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800227c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002284:	e003      	b.n	800228e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002286:	2306      	movs	r3, #6
 8002288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800228c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800229c:	f7ff fc36 	bl	8001b0c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fd6b 	bl	8001d80 <LL_ADC_REG_IsConversionOngoing>
 80022aa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fd77 	bl	8001da6 <LL_ADC_INJ_IsConversionOngoing>
 80022b8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 81a4 	bne.w	800260e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 819f 	bne.w	800260e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	461a      	mov	r2, r3
 80022de:	f7ff fc41 	bl	8001b64 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d00a      	beq.n	800231a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6919      	ldr	r1, [r3, #16]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002314:	f7ff fb92 	bl	8001a3c <LL_ADC_SetOffset>
 8002318:	e179      	b.n	800260e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fbaf 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x14e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fba4 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	0e9b      	lsrs	r3, r3, #26
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	e01e      	b.n	8002384 <HAL_ADC_ConfigChannel+0x18c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fb99 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002364:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002368:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800236c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002374:	2320      	movs	r3, #32
 8002376:	e004      	b.n	8002382 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002378:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1a4>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	e018      	b.n	80023ce <HAL_ADC_ConfigChannel+0x1d6>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80023b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80023b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e004      	b.n	80023ce <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80023c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d106      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fb68 	bl	8001ab0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fb4c 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10a      	bne.n	800240c <HAL_ADC_ConfigChannel+0x214>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2101      	movs	r1, #1
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fb41 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 8002402:	4603      	mov	r3, r0
 8002404:	0e9b      	lsrs	r3, r3, #26
 8002406:	f003 021f 	and.w	r2, r3, #31
 800240a:	e01e      	b.n	800244a <HAL_ADC_ConfigChannel+0x252>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2101      	movs	r1, #1
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fb36 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800242a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800242e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800243a:	2320      	movs	r3, #32
 800243c:	e004      	b.n	8002448 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800243e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x26a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	e018      	b.n	8002494 <HAL_ADC_ConfigChannel+0x29c>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002476:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800247a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800247e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002486:	2320      	movs	r3, #32
 8002488:	e004      	b.n	8002494 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800248a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002494:	429a      	cmp	r2, r3
 8002496:	d106      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fb05 	bl	8001ab0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fae9 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x2da>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2102      	movs	r1, #2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fade 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	0e9b      	lsrs	r3, r3, #26
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	e01e      	b.n	8002510 <HAL_ADC_ConfigChannel+0x318>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2102      	movs	r1, #2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fad3 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80024f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80024f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e004      	b.n	800250e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x330>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	e014      	b.n	8002552 <HAL_ADC_ConfigChannel+0x35a>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002536:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002538:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800253c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002544:	2320      	movs	r3, #32
 8002546:	e004      	b.n	8002552 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002548:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002552:	429a      	cmp	r2, r3
 8002554:	d106      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	2102      	movs	r1, #2
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff faa6 	bl	8001ab0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2103      	movs	r1, #3
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fa8a 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 8002570:	4603      	mov	r3, r0
 8002572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x398>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2103      	movs	r1, #3
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fa7f 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	f003 021f 	and.w	r2, r3, #31
 800258e:	e017      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3c8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2103      	movs	r1, #3
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fa74 	bl	8001a84 <LL_ADC_GetOffsetChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025aa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80025ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80025b2:	2320      	movs	r3, #32
 80025b4:	e003      	b.n	80025be <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80025b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x3e0>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	e011      	b.n	80025fc <HAL_ADC_ConfigChannel+0x404>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80025e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80025ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80025f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d106      	bne.n	800260e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2200      	movs	r2, #0
 8002606:	2103      	movs	r1, #3
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fa51 	bl	8001ab0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fb7a 	bl	8001d0c <LL_ADC_IsEnabled>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 8140 	bne.w	80028a0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	461a      	mov	r2, r3
 800262e:	f7ff fac5 	bl	8001bbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	4a8f      	ldr	r2, [pc, #572]	@ (8002874 <HAL_ADC_ConfigChannel+0x67c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	f040 8131 	bne.w	80028a0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x46e>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	3301      	adds	r3, #1
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2b09      	cmp	r3, #9
 800265c:	bf94      	ite	ls
 800265e:	2301      	movls	r3, #1
 8002660:	2300      	movhi	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	e019      	b.n	800269a <HAL_ADC_ConfigChannel+0x4a2>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002676:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002678:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e003      	b.n	800268a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3301      	adds	r3, #1
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2b09      	cmp	r3, #9
 8002692:	bf94      	ite	ls
 8002694:	2301      	movls	r3, #1
 8002696:	2300      	movhi	r3, #0
 8002698:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800269a:	2b00      	cmp	r3, #0
 800269c:	d079      	beq.n	8002792 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x4c2>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	3301      	adds	r3, #1
 80026b2:	069b      	lsls	r3, r3, #26
 80026b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026b8:	e015      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x4ee>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80026c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80026cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80026d2:	2320      	movs	r3, #32
 80026d4:	e003      	b.n	80026de <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80026d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	069b      	lsls	r3, r3, #26
 80026e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x50e>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	3301      	adds	r3, #1
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	e017      	b.n	8002736 <HAL_ADC_ConfigChannel+0x53e>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002716:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e003      	b.n	800272a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	ea42 0103 	orr.w	r1, r2, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <HAL_ADC_ConfigChannel+0x564>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	3301      	adds	r3, #1
 800274e:	f003 021f 	and.w	r2, r3, #31
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	051b      	lsls	r3, r3, #20
 800275a:	e018      	b.n	800278e <HAL_ADC_ConfigChannel+0x596>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800276e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	e003      	b.n	8002780 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f003 021f 	and.w	r2, r3, #31
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278e:	430b      	orrs	r3, r1
 8002790:	e081      	b.n	8002896 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x5b6>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	3301      	adds	r3, #1
 80027a6:	069b      	lsls	r3, r3, #26
 80027a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ac:	e015      	b.n	80027da <HAL_ADC_ConfigChannel+0x5e2>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80027c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e003      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80027ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	069b      	lsls	r3, r3, #26
 80027d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x602>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	0e9b      	lsrs	r3, r3, #26
 80027ec:	3301      	adds	r3, #1
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	e017      	b.n	800282a <HAL_ADC_ConfigChannel+0x632>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	61bb      	str	r3, [r7, #24]
  return result;
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e003      	b.n	800281e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	ea42 0103 	orr.w	r1, r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10d      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x65e>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	3301      	adds	r3, #1
 8002842:	f003 021f 	and.w	r2, r3, #31
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	3b1e      	subs	r3, #30
 800284e:	051b      	lsls	r3, r3, #20
 8002850:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002854:	e01e      	b.n	8002894 <HAL_ADC_ConfigChannel+0x69c>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	60fb      	str	r3, [r7, #12]
  return result;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d104      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800286e:	2320      	movs	r3, #32
 8002870:	e006      	b.n	8002880 <HAL_ADC_ConfigChannel+0x688>
 8002872:	bf00      	nop
 8002874:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f003 021f 	and.w	r2, r3, #31
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	3b1e      	subs	r3, #30
 800288e:	051b      	lsls	r3, r3, #20
 8002890:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002894:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800289a:	4619      	mov	r1, r3
 800289c:	f7ff f962 	bl	8001b64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b44      	ldr	r3, [pc, #272]	@ (80029b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d07a      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028ac:	4843      	ldr	r0, [pc, #268]	@ (80029bc <HAL_ADC_ConfigChannel+0x7c4>)
 80028ae:	f7ff f8b7 	bl	8001a20 <LL_ADC_GetCommonPathInternalCh>
 80028b2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a41      	ldr	r2, [pc, #260]	@ (80029c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d12c      	bne.n	800291a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d126      	bne.n	800291a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a3c      	ldr	r2, [pc, #240]	@ (80029c4 <HAL_ADC_ConfigChannel+0x7cc>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d004      	beq.n	80028e0 <HAL_ADC_ConfigChannel+0x6e8>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a3b      	ldr	r2, [pc, #236]	@ (80029c8 <HAL_ADC_ConfigChannel+0x7d0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d15d      	bne.n	800299c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028e8:	4619      	mov	r1, r3
 80028ea:	4834      	ldr	r0, [pc, #208]	@ (80029bc <HAL_ADC_ConfigChannel+0x7c4>)
 80028ec:	f7ff f885 	bl	80019fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f0:	4b36      	ldr	r3, [pc, #216]	@ (80029cc <HAL_ADC_ConfigChannel+0x7d4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	4a36      	ldr	r2, [pc, #216]	@ (80029d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800290a:	e002      	b.n	8002912 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	3b01      	subs	r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f9      	bne.n	800290c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002918:	e040      	b.n	800299c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2d      	ldr	r2, [pc, #180]	@ (80029d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d118      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002924:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002928:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d112      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a23      	ldr	r2, [pc, #140]	@ (80029c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_ADC_ConfigChannel+0x74c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a22      	ldr	r2, [pc, #136]	@ (80029c8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d12d      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002948:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294c:	4619      	mov	r1, r3
 800294e:	481b      	ldr	r0, [pc, #108]	@ (80029bc <HAL_ADC_ConfigChannel+0x7c4>)
 8002950:	f7ff f853 	bl	80019fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002954:	e024      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1f      	ldr	r2, [pc, #124]	@ (80029d8 <HAL_ADC_ConfigChannel+0x7e0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d120      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d11a      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a14      	ldr	r2, [pc, #80]	@ (80029c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d115      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800297a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800297e:	4619      	mov	r1, r3
 8002980:	480e      	ldr	r0, [pc, #56]	@ (80029bc <HAL_ADC_ConfigChannel+0x7c4>)
 8002982:	f7ff f83a 	bl	80019fa <LL_ADC_SetCommonPathInternalCh>
 8002986:	e00c      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800299a:	e002      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800299c:	bf00      	nop
 800299e:	e000      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	37d8      	adds	r7, #216	@ 0xd8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	80080000 	.word	0x80080000
 80029bc:	50040300 	.word	0x50040300
 80029c0:	c7520000 	.word	0xc7520000
 80029c4:	50040000 	.word	0x50040000
 80029c8:	50040200 	.word	0x50040200
 80029cc:	20000000 	.word	0x20000000
 80029d0:	053e2d63 	.word	0x053e2d63
 80029d4:	cb840000 	.word	0xcb840000
 80029d8:	80000001 	.word	0x80000001

080029dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f98d 	bl	8001d0c <LL_ADC_IsEnabled>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d169      	bne.n	8002acc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	4b36      	ldr	r3, [pc, #216]	@ (8002ad8 <ADC_Enable+0xfc>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00d      	beq.n	8002a22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e055      	b.n	8002ace <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f948 	bl	8001cbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a2c:	482b      	ldr	r0, [pc, #172]	@ (8002adc <ADC_Enable+0x100>)
 8002a2e:	f7fe fff7 	bl	8001a20 <LL_ADC_GetCommonPathInternalCh>
 8002a32:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ae0 <ADC_Enable+0x104>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	4a28      	ldr	r2, [pc, #160]	@ (8002ae4 <ADC_Enable+0x108>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a56:	e002      	b.n	8002a5e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f9      	bne.n	8002a58 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a64:	f7fe ff86 	bl	8001974 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a6a:	e028      	b.n	8002abe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f94b 	bl	8001d0c <LL_ADC_IsEnabled>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f91b 	bl	8001cbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a86:	f7fe ff75 	bl	8001974 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d914      	bls.n	8002abe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d00d      	beq.n	8002abe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d1cf      	bne.n	8002a6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	8000003f 	.word	0x8000003f
 8002adc:	50040300 	.word	0x50040300
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	053e2d63 	.word	0x053e2d63

08002ae8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff f91c 	bl	8001d32 <LL_ADC_IsDisableOngoing>
 8002afa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff f903 	bl	8001d0c <LL_ADC_IsEnabled>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d047      	beq.n	8002b9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d144      	bne.n	8002b9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030d 	and.w	r3, r3, #13
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10c      	bne.n	8002b3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f8dd 	bl	8001ce4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b32:	f7fe ff1f 	bl	8001974 <HAL_GetTick>
 8002b36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b38:	e029      	b.n	8002b8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e023      	b.n	8002b9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b56:	f7fe ff0d 	bl	8001974 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d914      	bls.n	8002b8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00d      	beq.n	8002b8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b76:	f043 0210 	orr.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e007      	b.n	8002b9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1dc      	bne.n	8002b56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d14b      	bne.n	8002c58 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d021      	beq.n	8002c1e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe ff81 	bl	8001ae6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d032      	beq.n	8002c50 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d12b      	bne.n	8002c50 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d11f      	bne.n	8002c50 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c1c:	e018      	b.n	8002c50 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d111      	bne.n	8002c50 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d105      	bne.n	8002c50 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f7fd fd55 	bl	8000700 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c56:	e00e      	b.n	8002c76 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff fabd 	bl	80021e4 <HAL_ADC_ErrorCallback>
}
 8002c6a:	e004      	b.n	8002c76 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7fd fd5f 	bl	8000750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	f043 0204 	orr.w	r2, r3, #4
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff fa8f 	bl	80021e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <LL_ADC_IsEnabled>:
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <LL_ADC_IsEnabled+0x18>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <LL_ADC_IsEnabled+0x1a>
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_StartCalibration>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002d06:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d3a:	d101      	bne.n	8002d40 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADCEx_Calibration_Start+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e04d      	b.n	8002e2c <HAL_ADCEx_Calibration_Start+0xb8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fea5 	bl	8002ae8 <ADC_Disable>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d136      	bne.n	8002e16 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002db0:	f023 0302 	bic.w	r3, r3, #2
 8002db4:	f043 0202 	orr.w	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff96 	bl	8002cf4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dc8:	e014      	b.n	8002df4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002dd6:	d30d      	bcc.n	8002df4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ddc:	f023 0312 	bic.w	r3, r3, #18
 8002de0:	f043 0210 	orr.w	r2, r3, #16
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e01b      	b.n	8002e2c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff94 	bl	8002d26 <LL_ADC_IsCalibrationOnGoing>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e2      	bne.n	8002dca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	f023 0303 	bic.w	r3, r3, #3
 8002e0c:	f043 0201 	orr.w	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e14:	e005      	b.n	8002e22 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b09f      	sub	sp, #124	@ 0x7c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e093      	b.n	8002f7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a47      	ldr	r2, [pc, #284]	@ (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d102      	bne.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e6c:	4b46      	ldr	r3, [pc, #280]	@ (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	e001      	b.n	8002e76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e072      	b.n	8002f7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff59 	bl	8002d4e <LL_ADC_REG_IsConversionOngoing>
 8002e9c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff53 	bl	8002d4e <LL_ADC_REG_IsConversionOngoing>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d154      	bne.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d151      	bne.n	8002f58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002eb4:	4b35      	ldr	r3, [pc, #212]	@ (8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d02c      	beq.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ed2:	035b      	lsls	r3, r3, #13
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002edc:	4829      	ldr	r0, [pc, #164]	@ (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ede:	f7ff fef6 	bl	8002cce <LL_ADC_IsEnabled>
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	4828      	ldr	r0, [pc, #160]	@ (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ee6:	f7ff fef2 	bl	8002cce <LL_ADC_IsEnabled>
 8002eea:	4603      	mov	r3, r0
 8002eec:	431c      	orrs	r4, r3
 8002eee:	4828      	ldr	r0, [pc, #160]	@ (8002f90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ef0:	f7ff feed 	bl	8002cce <LL_ADC_IsEnabled>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4323      	orrs	r3, r4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d137      	bne.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002efc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f04:	f023 030f 	bic.w	r3, r3, #15
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	6811      	ldr	r1, [r2, #0]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	6892      	ldr	r2, [r2, #8]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f16:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f18:	e028      	b.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f26:	4817      	ldr	r0, [pc, #92]	@ (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f28:	f7ff fed1 	bl	8002cce <LL_ADC_IsEnabled>
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	4816      	ldr	r0, [pc, #88]	@ (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f30:	f7ff fecd 	bl	8002cce <LL_ADC_IsEnabled>
 8002f34:	4603      	mov	r3, r0
 8002f36:	431c      	orrs	r4, r3
 8002f38:	4815      	ldr	r0, [pc, #84]	@ (8002f90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f3a:	f7ff fec8 	bl	8002cce <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4323      	orrs	r3, r4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d112      	bne.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f4e:	f023 030f 	bic.w	r3, r3, #15
 8002f52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f54:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f56:	e009      	b.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002f6a:	e000      	b.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f76:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	377c      	adds	r7, #124	@ 0x7c
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	50040000 	.word	0x50040000
 8002f88:	50040100 	.word	0x50040100
 8002f8c:	50040300 	.word	0x50040300
 8002f90:	50040200 	.word	0x50040200

08002f94 <__NVIC_SetPriorityGrouping>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fc6:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	60d3      	str	r3, [r2, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_GetPriorityGrouping>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe0:	4b04      	ldr	r3, [pc, #16]	@ (8002ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f003 0307 	and.w	r3, r3, #7
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_EnableIRQ>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	2b00      	cmp	r3, #0
 8003008:	db0b      	blt.n	8003022 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4907      	ldr	r1, [pc, #28]	@ (8003030 <__NVIC_EnableIRQ+0x38>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2001      	movs	r0, #1
 800301a:	fa00 f202 	lsl.w	r2, r0, r2
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000e100 	.word	0xe000e100

08003034 <__NVIC_SetPriority>:
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	6039      	str	r1, [r7, #0]
 800303e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003044:	2b00      	cmp	r3, #0
 8003046:	db0a      	blt.n	800305e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	490c      	ldr	r1, [pc, #48]	@ (8003080 <__NVIC_SetPriority+0x4c>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	440b      	add	r3, r1
 8003058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800305c:	e00a      	b.n	8003074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4908      	ldr	r1, [pc, #32]	@ (8003084 <__NVIC_SetPriority+0x50>)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	3b04      	subs	r3, #4
 800306c:	0112      	lsls	r2, r2, #4
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	440b      	add	r3, r1
 8003072:	761a      	strb	r2, [r3, #24]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000e100 	.word	0xe000e100
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <NVIC_EncodePriority>:
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	@ 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f1c3 0307 	rsb	r3, r3, #7
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	bf28      	it	cs
 80030a6:	2304      	movcs	r3, #4
 80030a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d902      	bls.n	80030b8 <NVIC_EncodePriority+0x30>
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3b03      	subs	r3, #3
 80030b6:	e000      	b.n	80030ba <NVIC_EncodePriority+0x32>
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43da      	mvns	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	401a      	ands	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	43d9      	mvns	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	4313      	orrs	r3, r2
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3724      	adds	r7, #36	@ 0x24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003100:	d301      	bcc.n	8003106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003102:	2301      	movs	r3, #1
 8003104:	e00f      	b.n	8003126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003106:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <SysTick_Config+0x40>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800310e:	210f      	movs	r1, #15
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	f7ff ff8e 	bl	8003034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003118:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <SysTick_Config+0x40>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800311e:	4b04      	ldr	r3, [pc, #16]	@ (8003130 <SysTick_Config+0x40>)
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010

08003134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ff29 	bl	8002f94 <__NVIC_SetPriorityGrouping>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b086      	sub	sp, #24
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800315c:	f7ff ff3e 	bl	8002fdc <__NVIC_GetPriorityGrouping>
 8003160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7ff ff8e 	bl	8003088 <NVIC_EncodePriority>
 800316c:	4602      	mov	r2, r0
 800316e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff5d 	bl	8003034 <__NVIC_SetPriority>
}
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff31 	bl	8002ff8 <__NVIC_EnableIRQ>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffa2 	bl	80030f0 <SysTick_Config>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0ac      	b.n	8003324 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f8b2 	bl	8003338 <DFSDM_GetChannelFromInstance>
 80031d4:	4603      	mov	r3, r0
 80031d6:	4a55      	ldr	r2, [pc, #340]	@ (800332c <HAL_DFSDM_ChannelInit+0x174>)
 80031d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e09f      	b.n	8003324 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fd ffa3 	bl	8001130 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80031ea:	4b51      	ldr	r3, [pc, #324]	@ (8003330 <HAL_DFSDM_ChannelInit+0x178>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003330 <HAL_DFSDM_ChannelInit+0x178>)
 80031f2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80031f4:	4b4e      	ldr	r3, [pc, #312]	@ (8003330 <HAL_DFSDM_ChannelInit+0x178>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d125      	bne.n	8003248 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80031fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a4c      	ldr	r2, [pc, #304]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 8003202:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003206:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003208:	4b4a      	ldr	r3, [pc, #296]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4948      	ldr	r1, [pc, #288]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003216:	4b47      	ldr	r3, [pc, #284]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a46      	ldr	r2, [pc, #280]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 800321c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003220:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	791b      	ldrb	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d108      	bne.n	800323c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800322a:	4b42      	ldr	r3, [pc, #264]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	3b01      	subs	r3, #1
 8003234:	041b      	lsls	r3, r3, #16
 8003236:	493f      	ldr	r1, [pc, #252]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800323c:	4b3d      	ldr	r3, [pc, #244]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a3c      	ldr	r2, [pc, #240]	@ (8003334 <HAL_DFSDM_ChannelInit+0x17c>)
 8003242:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003246:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003256:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003266:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800326c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 020f 	bic.w	r2, r2, #15
 8003284:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6819      	ldr	r1, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80032ac:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6899      	ldr	r1, [r3, #8]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f002 0207 	and.w	r2, r2, #7
 80032d8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ea:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003304:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f810 	bl	8003338 <DFSDM_GetChannelFromInstance>
 8003318:	4602      	mov	r2, r0
 800331a:	4904      	ldr	r1, [pc, #16]	@ (800332c <HAL_DFSDM_ChannelInit+0x174>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000abc 	.word	0x20000abc
 8003330:	20000ab8 	.word	0x20000ab8
 8003334:	40016000 	.word	0x40016000

08003338 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a1c      	ldr	r2, [pc, #112]	@ (80033b4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d102      	bne.n	800334e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e02b      	b.n	80033a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a19      	ldr	r2, [pc, #100]	@ (80033b8 <DFSDM_GetChannelFromInstance+0x80>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d102      	bne.n	800335c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003356:	2301      	movs	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e024      	b.n	80033a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a17      	ldr	r2, [pc, #92]	@ (80033bc <DFSDM_GetChannelFromInstance+0x84>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d102      	bne.n	800336a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003364:	2302      	movs	r3, #2
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	e01d      	b.n	80033a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a14      	ldr	r2, [pc, #80]	@ (80033c0 <DFSDM_GetChannelFromInstance+0x88>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d102      	bne.n	8003378 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003372:	2304      	movs	r3, #4
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e016      	b.n	80033a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a12      	ldr	r2, [pc, #72]	@ (80033c4 <DFSDM_GetChannelFromInstance+0x8c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d102      	bne.n	8003386 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003380:	2305      	movs	r3, #5
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e00f      	b.n	80033a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a0f      	ldr	r2, [pc, #60]	@ (80033c8 <DFSDM_GetChannelFromInstance+0x90>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d102      	bne.n	8003394 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800338e:	2306      	movs	r3, #6
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	e008      	b.n	80033a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a0d      	ldr	r2, [pc, #52]	@ (80033cc <DFSDM_GetChannelFromInstance+0x94>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d102      	bne.n	80033a2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800339c:	2307      	movs	r3, #7
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	e001      	b.n	80033a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80033a2:	2303      	movs	r3, #3
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40016000 	.word	0x40016000
 80033b8:	40016020 	.word	0x40016020
 80033bc:	40016040 	.word	0x40016040
 80033c0:	40016080 	.word	0x40016080
 80033c4:	400160a0 	.word	0x400160a0
 80033c8:	400160c0 	.word	0x400160c0
 80033cc:	400160e0 	.word	0x400160e0

080033d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e098      	b.n	8003514 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003520 <HAL_DMA_Init+0x150>)
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d80f      	bhi.n	800340e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003524 <HAL_DMA_Init+0x154>)
 80033f6:	4413      	add	r3, r2
 80033f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003528 <HAL_DMA_Init+0x158>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	009a      	lsls	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a48      	ldr	r2, [pc, #288]	@ (800352c <HAL_DMA_Init+0x15c>)
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40
 800340c:	e00e      	b.n	800342c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4b46      	ldr	r3, [pc, #280]	@ (8003530 <HAL_DMA_Init+0x160>)
 8003416:	4413      	add	r3, r2
 8003418:	4a43      	ldr	r2, [pc, #268]	@ (8003528 <HAL_DMA_Init+0x158>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	009a      	lsls	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a42      	ldr	r2, [pc, #264]	@ (8003534 <HAL_DMA_Init+0x164>)
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003486:	d039      	beq.n	80034fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	4a27      	ldr	r2, [pc, #156]	@ (800352c <HAL_DMA_Init+0x15c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d11a      	bne.n	80034c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003492:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <HAL_DMA_Init+0x168>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	f003 031c 	and.w	r3, r3, #28
 800349e:	210f      	movs	r1, #15
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	4924      	ldr	r1, [pc, #144]	@ (8003538 <HAL_DMA_Init+0x168>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034ac:	4b22      	ldr	r3, [pc, #136]	@ (8003538 <HAL_DMA_Init+0x168>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6859      	ldr	r1, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b8:	f003 031c 	and.w	r3, r3, #28
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	491d      	ldr	r1, [pc, #116]	@ (8003538 <HAL_DMA_Init+0x168>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]
 80034c6:	e019      	b.n	80034fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034c8:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <HAL_DMA_Init+0x16c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d0:	f003 031c 	and.w	r3, r3, #28
 80034d4:	210f      	movs	r1, #15
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	4917      	ldr	r1, [pc, #92]	@ (800353c <HAL_DMA_Init+0x16c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034e2:	4b16      	ldr	r3, [pc, #88]	@ (800353c <HAL_DMA_Init+0x16c>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	f003 031c 	and.w	r3, r3, #28
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	4911      	ldr	r1, [pc, #68]	@ (800353c <HAL_DMA_Init+0x16c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40020407 	.word	0x40020407
 8003524:	bffdfff8 	.word	0xbffdfff8
 8003528:	cccccccd 	.word	0xcccccccd
 800352c:	40020000 	.word	0x40020000
 8003530:	bffdfbf8 	.word	0xbffdfbf8
 8003534:	40020400 	.word	0x40020400
 8003538:	400200a8 	.word	0x400200a8
 800353c:	400204a8 	.word	0x400204a8

08003540 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_DMA_Start_IT+0x20>
 800355c:	2302      	movs	r3, #2
 800355e:	e04b      	b.n	80035f8 <HAL_DMA_Start_IT+0xb8>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d13a      	bne.n	80035ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f8e0 	bl	800375e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 020e 	orr.w	r2, r2, #14
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e00f      	b.n	80035d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0204 	bic.w	r2, r2, #4
 80035c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 020a 	orr.w	r2, r2, #10
 80035d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e005      	b.n	80035f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	f003 031c 	and.w	r3, r3, #28
 8003620:	2204      	movs	r2, #4
 8003622:	409a      	lsls	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d026      	beq.n	800367a <HAL_DMA_IRQHandler+0x7a>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d021      	beq.n	800367a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0320 	and.w	r3, r3, #32
 8003640:	2b00      	cmp	r3, #0
 8003642:	d107      	bne.n	8003654 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003658:	f003 021c 	and.w	r2, r3, #28
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	2104      	movs	r1, #4
 8003662:	fa01 f202 	lsl.w	r2, r1, r2
 8003666:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366c:	2b00      	cmp	r3, #0
 800366e:	d071      	beq.n	8003754 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003678:	e06c      	b.n	8003754 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f003 031c 	and.w	r3, r3, #28
 8003682:	2202      	movs	r2, #2
 8003684:	409a      	lsls	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02e      	beq.n	80036ec <HAL_DMA_IRQHandler+0xec>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d029      	beq.n	80036ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10b      	bne.n	80036be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 020a 	bic.w	r2, r2, #10
 80036b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f003 021c 	and.w	r2, r3, #28
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	2102      	movs	r1, #2
 80036cc:	fa01 f202 	lsl.w	r2, r1, r2
 80036d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d038      	beq.n	8003754 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036ea:	e033      	b.n	8003754 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f0:	f003 031c 	and.w	r3, r3, #28
 80036f4:	2208      	movs	r2, #8
 80036f6:	409a      	lsls	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d02a      	beq.n	8003756 <HAL_DMA_IRQHandler+0x156>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d025      	beq.n	8003756 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 020e 	bic.w	r2, r2, #14
 8003718:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f003 021c 	and.w	r2, r3, #28
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2101      	movs	r1, #1
 8003728:	fa01 f202 	lsl.w	r2, r1, r2
 800372c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003754:	bf00      	nop
 8003756:	bf00      	nop
}
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	f003 021c 	and.w	r2, r3, #28
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f202 	lsl.w	r2, r1, r2
 800377e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b10      	cmp	r3, #16
 800378e:	d108      	bne.n	80037a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037a0:	e007      	b.n	80037b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	60da      	str	r2, [r3, #12]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ce:	e17f      	b.n	8003ad0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2101      	movs	r1, #1
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	fa01 f303 	lsl.w	r3, r1, r3
 80037dc:	4013      	ands	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8171 	beq.w	8003aca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d005      	beq.n	8003800 <HAL_GPIO_Init+0x40>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d130      	bne.n	8003862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003836:	2201      	movs	r2, #1
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0201 	and.w	r2, r3, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b03      	cmp	r3, #3
 800386c:	d118      	bne.n	80038a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003874:	2201      	movs	r2, #1
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	f003 0201 	and.w	r2, r3, #1
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d017      	beq.n	80038dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	2203      	movs	r2, #3
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d123      	bne.n	8003930 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	08da      	lsrs	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3208      	adds	r2, #8
 80038f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	220f      	movs	r2, #15
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	08da      	lsrs	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3208      	adds	r2, #8
 800392a:	6939      	ldr	r1, [r7, #16]
 800392c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	2203      	movs	r2, #3
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0203 	and.w	r2, r3, #3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80ac 	beq.w	8003aca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	4b5f      	ldr	r3, [pc, #380]	@ (8003af0 <HAL_GPIO_Init+0x330>)
 8003974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003976:	4a5e      	ldr	r2, [pc, #376]	@ (8003af0 <HAL_GPIO_Init+0x330>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6613      	str	r3, [r2, #96]	@ 0x60
 800397e:	4b5c      	ldr	r3, [pc, #368]	@ (8003af0 <HAL_GPIO_Init+0x330>)
 8003980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800398a:	4a5a      	ldr	r2, [pc, #360]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	3302      	adds	r3, #2
 8003992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003996:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	220f      	movs	r2, #15
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039b4:	d025      	beq.n	8003a02 <HAL_GPIO_Init+0x242>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4f      	ldr	r2, [pc, #316]	@ (8003af8 <HAL_GPIO_Init+0x338>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01f      	beq.n	80039fe <HAL_GPIO_Init+0x23e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4e      	ldr	r2, [pc, #312]	@ (8003afc <HAL_GPIO_Init+0x33c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d019      	beq.n	80039fa <HAL_GPIO_Init+0x23a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003b00 <HAL_GPIO_Init+0x340>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_GPIO_Init+0x236>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003b04 <HAL_GPIO_Init+0x344>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00d      	beq.n	80039f2 <HAL_GPIO_Init+0x232>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003b08 <HAL_GPIO_Init+0x348>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <HAL_GPIO_Init+0x22e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4a      	ldr	r2, [pc, #296]	@ (8003b0c <HAL_GPIO_Init+0x34c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_GPIO_Init+0x22a>
 80039e6:	2306      	movs	r3, #6
 80039e8:	e00c      	b.n	8003a04 <HAL_GPIO_Init+0x244>
 80039ea:	2307      	movs	r3, #7
 80039ec:	e00a      	b.n	8003a04 <HAL_GPIO_Init+0x244>
 80039ee:	2305      	movs	r3, #5
 80039f0:	e008      	b.n	8003a04 <HAL_GPIO_Init+0x244>
 80039f2:	2304      	movs	r3, #4
 80039f4:	e006      	b.n	8003a04 <HAL_GPIO_Init+0x244>
 80039f6:	2303      	movs	r3, #3
 80039f8:	e004      	b.n	8003a04 <HAL_GPIO_Init+0x244>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e002      	b.n	8003a04 <HAL_GPIO_Init+0x244>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_GPIO_Init+0x244>
 8003a02:	2300      	movs	r3, #0
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	f002 0203 	and.w	r2, r2, #3
 8003a0a:	0092      	lsls	r2, r2, #2
 8003a0c:	4093      	lsls	r3, r2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a14:	4937      	ldr	r1, [pc, #220]	@ (8003af4 <HAL_GPIO_Init+0x334>)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a22:	4b3b      	ldr	r3, [pc, #236]	@ (8003b10 <HAL_GPIO_Init+0x350>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a46:	4a32      	ldr	r2, [pc, #200]	@ (8003b10 <HAL_GPIO_Init+0x350>)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <HAL_GPIO_Init+0x350>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a70:	4a27      	ldr	r2, [pc, #156]	@ (8003b10 <HAL_GPIO_Init+0x350>)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a76:	4b26      	ldr	r3, [pc, #152]	@ (8003b10 <HAL_GPIO_Init+0x350>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <HAL_GPIO_Init+0x350>)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b10 <HAL_GPIO_Init+0x350>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ac4:	4a12      	ldr	r2, [pc, #72]	@ (8003b10 <HAL_GPIO_Init+0x350>)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	3301      	adds	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f47f ae78 	bne.w	80037d0 <HAL_GPIO_Init+0x10>
  }
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40010000 	.word	0x40010000
 8003af8:	48000400 	.word	0x48000400
 8003afc:	48000800 	.word	0x48000800
 8003b00:	48000c00 	.word	0x48000c00
 8003b04:	48001000 	.word	0x48001000
 8003b08:	48001400 	.word	0x48001400
 8003b0c:	48001800 	.word	0x48001800
 8003b10:	40010400 	.word	0x40010400

08003b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
 8003b20:	4613      	mov	r3, r2
 8003b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b24:	787b      	ldrb	r3, [r7, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b2a:	887a      	ldrh	r2, [r7, #2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b30:	e002      	b.n	8003b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b4e:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b5a:	4a05      	ldr	r2, [pc, #20]	@ (8003b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f806 	bl	8003b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40010400 	.word	0x40010400

08003b74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e08d      	b.n	8003cb8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fd fb21 	bl	80011f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2224      	movs	r2, #36	@ 0x24
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	e006      	b.n	8003c12 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d108      	bne.n	8003c2c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e007      	b.n	8003c3c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c4e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69d9      	ldr	r1, [r3, #28]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d138      	bne.n	8003d48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e032      	b.n	8003d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2224      	movs	r2, #36	@ 0x24
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d139      	bne.n	8003de0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e033      	b.n	8003de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2224      	movs	r2, #36	@ 0x24
 8003d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003da8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b086      	sub	sp, #24
 8003df2:	af02      	add	r7, sp, #8
 8003df4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e101      	b.n	8004004 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fd fb79 	bl	800150c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f002 fef1 	bl	8006c14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7c1a      	ldrb	r2, [r3, #16]
 8003e3a:	f88d 2000 	strb.w	r2, [sp]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e42:	f002 feba 	bl	8006bba <USB_CoreInit>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0d5      	b.n	8004004 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f002 fee9 	bl	8006c36 <USB_SetCurrentMode>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e0c6      	b.n	8004004 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	e04a      	b.n	8003f12 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	3315      	adds	r3, #21
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3314      	adds	r3, #20
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	b298      	uxth	r0, r3
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	332e      	adds	r3, #46	@ 0x2e
 8003eb8:	4602      	mov	r2, r0
 8003eba:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	3318      	adds	r3, #24
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ed0:	7bfa      	ldrb	r2, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	331c      	adds	r3, #28
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3320      	adds	r3, #32
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3324      	adds	r3, #36	@ 0x24
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	791b      	ldrb	r3, [r3, #4]
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d3af      	bcc.n	8003e7c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	e044      	b.n	8003fac <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	791b      	ldrb	r3, [r3, #4]
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d3b5      	bcc.n	8003f22 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	7c1a      	ldrb	r2, [r3, #16]
 8003fbe:	f88d 2000 	strb.w	r2, [sp]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fc6:	f002 fe83 	bl	8006cd0 <USB_DevInit>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e013      	b.n	8004004 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7b1b      	ldrb	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d102      	bne.n	8003ff8 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f80a 	bl	800400c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f003 f828 	bl	8007052 <USB_DevDisconnect>

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403e:	f043 0303 	orr.w	r3, r3, #3
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a04      	ldr	r2, [pc, #16]	@ (8004070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004062:	6013      	str	r3, [r2, #0]
}
 8004064:	bf00      	nop
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40007000 	.word	0x40007000

08004074 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004078:	4b04      	ldr	r3, [pc, #16]	@ (800408c <HAL_PWREx_GetVoltageRange+0x18>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40007000 	.word	0x40007000

08004090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800409e:	d130      	bne.n	8004102 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040a0:	4b23      	ldr	r3, [pc, #140]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ac:	d038      	beq.n	8004120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ae:	4b20      	ldr	r3, [pc, #128]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040be:	4b1d      	ldr	r3, [pc, #116]	@ (8004134 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2232      	movs	r2, #50	@ 0x32
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004138 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0c9b      	lsrs	r3, r3, #18
 80040d0:	3301      	adds	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d4:	e002      	b.n	80040dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040dc:	4b14      	ldr	r3, [pc, #80]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e8:	d102      	bne.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f2      	bne.n	80040d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fc:	d110      	bne.n	8004120 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e00f      	b.n	8004122 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410e:	d007      	beq.n	8004120 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004110:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004118:	4a05      	ldr	r2, [pc, #20]	@ (8004130 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800411a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800411e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40007000 	.word	0x40007000
 8004134:	20000000 	.word	0x20000000
 8004138:	431bde83 	.word	0x431bde83

0800413c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004140:	4b05      	ldr	r3, [pc, #20]	@ (8004158 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a04      	ldr	r2, [pc, #16]	@ (8004158 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800414a:	6053      	str	r3, [r2, #4]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40007000 	.word	0x40007000

0800415c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af02      	add	r7, sp, #8
 8004162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7fd fc06 	bl	8001974 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e063      	b.n	800423c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7fd f893 	bl	80012b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800418e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f858 	bl	8004248 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	021a      	lsls	r2, r3, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	2120      	movs	r1, #32
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f850 	bl	8004264 <QSPI_WaitFlagStateUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d131      	bne.n	8004232 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041d8:	f023 0310 	bic.w	r3, r3, #16
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6852      	ldr	r2, [r2, #4]
 80041e0:	0611      	lsls	r1, r2, #24
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6812      	ldr	r2, [r2, #0]
 80041ec:	430b      	orrs	r3, r1
 80041ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <HAL_QSPI_Init+0xe8>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6912      	ldr	r2, [r2, #16]
 80041fe:	0411      	lsls	r1, r2, #16
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6952      	ldr	r2, [r2, #20]
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6992      	ldr	r2, [r2, #24]
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	430b      	orrs	r3, r1
 8004212:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800423a:	7afb      	ldrb	r3, [r7, #11]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	ffe0f8fe 	.word	0xffe0f8fe

08004248 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004274:	e01a      	b.n	80042ac <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d016      	beq.n	80042ac <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7fd fb79 	bl	8001974 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	429a      	cmp	r2, r3
 800428c:	d302      	bcc.n	8004294 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2204      	movs	r2, #4
 8004298:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e00e      	b.n	80042ca <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d1d6      	bne.n	8004276 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e3ca      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e6:	4b97      	ldr	r3, [pc, #604]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f0:	4b94      	ldr	r3, [pc, #592]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80e4 	beq.w	80044d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_RCC_OscConfig+0x4a>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b0c      	cmp	r3, #12
 8004312:	f040 808b 	bne.w	800442c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b01      	cmp	r3, #1
 800431a:	f040 8087 	bne.w	800442c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800431e:	4b89      	ldr	r3, [pc, #548]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_RCC_OscConfig+0x62>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e3a2      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1a      	ldr	r2, [r3, #32]
 800433a:	4b82      	ldr	r3, [pc, #520]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <HAL_RCC_OscConfig+0x7c>
 8004346:	4b7f      	ldr	r3, [pc, #508]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800434e:	e005      	b.n	800435c <HAL_RCC_OscConfig+0x88>
 8004350:	4b7c      	ldr	r3, [pc, #496]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800435c:	4293      	cmp	r3, r2
 800435e:	d223      	bcs.n	80043a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fd55 	bl	8004e14 <RCC_SetFlashLatencyFromMSIRange>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e383      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004374:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a72      	ldr	r2, [pc, #456]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800437a:	f043 0308 	orr.w	r3, r3, #8
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	4b70      	ldr	r3, [pc, #448]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	496d      	ldr	r1, [pc, #436]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004392:	4b6c      	ldr	r3, [pc, #432]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	4968      	ldr	r1, [pc, #416]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	604b      	str	r3, [r1, #4]
 80043a6:	e025      	b.n	80043f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043a8:	4b66      	ldr	r3, [pc, #408]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a65      	ldr	r2, [pc, #404]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80043ae:	f043 0308 	orr.w	r3, r3, #8
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b63      	ldr	r3, [pc, #396]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	4960      	ldr	r1, [pc, #384]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043c6:	4b5f      	ldr	r3, [pc, #380]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	495b      	ldr	r1, [pc, #364]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fd15 	bl	8004e14 <RCC_SetFlashLatencyFromMSIRange>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e343      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043f4:	f000 fc4a 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b52      	ldr	r3, [pc, #328]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	4950      	ldr	r1, [pc, #320]	@ (8004548 <HAL_RCC_OscConfig+0x274>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
 8004410:	4a4e      	ldr	r2, [pc, #312]	@ (800454c <HAL_RCC_OscConfig+0x278>)
 8004412:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004414:	4b4e      	ldr	r3, [pc, #312]	@ (8004550 <HAL_RCC_OscConfig+0x27c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fd fa5b 	bl	80018d4 <HAL_InitTick>
 800441e:	4603      	mov	r3, r0
 8004420:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d052      	beq.n	80044ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	e327      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d032      	beq.n	800449a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004434:	4b43      	ldr	r3, [pc, #268]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a42      	ldr	r2, [pc, #264]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004440:	f7fd fa98 	bl	8001974 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004448:	f7fd fa94 	bl	8001974 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e310      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800445a:	4b3a      	ldr	r3, [pc, #232]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004466:	4b37      	ldr	r3, [pc, #220]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a36      	ldr	r2, [pc, #216]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800446c:	f043 0308 	orr.w	r3, r3, #8
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b34      	ldr	r3, [pc, #208]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	4931      	ldr	r1, [pc, #196]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004480:	4313      	orrs	r3, r2
 8004482:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004484:	4b2f      	ldr	r3, [pc, #188]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	492c      	ldr	r1, [pc, #176]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
 8004498:	e01a      	b.n	80044d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800449a:	4b2a      	ldr	r3, [pc, #168]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a29      	ldr	r2, [pc, #164]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044a6:	f7fd fa65 	bl	8001974 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ae:	f7fd fa61 	bl	8001974 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e2dd      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044c0:	4b20      	ldr	r3, [pc, #128]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x1da>
 80044cc:	e000      	b.n	80044d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d074      	beq.n	80045c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x21a>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b0c      	cmp	r3, #12
 80044e6:	d10e      	bne.n	8004506 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d10b      	bne.n	8004506 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ee:	4b15      	ldr	r3, [pc, #84]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d064      	beq.n	80045c4 <HAL_RCC_OscConfig+0x2f0>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d160      	bne.n	80045c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e2ba      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450e:	d106      	bne.n	800451e <HAL_RCC_OscConfig+0x24a>
 8004510:	4b0c      	ldr	r3, [pc, #48]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a0b      	ldr	r2, [pc, #44]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e026      	b.n	800456c <HAL_RCC_OscConfig+0x298>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004526:	d115      	bne.n	8004554 <HAL_RCC_OscConfig+0x280>
 8004528:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a05      	ldr	r2, [pc, #20]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800452e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a02      	ldr	r2, [pc, #8]	@ (8004544 <HAL_RCC_OscConfig+0x270>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e014      	b.n	800456c <HAL_RCC_OscConfig+0x298>
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	0800aba4 	.word	0x0800aba4
 800454c:	20000000 	.word	0x20000000
 8004550:	20000004 	.word	0x20000004
 8004554:	4ba0      	ldr	r3, [pc, #640]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a9f      	ldr	r2, [pc, #636]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800455a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4b9d      	ldr	r3, [pc, #628]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a9c      	ldr	r2, [pc, #624]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 8004566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800456a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd f9fe 	bl	8001974 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7fd f9fa 	bl	8001974 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	@ 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e276      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458e:	4b92      	ldr	r3, [pc, #584]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x2a8>
 800459a:	e014      	b.n	80045c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd f9ea 	bl	8001974 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fd f9e6 	bl	8001974 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	@ 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e262      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045b6:	4b88      	ldr	r3, [pc, #544]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x2d0>
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d060      	beq.n	8004694 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_OscConfig+0x310>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d119      	bne.n	8004612 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d116      	bne.n	8004612 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e4:	4b7c      	ldr	r3, [pc, #496]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_OscConfig+0x328>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e23f      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fc:	4b76      	ldr	r3, [pc, #472]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	4973      	ldr	r1, [pc, #460]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004610:	e040      	b.n	8004694 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d023      	beq.n	8004662 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800461a:	4b6f      	ldr	r3, [pc, #444]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a6e      	ldr	r2, [pc, #440]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7fd f9a5 	bl	8001974 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462e:	f7fd f9a1 	bl	8001974 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e21d      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004640:	4b65      	ldr	r3, [pc, #404]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b62      	ldr	r3, [pc, #392]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	495f      	ldr	r1, [pc, #380]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
 8004660:	e018      	b.n	8004694 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004662:	4b5d      	ldr	r3, [pc, #372]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a5c      	ldr	r2, [pc, #368]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 8004668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800466c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fd f981 	bl	8001974 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004676:	f7fd f97d 	bl	8001974 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1f9      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004688:	4b53      	ldr	r3, [pc, #332]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d03c      	beq.n	800471a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01c      	beq.n	80046e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a8:	4b4b      	ldr	r3, [pc, #300]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80046aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ae:	4a4a      	ldr	r2, [pc, #296]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fd f95c 	bl	8001974 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fd f958 	bl	8001974 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e1d4      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046d2:	4b41      	ldr	r3, [pc, #260]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ef      	beq.n	80046c0 <HAL_RCC_OscConfig+0x3ec>
 80046e0:	e01b      	b.n	800471a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e2:	4b3d      	ldr	r3, [pc, #244]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80046e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e8:	4a3b      	ldr	r2, [pc, #236]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f2:	f7fd f93f 	bl	8001974 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046fa:	f7fd f93b 	bl	8001974 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e1b7      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800470c:	4b32      	ldr	r3, [pc, #200]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ef      	bne.n	80046fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80a6 	beq.w	8004874 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004728:	2300      	movs	r3, #0
 800472a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800472c:	4b2a      	ldr	r3, [pc, #168]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10d      	bne.n	8004754 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004738:	4b27      	ldr	r3, [pc, #156]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473c:	4a26      	ldr	r2, [pc, #152]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800473e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004742:	6593      	str	r3, [r2, #88]	@ 0x58
 8004744:	4b24      	ldr	r3, [pc, #144]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004750:	2301      	movs	r3, #1
 8004752:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004754:	4b21      	ldr	r3, [pc, #132]	@ (80047dc <HAL_RCC_OscConfig+0x508>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d118      	bne.n	8004792 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004760:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <HAL_RCC_OscConfig+0x508>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <HAL_RCC_OscConfig+0x508>)
 8004766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476c:	f7fd f902 	bl	8001974 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004774:	f7fd f8fe 	bl	8001974 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e17a      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004786:	4b15      	ldr	r3, [pc, #84]	@ (80047dc <HAL_RCC_OscConfig+0x508>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d108      	bne.n	80047ac <HAL_RCC_OscConfig+0x4d8>
 800479a:	4b0f      	ldr	r3, [pc, #60]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a0:	4a0d      	ldr	r2, [pc, #52]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047aa:	e029      	b.n	8004800 <HAL_RCC_OscConfig+0x52c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	d115      	bne.n	80047e0 <HAL_RCC_OscConfig+0x50c>
 80047b4:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ba:	4a07      	ldr	r2, [pc, #28]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80047bc:	f043 0304 	orr.w	r3, r3, #4
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047c4:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	4a03      	ldr	r2, [pc, #12]	@ (80047d8 <HAL_RCC_OscConfig+0x504>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047d4:	e014      	b.n	8004800 <HAL_RCC_OscConfig+0x52c>
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40007000 	.word	0x40007000
 80047e0:	4b9c      	ldr	r3, [pc, #624]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	4a9b      	ldr	r2, [pc, #620]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047f0:	4b98      	ldr	r3, [pc, #608]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	4a97      	ldr	r2, [pc, #604]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80047f8:	f023 0304 	bic.w	r3, r3, #4
 80047fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d016      	beq.n	8004836 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004808:	f7fd f8b4 	bl	8001974 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004810:	f7fd f8b0 	bl	8001974 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e12a      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004826:	4b8b      	ldr	r3, [pc, #556]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ed      	beq.n	8004810 <HAL_RCC_OscConfig+0x53c>
 8004834:	e015      	b.n	8004862 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fd f89d 	bl	8001974 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fd f899 	bl	8001974 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e113      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004854:	4b7f      	ldr	r3, [pc, #508]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1ed      	bne.n	800483e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004862:	7ffb      	ldrb	r3, [r7, #31]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d105      	bne.n	8004874 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004868:	4b7a      	ldr	r3, [pc, #488]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	4a79      	ldr	r2, [pc, #484]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 800486e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004872:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80fe 	beq.w	8004a7a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	2b02      	cmp	r3, #2
 8004884:	f040 80d0 	bne.w	8004a28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004888:	4b72      	ldr	r3, [pc, #456]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f003 0203 	and.w	r2, r3, #3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	429a      	cmp	r2, r3
 800489a:	d130      	bne.n	80048fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	3b01      	subs	r3, #1
 80048a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d127      	bne.n	80048fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d11f      	bne.n	80048fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048c8:	2a07      	cmp	r2, #7
 80048ca:	bf14      	ite	ne
 80048cc:	2201      	movne	r2, #1
 80048ce:	2200      	moveq	r2, #0
 80048d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d113      	bne.n	80048fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	3b01      	subs	r3, #1
 80048e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d109      	bne.n	80048fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	3b01      	subs	r3, #1
 80048f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d06e      	beq.n	80049dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b0c      	cmp	r3, #12
 8004902:	d069      	beq.n	80049d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004904:	4b53      	ldr	r3, [pc, #332]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004910:	4b50      	ldr	r3, [pc, #320]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0ad      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004920:	4b4c      	ldr	r3, [pc, #304]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a4b      	ldr	r2, [pc, #300]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800492a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800492c:	f7fd f822 	bl	8001974 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fd f81e 	bl	8001974 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e09a      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004946:	4b43      	ldr	r3, [pc, #268]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004952:	4b40      	ldr	r3, [pc, #256]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	4b40      	ldr	r3, [pc, #256]	@ (8004a58 <HAL_RCC_OscConfig+0x784>)
 8004958:	4013      	ands	r3, r2
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004962:	3a01      	subs	r2, #1
 8004964:	0112      	lsls	r2, r2, #4
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800496c:	0212      	lsls	r2, r2, #8
 800496e:	4311      	orrs	r1, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004974:	0852      	lsrs	r2, r2, #1
 8004976:	3a01      	subs	r2, #1
 8004978:	0552      	lsls	r2, r2, #21
 800497a:	4311      	orrs	r1, r2
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004980:	0852      	lsrs	r2, r2, #1
 8004982:	3a01      	subs	r2, #1
 8004984:	0652      	lsls	r2, r2, #25
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800498c:	0912      	lsrs	r2, r2, #4
 800498e:	0452      	lsls	r2, r2, #17
 8004990:	430a      	orrs	r2, r1
 8004992:	4930      	ldr	r1, [pc, #192]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004994:	4313      	orrs	r3, r2
 8004996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004998:	4b2e      	ldr	r3, [pc, #184]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80049aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049b0:	f7fc ffe0 	bl	8001974 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fc ffdc 	bl	8001974 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e058      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	4b22      	ldr	r3, [pc, #136]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d6:	e050      	b.n	8004a7a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e04f      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d148      	bne.n	8004a7a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a19      	ldr	r2, [pc, #100]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80049ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049f4:	4b17      	ldr	r3, [pc, #92]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4a16      	ldr	r2, [pc, #88]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 80049fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a00:	f7fc ffb8 	bl	8001974 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fc ffb4 	bl	8001974 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e030      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x734>
 8004a26:	e028      	b.n	8004a7a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b0c      	cmp	r3, #12
 8004a2c:	d023      	beq.n	8004a76 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2e:	4b09      	ldr	r3, [pc, #36]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a08      	ldr	r2, [pc, #32]	@ (8004a54 <HAL_RCC_OscConfig+0x780>)
 8004a34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3a:	f7fc ff9b 	bl	8001974 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a40:	e00c      	b.n	8004a5c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a42:	f7fc ff97 	bl	8001974 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d905      	bls.n	8004a5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e013      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
 8004a54:	40021000 	.word	0x40021000
 8004a58:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5c:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_OscConfig+0x7b0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ec      	bne.n	8004a42 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a68:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <HAL_RCC_OscConfig+0x7b0>)
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	4905      	ldr	r1, [pc, #20]	@ (8004a84 <HAL_RCC_OscConfig+0x7b0>)
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <HAL_RCC_OscConfig+0x7b4>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
 8004a74:	e001      	b.n	8004a7a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000
 8004a88:	feeefffc 	.word	0xfeeefffc

08004a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0e7      	b.n	8004c70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b75      	ldr	r3, [pc, #468]	@ (8004c78 <HAL_RCC_ClockConfig+0x1ec>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d910      	bls.n	8004ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b72      	ldr	r3, [pc, #456]	@ (8004c78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 0207 	bic.w	r2, r3, #7
 8004ab6:	4970      	ldr	r1, [pc, #448]	@ (8004c78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b6e      	ldr	r3, [pc, #440]	@ (8004c78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0cf      	b.n	8004c70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d010      	beq.n	8004afe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b66      	ldr	r3, [pc, #408]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d908      	bls.n	8004afe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b63      	ldr	r3, [pc, #396]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4960      	ldr	r1, [pc, #384]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d04c      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b12:	4b5a      	ldr	r3, [pc, #360]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d121      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e0a6      	b.n	8004c70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b2a:	4b54      	ldr	r3, [pc, #336]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d115      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e09a      	b.n	8004c70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b42:	4b4e      	ldr	r3, [pc, #312]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e08e      	b.n	8004c70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b52:	4b4a      	ldr	r3, [pc, #296]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e086      	b.n	8004c70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b62:	4b46      	ldr	r3, [pc, #280]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f023 0203 	bic.w	r2, r3, #3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4943      	ldr	r1, [pc, #268]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b74:	f7fc fefe 	bl	8001974 <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7a:	e00a      	b.n	8004b92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7c:	f7fc fefa 	bl	8001974 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e06e      	b.n	8004c70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	4b3a      	ldr	r3, [pc, #232]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 020c 	and.w	r2, r3, #12
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d1eb      	bne.n	8004b7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d010      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	4b31      	ldr	r3, [pc, #196]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d208      	bcs.n	8004bd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	492b      	ldr	r1, [pc, #172]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd2:	4b29      	ldr	r3, [pc, #164]	@ (8004c78 <HAL_RCC_ClockConfig+0x1ec>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d210      	bcs.n	8004c02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be0:	4b25      	ldr	r3, [pc, #148]	@ (8004c78 <HAL_RCC_ClockConfig+0x1ec>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 0207 	bic.w	r2, r3, #7
 8004be8:	4923      	ldr	r1, [pc, #140]	@ (8004c78 <HAL_RCC_ClockConfig+0x1ec>)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf0:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <HAL_RCC_ClockConfig+0x1ec>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e036      	b.n	8004c70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	4918      	ldr	r1, [pc, #96]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d009      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c2c:	4b13      	ldr	r3, [pc, #76]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4910      	ldr	r1, [pc, #64]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c40:	f000 f824 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <HAL_RCC_ClockConfig+0x1f0>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	490b      	ldr	r1, [pc, #44]	@ (8004c80 <HAL_RCC_ClockConfig+0x1f4>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5c:	4a09      	ldr	r2, [pc, #36]	@ (8004c84 <HAL_RCC_ClockConfig+0x1f8>)
 8004c5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCC_ClockConfig+0x1fc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fc fe35 	bl	80018d4 <HAL_InitTick>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40022000 	.word	0x40022000
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	0800aba4 	.word	0x0800aba4
 8004c84:	20000000 	.word	0x20000000
 8004c88:	20000004 	.word	0x20000004

08004c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	@ 0x24
 8004c90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	2300      	movs	r3, #0
 8004c98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b0c      	cmp	r3, #12
 8004cb8:	d121      	bne.n	8004cfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d11e      	bne.n	8004cfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cc0:	4b34      	ldr	r3, [pc, #208]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d107      	bne.n	8004cdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ccc:	4b31      	ldr	r3, [pc, #196]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	e005      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	091b      	lsrs	r3, r3, #4
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10d      	bne.n	8004d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d102      	bne.n	8004d0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d04:	4b25      	ldr	r3, [pc, #148]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004d06:	61bb      	str	r3, [r7, #24]
 8004d08:	e004      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d10:	4b23      	ldr	r3, [pc, #140]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d134      	bne.n	8004d84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d003      	beq.n	8004d32 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b03      	cmp	r3, #3
 8004d2e:	d003      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0xac>
 8004d30:	e005      	b.n	8004d3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d32:	4b1a      	ldr	r3, [pc, #104]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004d34:	617b      	str	r3, [r7, #20]
      break;
 8004d36:	e005      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d38:	4b19      	ldr	r3, [pc, #100]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d3a:	617b      	str	r3, [r7, #20]
      break;
 8004d3c:	e002      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	617b      	str	r3, [r7, #20]
      break;
 8004d42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d44:	4b13      	ldr	r3, [pc, #76]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	3301      	adds	r3, #1
 8004d50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d52:	4b10      	ldr	r3, [pc, #64]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	fb03 f202 	mul.w	r2, r3, r2
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	0e5b      	lsrs	r3, r3, #25
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	3301      	adds	r3, #1
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d84:	69bb      	ldr	r3, [r7, #24]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3724      	adds	r7, #36	@ 0x24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	0800abbc 	.word	0x0800abbc
 8004d9c:	00f42400 	.word	0x00f42400
 8004da0:	007a1200 	.word	0x007a1200

08004da4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004daa:	681b      	ldr	r3, [r3, #0]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000000 	.word	0x20000000

08004dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dc0:	f7ff fff0 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	4904      	ldr	r1, [pc, #16]	@ (8004de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dd2:	5ccb      	ldrb	r3, [r1, r3]
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40021000 	.word	0x40021000
 8004de4:	0800abb4 	.word	0x0800abb4

08004de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dec:	f7ff ffda 	bl	8004da4 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	0adb      	lsrs	r3, r3, #11
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4904      	ldr	r1, [pc, #16]	@ (8004e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	0800abb4 	.word	0x0800abb4

08004e14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e20:	4b2a      	ldr	r3, [pc, #168]	@ (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e2c:	f7ff f922 	bl	8004074 <HAL_PWREx_GetVoltageRange>
 8004e30:	6178      	str	r0, [r7, #20]
 8004e32:	e014      	b.n	8004e5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e34:	4b25      	ldr	r3, [pc, #148]	@ (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e38:	4a24      	ldr	r2, [pc, #144]	@ (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e40:	4b22      	ldr	r3, [pc, #136]	@ (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e48:	60fb      	str	r3, [r7, #12]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e4c:	f7ff f912 	bl	8004074 <HAL_PWREx_GetVoltageRange>
 8004e50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e52:	4b1e      	ldr	r3, [pc, #120]	@ (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e56:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e5c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e64:	d10b      	bne.n	8004e7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b80      	cmp	r3, #128	@ 0x80
 8004e6a:	d919      	bls.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e70:	d902      	bls.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e72:	2302      	movs	r3, #2
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	e013      	b.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e78:	2301      	movs	r3, #1
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	e010      	b.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b80      	cmp	r3, #128	@ 0x80
 8004e82:	d902      	bls.n	8004e8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e84:	2303      	movs	r3, #3
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	e00a      	b.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b80      	cmp	r3, #128	@ 0x80
 8004e8e:	d102      	bne.n	8004e96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e90:	2302      	movs	r3, #2
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	e004      	b.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b70      	cmp	r3, #112	@ 0x70
 8004e9a:	d101      	bne.n	8004ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 0207 	bic.w	r2, r3, #7
 8004ea8:	4909      	ldr	r1, [pc, #36]	@ (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004eb0:	4b07      	ldr	r3, [pc, #28]	@ (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d001      	beq.n	8004ec2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	40022000 	.word	0x40022000

08004ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004edc:	2300      	movs	r3, #0
 8004ede:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d041      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ef8:	d02a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004efa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004efe:	d824      	bhi.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f04:	d008      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f0a:	d81e      	bhi.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f14:	d010      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f16:	e018      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f18:	4b86      	ldr	r3, [pc, #536]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a85      	ldr	r2, [pc, #532]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f24:	e015      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 facb 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f36:	e00c      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3320      	adds	r3, #32
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fbb6 	bl	80056b0 <RCCEx_PLLSAI2_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f48:	e003      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f4e:	e000      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f52:	7cfb      	ldrb	r3, [r7, #19]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10b      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f58:	4b76      	ldr	r3, [pc, #472]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f66:	4973      	ldr	r1, [pc, #460]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f6e:	e001      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	7cfb      	ldrb	r3, [r7, #19]
 8004f72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d041      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f88:	d02a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f8e:	d824      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f9a:	d81e      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fa4:	d010      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fa6:	e018      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fa8:	4b62      	ldr	r3, [pc, #392]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4a61      	ldr	r2, [pc, #388]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fb4:	e015      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fa83 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fc6:	e00c      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3320      	adds	r3, #32
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fb6e 	bl	80056b0 <RCCEx_PLLSAI2_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fd8:	e003      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	74fb      	strb	r3, [r7, #19]
      break;
 8004fde:	e000      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fe8:	4b52      	ldr	r3, [pc, #328]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ff6:	494f      	ldr	r1, [pc, #316]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ffe:	e001      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 80a0 	beq.w	8005152 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005012:	2300      	movs	r3, #0
 8005014:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005016:	4b47      	ldr	r3, [pc, #284]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005026:	2300      	movs	r3, #0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00d      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502c:	4b41      	ldr	r3, [pc, #260]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005030:	4a40      	ldr	r2, [pc, #256]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005036:	6593      	str	r3, [r2, #88]	@ 0x58
 8005038:	4b3e      	ldr	r3, [pc, #248]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800503c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005044:	2301      	movs	r3, #1
 8005046:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005048:	4b3b      	ldr	r3, [pc, #236]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3a      	ldr	r2, [pc, #232]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800504e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005052:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005054:	f7fc fc8e 	bl	8001974 <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800505a:	e009      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505c:	f7fc fc8a 	bl	8001974 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d902      	bls.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	74fb      	strb	r3, [r7, #19]
        break;
 800506e:	e005      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005070:	4b31      	ldr	r3, [pc, #196]	@ (8005138 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ef      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800507c:	7cfb      	ldrb	r3, [r7, #19]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d15c      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005082:	4b2c      	ldr	r3, [pc, #176]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005088:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01f      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	d019      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050a0:	4b24      	ldr	r3, [pc, #144]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050ac:	4b21      	ldr	r3, [pc, #132]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	4a20      	ldr	r2, [pc, #128]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050cc:	4a19      	ldr	r2, [pc, #100]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050de:	f7fc fc49 	bl	8001974 <HAL_GetTick>
 80050e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e4:	e00b      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fc fc45 	bl	8001974 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d902      	bls.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	74fb      	strb	r3, [r7, #19]
            break;
 80050fc:	e006      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ec      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10c      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005112:	4b08      	ldr	r3, [pc, #32]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005118:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005122:	4904      	ldr	r1, [pc, #16]	@ (8005134 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800512a:	e009      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	74bb      	strb	r3, [r7, #18]
 8005130:	e006      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
 8005138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	7cfb      	ldrb	r3, [r7, #19]
 800513e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005140:	7c7b      	ldrb	r3, [r7, #17]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d105      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005146:	4b9e      	ldr	r3, [pc, #632]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514a:	4a9d      	ldr	r2, [pc, #628]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005150:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800515e:	4b98      	ldr	r3, [pc, #608]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f023 0203 	bic.w	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516c:	4994      	ldr	r1, [pc, #592]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005180:	4b8f      	ldr	r3, [pc, #572]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005186:	f023 020c 	bic.w	r2, r3, #12
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	498c      	ldr	r1, [pc, #560]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051a2:	4b87      	ldr	r3, [pc, #540]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b0:	4983      	ldr	r1, [pc, #524]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051c4:	4b7e      	ldr	r3, [pc, #504]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d2:	497b      	ldr	r1, [pc, #492]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051e6:	4b76      	ldr	r3, [pc, #472]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f4:	4972      	ldr	r1, [pc, #456]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00a      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005208:	4b6d      	ldr	r3, [pc, #436]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005216:	496a      	ldr	r1, [pc, #424]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800522a:	4b65      	ldr	r3, [pc, #404]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005230:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005238:	4961      	ldr	r1, [pc, #388]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800524c:	4b5c      	ldr	r3, [pc, #368]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525a:	4959      	ldr	r1, [pc, #356]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800526e:	4b54      	ldr	r3, [pc, #336]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005274:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527c:	4950      	ldr	r1, [pc, #320]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005290:	4b4b      	ldr	r3, [pc, #300]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529e:	4948      	ldr	r1, [pc, #288]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052b2:	4b43      	ldr	r3, [pc, #268]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c0:	493f      	ldr	r1, [pc, #252]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d028      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052d4:	4b3a      	ldr	r3, [pc, #232]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052e2:	4937      	ldr	r1, [pc, #220]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052f2:	d106      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f4:	4b32      	ldr	r3, [pc, #200]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4a31      	ldr	r2, [pc, #196]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052fe:	60d3      	str	r3, [r2, #12]
 8005300:	e011      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800530a:	d10c      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f8d8 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800531c:	7cfb      	ldrb	r3, [r7, #19]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d028      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005332:	4b23      	ldr	r3, [pc, #140]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005338:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005340:	491f      	ldr	r1, [pc, #124]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005350:	d106      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005352:	4b1b      	ldr	r3, [pc, #108]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	4a1a      	ldr	r2, [pc, #104]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005358:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800535c:	60d3      	str	r3, [r2, #12]
 800535e:	e011      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005364:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005368:	d10c      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3304      	adds	r3, #4
 800536e:	2101      	movs	r1, #1
 8005370:	4618      	mov	r0, r3
 8005372:	f000 f8a9 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 8005376:	4603      	mov	r3, r0
 8005378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800537a:	7cfb      	ldrb	r3, [r7, #19]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d02b      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005390:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005396:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800539e:	4908      	ldr	r1, [pc, #32]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ae:	d109      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b0:	4b03      	ldr	r3, [pc, #12]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a02      	ldr	r2, [pc, #8]	@ (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053ba:	60d3      	str	r3, [r2, #12]
 80053bc:	e014      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053be:	bf00      	nop
 80053c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3304      	adds	r3, #4
 80053d2:	2101      	movs	r1, #1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f877 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d02f      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053f4:	4b2b      	ldr	r3, [pc, #172]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005402:	4928      	ldr	r1, [pc, #160]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800540e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005412:	d10d      	bne.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	2102      	movs	r1, #2
 800541a:	4618      	mov	r0, r3
 800541c:	f000 f854 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 8005420:	4603      	mov	r3, r0
 8005422:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005424:	7cfb      	ldrb	r3, [r7, #19]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d014      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800542a:	7cfb      	ldrb	r3, [r7, #19]
 800542c:	74bb      	strb	r3, [r7, #18]
 800542e:	e011      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005434:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005438:	d10c      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3320      	adds	r3, #32
 800543e:	2102      	movs	r1, #2
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f935 	bl	80056b0 <RCCEx_PLLSAI2_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005460:	4b10      	ldr	r3, [pc, #64]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800546e:	490d      	ldr	r1, [pc, #52]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005482:	4b08      	ldr	r3, [pc, #32]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005492:	4904      	ldr	r1, [pc, #16]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800549a:	7cbb      	ldrb	r3, [r7, #18]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000

080054a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a04      	ldr	r2, [pc, #16]	@ (80054c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054b2:	f043 0304 	orr.w	r3, r3, #4
 80054b6:	6013      	str	r3, [r2, #0]
}
 80054b8:	bf00      	nop
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000

080054c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054d6:	4b75      	ldr	r3, [pc, #468]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d018      	beq.n	8005514 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054e2:	4b72      	ldr	r3, [pc, #456]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0203 	and.w	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d10d      	bne.n	800550e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
       ||
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054fa:	4b6c      	ldr	r3, [pc, #432]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	091b      	lsrs	r3, r3, #4
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
       ||
 800550a:	429a      	cmp	r2, r3
 800550c:	d047      	beq.n	800559e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
 8005512:	e044      	b.n	800559e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b03      	cmp	r3, #3
 800551a:	d018      	beq.n	800554e <RCCEx_PLLSAI1_Config+0x86>
 800551c:	2b03      	cmp	r3, #3
 800551e:	d825      	bhi.n	800556c <RCCEx_PLLSAI1_Config+0xa4>
 8005520:	2b01      	cmp	r3, #1
 8005522:	d002      	beq.n	800552a <RCCEx_PLLSAI1_Config+0x62>
 8005524:	2b02      	cmp	r3, #2
 8005526:	d009      	beq.n	800553c <RCCEx_PLLSAI1_Config+0x74>
 8005528:	e020      	b.n	800556c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800552a:	4b60      	ldr	r3, [pc, #384]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11d      	bne.n	8005572 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800553a:	e01a      	b.n	8005572 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800553c:	4b5b      	ldr	r3, [pc, #364]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005544:	2b00      	cmp	r3, #0
 8005546:	d116      	bne.n	8005576 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800554c:	e013      	b.n	8005576 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800554e:	4b57      	ldr	r3, [pc, #348]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10f      	bne.n	800557a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800555a:	4b54      	ldr	r3, [pc, #336]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800556a:	e006      	b.n	800557a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
      break;
 8005570:	e004      	b.n	800557c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005572:	bf00      	nop
 8005574:	e002      	b.n	800557c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800557a:	bf00      	nop
    }

    if(status == HAL_OK)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10d      	bne.n	800559e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005582:	4b4a      	ldr	r3, [pc, #296]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	3b01      	subs	r3, #1
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	430b      	orrs	r3, r1
 8005598:	4944      	ldr	r1, [pc, #272]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800559a:	4313      	orrs	r3, r2
 800559c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d17d      	bne.n	80056a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055a4:	4b41      	ldr	r3, [pc, #260]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a40      	ldr	r2, [pc, #256]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80055aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b0:	f7fc f9e0 	bl	8001974 <HAL_GetTick>
 80055b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055b6:	e009      	b.n	80055cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055b8:	f7fc f9dc 	bl	8001974 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d902      	bls.n	80055cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	73fb      	strb	r3, [r7, #15]
        break;
 80055ca:	e005      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055cc:	4b37      	ldr	r3, [pc, #220]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ef      	bne.n	80055b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d160      	bne.n	80056a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d111      	bne.n	8005608 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055e4:	4b31      	ldr	r3, [pc, #196]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80055ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6892      	ldr	r2, [r2, #8]
 80055f4:	0211      	lsls	r1, r2, #8
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68d2      	ldr	r2, [r2, #12]
 80055fa:	0912      	lsrs	r2, r2, #4
 80055fc:	0452      	lsls	r2, r2, #17
 80055fe:	430a      	orrs	r2, r1
 8005600:	492a      	ldr	r1, [pc, #168]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	610b      	str	r3, [r1, #16]
 8005606:	e027      	b.n	8005658 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d112      	bne.n	8005634 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800560e:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005616:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6892      	ldr	r2, [r2, #8]
 800561e:	0211      	lsls	r1, r2, #8
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6912      	ldr	r2, [r2, #16]
 8005624:	0852      	lsrs	r2, r2, #1
 8005626:	3a01      	subs	r2, #1
 8005628:	0552      	lsls	r2, r2, #21
 800562a:	430a      	orrs	r2, r1
 800562c:	491f      	ldr	r1, [pc, #124]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800562e:	4313      	orrs	r3, r2
 8005630:	610b      	str	r3, [r1, #16]
 8005632:	e011      	b.n	8005658 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005634:	4b1d      	ldr	r3, [pc, #116]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800563c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6892      	ldr	r2, [r2, #8]
 8005644:	0211      	lsls	r1, r2, #8
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6952      	ldr	r2, [r2, #20]
 800564a:	0852      	lsrs	r2, r2, #1
 800564c:	3a01      	subs	r2, #1
 800564e:	0652      	lsls	r2, r2, #25
 8005650:	430a      	orrs	r2, r1
 8005652:	4916      	ldr	r1, [pc, #88]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005654:	4313      	orrs	r3, r2
 8005656:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005658:	4b14      	ldr	r3, [pc, #80]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a13      	ldr	r2, [pc, #76]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800565e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005662:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fc f986 	bl	8001974 <HAL_GetTick>
 8005668:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800566a:	e009      	b.n	8005680 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800566c:	f7fc f982 	bl	8001974 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d902      	bls.n	8005680 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	73fb      	strb	r3, [r7, #15]
          break;
 800567e:	e005      	b.n	800568c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005680:	4b0a      	ldr	r3, [pc, #40]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ef      	beq.n	800566c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005692:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	4904      	ldr	r1, [pc, #16]	@ (80056ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800569c:	4313      	orrs	r3, r2
 800569e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40021000 	.word	0x40021000

080056b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056be:	4b6a      	ldr	r3, [pc, #424]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d018      	beq.n	80056fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056ca:	4b67      	ldr	r3, [pc, #412]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0203 	and.w	r2, r3, #3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d10d      	bne.n	80056f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
       ||
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056e2:	4b61      	ldr	r3, [pc, #388]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
       ||
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d047      	beq.n	8005786 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
 80056fa:	e044      	b.n	8005786 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d018      	beq.n	8005736 <RCCEx_PLLSAI2_Config+0x86>
 8005704:	2b03      	cmp	r3, #3
 8005706:	d825      	bhi.n	8005754 <RCCEx_PLLSAI2_Config+0xa4>
 8005708:	2b01      	cmp	r3, #1
 800570a:	d002      	beq.n	8005712 <RCCEx_PLLSAI2_Config+0x62>
 800570c:	2b02      	cmp	r3, #2
 800570e:	d009      	beq.n	8005724 <RCCEx_PLLSAI2_Config+0x74>
 8005710:	e020      	b.n	8005754 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005712:	4b55      	ldr	r3, [pc, #340]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d11d      	bne.n	800575a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005722:	e01a      	b.n	800575a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005724:	4b50      	ldr	r3, [pc, #320]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800572c:	2b00      	cmp	r3, #0
 800572e:	d116      	bne.n	800575e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005734:	e013      	b.n	800575e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005736:	4b4c      	ldr	r3, [pc, #304]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005742:	4b49      	ldr	r3, [pc, #292]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d109      	bne.n	8005762 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005752:	e006      	b.n	8005762 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
      break;
 8005758:	e004      	b.n	8005764 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800575a:	bf00      	nop
 800575c:	e002      	b.n	8005764 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800575e:	bf00      	nop
 8005760:	e000      	b.n	8005764 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005762:	bf00      	nop
    }

    if(status == HAL_OK)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10d      	bne.n	8005786 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800576a:	4b3f      	ldr	r3, [pc, #252]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6819      	ldr	r1, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	3b01      	subs	r3, #1
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	430b      	orrs	r3, r1
 8005780:	4939      	ldr	r1, [pc, #228]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005782:	4313      	orrs	r3, r2
 8005784:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d167      	bne.n	800585c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800578c:	4b36      	ldr	r3, [pc, #216]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a35      	ldr	r2, [pc, #212]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005798:	f7fc f8ec 	bl	8001974 <HAL_GetTick>
 800579c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800579e:	e009      	b.n	80057b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057a0:	f7fc f8e8 	bl	8001974 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d902      	bls.n	80057b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	73fb      	strb	r3, [r7, #15]
        break;
 80057b2:	e005      	b.n	80057c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1ef      	bne.n	80057a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d14a      	bne.n	800585c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d111      	bne.n	80057f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057cc:	4b26      	ldr	r3, [pc, #152]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80057d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6892      	ldr	r2, [r2, #8]
 80057dc:	0211      	lsls	r1, r2, #8
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	68d2      	ldr	r2, [r2, #12]
 80057e2:	0912      	lsrs	r2, r2, #4
 80057e4:	0452      	lsls	r2, r2, #17
 80057e6:	430a      	orrs	r2, r1
 80057e8:	491f      	ldr	r1, [pc, #124]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	614b      	str	r3, [r1, #20]
 80057ee:	e011      	b.n	8005814 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6892      	ldr	r2, [r2, #8]
 8005800:	0211      	lsls	r1, r2, #8
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6912      	ldr	r2, [r2, #16]
 8005806:	0852      	lsrs	r2, r2, #1
 8005808:	3a01      	subs	r2, #1
 800580a:	0652      	lsls	r2, r2, #25
 800580c:	430a      	orrs	r2, r1
 800580e:	4916      	ldr	r1, [pc, #88]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005810:	4313      	orrs	r3, r2
 8005812:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005814:	4b14      	ldr	r3, [pc, #80]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a13      	ldr	r2, [pc, #76]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800581a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800581e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fc f8a8 	bl	8001974 <HAL_GetTick>
 8005824:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005826:	e009      	b.n	800583c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005828:	f7fc f8a4 	bl	8001974 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d902      	bls.n	800583c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	73fb      	strb	r3, [r7, #15]
          break;
 800583a:	e005      	b.n	8005848 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0ef      	beq.n	8005828 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800584e:	4b06      	ldr	r3, [pc, #24]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	4904      	ldr	r1, [pc, #16]	@ (8005868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005858:	4313      	orrs	r3, r2
 800585a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000

0800586c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e095      	b.n	80059aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	d108      	bne.n	8005898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800588e:	d009      	beq.n	80058a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	61da      	str	r2, [r3, #28]
 8005896:	e005      	b.n	80058a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fb fd3c 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058e4:	d902      	bls.n	80058ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e002      	b.n	80058f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058fa:	d007      	beq.n	800590c <HAL_SPI_Init+0xa0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005904:	d002      	beq.n	800590c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	ea42 0103 	orr.w	r1, r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005956:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	0c1b      	lsrs	r3, r3, #16
 8005968:	f003 0204 	and.w	r2, r3, #4
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005988:	ea42 0103 	orr.w	r1, r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e049      	b.n	8005a58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d106      	bne.n	80059de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fa ff49 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2202      	movs	r2, #2
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3304      	adds	r3, #4
 80059ee:	4619      	mov	r1, r3
 80059f0:	4610      	mov	r0, r2
 80059f2:	f000 f96f 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e04f      	b.n	8005b18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a23      	ldr	r2, [pc, #140]	@ (8005b24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01d      	beq.n	8005ad6 <HAL_TIM_Base_Start_IT+0x76>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d018      	beq.n	8005ad6 <HAL_TIM_Base_Start_IT+0x76>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b28 <HAL_TIM_Base_Start_IT+0xc8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_TIM_Base_Start_IT+0x76>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b2c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_TIM_Base_Start_IT+0x76>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_TIM_Base_Start_IT+0x76>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_TIM_Base_Start_IT+0x76>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a19      	ldr	r2, [pc, #100]	@ (8005b38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d115      	bne.n	8005b02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	4b17      	ldr	r3, [pc, #92]	@ (8005b3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b06      	cmp	r3, #6
 8005ae6:	d015      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0xb4>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aee:	d011      	beq.n	8005b14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b00:	e008      	b.n	8005b14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0201 	orr.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e000      	b.n	8005b16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40013400 	.word	0x40013400
 8005b38:	40014000 	.word	0x40014000
 8005b3c:	00010007 	.word	0x00010007

08005b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_TIM_ConfigClockSource+0x1c>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	e0b6      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x18a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b98:	d03e      	beq.n	8005c18 <HAL_TIM_ConfigClockSource+0xd8>
 8005b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b9e:	f200 8087 	bhi.w	8005cb0 <HAL_TIM_ConfigClockSource+0x170>
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba6:	f000 8086 	beq.w	8005cb6 <HAL_TIM_ConfigClockSource+0x176>
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bae:	d87f      	bhi.n	8005cb0 <HAL_TIM_ConfigClockSource+0x170>
 8005bb0:	2b70      	cmp	r3, #112	@ 0x70
 8005bb2:	d01a      	beq.n	8005bea <HAL_TIM_ConfigClockSource+0xaa>
 8005bb4:	2b70      	cmp	r3, #112	@ 0x70
 8005bb6:	d87b      	bhi.n	8005cb0 <HAL_TIM_ConfigClockSource+0x170>
 8005bb8:	2b60      	cmp	r3, #96	@ 0x60
 8005bba:	d050      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0x11e>
 8005bbc:	2b60      	cmp	r3, #96	@ 0x60
 8005bbe:	d877      	bhi.n	8005cb0 <HAL_TIM_ConfigClockSource+0x170>
 8005bc0:	2b50      	cmp	r3, #80	@ 0x50
 8005bc2:	d03c      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0xfe>
 8005bc4:	2b50      	cmp	r3, #80	@ 0x50
 8005bc6:	d873      	bhi.n	8005cb0 <HAL_TIM_ConfigClockSource+0x170>
 8005bc8:	2b40      	cmp	r3, #64	@ 0x40
 8005bca:	d058      	beq.n	8005c7e <HAL_TIM_ConfigClockSource+0x13e>
 8005bcc:	2b40      	cmp	r3, #64	@ 0x40
 8005bce:	d86f      	bhi.n	8005cb0 <HAL_TIM_ConfigClockSource+0x170>
 8005bd0:	2b30      	cmp	r3, #48	@ 0x30
 8005bd2:	d064      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x15e>
 8005bd4:	2b30      	cmp	r3, #48	@ 0x30
 8005bd6:	d86b      	bhi.n	8005cb0 <HAL_TIM_ConfigClockSource+0x170>
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d060      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x15e>
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d867      	bhi.n	8005cb0 <HAL_TIM_ConfigClockSource+0x170>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d05c      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x15e>
 8005be4:	2b10      	cmp	r3, #16
 8005be6:	d05a      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0x15e>
 8005be8:	e062      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bfa:	f000 f98b 	bl	8005f14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	609a      	str	r2, [r3, #8]
      break;
 8005c16:	e04f      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c28:	f000 f974 	bl	8005f14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c3a:	609a      	str	r2, [r3, #8]
      break;
 8005c3c:	e03c      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f000 f8e8 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2150      	movs	r1, #80	@ 0x50
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 f941 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005c5c:	e02c      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f000 f907 	bl	8005e7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2160      	movs	r1, #96	@ 0x60
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f931 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005c7c:	e01c      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f000 f8c8 	bl	8005e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2140      	movs	r1, #64	@ 0x40
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 f921 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005c9c:	e00c      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4610      	mov	r0, r2
 8005caa:	f000 f918 	bl	8005ede <TIM_ITRx_SetConfig>
      break;
 8005cae:	e003      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb4:	e000      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a46      	ldr	r2, [pc, #280]	@ (8005e00 <TIM_Base_SetConfig+0x12c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf2:	d00f      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a43      	ldr	r2, [pc, #268]	@ (8005e04 <TIM_Base_SetConfig+0x130>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00b      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a42      	ldr	r2, [pc, #264]	@ (8005e08 <TIM_Base_SetConfig+0x134>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a41      	ldr	r2, [pc, #260]	@ (8005e0c <TIM_Base_SetConfig+0x138>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a40      	ldr	r2, [pc, #256]	@ (8005e10 <TIM_Base_SetConfig+0x13c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d108      	bne.n	8005d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a35      	ldr	r2, [pc, #212]	@ (8005e00 <TIM_Base_SetConfig+0x12c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01f      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d34:	d01b      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a32      	ldr	r2, [pc, #200]	@ (8005e04 <TIM_Base_SetConfig+0x130>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d017      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a31      	ldr	r2, [pc, #196]	@ (8005e08 <TIM_Base_SetConfig+0x134>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a30      	ldr	r2, [pc, #192]	@ (8005e0c <TIM_Base_SetConfig+0x138>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a2f      	ldr	r2, [pc, #188]	@ (8005e10 <TIM_Base_SetConfig+0x13c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a2e      	ldr	r2, [pc, #184]	@ (8005e14 <TIM_Base_SetConfig+0x140>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a2d      	ldr	r2, [pc, #180]	@ (8005e18 <TIM_Base_SetConfig+0x144>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a2c      	ldr	r2, [pc, #176]	@ (8005e1c <TIM_Base_SetConfig+0x148>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d108      	bne.n	8005d80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a16      	ldr	r2, [pc, #88]	@ (8005e00 <TIM_Base_SetConfig+0x12c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00f      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a18      	ldr	r2, [pc, #96]	@ (8005e10 <TIM_Base_SetConfig+0x13c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a17      	ldr	r2, [pc, #92]	@ (8005e14 <TIM_Base_SetConfig+0x140>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d007      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a16      	ldr	r2, [pc, #88]	@ (8005e18 <TIM_Base_SetConfig+0x144>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a15      	ldr	r2, [pc, #84]	@ (8005e1c <TIM_Base_SetConfig+0x148>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d103      	bne.n	8005dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d105      	bne.n	8005df2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f023 0201 	bic.w	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	611a      	str	r2, [r3, #16]
  }
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40012c00 	.word	0x40012c00
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40000c00 	.word	0x40000c00
 8005e10:	40013400 	.word	0x40013400
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40014400 	.word	0x40014400
 8005e1c:	40014800 	.word	0x40014800

08005e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f023 0201 	bic.w	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 030a 	bic.w	r3, r3, #10
 8005e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b087      	sub	sp, #28
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	f023 0210 	bic.w	r2, r3, #16
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	031b      	lsls	r3, r3, #12
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005eba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f043 0307 	orr.w	r3, r3, #7
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	021a      	lsls	r2, r3, #8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	609a      	str	r2, [r3, #8]
}
 8005f48:	bf00      	nop
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e068      	b.n	800603e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2e      	ldr	r2, [pc, #184]	@ (800604c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d108      	bne.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005fa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800604c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01d      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fde:	d018      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8006054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1a      	ldr	r2, [pc, #104]	@ (8006058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a18      	ldr	r2, [pc, #96]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a13      	ldr	r2, [pc, #76]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a14      	ldr	r2, [pc, #80]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d10c      	bne.n	800602c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	4313      	orrs	r3, r2
 8006022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40013400 	.word	0x40013400
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800
 800605c:	40000c00 	.word	0x40000c00
 8006060:	40014000 	.word	0x40014000

08006064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e040      	b.n	80060f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d106      	bne.n	800608c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fb f99c 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2224      	movs	r2, #36	@ 0x24
 8006090:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fb6a 	bl	8006784 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8af 	bl	8006214 <UART_SetConfig>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e01b      	b.n	80060f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0201 	orr.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fbe9 	bl	80068c8 <UART_CheckIdleState>
 80060f6:	4603      	mov	r3, r0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08a      	sub	sp, #40	@ 0x28
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	4613      	mov	r3, r2
 800610e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006114:	2b20      	cmp	r3, #32
 8006116:	d177      	bne.n	8006208 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_UART_Transmit+0x24>
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e070      	b.n	800620a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2221      	movs	r2, #33	@ 0x21
 8006134:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006136:	f7fb fc1d 	bl	8001974 <HAL_GetTick>
 800613a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	88fa      	ldrh	r2, [r7, #6]
 8006148:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006154:	d108      	bne.n	8006168 <HAL_UART_Transmit+0x68>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	e003      	b.n	8006170 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800616c:	2300      	movs	r3, #0
 800616e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006170:	e02f      	b.n	80061d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2200      	movs	r2, #0
 800617a:	2180      	movs	r1, #128	@ 0x80
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fc4b 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e03b      	b.n	800620a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10b      	bne.n	80061b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a4:	b292      	uxth	r2, r2
 80061a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	3302      	adds	r3, #2
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e007      	b.n	80061c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	781a      	ldrb	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	3301      	adds	r3, #1
 80061be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1c9      	bne.n	8006172 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2140      	movs	r1, #64	@ 0x40
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 fc15 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e005      	b.n	800620a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	e000      	b.n	800620a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006208:	2302      	movs	r3, #2
  }
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006218:	b08a      	sub	sp, #40	@ 0x28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	431a      	orrs	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	431a      	orrs	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	4313      	orrs	r3, r2
 800623a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4ba4      	ldr	r3, [pc, #656]	@ (80064d4 <UART_SetConfig+0x2c0>)
 8006244:	4013      	ands	r3, r2
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800624c:	430b      	orrs	r3, r1
 800624e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a99      	ldr	r2, [pc, #612]	@ (80064d8 <UART_SetConfig+0x2c4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627c:	4313      	orrs	r3, r2
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006290:	430a      	orrs	r2, r1
 8006292:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a90      	ldr	r2, [pc, #576]	@ (80064dc <UART_SetConfig+0x2c8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d126      	bne.n	80062ec <UART_SetConfig+0xd8>
 800629e:	4b90      	ldr	r3, [pc, #576]	@ (80064e0 <UART_SetConfig+0x2cc>)
 80062a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d81b      	bhi.n	80062e4 <UART_SetConfig+0xd0>
 80062ac:	a201      	add	r2, pc, #4	@ (adr r2, 80062b4 <UART_SetConfig+0xa0>)
 80062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b2:	bf00      	nop
 80062b4:	080062c5 	.word	0x080062c5
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062dd 	.word	0x080062dd
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ca:	e116      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062cc:	2302      	movs	r3, #2
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062d2:	e112      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062da:	e10e      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062e2:	e10a      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ea:	e106      	b.n	80064fa <UART_SetConfig+0x2e6>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a7c      	ldr	r2, [pc, #496]	@ (80064e4 <UART_SetConfig+0x2d0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d138      	bne.n	8006368 <UART_SetConfig+0x154>
 80062f6:	4b7a      	ldr	r3, [pc, #488]	@ (80064e0 <UART_SetConfig+0x2cc>)
 80062f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fc:	f003 030c 	and.w	r3, r3, #12
 8006300:	2b0c      	cmp	r3, #12
 8006302:	d82d      	bhi.n	8006360 <UART_SetConfig+0x14c>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <UART_SetConfig+0xf8>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006341 	.word	0x08006341
 8006310:	08006361 	.word	0x08006361
 8006314:	08006361 	.word	0x08006361
 8006318:	08006361 	.word	0x08006361
 800631c:	08006351 	.word	0x08006351
 8006320:	08006361 	.word	0x08006361
 8006324:	08006361 	.word	0x08006361
 8006328:	08006361 	.word	0x08006361
 800632c:	08006349 	.word	0x08006349
 8006330:	08006361 	.word	0x08006361
 8006334:	08006361 	.word	0x08006361
 8006338:	08006361 	.word	0x08006361
 800633c:	08006359 	.word	0x08006359
 8006340:	2300      	movs	r3, #0
 8006342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006346:	e0d8      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006348:	2302      	movs	r3, #2
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634e:	e0d4      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006350:	2304      	movs	r3, #4
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006356:	e0d0      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006358:	2308      	movs	r3, #8
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635e:	e0cc      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006360:	2310      	movs	r3, #16
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006366:	e0c8      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5e      	ldr	r2, [pc, #376]	@ (80064e8 <UART_SetConfig+0x2d4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d125      	bne.n	80063be <UART_SetConfig+0x1aa>
 8006372:	4b5b      	ldr	r3, [pc, #364]	@ (80064e0 <UART_SetConfig+0x2cc>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006378:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800637c:	2b30      	cmp	r3, #48	@ 0x30
 800637e:	d016      	beq.n	80063ae <UART_SetConfig+0x19a>
 8006380:	2b30      	cmp	r3, #48	@ 0x30
 8006382:	d818      	bhi.n	80063b6 <UART_SetConfig+0x1a2>
 8006384:	2b20      	cmp	r3, #32
 8006386:	d00a      	beq.n	800639e <UART_SetConfig+0x18a>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d814      	bhi.n	80063b6 <UART_SetConfig+0x1a2>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <UART_SetConfig+0x182>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d008      	beq.n	80063a6 <UART_SetConfig+0x192>
 8006394:	e00f      	b.n	80063b6 <UART_SetConfig+0x1a2>
 8006396:	2300      	movs	r3, #0
 8006398:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800639c:	e0ad      	b.n	80064fa <UART_SetConfig+0x2e6>
 800639e:	2302      	movs	r3, #2
 80063a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063a4:	e0a9      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063a6:	2304      	movs	r3, #4
 80063a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ac:	e0a5      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063ae:	2308      	movs	r3, #8
 80063b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b4:	e0a1      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063b6:	2310      	movs	r3, #16
 80063b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063bc:	e09d      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a4a      	ldr	r2, [pc, #296]	@ (80064ec <UART_SetConfig+0x2d8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d125      	bne.n	8006414 <UART_SetConfig+0x200>
 80063c8:	4b45      	ldr	r3, [pc, #276]	@ (80064e0 <UART_SetConfig+0x2cc>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80063d4:	d016      	beq.n	8006404 <UART_SetConfig+0x1f0>
 80063d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063d8:	d818      	bhi.n	800640c <UART_SetConfig+0x1f8>
 80063da:	2b80      	cmp	r3, #128	@ 0x80
 80063dc:	d00a      	beq.n	80063f4 <UART_SetConfig+0x1e0>
 80063de:	2b80      	cmp	r3, #128	@ 0x80
 80063e0:	d814      	bhi.n	800640c <UART_SetConfig+0x1f8>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <UART_SetConfig+0x1d8>
 80063e6:	2b40      	cmp	r3, #64	@ 0x40
 80063e8:	d008      	beq.n	80063fc <UART_SetConfig+0x1e8>
 80063ea:	e00f      	b.n	800640c <UART_SetConfig+0x1f8>
 80063ec:	2300      	movs	r3, #0
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f2:	e082      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063f4:	2302      	movs	r3, #2
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063fa:	e07e      	b.n	80064fa <UART_SetConfig+0x2e6>
 80063fc:	2304      	movs	r3, #4
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006402:	e07a      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006404:	2308      	movs	r3, #8
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800640a:	e076      	b.n	80064fa <UART_SetConfig+0x2e6>
 800640c:	2310      	movs	r3, #16
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006412:	e072      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a35      	ldr	r2, [pc, #212]	@ (80064f0 <UART_SetConfig+0x2dc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d12a      	bne.n	8006474 <UART_SetConfig+0x260>
 800641e:	4b30      	ldr	r3, [pc, #192]	@ (80064e0 <UART_SetConfig+0x2cc>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006428:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800642c:	d01a      	beq.n	8006464 <UART_SetConfig+0x250>
 800642e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006432:	d81b      	bhi.n	800646c <UART_SetConfig+0x258>
 8006434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006438:	d00c      	beq.n	8006454 <UART_SetConfig+0x240>
 800643a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800643e:	d815      	bhi.n	800646c <UART_SetConfig+0x258>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <UART_SetConfig+0x238>
 8006444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006448:	d008      	beq.n	800645c <UART_SetConfig+0x248>
 800644a:	e00f      	b.n	800646c <UART_SetConfig+0x258>
 800644c:	2300      	movs	r3, #0
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006452:	e052      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006454:	2302      	movs	r3, #2
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645a:	e04e      	b.n	80064fa <UART_SetConfig+0x2e6>
 800645c:	2304      	movs	r3, #4
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006462:	e04a      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006464:	2308      	movs	r3, #8
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646a:	e046      	b.n	80064fa <UART_SetConfig+0x2e6>
 800646c:	2310      	movs	r3, #16
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006472:	e042      	b.n	80064fa <UART_SetConfig+0x2e6>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a17      	ldr	r2, [pc, #92]	@ (80064d8 <UART_SetConfig+0x2c4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d13a      	bne.n	80064f4 <UART_SetConfig+0x2e0>
 800647e:	4b18      	ldr	r3, [pc, #96]	@ (80064e0 <UART_SetConfig+0x2cc>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006484:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006488:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800648c:	d01a      	beq.n	80064c4 <UART_SetConfig+0x2b0>
 800648e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006492:	d81b      	bhi.n	80064cc <UART_SetConfig+0x2b8>
 8006494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006498:	d00c      	beq.n	80064b4 <UART_SetConfig+0x2a0>
 800649a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800649e:	d815      	bhi.n	80064cc <UART_SetConfig+0x2b8>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <UART_SetConfig+0x298>
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064a8:	d008      	beq.n	80064bc <UART_SetConfig+0x2a8>
 80064aa:	e00f      	b.n	80064cc <UART_SetConfig+0x2b8>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b2:	e022      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064b4:	2302      	movs	r3, #2
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ba:	e01e      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064bc:	2304      	movs	r3, #4
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c2:	e01a      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064c4:	2308      	movs	r3, #8
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ca:	e016      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064cc:	2310      	movs	r3, #16
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d2:	e012      	b.n	80064fa <UART_SetConfig+0x2e6>
 80064d4:	efff69f3 	.word	0xefff69f3
 80064d8:	40008000 	.word	0x40008000
 80064dc:	40013800 	.word	0x40013800
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40004400 	.word	0x40004400
 80064e8:	40004800 	.word	0x40004800
 80064ec:	40004c00 	.word	0x40004c00
 80064f0:	40005000 	.word	0x40005000
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a9f      	ldr	r2, [pc, #636]	@ (800677c <UART_SetConfig+0x568>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d17a      	bne.n	80065fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006504:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006508:	2b08      	cmp	r3, #8
 800650a:	d824      	bhi.n	8006556 <UART_SetConfig+0x342>
 800650c:	a201      	add	r2, pc, #4	@ (adr r2, 8006514 <UART_SetConfig+0x300>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006539 	.word	0x08006539
 8006518:	08006557 	.word	0x08006557
 800651c:	08006541 	.word	0x08006541
 8006520:	08006557 	.word	0x08006557
 8006524:	08006547 	.word	0x08006547
 8006528:	08006557 	.word	0x08006557
 800652c:	08006557 	.word	0x08006557
 8006530:	08006557 	.word	0x08006557
 8006534:	0800654f 	.word	0x0800654f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006538:	f7fe fc40 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 800653c:	61f8      	str	r0, [r7, #28]
        break;
 800653e:	e010      	b.n	8006562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006540:	4b8f      	ldr	r3, [pc, #572]	@ (8006780 <UART_SetConfig+0x56c>)
 8006542:	61fb      	str	r3, [r7, #28]
        break;
 8006544:	e00d      	b.n	8006562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006546:	f7fe fba1 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 800654a:	61f8      	str	r0, [r7, #28]
        break;
 800654c:	e009      	b.n	8006562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006552:	61fb      	str	r3, [r7, #28]
        break;
 8006554:	e005      	b.n	8006562 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006560:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80fb 	beq.w	8006760 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	4613      	mov	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	4413      	add	r3, r2
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	429a      	cmp	r2, r3
 8006578:	d305      	bcc.n	8006586 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	429a      	cmp	r2, r3
 8006584:	d903      	bls.n	800658e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800658c:	e0e8      	b.n	8006760 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2200      	movs	r2, #0
 8006592:	461c      	mov	r4, r3
 8006594:	4615      	mov	r5, r2
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	022b      	lsls	r3, r5, #8
 80065a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065a4:	0222      	lsls	r2, r4, #8
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	6849      	ldr	r1, [r1, #4]
 80065aa:	0849      	lsrs	r1, r1, #1
 80065ac:	2000      	movs	r0, #0
 80065ae:	4688      	mov	r8, r1
 80065b0:	4681      	mov	r9, r0
 80065b2:	eb12 0a08 	adds.w	sl, r2, r8
 80065b6:	eb43 0b09 	adc.w	fp, r3, r9
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065c8:	4650      	mov	r0, sl
 80065ca:	4659      	mov	r1, fp
 80065cc:	f7f9 fe50 	bl	8000270 <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4613      	mov	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065de:	d308      	bcc.n	80065f2 <UART_SetConfig+0x3de>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065e6:	d204      	bcs.n	80065f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	60da      	str	r2, [r3, #12]
 80065f0:	e0b6      	b.n	8006760 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065f8:	e0b2      	b.n	8006760 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006602:	d15e      	bne.n	80066c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006604:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006608:	2b08      	cmp	r3, #8
 800660a:	d828      	bhi.n	800665e <UART_SetConfig+0x44a>
 800660c:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <UART_SetConfig+0x400>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006639 	.word	0x08006639
 8006618:	08006641 	.word	0x08006641
 800661c:	08006649 	.word	0x08006649
 8006620:	0800665f 	.word	0x0800665f
 8006624:	0800664f 	.word	0x0800664f
 8006628:	0800665f 	.word	0x0800665f
 800662c:	0800665f 	.word	0x0800665f
 8006630:	0800665f 	.word	0x0800665f
 8006634:	08006657 	.word	0x08006657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006638:	f7fe fbc0 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 800663c:	61f8      	str	r0, [r7, #28]
        break;
 800663e:	e014      	b.n	800666a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006640:	f7fe fbd2 	bl	8004de8 <HAL_RCC_GetPCLK2Freq>
 8006644:	61f8      	str	r0, [r7, #28]
        break;
 8006646:	e010      	b.n	800666a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006648:	4b4d      	ldr	r3, [pc, #308]	@ (8006780 <UART_SetConfig+0x56c>)
 800664a:	61fb      	str	r3, [r7, #28]
        break;
 800664c:	e00d      	b.n	800666a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664e:	f7fe fb1d 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 8006652:	61f8      	str	r0, [r7, #28]
        break;
 8006654:	e009      	b.n	800666a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800665a:	61fb      	str	r3, [r7, #28]
        break;
 800665c:	e005      	b.n	800666a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d077      	beq.n	8006760 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	005a      	lsls	r2, r3, #1
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	085b      	lsrs	r3, r3, #1
 800667a:	441a      	add	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b0f      	cmp	r3, #15
 800668a:	d916      	bls.n	80066ba <UART_SetConfig+0x4a6>
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006692:	d212      	bcs.n	80066ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f023 030f 	bic.w	r3, r3, #15
 800669c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	085b      	lsrs	r3, r3, #1
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	8afb      	ldrh	r3, [r7, #22]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	8afa      	ldrh	r2, [r7, #22]
 80066b6:	60da      	str	r2, [r3, #12]
 80066b8:	e052      	b.n	8006760 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066c0:	e04e      	b.n	8006760 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d827      	bhi.n	800671a <UART_SetConfig+0x506>
 80066ca:	a201      	add	r2, pc, #4	@ (adr r2, 80066d0 <UART_SetConfig+0x4bc>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	080066fd 	.word	0x080066fd
 80066d8:	08006705 	.word	0x08006705
 80066dc:	0800671b 	.word	0x0800671b
 80066e0:	0800670b 	.word	0x0800670b
 80066e4:	0800671b 	.word	0x0800671b
 80066e8:	0800671b 	.word	0x0800671b
 80066ec:	0800671b 	.word	0x0800671b
 80066f0:	08006713 	.word	0x08006713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fe fb62 	bl	8004dbc <HAL_RCC_GetPCLK1Freq>
 80066f8:	61f8      	str	r0, [r7, #28]
        break;
 80066fa:	e014      	b.n	8006726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7fe fb74 	bl	8004de8 <HAL_RCC_GetPCLK2Freq>
 8006700:	61f8      	str	r0, [r7, #28]
        break;
 8006702:	e010      	b.n	8006726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006704:	4b1e      	ldr	r3, [pc, #120]	@ (8006780 <UART_SetConfig+0x56c>)
 8006706:	61fb      	str	r3, [r7, #28]
        break;
 8006708:	e00d      	b.n	8006726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800670a:	f7fe fabf 	bl	8004c8c <HAL_RCC_GetSysClockFreq>
 800670e:	61f8      	str	r0, [r7, #28]
        break;
 8006710:	e009      	b.n	8006726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006716:	61fb      	str	r3, [r7, #28]
        break;
 8006718:	e005      	b.n	8006726 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006724:	bf00      	nop
    }

    if (pclk != 0U)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d019      	beq.n	8006760 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	085a      	lsrs	r2, r3, #1
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	441a      	add	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d909      	bls.n	800675a <UART_SetConfig+0x546>
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674c:	d205      	bcs.n	800675a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60da      	str	r2, [r3, #12]
 8006758:	e002      	b.n	8006760 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800676c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006770:	4618      	mov	r0, r3
 8006772:	3728      	adds	r7, #40	@ 0x28
 8006774:	46bd      	mov	sp, r7
 8006776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800677a:	bf00      	nop
 800677c:	40008000 	.word	0x40008000
 8006780:	00f42400 	.word	0x00f42400

08006784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01a      	beq.n	800689a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006882:	d10a      	bne.n	800689a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b098      	sub	sp, #96	@ 0x60
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068d8:	f7fb f84c 	bl	8001974 <HAL_GetTick>
 80068dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d12e      	bne.n	800694a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068f4:	2200      	movs	r2, #0
 80068f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f88c 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d021      	beq.n	800694a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800691a:	653b      	str	r3, [r7, #80]	@ 0x50
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006924:	647b      	str	r3, [r7, #68]	@ 0x44
 8006926:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800692a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e6      	bne.n	8006906 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e062      	b.n	8006a10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b04      	cmp	r3, #4
 8006956:	d149      	bne.n	80069ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006958:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006960:	2200      	movs	r2, #0
 8006962:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f856 	bl	8006a18 <UART_WaitOnFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d03c      	beq.n	80069ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	623b      	str	r3, [r7, #32]
   return(result);
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
 8006992:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800699e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e6      	bne.n	8006972 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3308      	adds	r3, #8
 80069aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3308      	adds	r3, #8
 80069c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c4:	61fa      	str	r2, [r7, #28]
 80069c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	69b9      	ldr	r1, [r7, #24]
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	e841 2300 	strex	r3, r2, [r1]
 80069d0:	617b      	str	r3, [r7, #20]
   return(result);
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e5      	bne.n	80069a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2220      	movs	r2, #32
 80069dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e011      	b.n	8006a10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3758      	adds	r7, #88	@ 0x58
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a28:	e04f      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d04b      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fa ff9f 	bl	8001974 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e04e      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d037      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b80      	cmp	r3, #128	@ 0x80
 8006a5e:	d034      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b40      	cmp	r3, #64	@ 0x40
 8006a64:	d031      	beq.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d110      	bne.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2208      	movs	r2, #8
 8006a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f838 	bl	8006af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2208      	movs	r2, #8
 8006a86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e029      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006aa4:	d111      	bne.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f81e 	bl	8006af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e00f      	b.n	8006aea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69da      	ldr	r2, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	bf0c      	ite	eq
 8006ada:	2301      	moveq	r3, #1
 8006adc:	2300      	movne	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d0a0      	beq.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b095      	sub	sp, #84	@ 0x54
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e5      	bne.n	8006b2c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d118      	bne.n	8006b9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f023 0310 	bic.w	r3, r3, #16
 8006b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6979      	ldr	r1, [r7, #20]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	613b      	str	r3, [r7, #16]
   return(result);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006bae:	bf00      	nop
 8006bb0:	3754      	adds	r7, #84	@ 0x54
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bba:	b084      	sub	sp, #16
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	f107 001c 	add.w	r0, r7, #28
 8006bc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fa69 	bl	80070b0 <USB_CoreReset>
 8006bde:	4603      	mov	r3, r0
 8006be0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006be2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bf6:	e005      	b.n	8006c04 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c10:	b004      	add	sp, #16
 8006c12:	4770      	bx	lr

08006c14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f023 0201 	bic.w	r2, r3, #1
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d115      	bne.n	8006c84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c64:	200a      	movs	r0, #10
 8006c66:	f7fa fe91 	bl	800198c <HAL_Delay>
      ms += 10U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	330a      	adds	r3, #10
 8006c6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fa0f 	bl	8007094 <USB_GetMode>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d01e      	beq.n	8006cba <USB_SetCurrentMode+0x84>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c80:	d9f0      	bls.n	8006c64 <USB_SetCurrentMode+0x2e>
 8006c82:	e01a      	b.n	8006cba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d115      	bne.n	8006cb6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c96:	200a      	movs	r0, #10
 8006c98:	f7fa fe78 	bl	800198c <HAL_Delay>
      ms += 10U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	330a      	adds	r3, #10
 8006ca0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f9f6 	bl	8007094 <USB_GetMode>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <USB_SetCurrentMode+0x84>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006cb2:	d9f0      	bls.n	8006c96 <USB_SetCurrentMode+0x60>
 8006cb4:	e001      	b.n	8006cba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e005      	b.n	8006cc6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2bc8      	cmp	r3, #200	@ 0xc8
 8006cbe:	d101      	bne.n	8006cc4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e000      	b.n	8006cc6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b086      	sub	sp, #24
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006cea:	2300      	movs	r3, #0
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	e009      	b.n	8006d04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3340      	adds	r3, #64	@ 0x40
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	3301      	adds	r3, #1
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2b0e      	cmp	r3, #14
 8006d08:	d9f2      	bls.n	8006cf0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d11c      	bne.n	8006d4c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d20:	f043 0302 	orr.w	r3, r3, #2
 8006d24:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e005      	b.n	8006d58 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d50:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d5e:	461a      	mov	r2, r3
 8006d60:	2300      	movs	r3, #0
 8006d62:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d64:	2103      	movs	r1, #3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f95a 	bl	8007020 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d6c:	2110      	movs	r1, #16
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f8f6 	bl	8006f60 <USB_FlushTxFifo>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f920 	bl	8006fc4 <USB_FlushRxFifo>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d94:	461a      	mov	r2, r3
 8006d96:	2300      	movs	r3, #0
 8006d98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da0:	461a      	mov	r2, r3
 8006da2:	2300      	movs	r3, #0
 8006da4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dac:	461a      	mov	r2, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	e043      	b.n	8006e40 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dce:	d118      	bne.n	8006e02 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10a      	bne.n	8006dec <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de2:	461a      	mov	r2, r3
 8006de4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	e013      	b.n	8006e14 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	e008      	b.n	8006e14 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0e:	461a      	mov	r2, r3
 8006e10:	2300      	movs	r3, #0
 8006e12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e20:	461a      	mov	r2, r3
 8006e22:	2300      	movs	r3, #0
 8006e24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e32:	461a      	mov	r2, r3
 8006e34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e44:	461a      	mov	r2, r3
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d3b5      	bcc.n	8006db8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	e043      	b.n	8006eda <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e68:	d118      	bne.n	8006e9c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10a      	bne.n	8006e86 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	e013      	b.n	8006eae <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e92:	461a      	mov	r2, r3
 8006e94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	e008      	b.n	8006eae <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eba:	461a      	mov	r2, r3
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ed2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ede:	461a      	mov	r2, r3
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d3b5      	bcc.n	8006e52 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ef8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006f06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f043 0210 	orr.w	r2, r3, #16
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	4b10      	ldr	r3, [pc, #64]	@ (8006f5c <USB_DevInit+0x28c>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f20:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	f043 0208 	orr.w	r2, r3, #8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d107      	bne.n	8006f4c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f44:	f043 0304 	orr.w	r3, r3, #4
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f58:	b004      	add	sp, #16
 8006f5a:	4770      	bx	lr
 8006f5c:	803c3800 	.word	0x803c3800

08006f60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3301      	adds	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f7a:	d901      	bls.n	8006f80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e01b      	b.n	8006fb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	daf2      	bge.n	8006f6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	019b      	lsls	r3, r3, #6
 8006f90:	f043 0220 	orr.w	r2, r3, #32
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fa4:	d901      	bls.n	8006faa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e006      	b.n	8006fb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d0f0      	beq.n	8006f98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fdc:	d901      	bls.n	8006fe2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e018      	b.n	8007014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	daf2      	bge.n	8006fd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2210      	movs	r2, #16
 8006ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007000:	d901      	bls.n	8007006 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e006      	b.n	8007014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b10      	cmp	r3, #16
 8007010:	d0f0      	beq.n	8006ff4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	68f9      	ldr	r1, [r7, #12]
 800703c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007040:	4313      	orrs	r3, r2
 8007042:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800706c:	f023 0303 	bic.w	r3, r3, #3
 8007070:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007080:	f043 0302 	orr.w	r3, r3, #2
 8007084:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	f003 0301 	and.w	r3, r3, #1
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	3301      	adds	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070c8:	d901      	bls.n	80070ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e01b      	b.n	8007106 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	daf2      	bge.n	80070bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f043 0201 	orr.w	r2, r3, #1
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3301      	adds	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070f2:	d901      	bls.n	80070f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e006      	b.n	8007106 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b01      	cmp	r3, #1
 8007102:	d0f0      	beq.n	80070e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <__NVIC_SetPriority>:
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007124:	2b00      	cmp	r3, #0
 8007126:	db0a      	blt.n	800713e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	b2da      	uxtb	r2, r3
 800712c:	490c      	ldr	r1, [pc, #48]	@ (8007160 <__NVIC_SetPriority+0x4c>)
 800712e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007132:	0112      	lsls	r2, r2, #4
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	440b      	add	r3, r1
 8007138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800713c:	e00a      	b.n	8007154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	4908      	ldr	r1, [pc, #32]	@ (8007164 <__NVIC_SetPriority+0x50>)
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	3b04      	subs	r3, #4
 800714c:	0112      	lsls	r2, r2, #4
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	440b      	add	r3, r1
 8007152:	761a      	strb	r2, [r3, #24]
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	e000e100 	.word	0xe000e100
 8007164:	e000ed00 	.word	0xe000ed00

08007168 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800716c:	2100      	movs	r1, #0
 800716e:	f06f 0004 	mvn.w	r0, #4
 8007172:	f7ff ffcf 	bl	8007114 <__NVIC_SetPriority>
#endif
}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007182:	f3ef 8305 	mrs	r3, IPSR
 8007186:	603b      	str	r3, [r7, #0]
  return(result);
 8007188:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800718e:	f06f 0305 	mvn.w	r3, #5
 8007192:	607b      	str	r3, [r7, #4]
 8007194:	e00c      	b.n	80071b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007196:	4b0a      	ldr	r3, [pc, #40]	@ (80071c0 <osKernelInitialize+0x44>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800719e:	4b08      	ldr	r3, [pc, #32]	@ (80071c0 <osKernelInitialize+0x44>)
 80071a0:	2201      	movs	r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	607b      	str	r3, [r7, #4]
 80071a8:	e002      	b.n	80071b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071aa:	f04f 33ff 	mov.w	r3, #4294967295
 80071ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071b0:	687b      	ldr	r3, [r7, #4]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000adc 	.word	0x20000adc

080071c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ca:	f3ef 8305 	mrs	r3, IPSR
 80071ce:	603b      	str	r3, [r7, #0]
  return(result);
 80071d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <osKernelStart+0x1a>
    stat = osErrorISR;
 80071d6:	f06f 0305 	mvn.w	r3, #5
 80071da:	607b      	str	r3, [r7, #4]
 80071dc:	e010      	b.n	8007200 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071de:	4b0b      	ldr	r3, [pc, #44]	@ (800720c <osKernelStart+0x48>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d109      	bne.n	80071fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071e6:	f7ff ffbf 	bl	8007168 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071ea:	4b08      	ldr	r3, [pc, #32]	@ (800720c <osKernelStart+0x48>)
 80071ec:	2202      	movs	r2, #2
 80071ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071f0:	f001 f87a 	bl	80082e8 <vTaskStartScheduler>
      stat = osOK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	607b      	str	r3, [r7, #4]
 80071f8:	e002      	b.n	8007200 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071fa:	f04f 33ff 	mov.w	r3, #4294967295
 80071fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007200:	687b      	ldr	r3, [r7, #4]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000adc 	.word	0x20000adc

08007210 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007210:	b580      	push	{r7, lr}
 8007212:	b08e      	sub	sp, #56	@ 0x38
 8007214:	af04      	add	r7, sp, #16
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800721c:	2300      	movs	r3, #0
 800721e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007220:	f3ef 8305 	mrs	r3, IPSR
 8007224:	617b      	str	r3, [r7, #20]
  return(result);
 8007226:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007228:	2b00      	cmp	r3, #0
 800722a:	d17e      	bne.n	800732a <osThreadNew+0x11a>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d07b      	beq.n	800732a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007232:	2380      	movs	r3, #128	@ 0x80
 8007234:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007236:	2318      	movs	r3, #24
 8007238:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800723e:	f04f 33ff 	mov.w	r3, #4294967295
 8007242:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d045      	beq.n	80072d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <osThreadNew+0x48>
        name = attr->name;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <osThreadNew+0x6e>
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2b38      	cmp	r3, #56	@ 0x38
 8007270:	d805      	bhi.n	800727e <osThreadNew+0x6e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <osThreadNew+0x72>
        return (NULL);
 800727e:	2300      	movs	r3, #0
 8007280:	e054      	b.n	800732c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	089b      	lsrs	r3, r3, #2
 8007290:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00e      	beq.n	80072b8 <osThreadNew+0xa8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2b5b      	cmp	r3, #91	@ 0x5b
 80072a0:	d90a      	bls.n	80072b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d006      	beq.n	80072b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <osThreadNew+0xa8>
        mem = 1;
 80072b2:	2301      	movs	r3, #1
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e010      	b.n	80072da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10c      	bne.n	80072da <osThreadNew+0xca>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d108      	bne.n	80072da <osThreadNew+0xca>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <osThreadNew+0xca>
          mem = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61bb      	str	r3, [r7, #24]
 80072d4:	e001      	b.n	80072da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d110      	bne.n	8007302 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072e8:	9202      	str	r2, [sp, #8]
 80072ea:	9301      	str	r3, [sp, #4]
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6a3a      	ldr	r2, [r7, #32]
 80072f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fe1a 	bl	8007f30 <xTaskCreateStatic>
 80072fc:	4603      	mov	r3, r0
 80072fe:	613b      	str	r3, [r7, #16]
 8007300:	e013      	b.n	800732a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d110      	bne.n	800732a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	b29a      	uxth	r2, r3
 800730c:	f107 0310 	add.w	r3, r7, #16
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fe68 	bl	8007ff0 <xTaskCreate>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d001      	beq.n	800732a <osThreadNew+0x11a>
            hTask = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800732a:	693b      	ldr	r3, [r7, #16]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3728      	adds	r7, #40	@ 0x28
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800733c:	f3ef 8305 	mrs	r3, IPSR
 8007340:	60bb      	str	r3, [r7, #8]
  return(result);
 8007342:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <osDelay+0x1c>
    stat = osErrorISR;
 8007348:	f06f 0305 	mvn.w	r3, #5
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e007      	b.n	8007360 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <osDelay+0x2c>
      vTaskDelay(ticks);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 ff8e 	bl	800827c <vTaskDelay>
    }
  }

  return (stat);
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4a07      	ldr	r2, [pc, #28]	@ (8007398 <vApplicationGetIdleTaskMemory+0x2c>)
 800737c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	4a06      	ldr	r2, [pc, #24]	@ (800739c <vApplicationGetIdleTaskMemory+0x30>)
 8007382:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2280      	movs	r2, #128	@ 0x80
 8007388:	601a      	str	r2, [r3, #0]
}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	20000ae0 	.word	0x20000ae0
 800739c:	20000b3c 	.word	0x20000b3c

080073a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a07      	ldr	r2, [pc, #28]	@ (80073cc <vApplicationGetTimerTaskMemory+0x2c>)
 80073b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4a06      	ldr	r2, [pc, #24]	@ (80073d0 <vApplicationGetTimerTaskMemory+0x30>)
 80073b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073be:	601a      	str	r2, [r3, #0]
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	20000d3c 	.word	0x20000d3c
 80073d0:	20000d98 	.word	0x20000d98

080073d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f103 0208 	add.w	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f103 0208 	add.w	r2, r3, #8
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f103 0208 	add.w	r2, r3, #8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748c:	d103      	bne.n	8007496 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e00c      	b.n	80074b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3308      	adds	r3, #8
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	e002      	b.n	80074a4 <vListInsert+0x2e>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d2f6      	bcs.n	800749e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	601a      	str	r2, [r3, #0]
}
 80074dc:	bf00      	nop
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6892      	ldr	r2, [r2, #8]
 80074fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6852      	ldr	r2, [r2, #4]
 8007508:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	d103      	bne.n	800751c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	1e5a      	subs	r2, r3, #1
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	e7fd      	b.n	8007564 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007568:	f002 f876 	bl	8009658 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007574:	68f9      	ldr	r1, [r7, #12]
 8007576:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	441a      	add	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007598:	3b01      	subs	r3, #1
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800759e:	fb01 f303 	mul.w	r3, r1, r3
 80075a2:	441a      	add	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	22ff      	movs	r2, #255	@ 0xff
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	22ff      	movs	r2, #255	@ 0xff
 80075b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d114      	bne.n	80075e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01a      	beq.n	80075fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3310      	adds	r3, #16
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 f91a 	bl	8008804 <xTaskRemoveFromEventList>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d012      	beq.n	80075fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075d6:	4b0d      	ldr	r3, [pc, #52]	@ (800760c <xQueueGenericReset+0xd0>)
 80075d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	e009      	b.n	80075fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3310      	adds	r3, #16
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff fef1 	bl	80073d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3324      	adds	r3, #36	@ 0x24
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff feec 	bl	80073d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075fc:	f002 f85e 	bl	80096bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007600:	2301      	movs	r3, #1
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	e000ed04 	.word	0xe000ed04

08007610 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08e      	sub	sp, #56	@ 0x38
 8007614:	af02      	add	r7, sp, #8
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10b      	bne.n	800763c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007636:	bf00      	nop
 8007638:	bf00      	nop
 800763a:	e7fd      	b.n	8007638 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <xQueueGenericCreateStatic+0x56>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <xQueueGenericCreateStatic+0x5a>
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <xQueueGenericCreateStatic+0x5c>
 800766a:	2300      	movs	r3, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	623b      	str	r3, [r7, #32]
}
 8007682:	bf00      	nop
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d102      	bne.n	8007694 <xQueueGenericCreateStatic+0x84>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <xQueueGenericCreateStatic+0x88>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <xQueueGenericCreateStatic+0x8a>
 8007698:	2300      	movs	r3, #0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	61fb      	str	r3, [r7, #28]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076b6:	2350      	movs	r3, #80	@ 0x50
 80076b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b50      	cmp	r3, #80	@ 0x50
 80076be:	d00b      	beq.n	80076d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	61bb      	str	r3, [r7, #24]
}
 80076d2:	bf00      	nop
 80076d4:	bf00      	nop
 80076d6:	e7fd      	b.n	80076d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80076de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00d      	beq.n	8007700 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80076f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	4613      	mov	r3, r2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f805 	bl	800770a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007702:	4618      	mov	r0, r3
 8007704:	3730      	adds	r7, #48	@ 0x30
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	60f8      	str	r0, [r7, #12]
 8007712:	60b9      	str	r1, [r7, #8]
 8007714:	607a      	str	r2, [r7, #4]
 8007716:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d103      	bne.n	8007726 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e002      	b.n	800772c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007738:	2101      	movs	r1, #1
 800773a:	69b8      	ldr	r0, [r7, #24]
 800773c:	f7ff fefe 	bl	800753c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08e      	sub	sp, #56	@ 0x38
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800775e:	2300      	movs	r3, #0
 8007760:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <xQueueGenericSend+0x34>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	e7fd      	b.n	8007780 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d103      	bne.n	8007792 <xQueueGenericSend+0x42>
 800778a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <xQueueGenericSend+0x46>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <xQueueGenericSend+0x48>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <xQueueGenericSend+0x64>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d103      	bne.n	80077c2 <xQueueGenericSend+0x72>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <xQueueGenericSend+0x76>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <xQueueGenericSend+0x78>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10b      	bne.n	80077e4 <xQueueGenericSend+0x94>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	623b      	str	r3, [r7, #32]
}
 80077de:	bf00      	nop
 80077e0:	bf00      	nop
 80077e2:	e7fd      	b.n	80077e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077e4:	f001 f9ce 	bl	8008b84 <xTaskGetSchedulerState>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d102      	bne.n	80077f4 <xQueueGenericSend+0xa4>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <xQueueGenericSend+0xa8>
 80077f4:	2301      	movs	r3, #1
 80077f6:	e000      	b.n	80077fa <xQueueGenericSend+0xaa>
 80077f8:	2300      	movs	r3, #0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10b      	bne.n	8007816 <xQueueGenericSend+0xc6>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	61fb      	str	r3, [r7, #28]
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	e7fd      	b.n	8007812 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007816:	f001 ff1f 	bl	8009658 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007822:	429a      	cmp	r2, r3
 8007824:	d302      	bcc.n	800782c <xQueueGenericSend+0xdc>
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d129      	bne.n	8007880 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	68b9      	ldr	r1, [r7, #8]
 8007830:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007832:	f000 fa0f 	bl	8007c54 <prvCopyDataToQueue>
 8007836:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d010      	beq.n	8007862 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007842:	3324      	adds	r3, #36	@ 0x24
 8007844:	4618      	mov	r0, r3
 8007846:	f000 ffdd 	bl	8008804 <xTaskRemoveFromEventList>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d013      	beq.n	8007878 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007850:	4b3f      	ldr	r3, [pc, #252]	@ (8007950 <xQueueGenericSend+0x200>)
 8007852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	e00a      	b.n	8007878 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007868:	4b39      	ldr	r3, [pc, #228]	@ (8007950 <xQueueGenericSend+0x200>)
 800786a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007878:	f001 ff20 	bl	80096bc <vPortExitCritical>
				return pdPASS;
 800787c:	2301      	movs	r3, #1
 800787e:	e063      	b.n	8007948 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d103      	bne.n	800788e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007886:	f001 ff19 	bl	80096bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800788a:	2300      	movs	r3, #0
 800788c:	e05c      	b.n	8007948 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800788e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007894:	f107 0314 	add.w	r3, r7, #20
 8007898:	4618      	mov	r0, r3
 800789a:	f001 f817 	bl	80088cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800789e:	2301      	movs	r3, #1
 80078a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078a2:	f001 ff0b 	bl	80096bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078a6:	f000 fd87 	bl	80083b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078aa:	f001 fed5 	bl	8009658 <vPortEnterCritical>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078b4:	b25b      	sxtb	r3, r3
 80078b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ba:	d103      	bne.n	80078c4 <xQueueGenericSend+0x174>
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078ca:	b25b      	sxtb	r3, r3
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d103      	bne.n	80078da <xQueueGenericSend+0x18a>
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078da:	f001 feef 	bl	80096bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078de:	1d3a      	adds	r2, r7, #4
 80078e0:	f107 0314 	add.w	r3, r7, #20
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 f806 	bl	80088f8 <xTaskCheckForTimeOut>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d124      	bne.n	800793c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078f4:	f000 faa6 	bl	8007e44 <prvIsQueueFull>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d018      	beq.n	8007930 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	3310      	adds	r3, #16
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	4611      	mov	r1, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f000 ff2a 	bl	8008760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800790c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800790e:	f000 fa31 	bl	8007d74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007912:	f000 fd5f 	bl	80083d4 <xTaskResumeAll>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	f47f af7c 	bne.w	8007816 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800791e:	4b0c      	ldr	r3, [pc, #48]	@ (8007950 <xQueueGenericSend+0x200>)
 8007920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	e772      	b.n	8007816 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007930:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007932:	f000 fa1f 	bl	8007d74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007936:	f000 fd4d 	bl	80083d4 <xTaskResumeAll>
 800793a:	e76c      	b.n	8007816 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800793c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800793e:	f000 fa19 	bl	8007d74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007942:	f000 fd47 	bl	80083d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007946:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007948:	4618      	mov	r0, r3
 800794a:	3738      	adds	r7, #56	@ 0x38
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	e000ed04 	.word	0xe000ed04

08007954 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b090      	sub	sp, #64	@ 0x40
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <xQueueGenericSendFromISR+0x3e>
 800798a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <xQueueGenericSendFromISR+0x42>
 8007992:	2301      	movs	r3, #1
 8007994:	e000      	b.n	8007998 <xQueueGenericSendFromISR+0x44>
 8007996:	2300      	movs	r3, #0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10b      	bne.n	80079b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	e7fd      	b.n	80079b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d103      	bne.n	80079c2 <xQueueGenericSendFromISR+0x6e>
 80079ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <xQueueGenericSendFromISR+0x72>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <xQueueGenericSendFromISR+0x74>
 80079c6:	2300      	movs	r3, #0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10b      	bne.n	80079e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	623b      	str	r3, [r7, #32]
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079e4:	f001 ff18 	bl	8009818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079e8:	f3ef 8211 	mrs	r2, BASEPRI
 80079ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	61fa      	str	r2, [r7, #28]
 80079fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d302      	bcc.n	8007a16 <xQueueGenericSendFromISR+0xc2>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d12f      	bne.n	8007a76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	68b9      	ldr	r1, [r7, #8]
 8007a2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a2c:	f000 f912 	bl	8007c54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a38:	d112      	bne.n	8007a60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d016      	beq.n	8007a70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a44:	3324      	adds	r3, #36	@ 0x24
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fedc 	bl	8008804 <xTaskRemoveFromEventList>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00e      	beq.n	8007a70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	e007      	b.n	8007a70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a64:	3301      	adds	r3, #1
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	b25a      	sxtb	r2, r3
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a70:	2301      	movs	r3, #1
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a74:	e001      	b.n	8007a7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3740      	adds	r7, #64	@ 0x40
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08c      	sub	sp, #48	@ 0x30
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10b      	bne.n	8007ac2 <xQueueReceive+0x32>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	623b      	str	r3, [r7, #32]
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	e7fd      	b.n	8007abe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d103      	bne.n	8007ad0 <xQueueReceive+0x40>
 8007ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <xQueueReceive+0x44>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e000      	b.n	8007ad6 <xQueueReceive+0x46>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10b      	bne.n	8007af2 <xQueueReceive+0x62>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	61fb      	str	r3, [r7, #28]
}
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	e7fd      	b.n	8007aee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007af2:	f001 f847 	bl	8008b84 <xTaskGetSchedulerState>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d102      	bne.n	8007b02 <xQueueReceive+0x72>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <xQueueReceive+0x76>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <xQueueReceive+0x78>
 8007b06:	2300      	movs	r3, #0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10b      	bne.n	8007b24 <xQueueReceive+0x94>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	61bb      	str	r3, [r7, #24]
}
 8007b1e:	bf00      	nop
 8007b20:	bf00      	nop
 8007b22:	e7fd      	b.n	8007b20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b24:	f001 fd98 	bl	8009658 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01f      	beq.n	8007b74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b38:	f000 f8f6 	bl	8007d28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3e:	1e5a      	subs	r2, r3, #1
 8007b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00f      	beq.n	8007b6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4e:	3310      	adds	r3, #16
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fe57 	bl	8008804 <xTaskRemoveFromEventList>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8007c50 <xQueueReceive+0x1c0>)
 8007b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b6c:	f001 fda6 	bl	80096bc <vPortExitCritical>
				return pdPASS;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e069      	b.n	8007c48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d103      	bne.n	8007b82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b7a:	f001 fd9f 	bl	80096bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e062      	b.n	8007c48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d106      	bne.n	8007b96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b88:	f107 0310 	add.w	r3, r7, #16
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fe9d 	bl	80088cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b92:	2301      	movs	r3, #1
 8007b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b96:	f001 fd91 	bl	80096bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b9a:	f000 fc0d 	bl	80083b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b9e:	f001 fd5b 	bl	8009658 <vPortEnterCritical>
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ba8:	b25b      	sxtb	r3, r3
 8007baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bae:	d103      	bne.n	8007bb8 <xQueueReceive+0x128>
 8007bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bbe:	b25b      	sxtb	r3, r3
 8007bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc4:	d103      	bne.n	8007bce <xQueueReceive+0x13e>
 8007bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bce:	f001 fd75 	bl	80096bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bd2:	1d3a      	adds	r2, r7, #4
 8007bd4:	f107 0310 	add.w	r3, r7, #16
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fe8c 	bl	80088f8 <xTaskCheckForTimeOut>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d123      	bne.n	8007c2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007be8:	f000 f916 	bl	8007e18 <prvIsQueueEmpty>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d017      	beq.n	8007c22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf4:	3324      	adds	r3, #36	@ 0x24
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 fdb0 	bl	8008760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c02:	f000 f8b7 	bl	8007d74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c06:	f000 fbe5 	bl	80083d4 <xTaskResumeAll>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d189      	bne.n	8007b24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007c10:	4b0f      	ldr	r3, [pc, #60]	@ (8007c50 <xQueueReceive+0x1c0>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	e780      	b.n	8007b24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c24:	f000 f8a6 	bl	8007d74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c28:	f000 fbd4 	bl	80083d4 <xTaskResumeAll>
 8007c2c:	e77a      	b.n	8007b24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c30:	f000 f8a0 	bl	8007d74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c34:	f000 fbce 	bl	80083d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c3a:	f000 f8ed 	bl	8007e18 <prvIsQueueEmpty>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f43f af6f 	beq.w	8007b24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3730      	adds	r7, #48	@ 0x30
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10d      	bne.n	8007c8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d14d      	bne.n	8007d16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 ff9e 	bl	8008bc0 <xTaskPriorityDisinherit>
 8007c84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	609a      	str	r2, [r3, #8]
 8007c8c:	e043      	b.n	8007d16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d119      	bne.n	8007cc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6858      	ldr	r0, [r3, #4]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	f002 f97d 	bl	8009f9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	441a      	add	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d32b      	bcc.n	8007d16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	e026      	b.n	8007d16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68d8      	ldr	r0, [r3, #12]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	f002 f963 	bl	8009f9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce0:	425b      	negs	r3, r3
 8007ce2:	441a      	add	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d207      	bcs.n	8007d04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfc:	425b      	negs	r3, r3
 8007cfe:	441a      	add	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d105      	bne.n	8007d16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007d1e:	697b      	ldr	r3, [r7, #20]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d018      	beq.n	8007d6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d42:	441a      	add	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d303      	bcc.n	8007d5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68d9      	ldr	r1, [r3, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d64:	461a      	mov	r2, r3
 8007d66:	6838      	ldr	r0, [r7, #0]
 8007d68:	f002 f919 	bl	8009f9e <memcpy>
	}
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d7c:	f001 fc6c 	bl	8009658 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d88:	e011      	b.n	8007dae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d012      	beq.n	8007db8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3324      	adds	r3, #36	@ 0x24
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fd34 	bl	8008804 <xTaskRemoveFromEventList>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007da2:	f000 fe0d 	bl	80089c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	dce9      	bgt.n	8007d8a <prvUnlockQueue+0x16>
 8007db6:	e000      	b.n	8007dba <prvUnlockQueue+0x46>
					break;
 8007db8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	22ff      	movs	r2, #255	@ 0xff
 8007dbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007dc2:	f001 fc7b 	bl	80096bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007dc6:	f001 fc47 	bl	8009658 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dd2:	e011      	b.n	8007df8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d012      	beq.n	8007e02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3310      	adds	r3, #16
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fd0f 	bl	8008804 <xTaskRemoveFromEventList>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007dec:	f000 fde8 	bl	80089c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dce9      	bgt.n	8007dd4 <prvUnlockQueue+0x60>
 8007e00:	e000      	b.n	8007e04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	22ff      	movs	r2, #255	@ 0xff
 8007e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007e0c:	f001 fc56 	bl	80096bc <vPortExitCritical>
}
 8007e10:	bf00      	nop
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e20:	f001 fc1a 	bl	8009658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e001      	b.n	8007e36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e36:	f001 fc41 	bl	80096bc <vPortExitCritical>

	return xReturn;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e4c:	f001 fc04 	bl	8009658 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d102      	bne.n	8007e62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e001      	b.n	8007e66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e66:	f001 fc29 	bl	80096bc <vPortExitCritical>

	return xReturn;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	e014      	b.n	8007eae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e84:	4a0f      	ldr	r2, [pc, #60]	@ (8007ec4 <vQueueAddToRegistry+0x50>)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10b      	bne.n	8007ea8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e90:	490c      	ldr	r1, [pc, #48]	@ (8007ec4 <vQueueAddToRegistry+0x50>)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8007ec4 <vQueueAddToRegistry+0x50>)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	4413      	add	r3, r2
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ea6:	e006      	b.n	8007eb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b07      	cmp	r3, #7
 8007eb2:	d9e7      	bls.n	8007e84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20001198 	.word	0x20001198

08007ec8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ed8:	f001 fbbe 	bl	8009658 <vPortEnterCritical>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ee2:	b25b      	sxtb	r3, r3
 8007ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee8:	d103      	bne.n	8007ef2 <vQueueWaitForMessageRestricted+0x2a>
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ef8:	b25b      	sxtb	r3, r3
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d103      	bne.n	8007f08 <vQueueWaitForMessageRestricted+0x40>
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f08:	f001 fbd8 	bl	80096bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d106      	bne.n	8007f22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	3324      	adds	r3, #36	@ 0x24
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fc45 	bl	80087ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f22:	6978      	ldr	r0, [r7, #20]
 8007f24:	f7ff ff26 	bl	8007d74 <prvUnlockQueue>
	}
 8007f28:	bf00      	nop
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08e      	sub	sp, #56	@ 0x38
 8007f34:	af04      	add	r7, sp, #16
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
 8007f3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10b      	bne.n	8007f5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	623b      	str	r3, [r7, #32]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	61fb      	str	r3, [r7, #28]
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop
 8007f78:	e7fd      	b.n	8007f76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f7a:	235c      	movs	r3, #92	@ 0x5c
 8007f7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f82:	d00b      	beq.n	8007f9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	61bb      	str	r3, [r7, #24]
}
 8007f96:	bf00      	nop
 8007f98:	bf00      	nop
 8007f9a:	e7fd      	b.n	8007f98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01e      	beq.n	8007fe2 <xTaskCreateStatic+0xb2>
 8007fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01b      	beq.n	8007fe2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9303      	str	r3, [sp, #12]
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc2:	9302      	str	r3, [sp, #8]
 8007fc4:	f107 0314 	add.w	r3, r7, #20
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	68b9      	ldr	r1, [r7, #8]
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 f850 	bl	800807a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fdc:	f000 f8de 	bl	800819c <prvAddNewTaskToReadyList>
 8007fe0:	e001      	b.n	8007fe6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fe6:	697b      	ldr	r3, [r7, #20]
	}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3728      	adds	r7, #40	@ 0x28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08c      	sub	sp, #48	@ 0x30
 8007ff4:	af04      	add	r7, sp, #16
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4618      	mov	r0, r3
 8008006:	f001 fc49 	bl	800989c <pvPortMalloc>
 800800a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00e      	beq.n	8008030 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008012:	205c      	movs	r0, #92	@ 0x5c
 8008014:	f001 fc42 	bl	800989c <pvPortMalloc>
 8008018:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	631a      	str	r2, [r3, #48]	@ 0x30
 8008026:	e005      	b.n	8008034 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008028:	6978      	ldr	r0, [r7, #20]
 800802a:	f001 fd05 	bl	8009a38 <vPortFree>
 800802e:	e001      	b.n	8008034 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d017      	beq.n	800806a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008042:	88fa      	ldrh	r2, [r7, #6]
 8008044:	2300      	movs	r3, #0
 8008046:	9303      	str	r3, [sp, #12]
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	9302      	str	r3, [sp, #8]
 800804c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 f80e 	bl	800807a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800805e:	69f8      	ldr	r0, [r7, #28]
 8008060:	f000 f89c 	bl	800819c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008064:	2301      	movs	r3, #1
 8008066:	61bb      	str	r3, [r7, #24]
 8008068:	e002      	b.n	8008070 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008070:	69bb      	ldr	r3, [r7, #24]
	}
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b088      	sub	sp, #32
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	461a      	mov	r2, r3
 8008092:	21a5      	movs	r1, #165	@ 0xa5
 8008094:	f001 ff07 	bl	8009ea6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80080a2:	3b01      	subs	r3, #1
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f023 0307 	bic.w	r3, r3, #7
 80080b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	617b      	str	r3, [r7, #20]
}
 80080ce:	bf00      	nop
 80080d0:	bf00      	nop
 80080d2:	e7fd      	b.n	80080d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01f      	beq.n	800811a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080da:	2300      	movs	r3, #0
 80080dc:	61fb      	str	r3, [r7, #28]
 80080de:	e012      	b.n	8008106 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	4413      	add	r3, r2
 80080e6:	7819      	ldrb	r1, [r3, #0]
 80080e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	4413      	add	r3, r2
 80080ee:	3334      	adds	r3, #52	@ 0x34
 80080f0:	460a      	mov	r2, r1
 80080f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	4413      	add	r3, r2
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d006      	beq.n	800810e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	3301      	adds	r3, #1
 8008104:	61fb      	str	r3, [r7, #28]
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	2b0f      	cmp	r3, #15
 800810a:	d9e9      	bls.n	80080e0 <prvInitialiseNewTask+0x66>
 800810c:	e000      	b.n	8008110 <prvInitialiseNewTask+0x96>
			{
				break;
 800810e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008118:	e003      	b.n	8008122 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008124:	2b37      	cmp	r3, #55	@ 0x37
 8008126:	d901      	bls.n	800812c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008128:	2337      	movs	r3, #55	@ 0x37
 800812a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800812c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008130:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008136:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813a:	2200      	movs	r2, #0
 800813c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	3304      	adds	r3, #4
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff f966 	bl	8007414 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	3318      	adds	r3, #24
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff f961 	bl	8007414 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008156:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008166:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816a:	2200      	movs	r2, #0
 800816c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	68f9      	ldr	r1, [r7, #12]
 800817a:	69b8      	ldr	r0, [r7, #24]
 800817c:	f001 f93e 	bl	80093fc <pxPortInitialiseStack>
 8008180:	4602      	mov	r2, r0
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008192:	bf00      	nop
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081a4:	f001 fa58 	bl	8009658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008260 <prvAddNewTaskToReadyList+0xc4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3301      	adds	r3, #1
 80081ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008260 <prvAddNewTaskToReadyList+0xc4>)
 80081b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081b2:	4b2c      	ldr	r3, [pc, #176]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081c0:	4b27      	ldr	r3, [pc, #156]	@ (8008260 <prvAddNewTaskToReadyList+0xc4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d110      	bne.n	80081ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081c8:	f000 fc1e 	bl	8008a08 <prvInitialiseTaskLists>
 80081cc:	e00d      	b.n	80081ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081ce:	4b26      	ldr	r3, [pc, #152]	@ (8008268 <prvAddNewTaskToReadyList+0xcc>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081d6:	4b23      	ldr	r3, [pc, #140]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d802      	bhi.n	80081ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081ea:	4b20      	ldr	r3, [pc, #128]	@ (800826c <prvAddNewTaskToReadyList+0xd0>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3301      	adds	r3, #1
 80081f0:	4a1e      	ldr	r2, [pc, #120]	@ (800826c <prvAddNewTaskToReadyList+0xd0>)
 80081f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081f4:	4b1d      	ldr	r3, [pc, #116]	@ (800826c <prvAddNewTaskToReadyList+0xd0>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008200:	4b1b      	ldr	r3, [pc, #108]	@ (8008270 <prvAddNewTaskToReadyList+0xd4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d903      	bls.n	8008210 <prvAddNewTaskToReadyList+0x74>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	4a18      	ldr	r2, [pc, #96]	@ (8008270 <prvAddNewTaskToReadyList+0xd4>)
 800820e:	6013      	str	r3, [r2, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008214:	4613      	mov	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4a15      	ldr	r2, [pc, #84]	@ (8008274 <prvAddNewTaskToReadyList+0xd8>)
 800821e:	441a      	add	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f7ff f901 	bl	800742e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800822c:	f001 fa46 	bl	80096bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008230:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <prvAddNewTaskToReadyList+0xcc>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00e      	beq.n	8008256 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008238:	4b0a      	ldr	r3, [pc, #40]	@ (8008264 <prvAddNewTaskToReadyList+0xc8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008242:	429a      	cmp	r2, r3
 8008244:	d207      	bcs.n	8008256 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008246:	4b0c      	ldr	r3, [pc, #48]	@ (8008278 <prvAddNewTaskToReadyList+0xdc>)
 8008248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	200016ac 	.word	0x200016ac
 8008264:	200011d8 	.word	0x200011d8
 8008268:	200016b8 	.word	0x200016b8
 800826c:	200016c8 	.word	0x200016c8
 8008270:	200016b4 	.word	0x200016b4
 8008274:	200011dc 	.word	0x200011dc
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d018      	beq.n	80082c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800828e:	4b14      	ldr	r3, [pc, #80]	@ (80082e0 <vTaskDelay+0x64>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <vTaskDelay+0x32>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	60bb      	str	r3, [r7, #8]
}
 80082a8:	bf00      	nop
 80082aa:	bf00      	nop
 80082ac:	e7fd      	b.n	80082aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082ae:	f000 f883 	bl	80083b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082b2:	2100      	movs	r1, #0
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fcf3 	bl	8008ca0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082ba:	f000 f88b 	bl	80083d4 <xTaskResumeAll>
 80082be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d107      	bne.n	80082d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082c6:	4b07      	ldr	r3, [pc, #28]	@ (80082e4 <vTaskDelay+0x68>)
 80082c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	200016d4 	.word	0x200016d4
 80082e4:	e000ed04 	.word	0xe000ed04

080082e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	@ 0x28
 80082ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082f6:	463a      	mov	r2, r7
 80082f8:	1d39      	adds	r1, r7, #4
 80082fa:	f107 0308 	add.w	r3, r7, #8
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff f834 	bl	800736c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	9202      	str	r2, [sp, #8]
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	2300      	movs	r3, #0
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	2300      	movs	r3, #0
 8008314:	460a      	mov	r2, r1
 8008316:	4922      	ldr	r1, [pc, #136]	@ (80083a0 <vTaskStartScheduler+0xb8>)
 8008318:	4822      	ldr	r0, [pc, #136]	@ (80083a4 <vTaskStartScheduler+0xbc>)
 800831a:	f7ff fe09 	bl	8007f30 <xTaskCreateStatic>
 800831e:	4603      	mov	r3, r0
 8008320:	4a21      	ldr	r2, [pc, #132]	@ (80083a8 <vTaskStartScheduler+0xc0>)
 8008322:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008324:	4b20      	ldr	r3, [pc, #128]	@ (80083a8 <vTaskStartScheduler+0xc0>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800832c:	2301      	movs	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	e001      	b.n	8008336 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008332:	2300      	movs	r3, #0
 8008334:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d102      	bne.n	8008342 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800833c:	f000 fd04 	bl	8008d48 <xTimerCreateTimerTask>
 8008340:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d116      	bne.n	8008376 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	613b      	str	r3, [r7, #16]
}
 800835a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800835c:	4b13      	ldr	r3, [pc, #76]	@ (80083ac <vTaskStartScheduler+0xc4>)
 800835e:	f04f 32ff 	mov.w	r2, #4294967295
 8008362:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008364:	4b12      	ldr	r3, [pc, #72]	@ (80083b0 <vTaskStartScheduler+0xc8>)
 8008366:	2201      	movs	r2, #1
 8008368:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800836a:	4b12      	ldr	r3, [pc, #72]	@ (80083b4 <vTaskStartScheduler+0xcc>)
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008370:	f001 f8ce 	bl	8009510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008374:	e00f      	b.n	8008396 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d10b      	bne.n	8008396 <vTaskStartScheduler+0xae>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	60fb      	str	r3, [r7, #12]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <vTaskStartScheduler+0xaa>
}
 8008396:	bf00      	nop
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	0800ab68 	.word	0x0800ab68
 80083a4:	080089d9 	.word	0x080089d9
 80083a8:	200016d0 	.word	0x200016d0
 80083ac:	200016cc 	.word	0x200016cc
 80083b0:	200016b8 	.word	0x200016b8
 80083b4:	200016b0 	.word	0x200016b0

080083b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083bc:	4b04      	ldr	r3, [pc, #16]	@ (80083d0 <vTaskSuspendAll+0x18>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3301      	adds	r3, #1
 80083c2:	4a03      	ldr	r2, [pc, #12]	@ (80083d0 <vTaskSuspendAll+0x18>)
 80083c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083c6:	bf00      	nop
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	200016d4 	.word	0x200016d4

080083d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083de:	2300      	movs	r3, #0
 80083e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083e2:	4b42      	ldr	r3, [pc, #264]	@ (80084ec <xTaskResumeAll+0x118>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10b      	bne.n	8008402 <xTaskResumeAll+0x2e>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	603b      	str	r3, [r7, #0]
}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008402:	f001 f929 	bl	8009658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008406:	4b39      	ldr	r3, [pc, #228]	@ (80084ec <xTaskResumeAll+0x118>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3b01      	subs	r3, #1
 800840c:	4a37      	ldr	r2, [pc, #220]	@ (80084ec <xTaskResumeAll+0x118>)
 800840e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008410:	4b36      	ldr	r3, [pc, #216]	@ (80084ec <xTaskResumeAll+0x118>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d162      	bne.n	80084de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008418:	4b35      	ldr	r3, [pc, #212]	@ (80084f0 <xTaskResumeAll+0x11c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d05e      	beq.n	80084de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008420:	e02f      	b.n	8008482 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008422:	4b34      	ldr	r3, [pc, #208]	@ (80084f4 <xTaskResumeAll+0x120>)
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3318      	adds	r3, #24
 800842e:	4618      	mov	r0, r3
 8008430:	f7ff f85a 	bl	80074e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3304      	adds	r3, #4
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff f855 	bl	80074e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008442:	4b2d      	ldr	r3, [pc, #180]	@ (80084f8 <xTaskResumeAll+0x124>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d903      	bls.n	8008452 <xTaskResumeAll+0x7e>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844e:	4a2a      	ldr	r2, [pc, #168]	@ (80084f8 <xTaskResumeAll+0x124>)
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4a27      	ldr	r2, [pc, #156]	@ (80084fc <xTaskResumeAll+0x128>)
 8008460:	441a      	add	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3304      	adds	r3, #4
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f7fe ffe0 	bl	800742e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008472:	4b23      	ldr	r3, [pc, #140]	@ (8008500 <xTaskResumeAll+0x12c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	429a      	cmp	r2, r3
 800847a:	d302      	bcc.n	8008482 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800847c:	4b21      	ldr	r3, [pc, #132]	@ (8008504 <xTaskResumeAll+0x130>)
 800847e:	2201      	movs	r2, #1
 8008480:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008482:	4b1c      	ldr	r3, [pc, #112]	@ (80084f4 <xTaskResumeAll+0x120>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1cb      	bne.n	8008422 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008490:	f000 fb58 	bl	8008b44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008494:	4b1c      	ldr	r3, [pc, #112]	@ (8008508 <xTaskResumeAll+0x134>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d010      	beq.n	80084c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084a0:	f000 f846 	bl	8008530 <xTaskIncrementTick>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084aa:	4b16      	ldr	r3, [pc, #88]	@ (8008504 <xTaskResumeAll+0x130>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f1      	bne.n	80084a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80084bc:	4b12      	ldr	r3, [pc, #72]	@ (8008508 <xTaskResumeAll+0x134>)
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084c2:	4b10      	ldr	r3, [pc, #64]	@ (8008504 <xTaskResumeAll+0x130>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084ca:	2301      	movs	r3, #1
 80084cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084ce:	4b0f      	ldr	r3, [pc, #60]	@ (800850c <xTaskResumeAll+0x138>)
 80084d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084de:	f001 f8ed 	bl	80096bc <vPortExitCritical>

	return xAlreadyYielded;
 80084e2:	68bb      	ldr	r3, [r7, #8]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	200016d4 	.word	0x200016d4
 80084f0:	200016ac 	.word	0x200016ac
 80084f4:	2000166c 	.word	0x2000166c
 80084f8:	200016b4 	.word	0x200016b4
 80084fc:	200011dc 	.word	0x200011dc
 8008500:	200011d8 	.word	0x200011d8
 8008504:	200016c0 	.word	0x200016c0
 8008508:	200016bc 	.word	0x200016bc
 800850c:	e000ed04 	.word	0xe000ed04

08008510 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008516:	4b05      	ldr	r3, [pc, #20]	@ (800852c <xTaskGetTickCount+0x1c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800851c:	687b      	ldr	r3, [r7, #4]
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	200016b0 	.word	0x200016b0

08008530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853a:	4b4f      	ldr	r3, [pc, #316]	@ (8008678 <xTaskIncrementTick+0x148>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f040 8090 	bne.w	8008664 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008544:	4b4d      	ldr	r3, [pc, #308]	@ (800867c <xTaskIncrementTick+0x14c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800854c:	4a4b      	ldr	r2, [pc, #300]	@ (800867c <xTaskIncrementTick+0x14c>)
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d121      	bne.n	800859c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008558:	4b49      	ldr	r3, [pc, #292]	@ (8008680 <xTaskIncrementTick+0x150>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	603b      	str	r3, [r7, #0]
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	e7fd      	b.n	8008576 <xTaskIncrementTick+0x46>
 800857a:	4b41      	ldr	r3, [pc, #260]	@ (8008680 <xTaskIncrementTick+0x150>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	4b40      	ldr	r3, [pc, #256]	@ (8008684 <xTaskIncrementTick+0x154>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a3e      	ldr	r2, [pc, #248]	@ (8008680 <xTaskIncrementTick+0x150>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4a3e      	ldr	r2, [pc, #248]	@ (8008684 <xTaskIncrementTick+0x154>)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	4b3e      	ldr	r3, [pc, #248]	@ (8008688 <xTaskIncrementTick+0x158>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	4a3c      	ldr	r2, [pc, #240]	@ (8008688 <xTaskIncrementTick+0x158>)
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	f000 fad4 	bl	8008b44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800859c:	4b3b      	ldr	r3, [pc, #236]	@ (800868c <xTaskIncrementTick+0x15c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d349      	bcc.n	800863a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a6:	4b36      	ldr	r3, [pc, #216]	@ (8008680 <xTaskIncrementTick+0x150>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b0:	4b36      	ldr	r3, [pc, #216]	@ (800868c <xTaskIncrementTick+0x15c>)
 80085b2:	f04f 32ff 	mov.w	r2, #4294967295
 80085b6:	601a      	str	r2, [r3, #0]
					break;
 80085b8:	e03f      	b.n	800863a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ba:	4b31      	ldr	r3, [pc, #196]	@ (8008680 <xTaskIncrementTick+0x150>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d203      	bcs.n	80085da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085d2:	4a2e      	ldr	r2, [pc, #184]	@ (800868c <xTaskIncrementTick+0x15c>)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085d8:	e02f      	b.n	800863a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	3304      	adds	r3, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe ff82 	bl	80074e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	3318      	adds	r3, #24
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe ff79 	bl	80074e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fa:	4b25      	ldr	r3, [pc, #148]	@ (8008690 <xTaskIncrementTick+0x160>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d903      	bls.n	800860a <xTaskIncrementTick+0xda>
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008606:	4a22      	ldr	r2, [pc, #136]	@ (8008690 <xTaskIncrementTick+0x160>)
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4a1f      	ldr	r2, [pc, #124]	@ (8008694 <xTaskIncrementTick+0x164>)
 8008618:	441a      	add	r2, r3
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	3304      	adds	r3, #4
 800861e:	4619      	mov	r1, r3
 8008620:	4610      	mov	r0, r2
 8008622:	f7fe ff04 	bl	800742e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862a:	4b1b      	ldr	r3, [pc, #108]	@ (8008698 <xTaskIncrementTick+0x168>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008630:	429a      	cmp	r2, r3
 8008632:	d3b8      	bcc.n	80085a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008634:	2301      	movs	r3, #1
 8008636:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008638:	e7b5      	b.n	80085a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800863a:	4b17      	ldr	r3, [pc, #92]	@ (8008698 <xTaskIncrementTick+0x168>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008640:	4914      	ldr	r1, [pc, #80]	@ (8008694 <xTaskIncrementTick+0x164>)
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	440b      	add	r3, r1
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d901      	bls.n	8008656 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008652:	2301      	movs	r3, #1
 8008654:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008656:	4b11      	ldr	r3, [pc, #68]	@ (800869c <xTaskIncrementTick+0x16c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800865e:	2301      	movs	r3, #1
 8008660:	617b      	str	r3, [r7, #20]
 8008662:	e004      	b.n	800866e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008664:	4b0e      	ldr	r3, [pc, #56]	@ (80086a0 <xTaskIncrementTick+0x170>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	4a0d      	ldr	r2, [pc, #52]	@ (80086a0 <xTaskIncrementTick+0x170>)
 800866c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800866e:	697b      	ldr	r3, [r7, #20]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	200016d4 	.word	0x200016d4
 800867c:	200016b0 	.word	0x200016b0
 8008680:	20001664 	.word	0x20001664
 8008684:	20001668 	.word	0x20001668
 8008688:	200016c4 	.word	0x200016c4
 800868c:	200016cc 	.word	0x200016cc
 8008690:	200016b4 	.word	0x200016b4
 8008694:	200011dc 	.word	0x200011dc
 8008698:	200011d8 	.word	0x200011d8
 800869c:	200016c0 	.word	0x200016c0
 80086a0:	200016bc 	.word	0x200016bc

080086a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086aa:	4b28      	ldr	r3, [pc, #160]	@ (800874c <vTaskSwitchContext+0xa8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086b2:	4b27      	ldr	r3, [pc, #156]	@ (8008750 <vTaskSwitchContext+0xac>)
 80086b4:	2201      	movs	r2, #1
 80086b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086b8:	e042      	b.n	8008740 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80086ba:	4b25      	ldr	r3, [pc, #148]	@ (8008750 <vTaskSwitchContext+0xac>)
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c0:	4b24      	ldr	r3, [pc, #144]	@ (8008754 <vTaskSwitchContext+0xb0>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	e011      	b.n	80086ec <vTaskSwitchContext+0x48>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	607b      	str	r3, [r7, #4]
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <vTaskSwitchContext+0x3e>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	491a      	ldr	r1, [pc, #104]	@ (8008758 <vTaskSwitchContext+0xb4>)
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	440b      	add	r3, r1
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0e3      	beq.n	80086c8 <vTaskSwitchContext+0x24>
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4a13      	ldr	r2, [pc, #76]	@ (8008758 <vTaskSwitchContext+0xb4>)
 800870c:	4413      	add	r3, r2
 800870e:	60bb      	str	r3, [r7, #8]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	605a      	str	r2, [r3, #4]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	3308      	adds	r3, #8
 8008722:	429a      	cmp	r2, r3
 8008724:	d104      	bne.n	8008730 <vTaskSwitchContext+0x8c>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	605a      	str	r2, [r3, #4]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	4a09      	ldr	r2, [pc, #36]	@ (800875c <vTaskSwitchContext+0xb8>)
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	4a06      	ldr	r2, [pc, #24]	@ (8008754 <vTaskSwitchContext+0xb0>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6013      	str	r3, [r2, #0]
}
 8008740:	bf00      	nop
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	200016d4 	.word	0x200016d4
 8008750:	200016c0 	.word	0x200016c0
 8008754:	200016b4 	.word	0x200016b4
 8008758:	200011dc 	.word	0x200011dc
 800875c:	200011d8 	.word	0x200011d8

08008760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10b      	bne.n	8008788 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	60fb      	str	r3, [r7, #12]
}
 8008782:	bf00      	nop
 8008784:	bf00      	nop
 8008786:	e7fd      	b.n	8008784 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008788:	4b07      	ldr	r3, [pc, #28]	@ (80087a8 <vTaskPlaceOnEventList+0x48>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3318      	adds	r3, #24
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7fe fe70 	bl	8007476 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008796:	2101      	movs	r1, #1
 8008798:	6838      	ldr	r0, [r7, #0]
 800879a:	f000 fa81 	bl	8008ca0 <prvAddCurrentTaskToDelayedList>
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	200011d8 	.word	0x200011d8

080087ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10b      	bne.n	80087d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	617b      	str	r3, [r7, #20]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008800 <vTaskPlaceOnEventListRestricted+0x54>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3318      	adds	r3, #24
 80087dc:	4619      	mov	r1, r3
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7fe fe25 	bl	800742e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80087ea:	f04f 33ff 	mov.w	r3, #4294967295
 80087ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	68b8      	ldr	r0, [r7, #8]
 80087f4:	f000 fa54 	bl	8008ca0 <prvAddCurrentTaskToDelayedList>
	}
 80087f8:	bf00      	nop
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	200011d8 	.word	0x200011d8

08008804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	60fb      	str	r3, [r7, #12]
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	e7fd      	b.n	800882e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	3318      	adds	r3, #24
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe fe56 	bl	80074e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800883c:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <xTaskRemoveFromEventList+0xb0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d11d      	bne.n	8008880 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	3304      	adds	r3, #4
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fe4d 	bl	80074e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008852:	4b19      	ldr	r3, [pc, #100]	@ (80088b8 <xTaskRemoveFromEventList+0xb4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <xTaskRemoveFromEventList+0x5e>
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885e:	4a16      	ldr	r2, [pc, #88]	@ (80088b8 <xTaskRemoveFromEventList+0xb4>)
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008866:	4613      	mov	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4a13      	ldr	r2, [pc, #76]	@ (80088bc <xTaskRemoveFromEventList+0xb8>)
 8008870:	441a      	add	r2, r3
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	3304      	adds	r3, #4
 8008876:	4619      	mov	r1, r3
 8008878:	4610      	mov	r0, r2
 800887a:	f7fe fdd8 	bl	800742e <vListInsertEnd>
 800887e:	e005      	b.n	800888c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	3318      	adds	r3, #24
 8008884:	4619      	mov	r1, r3
 8008886:	480e      	ldr	r0, [pc, #56]	@ (80088c0 <xTaskRemoveFromEventList+0xbc>)
 8008888:	f7fe fdd1 	bl	800742e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008890:	4b0c      	ldr	r3, [pc, #48]	@ (80088c4 <xTaskRemoveFromEventList+0xc0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008896:	429a      	cmp	r2, r3
 8008898:	d905      	bls.n	80088a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800889a:	2301      	movs	r3, #1
 800889c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800889e:	4b0a      	ldr	r3, [pc, #40]	@ (80088c8 <xTaskRemoveFromEventList+0xc4>)
 80088a0:	2201      	movs	r2, #1
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	e001      	b.n	80088aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088aa:	697b      	ldr	r3, [r7, #20]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	200016d4 	.word	0x200016d4
 80088b8:	200016b4 	.word	0x200016b4
 80088bc:	200011dc 	.word	0x200011dc
 80088c0:	2000166c 	.word	0x2000166c
 80088c4:	200011d8 	.word	0x200011d8
 80088c8:	200016c0 	.word	0x200016c0

080088cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088d4:	4b06      	ldr	r3, [pc, #24]	@ (80088f0 <vTaskInternalSetTimeOutState+0x24>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088dc:	4b05      	ldr	r3, [pc, #20]	@ (80088f4 <vTaskInternalSetTimeOutState+0x28>)
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	605a      	str	r2, [r3, #4]
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	200016c4 	.word	0x200016c4
 80088f4:	200016b0 	.word	0x200016b0

080088f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10b      	bne.n	8008920 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	613b      	str	r3, [r7, #16]
}
 800891a:	bf00      	nop
 800891c:	bf00      	nop
 800891e:	e7fd      	b.n	800891c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10b      	bne.n	800893e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60fb      	str	r3, [r7, #12]
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	e7fd      	b.n	800893a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800893e:	f000 fe8b 	bl	8009658 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008942:	4b1d      	ldr	r3, [pc, #116]	@ (80089b8 <xTaskCheckForTimeOut+0xc0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895a:	d102      	bne.n	8008962 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]
 8008960:	e023      	b.n	80089aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	4b15      	ldr	r3, [pc, #84]	@ (80089bc <xTaskCheckForTimeOut+0xc4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	429a      	cmp	r2, r3
 800896c:	d007      	beq.n	800897e <xTaskCheckForTimeOut+0x86>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	429a      	cmp	r2, r3
 8008976:	d302      	bcc.n	800897e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	e015      	b.n	80089aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	429a      	cmp	r2, r3
 8008986:	d20b      	bcs.n	80089a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff ff99 	bl	80088cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800899a:	2300      	movs	r3, #0
 800899c:	61fb      	str	r3, [r7, #28]
 800899e:	e004      	b.n	80089aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089a6:	2301      	movs	r3, #1
 80089a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089aa:	f000 fe87 	bl	80096bc <vPortExitCritical>

	return xReturn;
 80089ae:	69fb      	ldr	r3, [r7, #28]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3720      	adds	r7, #32
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	200016b0 	.word	0x200016b0
 80089bc:	200016c4 	.word	0x200016c4

080089c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089c4:	4b03      	ldr	r3, [pc, #12]	@ (80089d4 <vTaskMissedYield+0x14>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
}
 80089ca:	bf00      	nop
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	200016c0 	.word	0x200016c0

080089d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089e0:	f000 f852 	bl	8008a88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089e4:	4b06      	ldr	r3, [pc, #24]	@ (8008a00 <prvIdleTask+0x28>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d9f9      	bls.n	80089e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <prvIdleTask+0x2c>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089fc:	e7f0      	b.n	80089e0 <prvIdleTask+0x8>
 80089fe:	bf00      	nop
 8008a00:	200011dc 	.word	0x200011dc
 8008a04:	e000ed04 	.word	0xe000ed04

08008a08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a0e:	2300      	movs	r3, #0
 8008a10:	607b      	str	r3, [r7, #4]
 8008a12:	e00c      	b.n	8008a2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4a12      	ldr	r2, [pc, #72]	@ (8008a68 <prvInitialiseTaskLists+0x60>)
 8008a20:	4413      	add	r3, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fcd6 	bl	80073d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	607b      	str	r3, [r7, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b37      	cmp	r3, #55	@ 0x37
 8008a32:	d9ef      	bls.n	8008a14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a34:	480d      	ldr	r0, [pc, #52]	@ (8008a6c <prvInitialiseTaskLists+0x64>)
 8008a36:	f7fe fccd 	bl	80073d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a3a:	480d      	ldr	r0, [pc, #52]	@ (8008a70 <prvInitialiseTaskLists+0x68>)
 8008a3c:	f7fe fcca 	bl	80073d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a40:	480c      	ldr	r0, [pc, #48]	@ (8008a74 <prvInitialiseTaskLists+0x6c>)
 8008a42:	f7fe fcc7 	bl	80073d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a46:	480c      	ldr	r0, [pc, #48]	@ (8008a78 <prvInitialiseTaskLists+0x70>)
 8008a48:	f7fe fcc4 	bl	80073d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a4c:	480b      	ldr	r0, [pc, #44]	@ (8008a7c <prvInitialiseTaskLists+0x74>)
 8008a4e:	f7fe fcc1 	bl	80073d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a52:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <prvInitialiseTaskLists+0x78>)
 8008a54:	4a05      	ldr	r2, [pc, #20]	@ (8008a6c <prvInitialiseTaskLists+0x64>)
 8008a56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a58:	4b0a      	ldr	r3, [pc, #40]	@ (8008a84 <prvInitialiseTaskLists+0x7c>)
 8008a5a:	4a05      	ldr	r2, [pc, #20]	@ (8008a70 <prvInitialiseTaskLists+0x68>)
 8008a5c:	601a      	str	r2, [r3, #0]
}
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	200011dc 	.word	0x200011dc
 8008a6c:	2000163c 	.word	0x2000163c
 8008a70:	20001650 	.word	0x20001650
 8008a74:	2000166c 	.word	0x2000166c
 8008a78:	20001680 	.word	0x20001680
 8008a7c:	20001698 	.word	0x20001698
 8008a80:	20001664 	.word	0x20001664
 8008a84:	20001668 	.word	0x20001668

08008a88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a8e:	e019      	b.n	8008ac4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a90:	f000 fde2 	bl	8009658 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a94:	4b10      	ldr	r3, [pc, #64]	@ (8008ad8 <prvCheckTasksWaitingTermination+0x50>)
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fd21 	bl	80074e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <prvCheckTasksWaitingTermination+0x54>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	4a0b      	ldr	r2, [pc, #44]	@ (8008adc <prvCheckTasksWaitingTermination+0x54>)
 8008aae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae0 <prvCheckTasksWaitingTermination+0x58>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8008ae0 <prvCheckTasksWaitingTermination+0x58>)
 8008ab8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008aba:	f000 fdff 	bl	80096bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f810 	bl	8008ae4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ac4:	4b06      	ldr	r3, [pc, #24]	@ (8008ae0 <prvCheckTasksWaitingTermination+0x58>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e1      	bne.n	8008a90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20001680 	.word	0x20001680
 8008adc:	200016ac 	.word	0x200016ac
 8008ae0:	20001694 	.word	0x20001694

08008ae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d108      	bne.n	8008b08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 ff9c 	bl	8009a38 <vPortFree>
				vPortFree( pxTCB );
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 ff99 	bl	8009a38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b06:	e019      	b.n	8008b3c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d103      	bne.n	8008b1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 ff90 	bl	8009a38 <vPortFree>
	}
 8008b18:	e010      	b.n	8008b3c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d00b      	beq.n	8008b3c <prvDeleteTCB+0x58>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	60fb      	str	r3, [r7, #12]
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	e7fd      	b.n	8008b38 <prvDeleteTCB+0x54>
	}
 8008b3c:	bf00      	nop
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b7c <prvResetNextTaskUnblockTime+0x38>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d104      	bne.n	8008b5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b54:	4b0a      	ldr	r3, [pc, #40]	@ (8008b80 <prvResetNextTaskUnblockTime+0x3c>)
 8008b56:	f04f 32ff 	mov.w	r2, #4294967295
 8008b5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b5c:	e008      	b.n	8008b70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5e:	4b07      	ldr	r3, [pc, #28]	@ (8008b7c <prvResetNextTaskUnblockTime+0x38>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4a04      	ldr	r2, [pc, #16]	@ (8008b80 <prvResetNextTaskUnblockTime+0x3c>)
 8008b6e:	6013      	str	r3, [r2, #0]
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	20001664 	.word	0x20001664
 8008b80:	200016cc 	.word	0x200016cc

08008b84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb8 <xTaskGetSchedulerState+0x34>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d102      	bne.n	8008b98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b92:	2301      	movs	r3, #1
 8008b94:	607b      	str	r3, [r7, #4]
 8008b96:	e008      	b.n	8008baa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b98:	4b08      	ldr	r3, [pc, #32]	@ (8008bbc <xTaskGetSchedulerState+0x38>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	607b      	str	r3, [r7, #4]
 8008ba4:	e001      	b.n	8008baa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008baa:	687b      	ldr	r3, [r7, #4]
	}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	200016b8 	.word	0x200016b8
 8008bbc:	200016d4 	.word	0x200016d4

08008bc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d058      	beq.n	8008c88 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8008c94 <xTaskPriorityDisinherit+0xd4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d00b      	beq.n	8008bf8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60fb      	str	r3, [r7, #12]
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10b      	bne.n	8008c18 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	60bb      	str	r3, [r7, #8]
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	e7fd      	b.n	8008c14 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c1c:	1e5a      	subs	r2, r3, #1
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d02c      	beq.n	8008c88 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d128      	bne.n	8008c88 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe fc54 	bl	80074e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c58:	4b0f      	ldr	r3, [pc, #60]	@ (8008c98 <xTaskPriorityDisinherit+0xd8>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d903      	bls.n	8008c68 <xTaskPriorityDisinherit+0xa8>
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c64:	4a0c      	ldr	r2, [pc, #48]	@ (8008c98 <xTaskPriorityDisinherit+0xd8>)
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4a09      	ldr	r2, [pc, #36]	@ (8008c9c <xTaskPriorityDisinherit+0xdc>)
 8008c76:	441a      	add	r2, r3
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f7fe fbd5 	bl	800742e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c84:	2301      	movs	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c88:	697b      	ldr	r3, [r7, #20]
	}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	200011d8 	.word	0x200011d8
 8008c98:	200016b4 	.word	0x200016b4
 8008c9c:	200011dc 	.word	0x200011dc

08008ca0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008caa:	4b21      	ldr	r3, [pc, #132]	@ (8008d30 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb0:	4b20      	ldr	r3, [pc, #128]	@ (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fc16 	bl	80074e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc2:	d10a      	bne.n	8008cda <prvAddCurrentTaskToDelayedList+0x3a>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d007      	beq.n	8008cda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cca:	4b1a      	ldr	r3, [pc, #104]	@ (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3304      	adds	r3, #4
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4819      	ldr	r0, [pc, #100]	@ (8008d38 <prvAddCurrentTaskToDelayedList+0x98>)
 8008cd4:	f7fe fbab 	bl	800742e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cd8:	e026      	b.n	8008d28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4413      	add	r3, r2
 8008ce0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ce2:	4b14      	ldr	r3, [pc, #80]	@ (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d209      	bcs.n	8008d06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cf2:	4b12      	ldr	r3, [pc, #72]	@ (8008d3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f7fe fbb9 	bl	8007476 <vListInsert>
}
 8008d04:	e010      	b.n	8008d28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d06:	4b0e      	ldr	r3, [pc, #56]	@ (8008d40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4619      	mov	r1, r3
 8008d12:	4610      	mov	r0, r2
 8008d14:	f7fe fbaf 	bl	8007476 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d18:	4b0a      	ldr	r3, [pc, #40]	@ (8008d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d202      	bcs.n	8008d28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d22:	4a08      	ldr	r2, [pc, #32]	@ (8008d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	6013      	str	r3, [r2, #0]
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	200016b0 	.word	0x200016b0
 8008d34:	200011d8 	.word	0x200011d8
 8008d38:	20001698 	.word	0x20001698
 8008d3c:	20001668 	.word	0x20001668
 8008d40:	20001664 	.word	0x20001664
 8008d44:	200016cc 	.word	0x200016cc

08008d48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	@ 0x28
 8008d4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d52:	f000 fb13 	bl	800937c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d56:	4b1d      	ldr	r3, [pc, #116]	@ (8008dcc <xTimerCreateTimerTask+0x84>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d021      	beq.n	8008da2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d66:	1d3a      	adds	r2, r7, #4
 8008d68:	f107 0108 	add.w	r1, r7, #8
 8008d6c:	f107 030c 	add.w	r3, r7, #12
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fb15 	bl	80073a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	9202      	str	r2, [sp, #8]
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	2302      	movs	r3, #2
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	2300      	movs	r3, #0
 8008d86:	460a      	mov	r2, r1
 8008d88:	4911      	ldr	r1, [pc, #68]	@ (8008dd0 <xTimerCreateTimerTask+0x88>)
 8008d8a:	4812      	ldr	r0, [pc, #72]	@ (8008dd4 <xTimerCreateTimerTask+0x8c>)
 8008d8c:	f7ff f8d0 	bl	8007f30 <xTaskCreateStatic>
 8008d90:	4603      	mov	r3, r0
 8008d92:	4a11      	ldr	r2, [pc, #68]	@ (8008dd8 <xTimerCreateTimerTask+0x90>)
 8008d94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d96:	4b10      	ldr	r3, [pc, #64]	@ (8008dd8 <xTimerCreateTimerTask+0x90>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	613b      	str	r3, [r7, #16]
}
 8008dba:	bf00      	nop
 8008dbc:	bf00      	nop
 8008dbe:	e7fd      	b.n	8008dbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008dc0:	697b      	ldr	r3, [r7, #20]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20001708 	.word	0x20001708
 8008dd0:	0800ab70 	.word	0x0800ab70
 8008dd4:	08008f15 	.word	0x08008f15
 8008dd8:	2000170c 	.word	0x2000170c

08008ddc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	@ 0x28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10b      	bne.n	8008e0c <xTimerGenericCommand+0x30>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	623b      	str	r3, [r7, #32]
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	e7fd      	b.n	8008e08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e0c:	4b19      	ldr	r3, [pc, #100]	@ (8008e74 <xTimerGenericCommand+0x98>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d02a      	beq.n	8008e6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2b05      	cmp	r3, #5
 8008e24:	dc18      	bgt.n	8008e58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e26:	f7ff fead 	bl	8008b84 <xTaskGetSchedulerState>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d109      	bne.n	8008e44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e30:	4b10      	ldr	r3, [pc, #64]	@ (8008e74 <xTimerGenericCommand+0x98>)
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	f107 0110 	add.w	r1, r7, #16
 8008e38:	2300      	movs	r3, #0
 8008e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e3c:	f7fe fc88 	bl	8007750 <xQueueGenericSend>
 8008e40:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e42:	e012      	b.n	8008e6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e44:	4b0b      	ldr	r3, [pc, #44]	@ (8008e74 <xTimerGenericCommand+0x98>)
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	f107 0110 	add.w	r1, r7, #16
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f7fe fc7e 	bl	8007750 <xQueueGenericSend>
 8008e54:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e56:	e008      	b.n	8008e6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e58:	4b06      	ldr	r3, [pc, #24]	@ (8008e74 <xTimerGenericCommand+0x98>)
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	f107 0110 	add.w	r1, r7, #16
 8008e60:	2300      	movs	r3, #0
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	f7fe fd76 	bl	8007954 <xQueueGenericSendFromISR>
 8008e68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3728      	adds	r7, #40	@ 0x28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20001708 	.word	0x20001708

08008e78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b088      	sub	sp, #32
 8008e7c:	af02      	add	r7, sp, #8
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e82:	4b23      	ldr	r3, [pc, #140]	@ (8008f10 <prvProcessExpiredTimer+0x98>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	3304      	adds	r3, #4
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fb29 	bl	80074e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d023      	beq.n	8008eec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	699a      	ldr	r2, [r3, #24]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	18d1      	adds	r1, r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	6978      	ldr	r0, [r7, #20]
 8008eb2:	f000 f8d5 	bl	8009060 <prvInsertTimerInActiveList>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d020      	beq.n	8008efe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6978      	ldr	r0, [r7, #20]
 8008ec8:	f7ff ff88 	bl	8008ddc <xTimerGenericCommand>
 8008ecc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d114      	bne.n	8008efe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	60fb      	str	r3, [r7, #12]
}
 8008ee6:	bf00      	nop
 8008ee8:	bf00      	nop
 8008eea:	e7fd      	b.n	8008ee8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ef2:	f023 0301 	bic.w	r3, r3, #1
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	6978      	ldr	r0, [r7, #20]
 8008f04:	4798      	blx	r3
}
 8008f06:	bf00      	nop
 8008f08:	3718      	adds	r7, #24
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20001700 	.word	0x20001700

08008f14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f1c:	f107 0308 	add.w	r3, r7, #8
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 f859 	bl	8008fd8 <prvGetNextExpireTime>
 8008f26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f805 	bl	8008f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f32:	f000 f8d7 	bl	80090e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f36:	bf00      	nop
 8008f38:	e7f0      	b.n	8008f1c <prvTimerTask+0x8>
	...

08008f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f46:	f7ff fa37 	bl	80083b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f4a:	f107 0308 	add.w	r3, r7, #8
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 f866 	bl	8009020 <prvSampleTimeNow>
 8008f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d130      	bne.n	8008fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10a      	bne.n	8008f78 <prvProcessTimerOrBlockTask+0x3c>
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d806      	bhi.n	8008f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f6a:	f7ff fa33 	bl	80083d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f6e:	68f9      	ldr	r1, [r7, #12]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff ff81 	bl	8008e78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f76:	e024      	b.n	8008fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d008      	beq.n	8008f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f7e:	4b13      	ldr	r3, [pc, #76]	@ (8008fcc <prvProcessTimerOrBlockTask+0x90>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <prvProcessTimerOrBlockTask+0x50>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e000      	b.n	8008f8e <prvProcessTimerOrBlockTask+0x52>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f90:	4b0f      	ldr	r3, [pc, #60]	@ (8008fd0 <prvProcessTimerOrBlockTask+0x94>)
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	f7fe ff93 	bl	8007ec8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fa2:	f7ff fa17 	bl	80083d4 <xTaskResumeAll>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fac:	4b09      	ldr	r3, [pc, #36]	@ (8008fd4 <prvProcessTimerOrBlockTask+0x98>)
 8008fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	f3bf 8f6f 	isb	sy
}
 8008fbc:	e001      	b.n	8008fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fbe:	f7ff fa09 	bl	80083d4 <xTaskResumeAll>
}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20001704 	.word	0x20001704
 8008fd0:	20001708 	.word	0x20001708
 8008fd4:	e000ed04 	.word	0xe000ed04

08008fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800901c <prvGetNextExpireTime+0x44>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <prvGetNextExpireTime+0x16>
 8008fea:	2201      	movs	r2, #1
 8008fec:	e000      	b.n	8008ff0 <prvGetNextExpireTime+0x18>
 8008fee:	2200      	movs	r2, #0
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ffc:	4b07      	ldr	r3, [pc, #28]	@ (800901c <prvGetNextExpireTime+0x44>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	e001      	b.n	800900c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800900c:	68fb      	ldr	r3, [r7, #12]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	20001700 	.word	0x20001700

08009020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009028:	f7ff fa72 	bl	8008510 <xTaskGetTickCount>
 800902c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800902e:	4b0b      	ldr	r3, [pc, #44]	@ (800905c <prvSampleTimeNow+0x3c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	429a      	cmp	r2, r3
 8009036:	d205      	bcs.n	8009044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009038:	f000 f93a 	bl	80092b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	e002      	b.n	800904a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800904a:	4a04      	ldr	r2, [pc, #16]	@ (800905c <prvSampleTimeNow+0x3c>)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009050:	68fb      	ldr	r3, [r7, #12]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20001710 	.word	0x20001710

08009060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800906e:	2300      	movs	r3, #0
 8009070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	429a      	cmp	r2, r3
 8009084:	d812      	bhi.n	80090ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	1ad2      	subs	r2, r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	429a      	cmp	r2, r3
 8009092:	d302      	bcc.n	800909a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009094:	2301      	movs	r3, #1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e01b      	b.n	80090d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800909a:	4b10      	ldr	r3, [pc, #64]	@ (80090dc <prvInsertTimerInActiveList+0x7c>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	4610      	mov	r0, r2
 80090a6:	f7fe f9e6 	bl	8007476 <vListInsert>
 80090aa:	e012      	b.n	80090d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d206      	bcs.n	80090c2 <prvInsertTimerInActiveList+0x62>
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d302      	bcc.n	80090c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090bc:	2301      	movs	r3, #1
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	e007      	b.n	80090d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090c2:	4b07      	ldr	r3, [pc, #28]	@ (80090e0 <prvInsertTimerInActiveList+0x80>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3304      	adds	r3, #4
 80090ca:	4619      	mov	r1, r3
 80090cc:	4610      	mov	r0, r2
 80090ce:	f7fe f9d2 	bl	8007476 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090d2:	697b      	ldr	r3, [r7, #20]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	20001704 	.word	0x20001704
 80090e0:	20001700 	.word	0x20001700

080090e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b08e      	sub	sp, #56	@ 0x38
 80090e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090ea:	e0ce      	b.n	800928a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	da19      	bge.n	8009126 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090f2:	1d3b      	adds	r3, r7, #4
 80090f4:	3304      	adds	r3, #4
 80090f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10b      	bne.n	8009116 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	61fb      	str	r3, [r7, #28]
}
 8009110:	bf00      	nop
 8009112:	bf00      	nop
 8009114:	e7fd      	b.n	8009112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800911c:	6850      	ldr	r0, [r2, #4]
 800911e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009120:	6892      	ldr	r2, [r2, #8]
 8009122:	4611      	mov	r1, r2
 8009124:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	f2c0 80ae 	blt.w	800928a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d004      	beq.n	8009144 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800913a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913c:	3304      	adds	r3, #4
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe f9d2 	bl	80074e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009144:	463b      	mov	r3, r7
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff ff6a 	bl	8009020 <prvSampleTimeNow>
 800914c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b09      	cmp	r3, #9
 8009152:	f200 8097 	bhi.w	8009284 <prvProcessReceivedCommands+0x1a0>
 8009156:	a201      	add	r2, pc, #4	@ (adr r2, 800915c <prvProcessReceivedCommands+0x78>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009185 	.word	0x08009185
 8009160:	08009185 	.word	0x08009185
 8009164:	08009185 	.word	0x08009185
 8009168:	080091fb 	.word	0x080091fb
 800916c:	0800920f 	.word	0x0800920f
 8009170:	0800925b 	.word	0x0800925b
 8009174:	08009185 	.word	0x08009185
 8009178:	08009185 	.word	0x08009185
 800917c:	080091fb 	.word	0x080091fb
 8009180:	0800920f 	.word	0x0800920f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009186:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800918a:	f043 0301 	orr.w	r3, r3, #1
 800918e:	b2da      	uxtb	r2, r3
 8009190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009192:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	18d1      	adds	r1, r2, r3
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091a4:	f7ff ff5c 	bl	8009060 <prvInsertTimerInActiveList>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d06c      	beq.n	8009288 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d061      	beq.n	8009288 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	441a      	add	r2, r3
 80091cc:	2300      	movs	r3, #0
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	2300      	movs	r3, #0
 80091d2:	2100      	movs	r1, #0
 80091d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091d6:	f7ff fe01 	bl	8008ddc <xTimerGenericCommand>
 80091da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d152      	bne.n	8009288 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80091e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e6:	f383 8811 	msr	BASEPRI, r3
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	61bb      	str	r3, [r7, #24]
}
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	e7fd      	b.n	80091f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009200:	f023 0301 	bic.w	r3, r3, #1
 8009204:	b2da      	uxtb	r2, r3
 8009206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009208:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800920c:	e03d      	b.n	800928a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800920e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009214:	f043 0301 	orr.w	r3, r3, #1
 8009218:	b2da      	uxtb	r2, r3
 800921a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009224:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10b      	bne.n	8009246 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	617b      	str	r3, [r7, #20]
}
 8009240:	bf00      	nop
 8009242:	bf00      	nop
 8009244:	e7fd      	b.n	8009242 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924c:	18d1      	adds	r1, r2, r3
 800924e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009254:	f7ff ff04 	bl	8009060 <prvInsertTimerInActiveList>
					break;
 8009258:	e017      	b.n	800928a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800925a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d103      	bne.n	8009270 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800926a:	f000 fbe5 	bl	8009a38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800926e:	e00c      	b.n	800928a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009272:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009276:	f023 0301 	bic.w	r3, r3, #1
 800927a:	b2da      	uxtb	r2, r3
 800927c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009282:	e002      	b.n	800928a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009284:	bf00      	nop
 8009286:	e000      	b.n	800928a <prvProcessReceivedCommands+0x1a6>
					break;
 8009288:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800928a:	4b08      	ldr	r3, [pc, #32]	@ (80092ac <prvProcessReceivedCommands+0x1c8>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	1d39      	adds	r1, r7, #4
 8009290:	2200      	movs	r2, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fbfc 	bl	8007a90 <xQueueReceive>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	f47f af26 	bne.w	80090ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80092a0:	bf00      	nop
 80092a2:	bf00      	nop
 80092a4:	3730      	adds	r7, #48	@ 0x30
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20001708 	.word	0x20001708

080092b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092b6:	e049      	b.n	800934c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009374 <prvSwitchTimerLists+0xc4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009374 <prvSwitchTimerLists+0xc4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	3304      	adds	r3, #4
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fe f909 	bl	80074e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d02f      	beq.n	800934c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	4413      	add	r3, r2
 80092f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d90e      	bls.n	800931c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800930a:	4b1a      	ldr	r3, [pc, #104]	@ (8009374 <prvSwitchTimerLists+0xc4>)
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3304      	adds	r3, #4
 8009312:	4619      	mov	r1, r3
 8009314:	4610      	mov	r0, r2
 8009316:	f7fe f8ae 	bl	8007476 <vListInsert>
 800931a:	e017      	b.n	800934c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800931c:	2300      	movs	r3, #0
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	2300      	movs	r3, #0
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	2100      	movs	r1, #0
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff fd58 	bl	8008ddc <xTimerGenericCommand>
 800932c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10b      	bne.n	800934c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	603b      	str	r3, [r7, #0]
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	e7fd      	b.n	8009348 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800934c:	4b09      	ldr	r3, [pc, #36]	@ (8009374 <prvSwitchTimerLists+0xc4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1b0      	bne.n	80092b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009356:	4b07      	ldr	r3, [pc, #28]	@ (8009374 <prvSwitchTimerLists+0xc4>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800935c:	4b06      	ldr	r3, [pc, #24]	@ (8009378 <prvSwitchTimerLists+0xc8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a04      	ldr	r2, [pc, #16]	@ (8009374 <prvSwitchTimerLists+0xc4>)
 8009362:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009364:	4a04      	ldr	r2, [pc, #16]	@ (8009378 <prvSwitchTimerLists+0xc8>)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	6013      	str	r3, [r2, #0]
}
 800936a:	bf00      	nop
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20001700 	.word	0x20001700
 8009378:	20001704 	.word	0x20001704

0800937c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009382:	f000 f969 	bl	8009658 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009386:	4b15      	ldr	r3, [pc, #84]	@ (80093dc <prvCheckForValidListAndQueue+0x60>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d120      	bne.n	80093d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800938e:	4814      	ldr	r0, [pc, #80]	@ (80093e0 <prvCheckForValidListAndQueue+0x64>)
 8009390:	f7fe f820 	bl	80073d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009394:	4813      	ldr	r0, [pc, #76]	@ (80093e4 <prvCheckForValidListAndQueue+0x68>)
 8009396:	f7fe f81d 	bl	80073d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800939a:	4b13      	ldr	r3, [pc, #76]	@ (80093e8 <prvCheckForValidListAndQueue+0x6c>)
 800939c:	4a10      	ldr	r2, [pc, #64]	@ (80093e0 <prvCheckForValidListAndQueue+0x64>)
 800939e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093a0:	4b12      	ldr	r3, [pc, #72]	@ (80093ec <prvCheckForValidListAndQueue+0x70>)
 80093a2:	4a10      	ldr	r2, [pc, #64]	@ (80093e4 <prvCheckForValidListAndQueue+0x68>)
 80093a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093a6:	2300      	movs	r3, #0
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	4b11      	ldr	r3, [pc, #68]	@ (80093f0 <prvCheckForValidListAndQueue+0x74>)
 80093ac:	4a11      	ldr	r2, [pc, #68]	@ (80093f4 <prvCheckForValidListAndQueue+0x78>)
 80093ae:	2110      	movs	r1, #16
 80093b0:	200a      	movs	r0, #10
 80093b2:	f7fe f92d 	bl	8007610 <xQueueGenericCreateStatic>
 80093b6:	4603      	mov	r3, r0
 80093b8:	4a08      	ldr	r2, [pc, #32]	@ (80093dc <prvCheckForValidListAndQueue+0x60>)
 80093ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093bc:	4b07      	ldr	r3, [pc, #28]	@ (80093dc <prvCheckForValidListAndQueue+0x60>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093c4:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <prvCheckForValidListAndQueue+0x60>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	490b      	ldr	r1, [pc, #44]	@ (80093f8 <prvCheckForValidListAndQueue+0x7c>)
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fd52 	bl	8007e74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093d0:	f000 f974 	bl	80096bc <vPortExitCritical>
}
 80093d4:	bf00      	nop
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20001708 	.word	0x20001708
 80093e0:	200016d8 	.word	0x200016d8
 80093e4:	200016ec 	.word	0x200016ec
 80093e8:	20001700 	.word	0x20001700
 80093ec:	20001704 	.word	0x20001704
 80093f0:	200017b4 	.word	0x200017b4
 80093f4:	20001714 	.word	0x20001714
 80093f8:	0800ab78 	.word	0x0800ab78

080093fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3b04      	subs	r3, #4
 800940c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3b04      	subs	r3, #4
 800941a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f023 0201 	bic.w	r2, r3, #1
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3b04      	subs	r3, #4
 800942a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800942c:	4a0c      	ldr	r2, [pc, #48]	@ (8009460 <pxPortInitialiseStack+0x64>)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	3b14      	subs	r3, #20
 8009436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3b04      	subs	r3, #4
 8009442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f06f 0202 	mvn.w	r2, #2
 800944a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3b20      	subs	r3, #32
 8009450:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009452:	68fb      	ldr	r3, [r7, #12]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	08009465 	.word	0x08009465

08009464 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800946e:	4b13      	ldr	r3, [pc, #76]	@ (80094bc <prvTaskExitError+0x58>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009476:	d00b      	beq.n	8009490 <prvTaskExitError+0x2c>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	60fb      	str	r3, [r7, #12]
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <prvTaskExitError+0x28>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	60bb      	str	r3, [r7, #8]
}
 80094a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094a4:	bf00      	nop
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d0fc      	beq.n	80094a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	2000000c 	.word	0x2000000c

080094c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094c0:	4b07      	ldr	r3, [pc, #28]	@ (80094e0 <pxCurrentTCBConst2>)
 80094c2:	6819      	ldr	r1, [r3, #0]
 80094c4:	6808      	ldr	r0, [r1, #0]
 80094c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ca:	f380 8809 	msr	PSP, r0
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f04f 0000 	mov.w	r0, #0
 80094d6:	f380 8811 	msr	BASEPRI, r0
 80094da:	4770      	bx	lr
 80094dc:	f3af 8000 	nop.w

080094e0 <pxCurrentTCBConst2>:
 80094e0:	200011d8 	.word	0x200011d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop

080094e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094e8:	4808      	ldr	r0, [pc, #32]	@ (800950c <prvPortStartFirstTask+0x24>)
 80094ea:	6800      	ldr	r0, [r0, #0]
 80094ec:	6800      	ldr	r0, [r0, #0]
 80094ee:	f380 8808 	msr	MSP, r0
 80094f2:	f04f 0000 	mov.w	r0, #0
 80094f6:	f380 8814 	msr	CONTROL, r0
 80094fa:	b662      	cpsie	i
 80094fc:	b661      	cpsie	f
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	df00      	svc	0
 8009508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800950a:	bf00      	nop
 800950c:	e000ed08 	.word	0xe000ed08

08009510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009516:	4b47      	ldr	r3, [pc, #284]	@ (8009634 <xPortStartScheduler+0x124>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a47      	ldr	r2, [pc, #284]	@ (8009638 <xPortStartScheduler+0x128>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d10b      	bne.n	8009538 <xPortStartScheduler+0x28>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	613b      	str	r3, [r7, #16]
}
 8009532:	bf00      	nop
 8009534:	bf00      	nop
 8009536:	e7fd      	b.n	8009534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009538:	4b3e      	ldr	r3, [pc, #248]	@ (8009634 <xPortStartScheduler+0x124>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a3f      	ldr	r2, [pc, #252]	@ (800963c <xPortStartScheduler+0x12c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d10b      	bne.n	800955a <xPortStartScheduler+0x4a>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	60fb      	str	r3, [r7, #12]
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop
 8009558:	e7fd      	b.n	8009556 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800955a:	4b39      	ldr	r3, [pc, #228]	@ (8009640 <xPortStartScheduler+0x130>)
 800955c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	22ff      	movs	r2, #255	@ 0xff
 800956a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800957c:	b2da      	uxtb	r2, r3
 800957e:	4b31      	ldr	r3, [pc, #196]	@ (8009644 <xPortStartScheduler+0x134>)
 8009580:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009582:	4b31      	ldr	r3, [pc, #196]	@ (8009648 <xPortStartScheduler+0x138>)
 8009584:	2207      	movs	r2, #7
 8009586:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009588:	e009      	b.n	800959e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800958a:	4b2f      	ldr	r3, [pc, #188]	@ (8009648 <xPortStartScheduler+0x138>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3b01      	subs	r3, #1
 8009590:	4a2d      	ldr	r2, [pc, #180]	@ (8009648 <xPortStartScheduler+0x138>)
 8009592:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	b2db      	uxtb	r3, r3
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	b2db      	uxtb	r3, r3
 800959c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095a6:	2b80      	cmp	r3, #128	@ 0x80
 80095a8:	d0ef      	beq.n	800958a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095aa:	4b27      	ldr	r3, [pc, #156]	@ (8009648 <xPortStartScheduler+0x138>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f1c3 0307 	rsb	r3, r3, #7
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d00b      	beq.n	80095ce <xPortStartScheduler+0xbe>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	60bb      	str	r3, [r7, #8]
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	e7fd      	b.n	80095ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009648 <xPortStartScheduler+0x138>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009648 <xPortStartScheduler+0x138>)
 80095d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009648 <xPortStartScheduler+0x138>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095e0:	4a19      	ldr	r2, [pc, #100]	@ (8009648 <xPortStartScheduler+0x138>)
 80095e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095ec:	4b17      	ldr	r3, [pc, #92]	@ (800964c <xPortStartScheduler+0x13c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a16      	ldr	r2, [pc, #88]	@ (800964c <xPortStartScheduler+0x13c>)
 80095f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80095f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095f8:	4b14      	ldr	r3, [pc, #80]	@ (800964c <xPortStartScheduler+0x13c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a13      	ldr	r2, [pc, #76]	@ (800964c <xPortStartScheduler+0x13c>)
 80095fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009604:	f000 f8da 	bl	80097bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009608:	4b11      	ldr	r3, [pc, #68]	@ (8009650 <xPortStartScheduler+0x140>)
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800960e:	f000 f8f9 	bl	8009804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009612:	4b10      	ldr	r3, [pc, #64]	@ (8009654 <xPortStartScheduler+0x144>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a0f      	ldr	r2, [pc, #60]	@ (8009654 <xPortStartScheduler+0x144>)
 8009618:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800961c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800961e:	f7ff ff63 	bl	80094e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009622:	f7ff f83f 	bl	80086a4 <vTaskSwitchContext>
	prvTaskExitError();
 8009626:	f7ff ff1d 	bl	8009464 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	e000ed00 	.word	0xe000ed00
 8009638:	410fc271 	.word	0x410fc271
 800963c:	410fc270 	.word	0x410fc270
 8009640:	e000e400 	.word	0xe000e400
 8009644:	20001804 	.word	0x20001804
 8009648:	20001808 	.word	0x20001808
 800964c:	e000ed20 	.word	0xe000ed20
 8009650:	2000000c 	.word	0x2000000c
 8009654:	e000ef34 	.word	0xe000ef34

08009658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	607b      	str	r3, [r7, #4]
}
 8009670:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009672:	4b10      	ldr	r3, [pc, #64]	@ (80096b4 <vPortEnterCritical+0x5c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3301      	adds	r3, #1
 8009678:	4a0e      	ldr	r2, [pc, #56]	@ (80096b4 <vPortEnterCritical+0x5c>)
 800967a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800967c:	4b0d      	ldr	r3, [pc, #52]	@ (80096b4 <vPortEnterCritical+0x5c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d110      	bne.n	80096a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009684:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <vPortEnterCritical+0x60>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	603b      	str	r3, [r7, #0]
}
 80096a0:	bf00      	nop
 80096a2:	bf00      	nop
 80096a4:	e7fd      	b.n	80096a2 <vPortEnterCritical+0x4a>
	}
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	2000000c 	.word	0x2000000c
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096c2:	4b12      	ldr	r3, [pc, #72]	@ (800970c <vPortExitCritical+0x50>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10b      	bne.n	80096e2 <vPortExitCritical+0x26>
	__asm volatile
 80096ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	607b      	str	r3, [r7, #4]
}
 80096dc:	bf00      	nop
 80096de:	bf00      	nop
 80096e0:	e7fd      	b.n	80096de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096e2:	4b0a      	ldr	r3, [pc, #40]	@ (800970c <vPortExitCritical+0x50>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	4a08      	ldr	r2, [pc, #32]	@ (800970c <vPortExitCritical+0x50>)
 80096ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096ec:	4b07      	ldr	r3, [pc, #28]	@ (800970c <vPortExitCritical+0x50>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d105      	bne.n	8009700 <vPortExitCritical+0x44>
 80096f4:	2300      	movs	r3, #0
 80096f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	f383 8811 	msr	BASEPRI, r3
}
 80096fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	2000000c 	.word	0x2000000c

08009710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009710:	f3ef 8009 	mrs	r0, PSP
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	4b15      	ldr	r3, [pc, #84]	@ (8009770 <pxCurrentTCBConst>)
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	f01e 0f10 	tst.w	lr, #16
 8009720:	bf08      	it	eq
 8009722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	6010      	str	r0, [r2, #0]
 800972c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009734:	f380 8811 	msr	BASEPRI, r0
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f7fe ffb0 	bl	80086a4 <vTaskSwitchContext>
 8009744:	f04f 0000 	mov.w	r0, #0
 8009748:	f380 8811 	msr	BASEPRI, r0
 800974c:	bc09      	pop	{r0, r3}
 800974e:	6819      	ldr	r1, [r3, #0]
 8009750:	6808      	ldr	r0, [r1, #0]
 8009752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009756:	f01e 0f10 	tst.w	lr, #16
 800975a:	bf08      	it	eq
 800975c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009760:	f380 8809 	msr	PSP, r0
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	f3af 8000 	nop.w

08009770 <pxCurrentTCBConst>:
 8009770:	200011d8 	.word	0x200011d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop

08009778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	607b      	str	r3, [r7, #4]
}
 8009790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009792:	f7fe fecd 	bl	8008530 <xTaskIncrementTick>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800979c:	4b06      	ldr	r3, [pc, #24]	@ (80097b8 <xPortSysTickHandler+0x40>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	2300      	movs	r3, #0
 80097a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	f383 8811 	msr	BASEPRI, r3
}
 80097ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097b0:	bf00      	nop
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	e000ed04 	.word	0xe000ed04

080097bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097c0:	4b0b      	ldr	r3, [pc, #44]	@ (80097f0 <vPortSetupTimerInterrupt+0x34>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097c6:	4b0b      	ldr	r3, [pc, #44]	@ (80097f4 <vPortSetupTimerInterrupt+0x38>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097cc:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <vPortSetupTimerInterrupt+0x3c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a0a      	ldr	r2, [pc, #40]	@ (80097fc <vPortSetupTimerInterrupt+0x40>)
 80097d2:	fba2 2303 	umull	r2, r3, r2, r3
 80097d6:	099b      	lsrs	r3, r3, #6
 80097d8:	4a09      	ldr	r2, [pc, #36]	@ (8009800 <vPortSetupTimerInterrupt+0x44>)
 80097da:	3b01      	subs	r3, #1
 80097dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097de:	4b04      	ldr	r3, [pc, #16]	@ (80097f0 <vPortSetupTimerInterrupt+0x34>)
 80097e0:	2207      	movs	r2, #7
 80097e2:	601a      	str	r2, [r3, #0]
}
 80097e4:	bf00      	nop
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	e000e010 	.word	0xe000e010
 80097f4:	e000e018 	.word	0xe000e018
 80097f8:	20000000 	.word	0x20000000
 80097fc:	10624dd3 	.word	0x10624dd3
 8009800:	e000e014 	.word	0xe000e014

08009804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009804:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009814 <vPortEnableVFP+0x10>
 8009808:	6801      	ldr	r1, [r0, #0]
 800980a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800980e:	6001      	str	r1, [r0, #0]
 8009810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009812:	bf00      	nop
 8009814:	e000ed88 	.word	0xe000ed88

08009818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800981e:	f3ef 8305 	mrs	r3, IPSR
 8009822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b0f      	cmp	r3, #15
 8009828:	d915      	bls.n	8009856 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800982a:	4a18      	ldr	r2, [pc, #96]	@ (800988c <vPortValidateInterruptPriority+0x74>)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009834:	4b16      	ldr	r3, [pc, #88]	@ (8009890 <vPortValidateInterruptPriority+0x78>)
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	7afa      	ldrb	r2, [r7, #11]
 800983a:	429a      	cmp	r2, r3
 800983c:	d20b      	bcs.n	8009856 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	607b      	str	r3, [r7, #4]
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	e7fd      	b.n	8009852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009856:	4b0f      	ldr	r3, [pc, #60]	@ (8009894 <vPortValidateInterruptPriority+0x7c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800985e:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <vPortValidateInterruptPriority+0x80>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d90b      	bls.n	800987e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	603b      	str	r3, [r7, #0]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <vPortValidateInterruptPriority+0x62>
	}
 800987e:	bf00      	nop
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	e000e3f0 	.word	0xe000e3f0
 8009890:	20001804 	.word	0x20001804
 8009894:	e000ed0c 	.word	0xe000ed0c
 8009898:	20001808 	.word	0x20001808

0800989c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08a      	sub	sp, #40	@ 0x28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098a4:	2300      	movs	r3, #0
 80098a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098a8:	f7fe fd86 	bl	80083b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098ac:	4b5c      	ldr	r3, [pc, #368]	@ (8009a20 <pvPortMalloc+0x184>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098b4:	f000 f924 	bl	8009b00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098b8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a24 <pvPortMalloc+0x188>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4013      	ands	r3, r2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f040 8095 	bne.w	80099f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01e      	beq.n	800990a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80098cc:	2208      	movs	r2, #8
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4413      	add	r3, r2
 80098d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d015      	beq.n	800990a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f023 0307 	bic.w	r3, r3, #7
 80098e4:	3308      	adds	r3, #8
 80098e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <pvPortMalloc+0x6e>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	617b      	str	r3, [r7, #20]
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop
 8009908:	e7fd      	b.n	8009906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d06f      	beq.n	80099f0 <pvPortMalloc+0x154>
 8009910:	4b45      	ldr	r3, [pc, #276]	@ (8009a28 <pvPortMalloc+0x18c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	429a      	cmp	r2, r3
 8009918:	d86a      	bhi.n	80099f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800991a:	4b44      	ldr	r3, [pc, #272]	@ (8009a2c <pvPortMalloc+0x190>)
 800991c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800991e:	4b43      	ldr	r3, [pc, #268]	@ (8009a2c <pvPortMalloc+0x190>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009924:	e004      	b.n	8009930 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800992a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	429a      	cmp	r2, r3
 8009938:	d903      	bls.n	8009942 <pvPortMalloc+0xa6>
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1f1      	bne.n	8009926 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009942:	4b37      	ldr	r3, [pc, #220]	@ (8009a20 <pvPortMalloc+0x184>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009948:	429a      	cmp	r2, r3
 800994a:	d051      	beq.n	80099f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800994c:	6a3b      	ldr	r3, [r7, #32]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2208      	movs	r2, #8
 8009952:	4413      	add	r3, r2
 8009954:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	1ad2      	subs	r2, r2, r3
 8009966:	2308      	movs	r3, #8
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	429a      	cmp	r2, r3
 800996c:	d920      	bls.n	80099b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800996e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4413      	add	r3, r2
 8009974:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	f003 0307 	and.w	r3, r3, #7
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00b      	beq.n	8009998 <pvPortMalloc+0xfc>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	613b      	str	r3, [r7, #16]
}
 8009992:	bf00      	nop
 8009994:	bf00      	nop
 8009996:	e7fd      	b.n	8009994 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	1ad2      	subs	r2, r2, r3
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099aa:	69b8      	ldr	r0, [r7, #24]
 80099ac:	f000 f90a 	bl	8009bc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a28 <pvPortMalloc+0x18c>)
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009a28 <pvPortMalloc+0x18c>)
 80099bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099be:	4b1a      	ldr	r3, [pc, #104]	@ (8009a28 <pvPortMalloc+0x18c>)
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a30 <pvPortMalloc+0x194>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d203      	bcs.n	80099d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099ca:	4b17      	ldr	r3, [pc, #92]	@ (8009a28 <pvPortMalloc+0x18c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a18      	ldr	r2, [pc, #96]	@ (8009a30 <pvPortMalloc+0x194>)
 80099d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	4b13      	ldr	r3, [pc, #76]	@ (8009a24 <pvPortMalloc+0x188>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	431a      	orrs	r2, r3
 80099dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099e6:	4b13      	ldr	r3, [pc, #76]	@ (8009a34 <pvPortMalloc+0x198>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3301      	adds	r3, #1
 80099ec:	4a11      	ldr	r2, [pc, #68]	@ (8009a34 <pvPortMalloc+0x198>)
 80099ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099f0:	f7fe fcf0 	bl	80083d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	f003 0307 	and.w	r3, r3, #7
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <pvPortMalloc+0x17a>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	60fb      	str	r3, [r7, #12]
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	e7fd      	b.n	8009a12 <pvPortMalloc+0x176>
	return pvReturn;
 8009a16:	69fb      	ldr	r3, [r7, #28]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3728      	adds	r7, #40	@ 0x28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	200023cc 	.word	0x200023cc
 8009a24:	200023e0 	.word	0x200023e0
 8009a28:	200023d0 	.word	0x200023d0
 8009a2c:	200023c4 	.word	0x200023c4
 8009a30:	200023d4 	.word	0x200023d4
 8009a34:	200023d8 	.word	0x200023d8

08009a38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d04f      	beq.n	8009aea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a4a:	2308      	movs	r3, #8
 8009a4c:	425b      	negs	r3, r3
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	4b25      	ldr	r3, [pc, #148]	@ (8009af4 <vPortFree+0xbc>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4013      	ands	r3, r2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10b      	bne.n	8009a7e <vPortFree+0x46>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	60fb      	str	r3, [r7, #12]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00b      	beq.n	8009a9e <vPortFree+0x66>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60bb      	str	r3, [r7, #8]
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	e7fd      	b.n	8009a9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	4b14      	ldr	r3, [pc, #80]	@ (8009af4 <vPortFree+0xbc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01e      	beq.n	8009aea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d11a      	bne.n	8009aea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8009af4 <vPortFree+0xbc>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	43db      	mvns	r3, r3
 8009abe:	401a      	ands	r2, r3
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ac4:	f7fe fc78 	bl	80083b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4b0a      	ldr	r3, [pc, #40]	@ (8009af8 <vPortFree+0xc0>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	4a09      	ldr	r2, [pc, #36]	@ (8009af8 <vPortFree+0xc0>)
 8009ad4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ad6:	6938      	ldr	r0, [r7, #16]
 8009ad8:	f000 f874 	bl	8009bc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009adc:	4b07      	ldr	r3, [pc, #28]	@ (8009afc <vPortFree+0xc4>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	4a06      	ldr	r2, [pc, #24]	@ (8009afc <vPortFree+0xc4>)
 8009ae4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ae6:	f7fe fc75 	bl	80083d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009aea:	bf00      	nop
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	200023e0 	.word	0x200023e0
 8009af8:	200023d0 	.word	0x200023d0
 8009afc:	200023dc 	.word	0x200023dc

08009b00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b06:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009b0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b0c:	4b27      	ldr	r3, [pc, #156]	@ (8009bac <prvHeapInit+0xac>)
 8009b0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00c      	beq.n	8009b34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3307      	adds	r3, #7
 8009b1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0307 	bic.w	r3, r3, #7
 8009b26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bac <prvHeapInit+0xac>)
 8009b30:	4413      	add	r3, r2
 8009b32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b38:	4a1d      	ldr	r2, [pc, #116]	@ (8009bb0 <prvHeapInit+0xb0>)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb0 <prvHeapInit+0xb0>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	4413      	add	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b4c:	2208      	movs	r2, #8
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	1a9b      	subs	r3, r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f023 0307 	bic.w	r3, r3, #7
 8009b5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4a15      	ldr	r2, [pc, #84]	@ (8009bb4 <prvHeapInit+0xb4>)
 8009b60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b62:	4b14      	ldr	r3, [pc, #80]	@ (8009bb4 <prvHeapInit+0xb4>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b6a:	4b12      	ldr	r3, [pc, #72]	@ (8009bb4 <prvHeapInit+0xb4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	1ad2      	subs	r2, r2, r3
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b80:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb4 <prvHeapInit+0xb4>)
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009bb8 <prvHeapInit+0xb8>)
 8009b8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	4a09      	ldr	r2, [pc, #36]	@ (8009bbc <prvHeapInit+0xbc>)
 8009b96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b98:	4b09      	ldr	r3, [pc, #36]	@ (8009bc0 <prvHeapInit+0xc0>)
 8009b9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009b9e:	601a      	str	r2, [r3, #0]
}
 8009ba0:	bf00      	nop
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	2000180c 	.word	0x2000180c
 8009bb0:	200023c4 	.word	0x200023c4
 8009bb4:	200023cc 	.word	0x200023cc
 8009bb8:	200023d4 	.word	0x200023d4
 8009bbc:	200023d0 	.word	0x200023d0
 8009bc0:	200023e0 	.word	0x200023e0

08009bc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bcc:	4b28      	ldr	r3, [pc, #160]	@ (8009c70 <prvInsertBlockIntoFreeList+0xac>)
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e002      	b.n	8009bd8 <prvInsertBlockIntoFreeList+0x14>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d8f7      	bhi.n	8009bd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	4413      	add	r3, r2
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d108      	bne.n	8009c06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	441a      	add	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	441a      	add	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d118      	bne.n	8009c4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	4b15      	ldr	r3, [pc, #84]	@ (8009c74 <prvInsertBlockIntoFreeList+0xb0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d00d      	beq.n	8009c42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	441a      	add	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	e008      	b.n	8009c54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c42:	4b0c      	ldr	r3, [pc, #48]	@ (8009c74 <prvInsertBlockIntoFreeList+0xb0>)
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e003      	b.n	8009c54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d002      	beq.n	8009c62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c62:	bf00      	nop
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	200023c4 	.word	0x200023c4
 8009c74:	200023cc 	.word	0x200023cc

08009c78 <std>:
 8009c78:	2300      	movs	r3, #0
 8009c7a:	b510      	push	{r4, lr}
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c86:	6083      	str	r3, [r0, #8]
 8009c88:	8181      	strh	r1, [r0, #12]
 8009c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c8c:	81c2      	strh	r2, [r0, #14]
 8009c8e:	6183      	str	r3, [r0, #24]
 8009c90:	4619      	mov	r1, r3
 8009c92:	2208      	movs	r2, #8
 8009c94:	305c      	adds	r0, #92	@ 0x5c
 8009c96:	f000 f906 	bl	8009ea6 <memset>
 8009c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd0 <std+0x58>)
 8009c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd4 <std+0x5c>)
 8009ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd8 <std+0x60>)
 8009ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <std+0x64>)
 8009ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009caa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce0 <std+0x68>)
 8009cac:	6224      	str	r4, [r4, #32]
 8009cae:	429c      	cmp	r4, r3
 8009cb0:	d006      	beq.n	8009cc0 <std+0x48>
 8009cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009cb6:	4294      	cmp	r4, r2
 8009cb8:	d002      	beq.n	8009cc0 <std+0x48>
 8009cba:	33d0      	adds	r3, #208	@ 0xd0
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	d105      	bne.n	8009ccc <std+0x54>
 8009cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc8:	f000 b966 	b.w	8009f98 <__retarget_lock_init_recursive>
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	bf00      	nop
 8009cd0:	08009e21 	.word	0x08009e21
 8009cd4:	08009e43 	.word	0x08009e43
 8009cd8:	08009e7b 	.word	0x08009e7b
 8009cdc:	08009e9f 	.word	0x08009e9f
 8009ce0:	200023e4 	.word	0x200023e4

08009ce4 <stdio_exit_handler>:
 8009ce4:	4a02      	ldr	r2, [pc, #8]	@ (8009cf0 <stdio_exit_handler+0xc>)
 8009ce6:	4903      	ldr	r1, [pc, #12]	@ (8009cf4 <stdio_exit_handler+0x10>)
 8009ce8:	4803      	ldr	r0, [pc, #12]	@ (8009cf8 <stdio_exit_handler+0x14>)
 8009cea:	f000 b869 	b.w	8009dc0 <_fwalk_sglue>
 8009cee:	bf00      	nop
 8009cf0:	20000010 	.word	0x20000010
 8009cf4:	0800a855 	.word	0x0800a855
 8009cf8:	20000020 	.word	0x20000020

08009cfc <cleanup_stdio>:
 8009cfc:	6841      	ldr	r1, [r0, #4]
 8009cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8009d30 <cleanup_stdio+0x34>)
 8009d00:	4299      	cmp	r1, r3
 8009d02:	b510      	push	{r4, lr}
 8009d04:	4604      	mov	r4, r0
 8009d06:	d001      	beq.n	8009d0c <cleanup_stdio+0x10>
 8009d08:	f000 fda4 	bl	800a854 <_fflush_r>
 8009d0c:	68a1      	ldr	r1, [r4, #8]
 8009d0e:	4b09      	ldr	r3, [pc, #36]	@ (8009d34 <cleanup_stdio+0x38>)
 8009d10:	4299      	cmp	r1, r3
 8009d12:	d002      	beq.n	8009d1a <cleanup_stdio+0x1e>
 8009d14:	4620      	mov	r0, r4
 8009d16:	f000 fd9d 	bl	800a854 <_fflush_r>
 8009d1a:	68e1      	ldr	r1, [r4, #12]
 8009d1c:	4b06      	ldr	r3, [pc, #24]	@ (8009d38 <cleanup_stdio+0x3c>)
 8009d1e:	4299      	cmp	r1, r3
 8009d20:	d004      	beq.n	8009d2c <cleanup_stdio+0x30>
 8009d22:	4620      	mov	r0, r4
 8009d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d28:	f000 bd94 	b.w	800a854 <_fflush_r>
 8009d2c:	bd10      	pop	{r4, pc}
 8009d2e:	bf00      	nop
 8009d30:	200023e4 	.word	0x200023e4
 8009d34:	2000244c 	.word	0x2000244c
 8009d38:	200024b4 	.word	0x200024b4

08009d3c <global_stdio_init.part.0>:
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d6c <global_stdio_init.part.0+0x30>)
 8009d40:	4c0b      	ldr	r4, [pc, #44]	@ (8009d70 <global_stdio_init.part.0+0x34>)
 8009d42:	4a0c      	ldr	r2, [pc, #48]	@ (8009d74 <global_stdio_init.part.0+0x38>)
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	4620      	mov	r0, r4
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2104      	movs	r1, #4
 8009d4c:	f7ff ff94 	bl	8009c78 <std>
 8009d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d54:	2201      	movs	r2, #1
 8009d56:	2109      	movs	r1, #9
 8009d58:	f7ff ff8e 	bl	8009c78 <std>
 8009d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d60:	2202      	movs	r2, #2
 8009d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d66:	2112      	movs	r1, #18
 8009d68:	f7ff bf86 	b.w	8009c78 <std>
 8009d6c:	2000251c 	.word	0x2000251c
 8009d70:	200023e4 	.word	0x200023e4
 8009d74:	08009ce5 	.word	0x08009ce5

08009d78 <__sfp_lock_acquire>:
 8009d78:	4801      	ldr	r0, [pc, #4]	@ (8009d80 <__sfp_lock_acquire+0x8>)
 8009d7a:	f000 b90e 	b.w	8009f9a <__retarget_lock_acquire_recursive>
 8009d7e:	bf00      	nop
 8009d80:	20002525 	.word	0x20002525

08009d84 <__sfp_lock_release>:
 8009d84:	4801      	ldr	r0, [pc, #4]	@ (8009d8c <__sfp_lock_release+0x8>)
 8009d86:	f000 b909 	b.w	8009f9c <__retarget_lock_release_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	20002525 	.word	0x20002525

08009d90 <__sinit>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	4604      	mov	r4, r0
 8009d94:	f7ff fff0 	bl	8009d78 <__sfp_lock_acquire>
 8009d98:	6a23      	ldr	r3, [r4, #32]
 8009d9a:	b11b      	cbz	r3, 8009da4 <__sinit+0x14>
 8009d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009da0:	f7ff bff0 	b.w	8009d84 <__sfp_lock_release>
 8009da4:	4b04      	ldr	r3, [pc, #16]	@ (8009db8 <__sinit+0x28>)
 8009da6:	6223      	str	r3, [r4, #32]
 8009da8:	4b04      	ldr	r3, [pc, #16]	@ (8009dbc <__sinit+0x2c>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1f5      	bne.n	8009d9c <__sinit+0xc>
 8009db0:	f7ff ffc4 	bl	8009d3c <global_stdio_init.part.0>
 8009db4:	e7f2      	b.n	8009d9c <__sinit+0xc>
 8009db6:	bf00      	nop
 8009db8:	08009cfd 	.word	0x08009cfd
 8009dbc:	2000251c 	.word	0x2000251c

08009dc0 <_fwalk_sglue>:
 8009dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	4688      	mov	r8, r1
 8009dc8:	4614      	mov	r4, r2
 8009dca:	2600      	movs	r6, #0
 8009dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8009dd4:	d505      	bpl.n	8009de2 <_fwalk_sglue+0x22>
 8009dd6:	6824      	ldr	r4, [r4, #0]
 8009dd8:	2c00      	cmp	r4, #0
 8009dda:	d1f7      	bne.n	8009dcc <_fwalk_sglue+0xc>
 8009ddc:	4630      	mov	r0, r6
 8009dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de2:	89ab      	ldrh	r3, [r5, #12]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d907      	bls.n	8009df8 <_fwalk_sglue+0x38>
 8009de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dec:	3301      	adds	r3, #1
 8009dee:	d003      	beq.n	8009df8 <_fwalk_sglue+0x38>
 8009df0:	4629      	mov	r1, r5
 8009df2:	4638      	mov	r0, r7
 8009df4:	47c0      	blx	r8
 8009df6:	4306      	orrs	r6, r0
 8009df8:	3568      	adds	r5, #104	@ 0x68
 8009dfa:	e7e9      	b.n	8009dd0 <_fwalk_sglue+0x10>

08009dfc <iprintf>:
 8009dfc:	b40f      	push	{r0, r1, r2, r3}
 8009dfe:	b507      	push	{r0, r1, r2, lr}
 8009e00:	4906      	ldr	r1, [pc, #24]	@ (8009e1c <iprintf+0x20>)
 8009e02:	ab04      	add	r3, sp, #16
 8009e04:	6808      	ldr	r0, [r1, #0]
 8009e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e0a:	6881      	ldr	r1, [r0, #8]
 8009e0c:	9301      	str	r3, [sp, #4]
 8009e0e:	f000 f9f7 	bl	800a200 <_vfiprintf_r>
 8009e12:	b003      	add	sp, #12
 8009e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e18:	b004      	add	sp, #16
 8009e1a:	4770      	bx	lr
 8009e1c:	2000001c 	.word	0x2000001c

08009e20 <__sread>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	460c      	mov	r4, r1
 8009e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e28:	f000 f868 	bl	8009efc <_read_r>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	bfab      	itete	ge
 8009e30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e32:	89a3      	ldrhlt	r3, [r4, #12]
 8009e34:	181b      	addge	r3, r3, r0
 8009e36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e3a:	bfac      	ite	ge
 8009e3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e3e:	81a3      	strhlt	r3, [r4, #12]
 8009e40:	bd10      	pop	{r4, pc}

08009e42 <__swrite>:
 8009e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e46:	461f      	mov	r7, r3
 8009e48:	898b      	ldrh	r3, [r1, #12]
 8009e4a:	05db      	lsls	r3, r3, #23
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	460c      	mov	r4, r1
 8009e50:	4616      	mov	r6, r2
 8009e52:	d505      	bpl.n	8009e60 <__swrite+0x1e>
 8009e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e58:	2302      	movs	r3, #2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f000 f83c 	bl	8009ed8 <_lseek_r>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e6a:	81a3      	strh	r3, [r4, #12]
 8009e6c:	4632      	mov	r2, r6
 8009e6e:	463b      	mov	r3, r7
 8009e70:	4628      	mov	r0, r5
 8009e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e76:	f000 b853 	b.w	8009f20 <_write_r>

08009e7a <__sseek>:
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e82:	f000 f829 	bl	8009ed8 <_lseek_r>
 8009e86:	1c43      	adds	r3, r0, #1
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	bf15      	itete	ne
 8009e8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e96:	81a3      	strheq	r3, [r4, #12]
 8009e98:	bf18      	it	ne
 8009e9a:	81a3      	strhne	r3, [r4, #12]
 8009e9c:	bd10      	pop	{r4, pc}

08009e9e <__sclose>:
 8009e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea2:	f000 b809 	b.w	8009eb8 <_close_r>

08009ea6 <memset>:
 8009ea6:	4402      	add	r2, r0
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d100      	bne.n	8009eb0 <memset+0xa>
 8009eae:	4770      	bx	lr
 8009eb0:	f803 1b01 	strb.w	r1, [r3], #1
 8009eb4:	e7f9      	b.n	8009eaa <memset+0x4>
	...

08009eb8 <_close_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d06      	ldr	r5, [pc, #24]	@ (8009ed4 <_close_r+0x1c>)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	602b      	str	r3, [r5, #0]
 8009ec4:	f7f7 fc48 	bl	8001758 <_close>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d102      	bne.n	8009ed2 <_close_r+0x1a>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	b103      	cbz	r3, 8009ed2 <_close_r+0x1a>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	20002520 	.word	0x20002520

08009ed8 <_lseek_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	@ (8009ef8 <_lseek_r+0x20>)
 8009edc:	4604      	mov	r4, r0
 8009ede:	4608      	mov	r0, r1
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	602a      	str	r2, [r5, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f7f7 fc5d 	bl	80017a6 <_lseek>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_lseek_r+0x1e>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_lseek_r+0x1e>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	20002520 	.word	0x20002520

08009efc <_read_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d07      	ldr	r5, [pc, #28]	@ (8009f1c <_read_r+0x20>)
 8009f00:	4604      	mov	r4, r0
 8009f02:	4608      	mov	r0, r1
 8009f04:	4611      	mov	r1, r2
 8009f06:	2200      	movs	r2, #0
 8009f08:	602a      	str	r2, [r5, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f7f7 fbeb 	bl	80016e6 <_read>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_read_r+0x1e>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_read_r+0x1e>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	20002520 	.word	0x20002520

08009f20 <_write_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	@ (8009f40 <_write_r+0x20>)
 8009f24:	4604      	mov	r4, r0
 8009f26:	4608      	mov	r0, r1
 8009f28:	4611      	mov	r1, r2
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	602a      	str	r2, [r5, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	f7f7 fbf6 	bl	8001720 <_write>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d102      	bne.n	8009f3e <_write_r+0x1e>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	b103      	cbz	r3, 8009f3e <_write_r+0x1e>
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	20002520 	.word	0x20002520

08009f44 <__errno>:
 8009f44:	4b01      	ldr	r3, [pc, #4]	@ (8009f4c <__errno+0x8>)
 8009f46:	6818      	ldr	r0, [r3, #0]
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	2000001c 	.word	0x2000001c

08009f50 <__libc_init_array>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	4d0d      	ldr	r5, [pc, #52]	@ (8009f88 <__libc_init_array+0x38>)
 8009f54:	4c0d      	ldr	r4, [pc, #52]	@ (8009f8c <__libc_init_array+0x3c>)
 8009f56:	1b64      	subs	r4, r4, r5
 8009f58:	10a4      	asrs	r4, r4, #2
 8009f5a:	2600      	movs	r6, #0
 8009f5c:	42a6      	cmp	r6, r4
 8009f5e:	d109      	bne.n	8009f74 <__libc_init_array+0x24>
 8009f60:	4d0b      	ldr	r5, [pc, #44]	@ (8009f90 <__libc_init_array+0x40>)
 8009f62:	4c0c      	ldr	r4, [pc, #48]	@ (8009f94 <__libc_init_array+0x44>)
 8009f64:	f000 fdc6 	bl	800aaf4 <_init>
 8009f68:	1b64      	subs	r4, r4, r5
 8009f6a:	10a4      	asrs	r4, r4, #2
 8009f6c:	2600      	movs	r6, #0
 8009f6e:	42a6      	cmp	r6, r4
 8009f70:	d105      	bne.n	8009f7e <__libc_init_array+0x2e>
 8009f72:	bd70      	pop	{r4, r5, r6, pc}
 8009f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f78:	4798      	blx	r3
 8009f7a:	3601      	adds	r6, #1
 8009f7c:	e7ee      	b.n	8009f5c <__libc_init_array+0xc>
 8009f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f82:	4798      	blx	r3
 8009f84:	3601      	adds	r6, #1
 8009f86:	e7f2      	b.n	8009f6e <__libc_init_array+0x1e>
 8009f88:	0800ac28 	.word	0x0800ac28
 8009f8c:	0800ac28 	.word	0x0800ac28
 8009f90:	0800ac28 	.word	0x0800ac28
 8009f94:	0800ac2c 	.word	0x0800ac2c

08009f98 <__retarget_lock_init_recursive>:
 8009f98:	4770      	bx	lr

08009f9a <__retarget_lock_acquire_recursive>:
 8009f9a:	4770      	bx	lr

08009f9c <__retarget_lock_release_recursive>:
 8009f9c:	4770      	bx	lr

08009f9e <memcpy>:
 8009f9e:	440a      	add	r2, r1
 8009fa0:	4291      	cmp	r1, r2
 8009fa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fa6:	d100      	bne.n	8009faa <memcpy+0xc>
 8009fa8:	4770      	bx	lr
 8009faa:	b510      	push	{r4, lr}
 8009fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fb4:	4291      	cmp	r1, r2
 8009fb6:	d1f9      	bne.n	8009fac <memcpy+0xe>
 8009fb8:	bd10      	pop	{r4, pc}
	...

08009fbc <_free_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	d041      	beq.n	800a048 <_free_r+0x8c>
 8009fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fc8:	1f0c      	subs	r4, r1, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	bfb8      	it	lt
 8009fce:	18e4      	addlt	r4, r4, r3
 8009fd0:	f000 f8e0 	bl	800a194 <__malloc_lock>
 8009fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800a04c <_free_r+0x90>)
 8009fd6:	6813      	ldr	r3, [r2, #0]
 8009fd8:	b933      	cbnz	r3, 8009fe8 <_free_r+0x2c>
 8009fda:	6063      	str	r3, [r4, #4]
 8009fdc:	6014      	str	r4, [r2, #0]
 8009fde:	4628      	mov	r0, r5
 8009fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fe4:	f000 b8dc 	b.w	800a1a0 <__malloc_unlock>
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	d908      	bls.n	8009ffe <_free_r+0x42>
 8009fec:	6820      	ldr	r0, [r4, #0]
 8009fee:	1821      	adds	r1, r4, r0
 8009ff0:	428b      	cmp	r3, r1
 8009ff2:	bf01      	itttt	eq
 8009ff4:	6819      	ldreq	r1, [r3, #0]
 8009ff6:	685b      	ldreq	r3, [r3, #4]
 8009ff8:	1809      	addeq	r1, r1, r0
 8009ffa:	6021      	streq	r1, [r4, #0]
 8009ffc:	e7ed      	b.n	8009fda <_free_r+0x1e>
 8009ffe:	461a      	mov	r2, r3
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	b10b      	cbz	r3, 800a008 <_free_r+0x4c>
 800a004:	42a3      	cmp	r3, r4
 800a006:	d9fa      	bls.n	8009ffe <_free_r+0x42>
 800a008:	6811      	ldr	r1, [r2, #0]
 800a00a:	1850      	adds	r0, r2, r1
 800a00c:	42a0      	cmp	r0, r4
 800a00e:	d10b      	bne.n	800a028 <_free_r+0x6c>
 800a010:	6820      	ldr	r0, [r4, #0]
 800a012:	4401      	add	r1, r0
 800a014:	1850      	adds	r0, r2, r1
 800a016:	4283      	cmp	r3, r0
 800a018:	6011      	str	r1, [r2, #0]
 800a01a:	d1e0      	bne.n	8009fde <_free_r+0x22>
 800a01c:	6818      	ldr	r0, [r3, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	6053      	str	r3, [r2, #4]
 800a022:	4408      	add	r0, r1
 800a024:	6010      	str	r0, [r2, #0]
 800a026:	e7da      	b.n	8009fde <_free_r+0x22>
 800a028:	d902      	bls.n	800a030 <_free_r+0x74>
 800a02a:	230c      	movs	r3, #12
 800a02c:	602b      	str	r3, [r5, #0]
 800a02e:	e7d6      	b.n	8009fde <_free_r+0x22>
 800a030:	6820      	ldr	r0, [r4, #0]
 800a032:	1821      	adds	r1, r4, r0
 800a034:	428b      	cmp	r3, r1
 800a036:	bf04      	itt	eq
 800a038:	6819      	ldreq	r1, [r3, #0]
 800a03a:	685b      	ldreq	r3, [r3, #4]
 800a03c:	6063      	str	r3, [r4, #4]
 800a03e:	bf04      	itt	eq
 800a040:	1809      	addeq	r1, r1, r0
 800a042:	6021      	streq	r1, [r4, #0]
 800a044:	6054      	str	r4, [r2, #4]
 800a046:	e7ca      	b.n	8009fde <_free_r+0x22>
 800a048:	bd38      	pop	{r3, r4, r5, pc}
 800a04a:	bf00      	nop
 800a04c:	2000252c 	.word	0x2000252c

0800a050 <sbrk_aligned>:
 800a050:	b570      	push	{r4, r5, r6, lr}
 800a052:	4e0f      	ldr	r6, [pc, #60]	@ (800a090 <sbrk_aligned+0x40>)
 800a054:	460c      	mov	r4, r1
 800a056:	6831      	ldr	r1, [r6, #0]
 800a058:	4605      	mov	r5, r0
 800a05a:	b911      	cbnz	r1, 800a062 <sbrk_aligned+0x12>
 800a05c:	f000 fcb6 	bl	800a9cc <_sbrk_r>
 800a060:	6030      	str	r0, [r6, #0]
 800a062:	4621      	mov	r1, r4
 800a064:	4628      	mov	r0, r5
 800a066:	f000 fcb1 	bl	800a9cc <_sbrk_r>
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	d103      	bne.n	800a076 <sbrk_aligned+0x26>
 800a06e:	f04f 34ff 	mov.w	r4, #4294967295
 800a072:	4620      	mov	r0, r4
 800a074:	bd70      	pop	{r4, r5, r6, pc}
 800a076:	1cc4      	adds	r4, r0, #3
 800a078:	f024 0403 	bic.w	r4, r4, #3
 800a07c:	42a0      	cmp	r0, r4
 800a07e:	d0f8      	beq.n	800a072 <sbrk_aligned+0x22>
 800a080:	1a21      	subs	r1, r4, r0
 800a082:	4628      	mov	r0, r5
 800a084:	f000 fca2 	bl	800a9cc <_sbrk_r>
 800a088:	3001      	adds	r0, #1
 800a08a:	d1f2      	bne.n	800a072 <sbrk_aligned+0x22>
 800a08c:	e7ef      	b.n	800a06e <sbrk_aligned+0x1e>
 800a08e:	bf00      	nop
 800a090:	20002528 	.word	0x20002528

0800a094 <_malloc_r>:
 800a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a098:	1ccd      	adds	r5, r1, #3
 800a09a:	f025 0503 	bic.w	r5, r5, #3
 800a09e:	3508      	adds	r5, #8
 800a0a0:	2d0c      	cmp	r5, #12
 800a0a2:	bf38      	it	cc
 800a0a4:	250c      	movcc	r5, #12
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	db01      	blt.n	800a0b0 <_malloc_r+0x1c>
 800a0ac:	42a9      	cmp	r1, r5
 800a0ae:	d904      	bls.n	800a0ba <_malloc_r+0x26>
 800a0b0:	230c      	movs	r3, #12
 800a0b2:	6033      	str	r3, [r6, #0]
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a190 <_malloc_r+0xfc>
 800a0be:	f000 f869 	bl	800a194 <__malloc_lock>
 800a0c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0c6:	461c      	mov	r4, r3
 800a0c8:	bb44      	cbnz	r4, 800a11c <_malloc_r+0x88>
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f7ff ffbf 	bl	800a050 <sbrk_aligned>
 800a0d2:	1c43      	adds	r3, r0, #1
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	d158      	bne.n	800a18a <_malloc_r+0xf6>
 800a0d8:	f8d8 4000 	ldr.w	r4, [r8]
 800a0dc:	4627      	mov	r7, r4
 800a0de:	2f00      	cmp	r7, #0
 800a0e0:	d143      	bne.n	800a16a <_malloc_r+0xd6>
 800a0e2:	2c00      	cmp	r4, #0
 800a0e4:	d04b      	beq.n	800a17e <_malloc_r+0xea>
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	eb04 0903 	add.w	r9, r4, r3
 800a0f0:	f000 fc6c 	bl	800a9cc <_sbrk_r>
 800a0f4:	4581      	cmp	r9, r0
 800a0f6:	d142      	bne.n	800a17e <_malloc_r+0xea>
 800a0f8:	6821      	ldr	r1, [r4, #0]
 800a0fa:	1a6d      	subs	r5, r5, r1
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	4630      	mov	r0, r6
 800a100:	f7ff ffa6 	bl	800a050 <sbrk_aligned>
 800a104:	3001      	adds	r0, #1
 800a106:	d03a      	beq.n	800a17e <_malloc_r+0xea>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	442b      	add	r3, r5
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	f8d8 3000 	ldr.w	r3, [r8]
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	bb62      	cbnz	r2, 800a170 <_malloc_r+0xdc>
 800a116:	f8c8 7000 	str.w	r7, [r8]
 800a11a:	e00f      	b.n	800a13c <_malloc_r+0xa8>
 800a11c:	6822      	ldr	r2, [r4, #0]
 800a11e:	1b52      	subs	r2, r2, r5
 800a120:	d420      	bmi.n	800a164 <_malloc_r+0xd0>
 800a122:	2a0b      	cmp	r2, #11
 800a124:	d917      	bls.n	800a156 <_malloc_r+0xc2>
 800a126:	1961      	adds	r1, r4, r5
 800a128:	42a3      	cmp	r3, r4
 800a12a:	6025      	str	r5, [r4, #0]
 800a12c:	bf18      	it	ne
 800a12e:	6059      	strne	r1, [r3, #4]
 800a130:	6863      	ldr	r3, [r4, #4]
 800a132:	bf08      	it	eq
 800a134:	f8c8 1000 	streq.w	r1, [r8]
 800a138:	5162      	str	r2, [r4, r5]
 800a13a:	604b      	str	r3, [r1, #4]
 800a13c:	4630      	mov	r0, r6
 800a13e:	f000 f82f 	bl	800a1a0 <__malloc_unlock>
 800a142:	f104 000b 	add.w	r0, r4, #11
 800a146:	1d23      	adds	r3, r4, #4
 800a148:	f020 0007 	bic.w	r0, r0, #7
 800a14c:	1ac2      	subs	r2, r0, r3
 800a14e:	bf1c      	itt	ne
 800a150:	1a1b      	subne	r3, r3, r0
 800a152:	50a3      	strne	r3, [r4, r2]
 800a154:	e7af      	b.n	800a0b6 <_malloc_r+0x22>
 800a156:	6862      	ldr	r2, [r4, #4]
 800a158:	42a3      	cmp	r3, r4
 800a15a:	bf0c      	ite	eq
 800a15c:	f8c8 2000 	streq.w	r2, [r8]
 800a160:	605a      	strne	r2, [r3, #4]
 800a162:	e7eb      	b.n	800a13c <_malloc_r+0xa8>
 800a164:	4623      	mov	r3, r4
 800a166:	6864      	ldr	r4, [r4, #4]
 800a168:	e7ae      	b.n	800a0c8 <_malloc_r+0x34>
 800a16a:	463c      	mov	r4, r7
 800a16c:	687f      	ldr	r7, [r7, #4]
 800a16e:	e7b6      	b.n	800a0de <_malloc_r+0x4a>
 800a170:	461a      	mov	r2, r3
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	42a3      	cmp	r3, r4
 800a176:	d1fb      	bne.n	800a170 <_malloc_r+0xdc>
 800a178:	2300      	movs	r3, #0
 800a17a:	6053      	str	r3, [r2, #4]
 800a17c:	e7de      	b.n	800a13c <_malloc_r+0xa8>
 800a17e:	230c      	movs	r3, #12
 800a180:	6033      	str	r3, [r6, #0]
 800a182:	4630      	mov	r0, r6
 800a184:	f000 f80c 	bl	800a1a0 <__malloc_unlock>
 800a188:	e794      	b.n	800a0b4 <_malloc_r+0x20>
 800a18a:	6005      	str	r5, [r0, #0]
 800a18c:	e7d6      	b.n	800a13c <_malloc_r+0xa8>
 800a18e:	bf00      	nop
 800a190:	2000252c 	.word	0x2000252c

0800a194 <__malloc_lock>:
 800a194:	4801      	ldr	r0, [pc, #4]	@ (800a19c <__malloc_lock+0x8>)
 800a196:	f7ff bf00 	b.w	8009f9a <__retarget_lock_acquire_recursive>
 800a19a:	bf00      	nop
 800a19c:	20002524 	.word	0x20002524

0800a1a0 <__malloc_unlock>:
 800a1a0:	4801      	ldr	r0, [pc, #4]	@ (800a1a8 <__malloc_unlock+0x8>)
 800a1a2:	f7ff befb 	b.w	8009f9c <__retarget_lock_release_recursive>
 800a1a6:	bf00      	nop
 800a1a8:	20002524 	.word	0x20002524

0800a1ac <__sfputc_r>:
 800a1ac:	6893      	ldr	r3, [r2, #8]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	b410      	push	{r4}
 800a1b4:	6093      	str	r3, [r2, #8]
 800a1b6:	da08      	bge.n	800a1ca <__sfputc_r+0x1e>
 800a1b8:	6994      	ldr	r4, [r2, #24]
 800a1ba:	42a3      	cmp	r3, r4
 800a1bc:	db01      	blt.n	800a1c2 <__sfputc_r+0x16>
 800a1be:	290a      	cmp	r1, #10
 800a1c0:	d103      	bne.n	800a1ca <__sfputc_r+0x1e>
 800a1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c6:	f000 bb6d 	b.w	800a8a4 <__swbuf_r>
 800a1ca:	6813      	ldr	r3, [r2, #0]
 800a1cc:	1c58      	adds	r0, r3, #1
 800a1ce:	6010      	str	r0, [r2, #0]
 800a1d0:	7019      	strb	r1, [r3, #0]
 800a1d2:	4608      	mov	r0, r1
 800a1d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <__sfputs_r>:
 800a1da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1dc:	4606      	mov	r6, r0
 800a1de:	460f      	mov	r7, r1
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	18d5      	adds	r5, r2, r3
 800a1e4:	42ac      	cmp	r4, r5
 800a1e6:	d101      	bne.n	800a1ec <__sfputs_r+0x12>
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	e007      	b.n	800a1fc <__sfputs_r+0x22>
 800a1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f0:	463a      	mov	r2, r7
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f7ff ffda 	bl	800a1ac <__sfputc_r>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d1f3      	bne.n	800a1e4 <__sfputs_r+0xa>
 800a1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a200 <_vfiprintf_r>:
 800a200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a204:	460d      	mov	r5, r1
 800a206:	b09d      	sub	sp, #116	@ 0x74
 800a208:	4614      	mov	r4, r2
 800a20a:	4698      	mov	r8, r3
 800a20c:	4606      	mov	r6, r0
 800a20e:	b118      	cbz	r0, 800a218 <_vfiprintf_r+0x18>
 800a210:	6a03      	ldr	r3, [r0, #32]
 800a212:	b90b      	cbnz	r3, 800a218 <_vfiprintf_r+0x18>
 800a214:	f7ff fdbc 	bl	8009d90 <__sinit>
 800a218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a21a:	07d9      	lsls	r1, r3, #31
 800a21c:	d405      	bmi.n	800a22a <_vfiprintf_r+0x2a>
 800a21e:	89ab      	ldrh	r3, [r5, #12]
 800a220:	059a      	lsls	r2, r3, #22
 800a222:	d402      	bmi.n	800a22a <_vfiprintf_r+0x2a>
 800a224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a226:	f7ff feb8 	bl	8009f9a <__retarget_lock_acquire_recursive>
 800a22a:	89ab      	ldrh	r3, [r5, #12]
 800a22c:	071b      	lsls	r3, r3, #28
 800a22e:	d501      	bpl.n	800a234 <_vfiprintf_r+0x34>
 800a230:	692b      	ldr	r3, [r5, #16]
 800a232:	b99b      	cbnz	r3, 800a25c <_vfiprintf_r+0x5c>
 800a234:	4629      	mov	r1, r5
 800a236:	4630      	mov	r0, r6
 800a238:	f000 fb72 	bl	800a920 <__swsetup_r>
 800a23c:	b170      	cbz	r0, 800a25c <_vfiprintf_r+0x5c>
 800a23e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a240:	07dc      	lsls	r4, r3, #31
 800a242:	d504      	bpl.n	800a24e <_vfiprintf_r+0x4e>
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	b01d      	add	sp, #116	@ 0x74
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	89ab      	ldrh	r3, [r5, #12]
 800a250:	0598      	lsls	r0, r3, #22
 800a252:	d4f7      	bmi.n	800a244 <_vfiprintf_r+0x44>
 800a254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a256:	f7ff fea1 	bl	8009f9c <__retarget_lock_release_recursive>
 800a25a:	e7f3      	b.n	800a244 <_vfiprintf_r+0x44>
 800a25c:	2300      	movs	r3, #0
 800a25e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a260:	2320      	movs	r3, #32
 800a262:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a266:	f8cd 800c 	str.w	r8, [sp, #12]
 800a26a:	2330      	movs	r3, #48	@ 0x30
 800a26c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a41c <_vfiprintf_r+0x21c>
 800a270:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a274:	f04f 0901 	mov.w	r9, #1
 800a278:	4623      	mov	r3, r4
 800a27a:	469a      	mov	sl, r3
 800a27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a280:	b10a      	cbz	r2, 800a286 <_vfiprintf_r+0x86>
 800a282:	2a25      	cmp	r2, #37	@ 0x25
 800a284:	d1f9      	bne.n	800a27a <_vfiprintf_r+0x7a>
 800a286:	ebba 0b04 	subs.w	fp, sl, r4
 800a28a:	d00b      	beq.n	800a2a4 <_vfiprintf_r+0xa4>
 800a28c:	465b      	mov	r3, fp
 800a28e:	4622      	mov	r2, r4
 800a290:	4629      	mov	r1, r5
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ffa1 	bl	800a1da <__sfputs_r>
 800a298:	3001      	adds	r0, #1
 800a29a:	f000 80a7 	beq.w	800a3ec <_vfiprintf_r+0x1ec>
 800a29e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2a0:	445a      	add	r2, fp
 800a2a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 809f 	beq.w	800a3ec <_vfiprintf_r+0x1ec>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2b8:	f10a 0a01 	add.w	sl, sl, #1
 800a2bc:	9304      	str	r3, [sp, #16]
 800a2be:	9307      	str	r3, [sp, #28]
 800a2c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2c6:	4654      	mov	r4, sl
 800a2c8:	2205      	movs	r2, #5
 800a2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ce:	4853      	ldr	r0, [pc, #332]	@ (800a41c <_vfiprintf_r+0x21c>)
 800a2d0:	f7f5 ff7e 	bl	80001d0 <memchr>
 800a2d4:	9a04      	ldr	r2, [sp, #16]
 800a2d6:	b9d8      	cbnz	r0, 800a310 <_vfiprintf_r+0x110>
 800a2d8:	06d1      	lsls	r1, r2, #27
 800a2da:	bf44      	itt	mi
 800a2dc:	2320      	movmi	r3, #32
 800a2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2e2:	0713      	lsls	r3, r2, #28
 800a2e4:	bf44      	itt	mi
 800a2e6:	232b      	movmi	r3, #43	@ 0x2b
 800a2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2f2:	d015      	beq.n	800a320 <_vfiprintf_r+0x120>
 800a2f4:	9a07      	ldr	r2, [sp, #28]
 800a2f6:	4654      	mov	r4, sl
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	f04f 0c0a 	mov.w	ip, #10
 800a2fe:	4621      	mov	r1, r4
 800a300:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a304:	3b30      	subs	r3, #48	@ 0x30
 800a306:	2b09      	cmp	r3, #9
 800a308:	d94b      	bls.n	800a3a2 <_vfiprintf_r+0x1a2>
 800a30a:	b1b0      	cbz	r0, 800a33a <_vfiprintf_r+0x13a>
 800a30c:	9207      	str	r2, [sp, #28]
 800a30e:	e014      	b.n	800a33a <_vfiprintf_r+0x13a>
 800a310:	eba0 0308 	sub.w	r3, r0, r8
 800a314:	fa09 f303 	lsl.w	r3, r9, r3
 800a318:	4313      	orrs	r3, r2
 800a31a:	9304      	str	r3, [sp, #16]
 800a31c:	46a2      	mov	sl, r4
 800a31e:	e7d2      	b.n	800a2c6 <_vfiprintf_r+0xc6>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	1d19      	adds	r1, r3, #4
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	9103      	str	r1, [sp, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bfbb      	ittet	lt
 800a32c:	425b      	neglt	r3, r3
 800a32e:	f042 0202 	orrlt.w	r2, r2, #2
 800a332:	9307      	strge	r3, [sp, #28]
 800a334:	9307      	strlt	r3, [sp, #28]
 800a336:	bfb8      	it	lt
 800a338:	9204      	strlt	r2, [sp, #16]
 800a33a:	7823      	ldrb	r3, [r4, #0]
 800a33c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a33e:	d10a      	bne.n	800a356 <_vfiprintf_r+0x156>
 800a340:	7863      	ldrb	r3, [r4, #1]
 800a342:	2b2a      	cmp	r3, #42	@ 0x2a
 800a344:	d132      	bne.n	800a3ac <_vfiprintf_r+0x1ac>
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	1d1a      	adds	r2, r3, #4
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	9203      	str	r2, [sp, #12]
 800a34e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a352:	3402      	adds	r4, #2
 800a354:	9305      	str	r3, [sp, #20]
 800a356:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a42c <_vfiprintf_r+0x22c>
 800a35a:	7821      	ldrb	r1, [r4, #0]
 800a35c:	2203      	movs	r2, #3
 800a35e:	4650      	mov	r0, sl
 800a360:	f7f5 ff36 	bl	80001d0 <memchr>
 800a364:	b138      	cbz	r0, 800a376 <_vfiprintf_r+0x176>
 800a366:	9b04      	ldr	r3, [sp, #16]
 800a368:	eba0 000a 	sub.w	r0, r0, sl
 800a36c:	2240      	movs	r2, #64	@ 0x40
 800a36e:	4082      	lsls	r2, r0
 800a370:	4313      	orrs	r3, r2
 800a372:	3401      	adds	r4, #1
 800a374:	9304      	str	r3, [sp, #16]
 800a376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a37a:	4829      	ldr	r0, [pc, #164]	@ (800a420 <_vfiprintf_r+0x220>)
 800a37c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a380:	2206      	movs	r2, #6
 800a382:	f7f5 ff25 	bl	80001d0 <memchr>
 800a386:	2800      	cmp	r0, #0
 800a388:	d03f      	beq.n	800a40a <_vfiprintf_r+0x20a>
 800a38a:	4b26      	ldr	r3, [pc, #152]	@ (800a424 <_vfiprintf_r+0x224>)
 800a38c:	bb1b      	cbnz	r3, 800a3d6 <_vfiprintf_r+0x1d6>
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	3307      	adds	r3, #7
 800a392:	f023 0307 	bic.w	r3, r3, #7
 800a396:	3308      	adds	r3, #8
 800a398:	9303      	str	r3, [sp, #12]
 800a39a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a39c:	443b      	add	r3, r7
 800a39e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3a0:	e76a      	b.n	800a278 <_vfiprintf_r+0x78>
 800a3a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	e7a8      	b.n	800a2fe <_vfiprintf_r+0xfe>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	3401      	adds	r4, #1
 800a3b0:	9305      	str	r3, [sp, #20]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	f04f 0c0a 	mov.w	ip, #10
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3be:	3a30      	subs	r2, #48	@ 0x30
 800a3c0:	2a09      	cmp	r2, #9
 800a3c2:	d903      	bls.n	800a3cc <_vfiprintf_r+0x1cc>
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d0c6      	beq.n	800a356 <_vfiprintf_r+0x156>
 800a3c8:	9105      	str	r1, [sp, #20]
 800a3ca:	e7c4      	b.n	800a356 <_vfiprintf_r+0x156>
 800a3cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e7f0      	b.n	800a3b8 <_vfiprintf_r+0x1b8>
 800a3d6:	ab03      	add	r3, sp, #12
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	462a      	mov	r2, r5
 800a3dc:	4b12      	ldr	r3, [pc, #72]	@ (800a428 <_vfiprintf_r+0x228>)
 800a3de:	a904      	add	r1, sp, #16
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f3af 8000 	nop.w
 800a3e6:	4607      	mov	r7, r0
 800a3e8:	1c78      	adds	r0, r7, #1
 800a3ea:	d1d6      	bne.n	800a39a <_vfiprintf_r+0x19a>
 800a3ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3ee:	07d9      	lsls	r1, r3, #31
 800a3f0:	d405      	bmi.n	800a3fe <_vfiprintf_r+0x1fe>
 800a3f2:	89ab      	ldrh	r3, [r5, #12]
 800a3f4:	059a      	lsls	r2, r3, #22
 800a3f6:	d402      	bmi.n	800a3fe <_vfiprintf_r+0x1fe>
 800a3f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3fa:	f7ff fdcf 	bl	8009f9c <__retarget_lock_release_recursive>
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	065b      	lsls	r3, r3, #25
 800a402:	f53f af1f 	bmi.w	800a244 <_vfiprintf_r+0x44>
 800a406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a408:	e71e      	b.n	800a248 <_vfiprintf_r+0x48>
 800a40a:	ab03      	add	r3, sp, #12
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	462a      	mov	r2, r5
 800a410:	4b05      	ldr	r3, [pc, #20]	@ (800a428 <_vfiprintf_r+0x228>)
 800a412:	a904      	add	r1, sp, #16
 800a414:	4630      	mov	r0, r6
 800a416:	f000 f879 	bl	800a50c <_printf_i>
 800a41a:	e7e4      	b.n	800a3e6 <_vfiprintf_r+0x1e6>
 800a41c:	0800abec 	.word	0x0800abec
 800a420:	0800abf6 	.word	0x0800abf6
 800a424:	00000000 	.word	0x00000000
 800a428:	0800a1db 	.word	0x0800a1db
 800a42c:	0800abf2 	.word	0x0800abf2

0800a430 <_printf_common>:
 800a430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	4616      	mov	r6, r2
 800a436:	4698      	mov	r8, r3
 800a438:	688a      	ldr	r2, [r1, #8]
 800a43a:	690b      	ldr	r3, [r1, #16]
 800a43c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a440:	4293      	cmp	r3, r2
 800a442:	bfb8      	it	lt
 800a444:	4613      	movlt	r3, r2
 800a446:	6033      	str	r3, [r6, #0]
 800a448:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a44c:	4607      	mov	r7, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	b10a      	cbz	r2, 800a456 <_printf_common+0x26>
 800a452:	3301      	adds	r3, #1
 800a454:	6033      	str	r3, [r6, #0]
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	0699      	lsls	r1, r3, #26
 800a45a:	bf42      	ittt	mi
 800a45c:	6833      	ldrmi	r3, [r6, #0]
 800a45e:	3302      	addmi	r3, #2
 800a460:	6033      	strmi	r3, [r6, #0]
 800a462:	6825      	ldr	r5, [r4, #0]
 800a464:	f015 0506 	ands.w	r5, r5, #6
 800a468:	d106      	bne.n	800a478 <_printf_common+0x48>
 800a46a:	f104 0a19 	add.w	sl, r4, #25
 800a46e:	68e3      	ldr	r3, [r4, #12]
 800a470:	6832      	ldr	r2, [r6, #0]
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	42ab      	cmp	r3, r5
 800a476:	dc26      	bgt.n	800a4c6 <_printf_common+0x96>
 800a478:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a47c:	6822      	ldr	r2, [r4, #0]
 800a47e:	3b00      	subs	r3, #0
 800a480:	bf18      	it	ne
 800a482:	2301      	movne	r3, #1
 800a484:	0692      	lsls	r2, r2, #26
 800a486:	d42b      	bmi.n	800a4e0 <_printf_common+0xb0>
 800a488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a48c:	4641      	mov	r1, r8
 800a48e:	4638      	mov	r0, r7
 800a490:	47c8      	blx	r9
 800a492:	3001      	adds	r0, #1
 800a494:	d01e      	beq.n	800a4d4 <_printf_common+0xa4>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	6922      	ldr	r2, [r4, #16]
 800a49a:	f003 0306 	and.w	r3, r3, #6
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	bf02      	ittt	eq
 800a4a2:	68e5      	ldreq	r5, [r4, #12]
 800a4a4:	6833      	ldreq	r3, [r6, #0]
 800a4a6:	1aed      	subeq	r5, r5, r3
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	bf0c      	ite	eq
 800a4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4b0:	2500      	movne	r5, #0
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	bfc4      	itt	gt
 800a4b6:	1a9b      	subgt	r3, r3, r2
 800a4b8:	18ed      	addgt	r5, r5, r3
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	341a      	adds	r4, #26
 800a4be:	42b5      	cmp	r5, r6
 800a4c0:	d11a      	bne.n	800a4f8 <_printf_common+0xc8>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e008      	b.n	800a4d8 <_printf_common+0xa8>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	47c8      	blx	r9
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d103      	bne.n	800a4dc <_printf_common+0xac>
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4dc:	3501      	adds	r5, #1
 800a4de:	e7c6      	b.n	800a46e <_printf_common+0x3e>
 800a4e0:	18e1      	adds	r1, r4, r3
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	2030      	movs	r0, #48	@ 0x30
 800a4e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4ea:	4422      	add	r2, r4
 800a4ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4f4:	3302      	adds	r3, #2
 800a4f6:	e7c7      	b.n	800a488 <_printf_common+0x58>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	4641      	mov	r1, r8
 800a4fe:	4638      	mov	r0, r7
 800a500:	47c8      	blx	r9
 800a502:	3001      	adds	r0, #1
 800a504:	d0e6      	beq.n	800a4d4 <_printf_common+0xa4>
 800a506:	3601      	adds	r6, #1
 800a508:	e7d9      	b.n	800a4be <_printf_common+0x8e>
	...

0800a50c <_printf_i>:
 800a50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a510:	7e0f      	ldrb	r7, [r1, #24]
 800a512:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a514:	2f78      	cmp	r7, #120	@ 0x78
 800a516:	4691      	mov	r9, r2
 800a518:	4680      	mov	r8, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	469a      	mov	sl, r3
 800a51e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a522:	d807      	bhi.n	800a534 <_printf_i+0x28>
 800a524:	2f62      	cmp	r7, #98	@ 0x62
 800a526:	d80a      	bhi.n	800a53e <_printf_i+0x32>
 800a528:	2f00      	cmp	r7, #0
 800a52a:	f000 80d2 	beq.w	800a6d2 <_printf_i+0x1c6>
 800a52e:	2f58      	cmp	r7, #88	@ 0x58
 800a530:	f000 80b9 	beq.w	800a6a6 <_printf_i+0x19a>
 800a534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a53c:	e03a      	b.n	800a5b4 <_printf_i+0xa8>
 800a53e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a542:	2b15      	cmp	r3, #21
 800a544:	d8f6      	bhi.n	800a534 <_printf_i+0x28>
 800a546:	a101      	add	r1, pc, #4	@ (adr r1, 800a54c <_printf_i+0x40>)
 800a548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a54c:	0800a5a5 	.word	0x0800a5a5
 800a550:	0800a5b9 	.word	0x0800a5b9
 800a554:	0800a535 	.word	0x0800a535
 800a558:	0800a535 	.word	0x0800a535
 800a55c:	0800a535 	.word	0x0800a535
 800a560:	0800a535 	.word	0x0800a535
 800a564:	0800a5b9 	.word	0x0800a5b9
 800a568:	0800a535 	.word	0x0800a535
 800a56c:	0800a535 	.word	0x0800a535
 800a570:	0800a535 	.word	0x0800a535
 800a574:	0800a535 	.word	0x0800a535
 800a578:	0800a6b9 	.word	0x0800a6b9
 800a57c:	0800a5e3 	.word	0x0800a5e3
 800a580:	0800a673 	.word	0x0800a673
 800a584:	0800a535 	.word	0x0800a535
 800a588:	0800a535 	.word	0x0800a535
 800a58c:	0800a6db 	.word	0x0800a6db
 800a590:	0800a535 	.word	0x0800a535
 800a594:	0800a5e3 	.word	0x0800a5e3
 800a598:	0800a535 	.word	0x0800a535
 800a59c:	0800a535 	.word	0x0800a535
 800a5a0:	0800a67b 	.word	0x0800a67b
 800a5a4:	6833      	ldr	r3, [r6, #0]
 800a5a6:	1d1a      	adds	r2, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6032      	str	r2, [r6, #0]
 800a5ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e09d      	b.n	800a6f4 <_printf_i+0x1e8>
 800a5b8:	6833      	ldr	r3, [r6, #0]
 800a5ba:	6820      	ldr	r0, [r4, #0]
 800a5bc:	1d19      	adds	r1, r3, #4
 800a5be:	6031      	str	r1, [r6, #0]
 800a5c0:	0606      	lsls	r6, r0, #24
 800a5c2:	d501      	bpl.n	800a5c8 <_printf_i+0xbc>
 800a5c4:	681d      	ldr	r5, [r3, #0]
 800a5c6:	e003      	b.n	800a5d0 <_printf_i+0xc4>
 800a5c8:	0645      	lsls	r5, r0, #25
 800a5ca:	d5fb      	bpl.n	800a5c4 <_printf_i+0xb8>
 800a5cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	da03      	bge.n	800a5dc <_printf_i+0xd0>
 800a5d4:	232d      	movs	r3, #45	@ 0x2d
 800a5d6:	426d      	negs	r5, r5
 800a5d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5dc:	4859      	ldr	r0, [pc, #356]	@ (800a744 <_printf_i+0x238>)
 800a5de:	230a      	movs	r3, #10
 800a5e0:	e011      	b.n	800a606 <_printf_i+0xfa>
 800a5e2:	6821      	ldr	r1, [r4, #0]
 800a5e4:	6833      	ldr	r3, [r6, #0]
 800a5e6:	0608      	lsls	r0, r1, #24
 800a5e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5ec:	d402      	bmi.n	800a5f4 <_printf_i+0xe8>
 800a5ee:	0649      	lsls	r1, r1, #25
 800a5f0:	bf48      	it	mi
 800a5f2:	b2ad      	uxthmi	r5, r5
 800a5f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5f6:	4853      	ldr	r0, [pc, #332]	@ (800a744 <_printf_i+0x238>)
 800a5f8:	6033      	str	r3, [r6, #0]
 800a5fa:	bf14      	ite	ne
 800a5fc:	230a      	movne	r3, #10
 800a5fe:	2308      	moveq	r3, #8
 800a600:	2100      	movs	r1, #0
 800a602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a606:	6866      	ldr	r6, [r4, #4]
 800a608:	60a6      	str	r6, [r4, #8]
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	bfa2      	ittt	ge
 800a60e:	6821      	ldrge	r1, [r4, #0]
 800a610:	f021 0104 	bicge.w	r1, r1, #4
 800a614:	6021      	strge	r1, [r4, #0]
 800a616:	b90d      	cbnz	r5, 800a61c <_printf_i+0x110>
 800a618:	2e00      	cmp	r6, #0
 800a61a:	d04b      	beq.n	800a6b4 <_printf_i+0x1a8>
 800a61c:	4616      	mov	r6, r2
 800a61e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a622:	fb03 5711 	mls	r7, r3, r1, r5
 800a626:	5dc7      	ldrb	r7, [r0, r7]
 800a628:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a62c:	462f      	mov	r7, r5
 800a62e:	42bb      	cmp	r3, r7
 800a630:	460d      	mov	r5, r1
 800a632:	d9f4      	bls.n	800a61e <_printf_i+0x112>
 800a634:	2b08      	cmp	r3, #8
 800a636:	d10b      	bne.n	800a650 <_printf_i+0x144>
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	07df      	lsls	r7, r3, #31
 800a63c:	d508      	bpl.n	800a650 <_printf_i+0x144>
 800a63e:	6923      	ldr	r3, [r4, #16]
 800a640:	6861      	ldr	r1, [r4, #4]
 800a642:	4299      	cmp	r1, r3
 800a644:	bfde      	ittt	le
 800a646:	2330      	movle	r3, #48	@ 0x30
 800a648:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a64c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a650:	1b92      	subs	r2, r2, r6
 800a652:	6122      	str	r2, [r4, #16]
 800a654:	f8cd a000 	str.w	sl, [sp]
 800a658:	464b      	mov	r3, r9
 800a65a:	aa03      	add	r2, sp, #12
 800a65c:	4621      	mov	r1, r4
 800a65e:	4640      	mov	r0, r8
 800a660:	f7ff fee6 	bl	800a430 <_printf_common>
 800a664:	3001      	adds	r0, #1
 800a666:	d14a      	bne.n	800a6fe <_printf_i+0x1f2>
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	b004      	add	sp, #16
 800a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	f043 0320 	orr.w	r3, r3, #32
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	4833      	ldr	r0, [pc, #204]	@ (800a748 <_printf_i+0x23c>)
 800a67c:	2778      	movs	r7, #120	@ 0x78
 800a67e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	6831      	ldr	r1, [r6, #0]
 800a686:	061f      	lsls	r7, r3, #24
 800a688:	f851 5b04 	ldr.w	r5, [r1], #4
 800a68c:	d402      	bmi.n	800a694 <_printf_i+0x188>
 800a68e:	065f      	lsls	r7, r3, #25
 800a690:	bf48      	it	mi
 800a692:	b2ad      	uxthmi	r5, r5
 800a694:	6031      	str	r1, [r6, #0]
 800a696:	07d9      	lsls	r1, r3, #31
 800a698:	bf44      	itt	mi
 800a69a:	f043 0320 	orrmi.w	r3, r3, #32
 800a69e:	6023      	strmi	r3, [r4, #0]
 800a6a0:	b11d      	cbz	r5, 800a6aa <_printf_i+0x19e>
 800a6a2:	2310      	movs	r3, #16
 800a6a4:	e7ac      	b.n	800a600 <_printf_i+0xf4>
 800a6a6:	4827      	ldr	r0, [pc, #156]	@ (800a744 <_printf_i+0x238>)
 800a6a8:	e7e9      	b.n	800a67e <_printf_i+0x172>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	f023 0320 	bic.w	r3, r3, #32
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	e7f6      	b.n	800a6a2 <_printf_i+0x196>
 800a6b4:	4616      	mov	r6, r2
 800a6b6:	e7bd      	b.n	800a634 <_printf_i+0x128>
 800a6b8:	6833      	ldr	r3, [r6, #0]
 800a6ba:	6825      	ldr	r5, [r4, #0]
 800a6bc:	6961      	ldr	r1, [r4, #20]
 800a6be:	1d18      	adds	r0, r3, #4
 800a6c0:	6030      	str	r0, [r6, #0]
 800a6c2:	062e      	lsls	r6, r5, #24
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	d501      	bpl.n	800a6cc <_printf_i+0x1c0>
 800a6c8:	6019      	str	r1, [r3, #0]
 800a6ca:	e002      	b.n	800a6d2 <_printf_i+0x1c6>
 800a6cc:	0668      	lsls	r0, r5, #25
 800a6ce:	d5fb      	bpl.n	800a6c8 <_printf_i+0x1bc>
 800a6d0:	8019      	strh	r1, [r3, #0]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6123      	str	r3, [r4, #16]
 800a6d6:	4616      	mov	r6, r2
 800a6d8:	e7bc      	b.n	800a654 <_printf_i+0x148>
 800a6da:	6833      	ldr	r3, [r6, #0]
 800a6dc:	1d1a      	adds	r2, r3, #4
 800a6de:	6032      	str	r2, [r6, #0]
 800a6e0:	681e      	ldr	r6, [r3, #0]
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7f5 fd72 	bl	80001d0 <memchr>
 800a6ec:	b108      	cbz	r0, 800a6f2 <_printf_i+0x1e6>
 800a6ee:	1b80      	subs	r0, r0, r6
 800a6f0:	6060      	str	r0, [r4, #4]
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6fc:	e7aa      	b.n	800a654 <_printf_i+0x148>
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	4632      	mov	r2, r6
 800a702:	4649      	mov	r1, r9
 800a704:	4640      	mov	r0, r8
 800a706:	47d0      	blx	sl
 800a708:	3001      	adds	r0, #1
 800a70a:	d0ad      	beq.n	800a668 <_printf_i+0x15c>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	079b      	lsls	r3, r3, #30
 800a710:	d413      	bmi.n	800a73a <_printf_i+0x22e>
 800a712:	68e0      	ldr	r0, [r4, #12]
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	4298      	cmp	r0, r3
 800a718:	bfb8      	it	lt
 800a71a:	4618      	movlt	r0, r3
 800a71c:	e7a6      	b.n	800a66c <_printf_i+0x160>
 800a71e:	2301      	movs	r3, #1
 800a720:	4632      	mov	r2, r6
 800a722:	4649      	mov	r1, r9
 800a724:	4640      	mov	r0, r8
 800a726:	47d0      	blx	sl
 800a728:	3001      	adds	r0, #1
 800a72a:	d09d      	beq.n	800a668 <_printf_i+0x15c>
 800a72c:	3501      	adds	r5, #1
 800a72e:	68e3      	ldr	r3, [r4, #12]
 800a730:	9903      	ldr	r1, [sp, #12]
 800a732:	1a5b      	subs	r3, r3, r1
 800a734:	42ab      	cmp	r3, r5
 800a736:	dcf2      	bgt.n	800a71e <_printf_i+0x212>
 800a738:	e7eb      	b.n	800a712 <_printf_i+0x206>
 800a73a:	2500      	movs	r5, #0
 800a73c:	f104 0619 	add.w	r6, r4, #25
 800a740:	e7f5      	b.n	800a72e <_printf_i+0x222>
 800a742:	bf00      	nop
 800a744:	0800abfd 	.word	0x0800abfd
 800a748:	0800ac0e 	.word	0x0800ac0e

0800a74c <__sflush_r>:
 800a74c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a754:	0716      	lsls	r6, r2, #28
 800a756:	4605      	mov	r5, r0
 800a758:	460c      	mov	r4, r1
 800a75a:	d454      	bmi.n	800a806 <__sflush_r+0xba>
 800a75c:	684b      	ldr	r3, [r1, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	dc02      	bgt.n	800a768 <__sflush_r+0x1c>
 800a762:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	dd48      	ble.n	800a7fa <__sflush_r+0xae>
 800a768:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	d045      	beq.n	800a7fa <__sflush_r+0xae>
 800a76e:	2300      	movs	r3, #0
 800a770:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a774:	682f      	ldr	r7, [r5, #0]
 800a776:	6a21      	ldr	r1, [r4, #32]
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	d030      	beq.n	800a7de <__sflush_r+0x92>
 800a77c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	0759      	lsls	r1, r3, #29
 800a782:	d505      	bpl.n	800a790 <__sflush_r+0x44>
 800a784:	6863      	ldr	r3, [r4, #4]
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a78a:	b10b      	cbz	r3, 800a790 <__sflush_r+0x44>
 800a78c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	2300      	movs	r3, #0
 800a792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a794:	6a21      	ldr	r1, [r4, #32]
 800a796:	4628      	mov	r0, r5
 800a798:	47b0      	blx	r6
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	d106      	bne.n	800a7ae <__sflush_r+0x62>
 800a7a0:	6829      	ldr	r1, [r5, #0]
 800a7a2:	291d      	cmp	r1, #29
 800a7a4:	d82b      	bhi.n	800a7fe <__sflush_r+0xb2>
 800a7a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a850 <__sflush_r+0x104>)
 800a7a8:	410a      	asrs	r2, r1
 800a7aa:	07d6      	lsls	r6, r2, #31
 800a7ac:	d427      	bmi.n	800a7fe <__sflush_r+0xb2>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	6062      	str	r2, [r4, #4]
 800a7b2:	04d9      	lsls	r1, r3, #19
 800a7b4:	6922      	ldr	r2, [r4, #16]
 800a7b6:	6022      	str	r2, [r4, #0]
 800a7b8:	d504      	bpl.n	800a7c4 <__sflush_r+0x78>
 800a7ba:	1c42      	adds	r2, r0, #1
 800a7bc:	d101      	bne.n	800a7c2 <__sflush_r+0x76>
 800a7be:	682b      	ldr	r3, [r5, #0]
 800a7c0:	b903      	cbnz	r3, 800a7c4 <__sflush_r+0x78>
 800a7c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7c6:	602f      	str	r7, [r5, #0]
 800a7c8:	b1b9      	cbz	r1, 800a7fa <__sflush_r+0xae>
 800a7ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	d002      	beq.n	800a7d8 <__sflush_r+0x8c>
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f7ff fbf2 	bl	8009fbc <_free_r>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7dc:	e00d      	b.n	800a7fa <__sflush_r+0xae>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	47b0      	blx	r6
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	1c50      	adds	r0, r2, #1
 800a7e8:	d1c9      	bne.n	800a77e <__sflush_r+0x32>
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d0c6      	beq.n	800a77e <__sflush_r+0x32>
 800a7f0:	2b1d      	cmp	r3, #29
 800a7f2:	d001      	beq.n	800a7f8 <__sflush_r+0xac>
 800a7f4:	2b16      	cmp	r3, #22
 800a7f6:	d11e      	bne.n	800a836 <__sflush_r+0xea>
 800a7f8:	602f      	str	r7, [r5, #0]
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	e022      	b.n	800a844 <__sflush_r+0xf8>
 800a7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a802:	b21b      	sxth	r3, r3
 800a804:	e01b      	b.n	800a83e <__sflush_r+0xf2>
 800a806:	690f      	ldr	r7, [r1, #16]
 800a808:	2f00      	cmp	r7, #0
 800a80a:	d0f6      	beq.n	800a7fa <__sflush_r+0xae>
 800a80c:	0793      	lsls	r3, r2, #30
 800a80e:	680e      	ldr	r6, [r1, #0]
 800a810:	bf08      	it	eq
 800a812:	694b      	ldreq	r3, [r1, #20]
 800a814:	600f      	str	r7, [r1, #0]
 800a816:	bf18      	it	ne
 800a818:	2300      	movne	r3, #0
 800a81a:	eba6 0807 	sub.w	r8, r6, r7
 800a81e:	608b      	str	r3, [r1, #8]
 800a820:	f1b8 0f00 	cmp.w	r8, #0
 800a824:	dde9      	ble.n	800a7fa <__sflush_r+0xae>
 800a826:	6a21      	ldr	r1, [r4, #32]
 800a828:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a82a:	4643      	mov	r3, r8
 800a82c:	463a      	mov	r2, r7
 800a82e:	4628      	mov	r0, r5
 800a830:	47b0      	blx	r6
 800a832:	2800      	cmp	r0, #0
 800a834:	dc08      	bgt.n	800a848 <__sflush_r+0xfc>
 800a836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a83a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a848:	4407      	add	r7, r0
 800a84a:	eba8 0800 	sub.w	r8, r8, r0
 800a84e:	e7e7      	b.n	800a820 <__sflush_r+0xd4>
 800a850:	dfbffffe 	.word	0xdfbffffe

0800a854 <_fflush_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	690b      	ldr	r3, [r1, #16]
 800a858:	4605      	mov	r5, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	b913      	cbnz	r3, 800a864 <_fflush_r+0x10>
 800a85e:	2500      	movs	r5, #0
 800a860:	4628      	mov	r0, r5
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	b118      	cbz	r0, 800a86e <_fflush_r+0x1a>
 800a866:	6a03      	ldr	r3, [r0, #32]
 800a868:	b90b      	cbnz	r3, 800a86e <_fflush_r+0x1a>
 800a86a:	f7ff fa91 	bl	8009d90 <__sinit>
 800a86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0f3      	beq.n	800a85e <_fflush_r+0xa>
 800a876:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a878:	07d0      	lsls	r0, r2, #31
 800a87a:	d404      	bmi.n	800a886 <_fflush_r+0x32>
 800a87c:	0599      	lsls	r1, r3, #22
 800a87e:	d402      	bmi.n	800a886 <_fflush_r+0x32>
 800a880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a882:	f7ff fb8a 	bl	8009f9a <__retarget_lock_acquire_recursive>
 800a886:	4628      	mov	r0, r5
 800a888:	4621      	mov	r1, r4
 800a88a:	f7ff ff5f 	bl	800a74c <__sflush_r>
 800a88e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a890:	07da      	lsls	r2, r3, #31
 800a892:	4605      	mov	r5, r0
 800a894:	d4e4      	bmi.n	800a860 <_fflush_r+0xc>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	059b      	lsls	r3, r3, #22
 800a89a:	d4e1      	bmi.n	800a860 <_fflush_r+0xc>
 800a89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a89e:	f7ff fb7d 	bl	8009f9c <__retarget_lock_release_recursive>
 800a8a2:	e7dd      	b.n	800a860 <_fflush_r+0xc>

0800a8a4 <__swbuf_r>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	460e      	mov	r6, r1
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	b118      	cbz	r0, 800a8b6 <__swbuf_r+0x12>
 800a8ae:	6a03      	ldr	r3, [r0, #32]
 800a8b0:	b90b      	cbnz	r3, 800a8b6 <__swbuf_r+0x12>
 800a8b2:	f7ff fa6d 	bl	8009d90 <__sinit>
 800a8b6:	69a3      	ldr	r3, [r4, #24]
 800a8b8:	60a3      	str	r3, [r4, #8]
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	071a      	lsls	r2, r3, #28
 800a8be:	d501      	bpl.n	800a8c4 <__swbuf_r+0x20>
 800a8c0:	6923      	ldr	r3, [r4, #16]
 800a8c2:	b943      	cbnz	r3, 800a8d6 <__swbuf_r+0x32>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f000 f82a 	bl	800a920 <__swsetup_r>
 800a8cc:	b118      	cbz	r0, 800a8d6 <__swbuf_r+0x32>
 800a8ce:	f04f 37ff 	mov.w	r7, #4294967295
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	6922      	ldr	r2, [r4, #16]
 800a8da:	1a98      	subs	r0, r3, r2
 800a8dc:	6963      	ldr	r3, [r4, #20]
 800a8de:	b2f6      	uxtb	r6, r6
 800a8e0:	4283      	cmp	r3, r0
 800a8e2:	4637      	mov	r7, r6
 800a8e4:	dc05      	bgt.n	800a8f2 <__swbuf_r+0x4e>
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f7ff ffb3 	bl	800a854 <_fflush_r>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d1ed      	bne.n	800a8ce <__swbuf_r+0x2a>
 800a8f2:	68a3      	ldr	r3, [r4, #8]
 800a8f4:	3b01      	subs	r3, #1
 800a8f6:	60a3      	str	r3, [r4, #8]
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	6022      	str	r2, [r4, #0]
 800a8fe:	701e      	strb	r6, [r3, #0]
 800a900:	6962      	ldr	r2, [r4, #20]
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	429a      	cmp	r2, r3
 800a906:	d004      	beq.n	800a912 <__swbuf_r+0x6e>
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	07db      	lsls	r3, r3, #31
 800a90c:	d5e1      	bpl.n	800a8d2 <__swbuf_r+0x2e>
 800a90e:	2e0a      	cmp	r6, #10
 800a910:	d1df      	bne.n	800a8d2 <__swbuf_r+0x2e>
 800a912:	4621      	mov	r1, r4
 800a914:	4628      	mov	r0, r5
 800a916:	f7ff ff9d 	bl	800a854 <_fflush_r>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d0d9      	beq.n	800a8d2 <__swbuf_r+0x2e>
 800a91e:	e7d6      	b.n	800a8ce <__swbuf_r+0x2a>

0800a920 <__swsetup_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4b29      	ldr	r3, [pc, #164]	@ (800a9c8 <__swsetup_r+0xa8>)
 800a924:	4605      	mov	r5, r0
 800a926:	6818      	ldr	r0, [r3, #0]
 800a928:	460c      	mov	r4, r1
 800a92a:	b118      	cbz	r0, 800a934 <__swsetup_r+0x14>
 800a92c:	6a03      	ldr	r3, [r0, #32]
 800a92e:	b90b      	cbnz	r3, 800a934 <__swsetup_r+0x14>
 800a930:	f7ff fa2e 	bl	8009d90 <__sinit>
 800a934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a938:	0719      	lsls	r1, r3, #28
 800a93a:	d422      	bmi.n	800a982 <__swsetup_r+0x62>
 800a93c:	06da      	lsls	r2, r3, #27
 800a93e:	d407      	bmi.n	800a950 <__swsetup_r+0x30>
 800a940:	2209      	movs	r2, #9
 800a942:	602a      	str	r2, [r5, #0]
 800a944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	f04f 30ff 	mov.w	r0, #4294967295
 800a94e:	e033      	b.n	800a9b8 <__swsetup_r+0x98>
 800a950:	0758      	lsls	r0, r3, #29
 800a952:	d512      	bpl.n	800a97a <__swsetup_r+0x5a>
 800a954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a956:	b141      	cbz	r1, 800a96a <__swsetup_r+0x4a>
 800a958:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a95c:	4299      	cmp	r1, r3
 800a95e:	d002      	beq.n	800a966 <__swsetup_r+0x46>
 800a960:	4628      	mov	r0, r5
 800a962:	f7ff fb2b 	bl	8009fbc <_free_r>
 800a966:	2300      	movs	r3, #0
 800a968:	6363      	str	r3, [r4, #52]	@ 0x34
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a970:	81a3      	strh	r3, [r4, #12]
 800a972:	2300      	movs	r3, #0
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	f043 0308 	orr.w	r3, r3, #8
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	6923      	ldr	r3, [r4, #16]
 800a984:	b94b      	cbnz	r3, 800a99a <__swsetup_r+0x7a>
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a98c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a990:	d003      	beq.n	800a99a <__swsetup_r+0x7a>
 800a992:	4621      	mov	r1, r4
 800a994:	4628      	mov	r0, r5
 800a996:	f000 f84f 	bl	800aa38 <__smakebuf_r>
 800a99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a99e:	f013 0201 	ands.w	r2, r3, #1
 800a9a2:	d00a      	beq.n	800a9ba <__swsetup_r+0x9a>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	60a2      	str	r2, [r4, #8]
 800a9a8:	6962      	ldr	r2, [r4, #20]
 800a9aa:	4252      	negs	r2, r2
 800a9ac:	61a2      	str	r2, [r4, #24]
 800a9ae:	6922      	ldr	r2, [r4, #16]
 800a9b0:	b942      	cbnz	r2, 800a9c4 <__swsetup_r+0xa4>
 800a9b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9b6:	d1c5      	bne.n	800a944 <__swsetup_r+0x24>
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ba:	0799      	lsls	r1, r3, #30
 800a9bc:	bf58      	it	pl
 800a9be:	6962      	ldrpl	r2, [r4, #20]
 800a9c0:	60a2      	str	r2, [r4, #8]
 800a9c2:	e7f4      	b.n	800a9ae <__swsetup_r+0x8e>
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	e7f7      	b.n	800a9b8 <__swsetup_r+0x98>
 800a9c8:	2000001c 	.word	0x2000001c

0800a9cc <_sbrk_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4d06      	ldr	r5, [pc, #24]	@ (800a9e8 <_sbrk_r+0x1c>)
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	602b      	str	r3, [r5, #0]
 800a9d8:	f7f6 fef2 	bl	80017c0 <_sbrk>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_sbrk_r+0x1a>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_sbrk_r+0x1a>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	20002520 	.word	0x20002520

0800a9ec <__swhatbuf_r>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f4:	2900      	cmp	r1, #0
 800a9f6:	b096      	sub	sp, #88	@ 0x58
 800a9f8:	4615      	mov	r5, r2
 800a9fa:	461e      	mov	r6, r3
 800a9fc:	da0d      	bge.n	800aa1a <__swhatbuf_r+0x2e>
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa04:	f04f 0100 	mov.w	r1, #0
 800aa08:	bf14      	ite	ne
 800aa0a:	2340      	movne	r3, #64	@ 0x40
 800aa0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa10:	2000      	movs	r0, #0
 800aa12:	6031      	str	r1, [r6, #0]
 800aa14:	602b      	str	r3, [r5, #0]
 800aa16:	b016      	add	sp, #88	@ 0x58
 800aa18:	bd70      	pop	{r4, r5, r6, pc}
 800aa1a:	466a      	mov	r2, sp
 800aa1c:	f000 f848 	bl	800aab0 <_fstat_r>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	dbec      	blt.n	800a9fe <__swhatbuf_r+0x12>
 800aa24:	9901      	ldr	r1, [sp, #4]
 800aa26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa2e:	4259      	negs	r1, r3
 800aa30:	4159      	adcs	r1, r3
 800aa32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa36:	e7eb      	b.n	800aa10 <__swhatbuf_r+0x24>

0800aa38 <__smakebuf_r>:
 800aa38:	898b      	ldrh	r3, [r1, #12]
 800aa3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa3c:	079d      	lsls	r5, r3, #30
 800aa3e:	4606      	mov	r6, r0
 800aa40:	460c      	mov	r4, r1
 800aa42:	d507      	bpl.n	800aa54 <__smakebuf_r+0x1c>
 800aa44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	6123      	str	r3, [r4, #16]
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	6163      	str	r3, [r4, #20]
 800aa50:	b003      	add	sp, #12
 800aa52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa54:	ab01      	add	r3, sp, #4
 800aa56:	466a      	mov	r2, sp
 800aa58:	f7ff ffc8 	bl	800a9ec <__swhatbuf_r>
 800aa5c:	9f00      	ldr	r7, [sp, #0]
 800aa5e:	4605      	mov	r5, r0
 800aa60:	4639      	mov	r1, r7
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff fb16 	bl	800a094 <_malloc_r>
 800aa68:	b948      	cbnz	r0, 800aa7e <__smakebuf_r+0x46>
 800aa6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa6e:	059a      	lsls	r2, r3, #22
 800aa70:	d4ee      	bmi.n	800aa50 <__smakebuf_r+0x18>
 800aa72:	f023 0303 	bic.w	r3, r3, #3
 800aa76:	f043 0302 	orr.w	r3, r3, #2
 800aa7a:	81a3      	strh	r3, [r4, #12]
 800aa7c:	e7e2      	b.n	800aa44 <__smakebuf_r+0xc>
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	6020      	str	r0, [r4, #0]
 800aa82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa86:	81a3      	strh	r3, [r4, #12]
 800aa88:	9b01      	ldr	r3, [sp, #4]
 800aa8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa8e:	b15b      	cbz	r3, 800aaa8 <__smakebuf_r+0x70>
 800aa90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa94:	4630      	mov	r0, r6
 800aa96:	f000 f81d 	bl	800aad4 <_isatty_r>
 800aa9a:	b128      	cbz	r0, 800aaa8 <__smakebuf_r+0x70>
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	f023 0303 	bic.w	r3, r3, #3
 800aaa2:	f043 0301 	orr.w	r3, r3, #1
 800aaa6:	81a3      	strh	r3, [r4, #12]
 800aaa8:	89a3      	ldrh	r3, [r4, #12]
 800aaaa:	431d      	orrs	r5, r3
 800aaac:	81a5      	strh	r5, [r4, #12]
 800aaae:	e7cf      	b.n	800aa50 <__smakebuf_r+0x18>

0800aab0 <_fstat_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d07      	ldr	r5, [pc, #28]	@ (800aad0 <_fstat_r+0x20>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	4611      	mov	r1, r2
 800aabc:	602b      	str	r3, [r5, #0]
 800aabe:	f7f6 fe57 	bl	8001770 <_fstat>
 800aac2:	1c43      	adds	r3, r0, #1
 800aac4:	d102      	bne.n	800aacc <_fstat_r+0x1c>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	b103      	cbz	r3, 800aacc <_fstat_r+0x1c>
 800aaca:	6023      	str	r3, [r4, #0]
 800aacc:	bd38      	pop	{r3, r4, r5, pc}
 800aace:	bf00      	nop
 800aad0:	20002520 	.word	0x20002520

0800aad4 <_isatty_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4d06      	ldr	r5, [pc, #24]	@ (800aaf0 <_isatty_r+0x1c>)
 800aad8:	2300      	movs	r3, #0
 800aada:	4604      	mov	r4, r0
 800aadc:	4608      	mov	r0, r1
 800aade:	602b      	str	r3, [r5, #0]
 800aae0:	f7f6 fe56 	bl	8001790 <_isatty>
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	d102      	bne.n	800aaee <_isatty_r+0x1a>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	b103      	cbz	r3, 800aaee <_isatty_r+0x1a>
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	20002520 	.word	0x20002520

0800aaf4 <_init>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	bf00      	nop
 800aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafa:	bc08      	pop	{r3}
 800aafc:	469e      	mov	lr, r3
 800aafe:	4770      	bx	lr

0800ab00 <_fini>:
 800ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab02:	bf00      	nop
 800ab04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab06:	bc08      	pop	{r3}
 800ab08:	469e      	mov	lr, r3
 800ab0a:	4770      	bx	lr
